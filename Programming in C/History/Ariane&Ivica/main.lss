
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a24  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000056  00800060  00003a24  00003ab8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000044  008000b6  008000b6  00003b0e  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00003b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000004ea  00000000  00000000  00003b6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000192e  00000000  00000000  00004058  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000059a  00000000  00000000  00005986  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001dcc  00000000  00000000  00005f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000490  00000000  00000000  00007cec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040e  00000000  00000000  0000817c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001024  00000000  00000000  0000858a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  000095ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 84 00 	jmp	0x108	; 0x108 <__ctors_end>
       4:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
       8:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
       c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__vector_3>
      10:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      14:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      18:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      1c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      20:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      24:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      28:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__vector_10>
      2c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      30:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      34:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      38:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      3c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      40:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      44:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      48:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      4c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      50:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      54:	56 18       	sub	r5, r6
      56:	68 18       	sub	r6, r8
      58:	68 18       	sub	r6, r8
      5a:	68 18       	sub	r6, r8
      5c:	68 18       	sub	r6, r8
      5e:	68 18       	sub	r6, r8
      60:	53 18       	sub	r5, r3
      62:	59 18       	sub	r5, r9
      64:	5c 18       	sub	r5, r12
      66:	68 18       	sub	r6, r8
      68:	68 18       	sub	r6, r8
      6a:	65 18       	sub	r6, r5
      6c:	68 18       	sub	r6, r8
      6e:	62 18       	sub	r6, r2
      70:	68 18       	sub	r6, r8
      72:	68 18       	sub	r6, r8
      74:	68 18       	sub	r6, r8
      76:	68 18       	sub	r6, r8
      78:	68 18       	sub	r6, r8
      7a:	68 18       	sub	r6, r8
      7c:	68 18       	sub	r6, r8
      7e:	68 18       	sub	r6, r8
      80:	68 18       	sub	r6, r8
      82:	68 18       	sub	r6, r8
      84:	68 18       	sub	r6, r8
      86:	68 18       	sub	r6, r8
      88:	68 18       	sub	r6, r8
      8a:	68 18       	sub	r6, r8
      8c:	5f 18       	sub	r5, r15
      8e:	68 18       	sub	r6, r8
      90:	50 18       	sub	r5, r0
      92:	68 18       	sub	r6, r8
      94:	02 18       	sub	r0, r2
      96:	05 18       	sub	r0, r5
      98:	08 18       	sub	r0, r8
      9a:	0b 18       	sub	r0, r11
      9c:	0e 18       	sub	r0, r14
      9e:	11 18       	sub	r1, r1
      a0:	14 18       	sub	r1, r4
      a2:	17 18       	sub	r1, r7
      a4:	1a 18       	sub	r1, r10
      a6:	1d 18       	sub	r1, r13
      a8:	20 18       	sub	r2, r0
      aa:	23 18       	sub	r2, r3
      ac:	26 18       	sub	r2, r6
      ae:	29 18       	sub	r2, r9
      b0:	2c 18       	sub	r2, r12
      b2:	2f 18       	sub	r2, r15
      b4:	32 18       	sub	r3, r2
      b6:	35 18       	sub	r3, r5
      b8:	38 18       	sub	r3, r8
      ba:	3b 18       	sub	r3, r11
      bc:	3e 18       	sub	r3, r14
      be:	41 18       	sub	r4, r1
      c0:	44 18       	sub	r4, r4
      c2:	47 18       	sub	r4, r7
      c4:	4a 18       	sub	r4, r10
      c6:	4d 18       	sub	r4, r13

000000c8 <spinning_line>:
      c8:	10 08 04 02 01 00 18 04 03 00 00 03 04 18 00 01     ................
      d8:	02 04 08 10 02 02 04 08 08 08 08 04 02 02           ..............

000000e6 <__c.1764>:
      e6:	45 46 47 65 66 67 00                                EFGefg.

000000ed <__c.1758>:
      ed:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

000000fd <__c.1918>:
      fd:	63 64 69 6e 6f 70 73 75 78 58 00                    cdinopsuxX.

00000108 <__ctors_end>:
     108:	11 24       	eor	r1, r1
     10a:	1f be       	out	0x3f, r1	; 63
     10c:	cf e5       	ldi	r28, 0x5F	; 95
     10e:	d8 e0       	ldi	r29, 0x08	; 8
     110:	de bf       	out	0x3e, r29	; 62
     112:	cd bf       	out	0x3d, r28	; 61

00000114 <__do_copy_data>:
     114:	10 e0       	ldi	r17, 0x00	; 0
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	e4 e2       	ldi	r30, 0x24	; 36
     11c:	fa e3       	ldi	r31, 0x3A	; 58
     11e:	02 c0       	rjmp	.+4      	; 0x124 <.do_copy_data_start>

00000120 <.do_copy_data_loop>:
     120:	05 90       	lpm	r0, Z+
     122:	0d 92       	st	X+, r0

00000124 <.do_copy_data_start>:
     124:	a6 3b       	cpi	r26, 0xB6	; 182
     126:	b1 07       	cpc	r27, r17
     128:	d9 f7       	brne	.-10     	; 0x120 <.do_copy_data_loop>

0000012a <__do_clear_bss>:
     12a:	10 e0       	ldi	r17, 0x00	; 0
     12c:	a6 eb       	ldi	r26, 0xB6	; 182
     12e:	b0 e0       	ldi	r27, 0x00	; 0
     130:	01 c0       	rjmp	.+2      	; 0x134 <.do_clear_bss_start>

00000132 <.do_clear_bss_loop>:
     132:	1d 92       	st	X+, r1

00000134 <.do_clear_bss_start>:
     134:	aa 3f       	cpi	r26, 0xFA	; 250
     136:	b1 07       	cpc	r27, r17
     138:	e1 f7       	brne	.-8      	; 0x132 <.do_clear_bss_loop>
     13a:	0e 94 12 02 	call	0x424	; 0x424 <main>
     13e:	0c 94 10 1d 	jmp	0x3a20	; 0x3a20 <_exit>

00000142 <__bad_interrupt>:
     142:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000146 <delay_ms>:
		launch_effect(current_effect);
    }
}

void delay_ms(int delay)
{
     146:	20 e0       	ldi	r18, 0x00	; 0
     148:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     14a:	40 ea       	ldi	r20, 0xA0	; 160
     14c:	5f e0       	ldi	r21, 0x0F	; 15
     14e:	05 c0       	rjmp	.+10     	; 0x15a <delay_ms+0x14>
     150:	fa 01       	movw	r30, r20
     152:	31 97       	sbiw	r30, 0x01	; 1
     154:	f1 f7       	brne	.-4      	; 0x152 <delay_ms+0xc>
	int i;
	for(i = 0 ; i < delay ; i++) _delay_ms(1);
     156:	2f 5f       	subi	r18, 0xFF	; 255
     158:	3f 4f       	sbci	r19, 0xFF	; 255
     15a:	28 17       	cp	r18, r24
     15c:	39 07       	cpc	r19, r25
     15e:	c4 f3       	brlt	.-16     	; 0x150 <delay_ms+0xa>
}
     160:	08 95       	ret

00000162 <cube_ini>:
{
	
	//set Input and Output for data direction
	//output = 1
	//input = 0
	DDRA = 0xff; //set X_PORT for output 00011111
     162:	8f ef       	ldi	r24, 0xFF	; 255
     164:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0x00; //set BUTTON_PORT for input and ISP
     166:	17 ba       	out	0x17, r1	; 23
	DDRC = 0xff; //set Y_PORT for output 00011111
     168:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xff; //set Z/EN_PORT for output 11111100 and RXD/TXD for serial in (needs to enable with USRB)
     16a:	81 bb       	out	0x11, r24	; 17
	
	X_PORT = 0x00;
     16c:	1b ba       	out	0x1b, r1	; 27
	Y_PORT = 0x00;
     16e:	15 ba       	out	0x15, r1	; 21
	Z_PORT = 0x00;
     170:	12 ba       	out	0x12, r1	; 18
	//set the intern pull ups where needed
	BUTTON_PORT |= (1 << BUTTON);
     172:	c2 9a       	sbi	0x18, 2	; 24
	
	// enable LED drivers
	EN_PORT &= ~(1 << EN);
     174:	97 98       	cbi	0x12, 7	; 18

	// define Mask for output register in ISR
	_X_[0] = 0x01;
     176:	41 e0       	ldi	r20, 0x01	; 1
     178:	40 93 d1 00 	sts	0x00D1, r20
	_X_[1] = 0x02;
     17c:	32 e0       	ldi	r19, 0x02	; 2
     17e:	30 93 d2 00 	sts	0x00D2, r19
	_X_[2] = 0x04;
     182:	24 e0       	ldi	r18, 0x04	; 4
     184:	20 93 d3 00 	sts	0x00D3, r18
	_X_[3] = 0x08;
     188:	98 e0       	ldi	r25, 0x08	; 8
     18a:	90 93 d4 00 	sts	0x00D4, r25
	_X_[4] = 0x10;
     18e:	80 e1       	ldi	r24, 0x10	; 16
     190:	80 93 d5 00 	sts	0x00D5, r24

	_Y_[0] = 0x10;
     194:	80 93 ef 00 	sts	0x00EF, r24
	_Y_[1] = 0x08;
     198:	90 93 f0 00 	sts	0x00F0, r25
	_Y_[2] = 0x04;
     19c:	20 93 f1 00 	sts	0x00F1, r18
	_Y_[3] = 0x02;
     1a0:	30 93 f2 00 	sts	0x00F2, r19
	_Y_[4] = 0x01;
     1a4:	40 93 f3 00 	sts	0x00F3, r20

	_Z_[0] = 0x04;
     1a8:	20 93 f5 00 	sts	0x00F5, r18
	_Z_[1] = 0x08;
     1ac:	90 93 f6 00 	sts	0x00F6, r25
	_Z_[2] = 0x10;
     1b0:	80 93 f7 00 	sts	0x00F7, r24
	_Z_[3] = 0x20;
     1b4:	80 e2       	ldi	r24, 0x20	; 32
     1b6:	80 93 f8 00 	sts	0x00F8, r24
	_Z_[4] = 0x40;
     1ba:	80 e4       	ldi	r24, 0x40	; 64
     1bc:	80 93 f9 00 	sts	0x00F9, r24

	// ##########Initiate timers and external interrupt############

	
	//Frame buffer interrupt Timer Counter Control Register in CTC mode enabled in Timer Interrupt Mask Register
	TCNT0 = 0x00; //initial counter value = 0
     1c0:	12 be       	out	0x32, r1	; 50
	TIMSK |= (1 << OCIE0);  //Enable CTC interrupt
     1c2:	89 b7       	in	r24, 0x39	; 57
     1c4:	82 60       	ori	r24, 0x02	; 2
     1c6:	89 bf       	out	0x39, r24	; 57
	// and the interrupt routine is executed.
	// 16000000/256/10 = 6250 times per second
	// There are 5 rows per layer to update..
	// 16000000/256/10/5/5 = 250 FPS
	
	OCR0 = 10  ; //Interrupt at counter 
     1c8:	8a e0       	ldi	r24, 0x0A	; 10
     1ca:	8c bf       	out	0x3c, r24	; 60
	TCCR0 |= (1 << CS02); //prescaler = 256
     1cc:	83 b7       	in	r24, 0x33	; 51
     1ce:	84 60       	ori	r24, 0x04	; 4
     1d0:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << WGM01); // Clear Timer on Compare Match (CTC) mode
     1d2:	83 b7       	in	r24, 0x33	; 51
     1d4:	88 60       	ori	r24, 0x08	; 8
     1d6:	83 bf       	out	0x33, r24	; 51

	//Ext. interrupt on interrupt pin INT2 (PB2) for effect switching
	GICR |= (1 << INT2); // INT2 enable im General Interrupt Control Register
     1d8:	8b b7       	in	r24, 0x3b	; 59
     1da:	80 62       	ori	r24, 0x20	; 32
     1dc:	8b bf       	out	0x3b, r24	; 59
	MCUCSR &= ~(1 << ISC2); //Execute interrupt with falling edge
     1de:	84 b7       	in	r24, 0x34	; 52
     1e0:	8f 7b       	andi	r24, 0xBF	; 191
     1e2:	84 bf       	out	0x34, r24	; 52

	//Activate global interrupts
	sei();
     1e4:	78 94       	sei
}
     1e6:	08 95       	ret

000001e8 <__vector_10>:

//Interrupt Service Routine for Frame Buffer
ISR(TIMER0_COMP_vect)
{
     1e8:	1f 92       	push	r1
     1ea:	0f 92       	push	r0
     1ec:	0f b6       	in	r0, 0x3f	; 63
     1ee:	0f 92       	push	r0
     1f0:	11 24       	eor	r1, r1
     1f2:	2f 93       	push	r18
     1f4:	8f 93       	push	r24
     1f6:	9f 93       	push	r25
     1f8:	ef 93       	push	r30
     1fa:	ff 93       	push	r31
	

	//Enable the layer
	Z_PORT = _Z_[current_layer];
     1fc:	e0 91 f4 00 	lds	r30, 0x00F4
     200:	f0 e0       	ldi	r31, 0x00	; 0
     202:	eb 50       	subi	r30, 0x0B	; 11
     204:	ff 4f       	sbci	r31, 0xFF	; 255
     206:	80 81       	ld	r24, Z
     208:	82 bb       	out	0x12, r24	; 18
	
		for(current_Yrow = 0 ; current_Yrow < 5 ; current_Yrow++){	
     20a:	10 92 b6 00 	sts	0x00B6, r1
     20e:	1e c0       	rjmp	.+60     	; 0x24c <__vector_10+0x64>
			X_PORT = cube[current_layer][current_Yrow];
     210:	80 91 f4 00 	lds	r24, 0x00F4
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	20 91 b6 00 	lds	r18, 0x00B6
     21a:	fc 01       	movw	r30, r24
     21c:	ee 0f       	add	r30, r30
     21e:	ff 1f       	adc	r31, r31
     220:	ee 0f       	add	r30, r30
     222:	ff 1f       	adc	r31, r31
     224:	e8 0f       	add	r30, r24
     226:	f9 1f       	adc	r31, r25
     228:	e2 0f       	add	r30, r18
     22a:	f1 1d       	adc	r31, r1
     22c:	ea 52       	subi	r30, 0x2A	; 42
     22e:	ff 4f       	sbci	r31, 0xFF	; 255
     230:	80 81       	ld	r24, Z
     232:	8b bb       	out	0x1b, r24	; 27
			Y_PORT = _Y_[current_Yrow];
     234:	e0 91 b6 00 	lds	r30, 0x00B6
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	e1 51       	subi	r30, 0x11	; 17
     23c:	ff 4f       	sbci	r31, 0xFF	; 255
     23e:	80 81       	ld	r24, Z
     240:	85 bb       	out	0x15, r24	; 21
	

	//Enable the layer
	Z_PORT = _Z_[current_layer];
	
		for(current_Yrow = 0 ; current_Yrow < 5 ; current_Yrow++){	
     242:	80 91 b6 00 	lds	r24, 0x00B6
     246:	8f 5f       	subi	r24, 0xFF	; 255
     248:	80 93 b6 00 	sts	0x00B6, r24
     24c:	80 91 b6 00 	lds	r24, 0x00B6
     250:	85 30       	cpi	r24, 0x05	; 5
     252:	f0 f2       	brcs	.-68     	; 0x210 <__vector_10+0x28>
		}
 
	
	//Running through 1 layer wins vs. updating all layers during an interrupt.
	//Because the ISR comes faster to an end and the cube has a faster update cycle to the buffer.
	if(current_layer++ == 4) current_layer = 0;
     254:	80 91 f4 00 	lds	r24, 0x00F4
     258:	8f 5f       	subi	r24, 0xFF	; 255
     25a:	80 93 f4 00 	sts	0x00F4, r24
     25e:	81 50       	subi	r24, 0x01	; 1
     260:	84 30       	cpi	r24, 0x04	; 4
     262:	11 f4       	brne	.+4      	; 0x268 <__vector_10+0x80>
     264:	10 92 f4 00 	sts	0x00F4, r1
}
     268:	ff 91       	pop	r31
     26a:	ef 91       	pop	r30
     26c:	9f 91       	pop	r25
     26e:	8f 91       	pop	r24
     270:	2f 91       	pop	r18
     272:	0f 90       	pop	r0
     274:	0f be       	out	0x3f, r0	; 63
     276:	0f 90       	pop	r0
     278:	1f 90       	pop	r1
     27a:	18 95       	reti

0000027c <__vector_3>:

//Interrupt Service Routine for effect switching
ISR(INT2_vect)
{
     27c:	1f 92       	push	r1
     27e:	0f 92       	push	r0
     280:	0f b6       	in	r0, 0x3f	; 63
     282:	0f 92       	push	r0
     284:	11 24       	eor	r1, r1
     286:	8f 93       	push	r24

	if(current_effect++ == 4) current_effect = 0;
     288:	80 91 d0 00 	lds	r24, 0x00D0
     28c:	8f 5f       	subi	r24, 0xFF	; 255
     28e:	80 93 d0 00 	sts	0x00D0, r24
     292:	81 50       	subi	r24, 0x01	; 1
     294:	84 30       	cpi	r24, 0x04	; 4
     296:	11 f4       	brne	.+4      	; 0x29c <__vector_3+0x20>
     298:	10 92 d0 00 	sts	0x00D0, r1

}
     29c:	8f 91       	pop	r24
     29e:	0f 90       	pop	r0
     2a0:	0f be       	out	0x3f, r0	; 63
     2a2:	0f 90       	pop	r0
     2a4:	1f 90       	pop	r1
     2a6:	18 95       	reti

000002a8 <boot_check>:

void boot_check(int delay)
{
     2a8:	cf 93       	push	r28
     2aa:	df 93       	push	r29
     2ac:	ec 01       	movw	r28, r24
	//earn some blink blink for that ;)
	int i;
	
	for(i = 0 ; i < 1 ; i++)
	{
		fill(0x1f);
     2ae:	8f e1       	ldi	r24, 0x1F	; 31
     2b0:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
     2b4:	20 e0       	ldi	r18, 0x00	; 0
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	40 ea       	ldi	r20, 0xA0	; 160
     2ba:	5f e0       	ldi	r21, 0x0F	; 15
     2bc:	05 c0       	rjmp	.+10     	; 0x2c8 <boot_check+0x20>
     2be:	ca 01       	movw	r24, r20
     2c0:	01 97       	sbiw	r24, 0x01	; 1
     2c2:	f1 f7       	brne	.-4      	; 0x2c0 <boot_check+0x18>
}

void delay_ms(int delay)
{
	int i;
	for(i = 0 ; i < delay ; i++) _delay_ms(1);
     2c4:	2f 5f       	subi	r18, 0xFF	; 255
     2c6:	3f 4f       	sbci	r19, 0xFF	; 255
     2c8:	2c 17       	cp	r18, r28
     2ca:	3d 07       	cpc	r19, r29
     2cc:	c4 f3       	brlt	.-16     	; 0x2be <boot_check+0x16>
	
	for(i = 0 ; i < 1 ; i++)
	{
		fill(0x1f);
		delay_ms(delay);
		fill(0x00);
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
     2d4:	20 e0       	ldi	r18, 0x00	; 0
     2d6:	30 e0       	ldi	r19, 0x00	; 0
     2d8:	40 ea       	ldi	r20, 0xA0	; 160
     2da:	5f e0       	ldi	r21, 0x0F	; 15
     2dc:	05 c0       	rjmp	.+10     	; 0x2e8 <boot_check+0x40>
     2de:	ca 01       	movw	r24, r20
     2e0:	01 97       	sbiw	r24, 0x01	; 1
     2e2:	f1 f7       	brne	.-4      	; 0x2e0 <boot_check+0x38>
}

void delay_ms(int delay)
{
	int i;
	for(i = 0 ; i < delay ; i++) _delay_ms(1);
     2e4:	2f 5f       	subi	r18, 0xFF	; 255
     2e6:	3f 4f       	sbci	r19, 0xFF	; 255
     2e8:	2c 17       	cp	r18, r28
     2ea:	3d 07       	cpc	r19, r29
     2ec:	c4 f3       	brlt	.-16     	; 0x2de <boot_check+0x36>
		delay_ms(delay);
		fill(0x00);
		delay_ms(delay);
	}

}
     2ee:	df 91       	pop	r29
     2f0:	cf 91       	pop	r28
     2f2:	08 95       	ret

000002f4 <launch_effect>:

void launch_effect(unsigned char choice)
{
     2f4:	ef 92       	push	r14
     2f6:	ff 92       	push	r15
     2f8:	0f 93       	push	r16
     2fa:	1f 93       	push	r17
     2fc:	df 93       	push	r29
     2fe:	cf 93       	push	r28
     300:	cd b7       	in	r28, 0x3d	; 61
     302:	de b7       	in	r29, 0x3e	; 62
     304:	c5 55       	subi	r28, 0x55	; 85
     306:	d0 40       	sbci	r29, 0x00	; 0
     308:	0f b6       	in	r0, 0x3f	; 63
     30a:	f8 94       	cli
     30c:	de bf       	out	0x3e, r29	; 62
     30e:	0f be       	out	0x3f, r0	; 63
     310:	cd bf       	out	0x3d, r28	; 61
char eestec[30]= "EESTEC WHAT'S YOUR PROFESSION?";
     312:	de 01       	movw	r26, r28
     314:	55 96       	adiw	r26, 0x15	; 21
     316:	e0 e6       	ldi	r30, 0x60	; 96
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	9e e1       	ldi	r25, 0x1E	; 30
     31c:	01 90       	ld	r0, Z+
     31e:	0d 92       	st	X+, r0
     320:	91 50       	subi	r25, 0x01	; 1
     322:	e1 f7       	brne	.-8      	; 0x31c <launch_effect+0x28>
char hampuri[20]= "LC HAMBURG ROCKS =)";
     324:	de 01       	movw	r26, r28
     326:	11 96       	adiw	r26, 0x01	; 1
     328:	ef e7       	ldi	r30, 0x7F	; 127
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	94 e1       	ldi	r25, 0x14	; 20
     32e:	01 90       	ld	r0, Z+
     330:	0d 92       	st	X+, r0
     332:	91 50       	subi	r25, 0x01	; 1
     334:	e1 f7       	brne	.-8      	; 0x32e <launch_effect+0x3a>
char test[35]= "ABCDEFGHIJKLMNOPQRSTUVWXYZ.,=()'";
     336:	de 01       	movw	r26, r28
     338:	d3 96       	adiw	r26, 0x33	; 51
     33a:	e3 e9       	ldi	r30, 0x93	; 147
     33c:	f0 e0       	ldi	r31, 0x00	; 0
     33e:	91 e2       	ldi	r25, 0x21	; 33
     340:	01 90       	ld	r0, Z+
     342:	0d 92       	st	X+, r0
     344:	91 50       	subi	r25, 0x01	; 1
     346:	e1 f7       	brne	.-8      	; 0x340 <launch_effect+0x4c>
     348:	fe 01       	movw	r30, r28
     34a:	ec 5a       	subi	r30, 0xAC	; 172
     34c:	ff 4f       	sbci	r31, 0xFF	; 255
     34e:	11 82       	std	Z+1, r1	; 0x01
     350:	10 82       	st	Z, r1
char* e = eestec;
char* h = hampuri;
char* t = test;

	switch(choice)
     352:	82 30       	cpi	r24, 0x02	; 2
     354:	09 f4       	brne	.+2      	; 0x358 <launch_effect+0x64>
     356:	44 c0       	rjmp	.+136    	; 0x3e0 <launch_effect+0xec>
     358:	83 30       	cpi	r24, 0x03	; 3
     35a:	30 f4       	brcc	.+12     	; 0x368 <launch_effect+0x74>
     35c:	88 23       	and	r24, r24
     35e:	59 f0       	breq	.+22     	; 0x376 <launch_effect+0x82>
     360:	81 30       	cpi	r24, 0x01	; 1
     362:	09 f0       	breq	.+2      	; 0x366 <launch_effect+0x72>
     364:	51 c0       	rjmp	.+162    	; 0x408 <launch_effect+0x114>
     366:	33 c0       	rjmp	.+102    	; 0x3ce <launch_effect+0xda>
     368:	83 30       	cpi	r24, 0x03	; 3
     36a:	09 f4       	brne	.+2      	; 0x36e <launch_effect+0x7a>
     36c:	42 c0       	rjmp	.+132    	; 0x3f2 <launch_effect+0xfe>
     36e:	84 30       	cpi	r24, 0x04	; 4
     370:	09 f0       	breq	.+2      	; 0x374 <launch_effect+0x80>
     372:	4a c0       	rjmp	.+148    	; 0x408 <launch_effect+0x114>
     374:	43 c0       	rjmp	.+134    	; 0x3fc <launch_effect+0x108>
	{
		case 0:
		//eestec 
		writer(eestec,30);
     376:	ce 01       	movw	r24, r28
     378:	45 96       	adiw	r24, 0x15	; 21
     37a:	6e e1       	ldi	r22, 0x1E	; 30
     37c:	70 e0       	ldi	r23, 0x00	; 0
     37e:	0e 94 d6 17 	call	0x2fac	; 0x2fac <writer>
     382:	00 e0       	ldi	r16, 0x00	; 0
     384:	10 e0       	ldi	r17, 0x00	; 0
     386:	80 ea       	ldi	r24, 0xA0	; 160
     388:	e8 2e       	mov	r14, r24
     38a:	8f e0       	ldi	r24, 0x0F	; 15
     38c:	f8 2e       	mov	r15, r24
		for(int i = 0 ; i < 3 ; i++)
		{
			fill(0x1f);
     38e:	8f e1       	ldi	r24, 0x1F	; 31
     390:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
     394:	80 e0       	ldi	r24, 0x00	; 0
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	f7 01       	movw	r30, r14
     39a:	31 97       	sbiw	r30, 0x01	; 1
     39c:	f1 f7       	brne	.-4      	; 0x39a <launch_effect+0xa6>
}

void delay_ms(int delay)
{
	int i;
	for(i = 0 ; i < delay ; i++) _delay_ms(1);
     39e:	01 96       	adiw	r24, 0x01	; 1
     3a0:	21 e0       	ldi	r18, 0x01	; 1
     3a2:	84 3f       	cpi	r24, 0xF4	; 244
     3a4:	92 07       	cpc	r25, r18
     3a6:	c1 f7       	brne	.-16     	; 0x398 <launch_effect+0xa4>
		writer(eestec,30);
		for(int i = 0 ; i < 3 ; i++)
		{
			fill(0x1f);
			delay_ms(500);
			fill(0x00);
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	f7 01       	movw	r30, r14
     3b4:	31 97       	sbiw	r30, 0x01	; 1
     3b6:	f1 f7       	brne	.-4      	; 0x3b4 <launch_effect+0xc0>
}

void delay_ms(int delay)
{
	int i;
	for(i = 0 ; i < delay ; i++) _delay_ms(1);
     3b8:	01 96       	adiw	r24, 0x01	; 1
     3ba:	21 e0       	ldi	r18, 0x01	; 1
     3bc:	84 3f       	cpi	r24, 0xF4	; 244
     3be:	92 07       	cpc	r25, r18
     3c0:	c1 f7       	brne	.-16     	; 0x3b2 <launch_effect+0xbe>
	switch(choice)
	{
		case 0:
		//eestec 
		writer(eestec,30);
		for(int i = 0 ; i < 3 ; i++)
     3c2:	0f 5f       	subi	r16, 0xFF	; 255
     3c4:	1f 4f       	sbci	r17, 0xFF	; 255
     3c6:	03 30       	cpi	r16, 0x03	; 3
     3c8:	11 05       	cpc	r17, r1
     3ca:	09 f7       	brne	.-62     	; 0x38e <launch_effect+0x9a>
     3cc:	1d c0       	rjmp	.+58     	; 0x408 <launch_effect+0x114>
		//effect_EESTEC();
		break;
		
		case 1:
		
		effect_spiral(1,10,100);
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	6a e0       	ldi	r22, 0x0A	; 10
     3d4:	70 e0       	ldi	r23, 0x00	; 0
     3d6:	44 e6       	ldi	r20, 0x64	; 100
     3d8:	50 e0       	ldi	r21, 0x00	; 0
     3da:	0e 94 27 06 	call	0xc4e	; 0xc4e <effect_spiral>
     3de:	14 c0       	rjmp	.+40     	; 0x408 <launch_effect+0x114>

		break;
		
		case 2:
		
		effect_spinning_plane(1,10,100);
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	6a e0       	ldi	r22, 0x0A	; 10
     3e6:	70 e0       	ldi	r23, 0x00	; 0
     3e8:	44 e6       	ldi	r20, 0x64	; 100
     3ea:	50 e0       	ldi	r21, 0x00	; 0
     3ec:	0e 94 d2 05 	call	0xba4	; 0xba4 <effect_spinning_plane>
     3f0:	0b c0       	rjmp	.+22     	; 0x408 <launch_effect+0x114>

		break;
		
		case 3:
		//hampuri 
		writer(hampuri,20);
     3f2:	ce 01       	movw	r24, r28
     3f4:	01 96       	adiw	r24, 0x01	; 1
     3f6:	64 e1       	ldi	r22, 0x14	; 20
     3f8:	70 e0       	ldi	r23, 0x00	; 0
     3fa:	04 c0       	rjmp	.+8      	; 0x404 <launch_effect+0x110>
		break;
		
		case 4:
		//test 
		writer(test,35);
     3fc:	ce 01       	movw	r24, r28
     3fe:	c3 96       	adiw	r24, 0x33	; 51
     400:	63 e2       	ldi	r22, 0x23	; 35
     402:	70 e0       	ldi	r23, 0x00	; 0
     404:	0e 94 d6 17 	call	0x2fac	; 0x2fac <writer>
		break;
		
		// etc.
	}
}
     408:	cb 5a       	subi	r28, 0xAB	; 171
     40a:	df 4f       	sbci	r29, 0xFF	; 255
     40c:	0f b6       	in	r0, 0x3f	; 63
     40e:	f8 94       	cli
     410:	de bf       	out	0x3e, r29	; 62
     412:	0f be       	out	0x3f, r0	; 63
     414:	cd bf       	out	0x3d, r28	; 61
     416:	cf 91       	pop	r28
     418:	df 91       	pop	r29
     41a:	1f 91       	pop	r17
     41c:	0f 91       	pop	r16
     41e:	ff 90       	pop	r15
     420:	ef 90       	pop	r14
     422:	08 95       	ret

00000424 <main>:

int main(void)
{

	//Set the layer and Y row to start drawing at
	current_layer = 0x00;
     424:	10 92 f4 00 	sts	0x00F4, r1
	current_Yrow = 0x00;
     428:	10 92 b6 00 	sts	0x00B6, r1
	//Set effect to start with
	current_effect = 0;
     42c:	10 92 d0 00 	sts	0x00D0, r1
 	
	cube_ini();
     430:	0e 94 b1 00 	call	0x162	; 0x162 <cube_ini>

	boot_check(500);
     434:	84 ef       	ldi	r24, 0xF4	; 244
     436:	91 e0       	ldi	r25, 0x01	; 1
     438:	0e 94 54 01 	call	0x2a8	; 0x2a8 <boot_check>
	
	while(1)
    {
		launch_effect(current_effect);
     43c:	80 91 d0 00 	lds	r24, 0x00D0
     440:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <launch_effect>
     444:	fb cf       	rjmp	.-10     	; 0x43c <main+0x18>

00000446 <setLED>:
// Voxel comes from volumetric and pixel. It describes a data point of 3D grid graphic
// Voxel == 1 LED in the 3D cube grid
// Set a voxel (LED) in the cube buffer

void setLED(int x, int y, int z)
{ 
     446:	dc 01       	movw	r26, r24
}

// This function validates that we are drawing inside the cube.
unsigned char inrange(int x, int y, int z)
{
	if (x >= 0 && x < 5 && y >= 0 && y < 5 && z >= 0 && z < 5){
     448:	85 30       	cpi	r24, 0x05	; 5
     44a:	91 05       	cpc	r25, r1
     44c:	f8 f4       	brcc	.+62     	; 0x48c <setLED+0x46>
     44e:	77 fd       	sbrc	r23, 7
     450:	1d c0       	rjmp	.+58     	; 0x48c <setLED+0x46>
     452:	65 30       	cpi	r22, 0x05	; 5
     454:	71 05       	cpc	r23, r1
     456:	d4 f4       	brge	.+52     	; 0x48c <setLED+0x46>
     458:	57 fd       	sbrc	r21, 7
     45a:	18 c0       	rjmp	.+48     	; 0x48c <setLED+0x46>
     45c:	45 30       	cpi	r20, 0x05	; 5
     45e:	51 05       	cpc	r21, r1
     460:	ac f4       	brge	.+42     	; 0x48c <setLED+0x46>
// Voxel == 1 LED in the 3D cube grid
// Set a voxel (LED) in the cube buffer

void setLED(int x, int y, int z)
{ 
	if (inrange(x, y, z)) cube[z][y] |= (1 << x);
     462:	fa 01       	movw	r30, r20
     464:	ee 0f       	add	r30, r30
     466:	ff 1f       	adc	r31, r31
     468:	ee 0f       	add	r30, r30
     46a:	ff 1f       	adc	r31, r31
     46c:	e4 0f       	add	r30, r20
     46e:	f5 1f       	adc	r31, r21
     470:	e6 0f       	add	r30, r22
     472:	f7 1f       	adc	r31, r23
     474:	ea 52       	subi	r30, 0x2A	; 42
     476:	ff 4f       	sbci	r31, 0xFF	; 255
     478:	20 81       	ld	r18, Z
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	02 c0       	rjmp	.+4      	; 0x484 <setLED+0x3e>
     480:	88 0f       	add	r24, r24
     482:	99 1f       	adc	r25, r25
     484:	aa 95       	dec	r26
     486:	e2 f7       	brpl	.-8      	; 0x480 <setLED+0x3a>
     488:	28 2b       	or	r18, r24
     48a:	20 83       	st	Z, r18
     48c:	08 95       	ret

0000048e <clrLED>:
}

// Clear a voxel (LED) in the cube buffer
void clrLED(int x, int y, int z)
{
     48e:	dc 01       	movw	r26, r24
}

// This function validates that we are drawing inside the cube.
unsigned char inrange(int x, int y, int z)
{
	if (x >= 0 && x < 5 && y >= 0 && y < 5 && z >= 0 && z < 5){
     490:	85 30       	cpi	r24, 0x05	; 5
     492:	91 05       	cpc	r25, r1
     494:	00 f5       	brcc	.+64     	; 0x4d6 <clrLED+0x48>
     496:	77 fd       	sbrc	r23, 7
     498:	1e c0       	rjmp	.+60     	; 0x4d6 <clrLED+0x48>
     49a:	65 30       	cpi	r22, 0x05	; 5
     49c:	71 05       	cpc	r23, r1
     49e:	dc f4       	brge	.+54     	; 0x4d6 <clrLED+0x48>
     4a0:	57 fd       	sbrc	r21, 7
     4a2:	19 c0       	rjmp	.+50     	; 0x4d6 <clrLED+0x48>
     4a4:	45 30       	cpi	r20, 0x05	; 5
     4a6:	51 05       	cpc	r21, r1
     4a8:	b4 f4       	brge	.+44     	; 0x4d6 <clrLED+0x48>
}

// Clear a voxel (LED) in the cube buffer
void clrLED(int x, int y, int z)
{
	if (inrange(x, y, z)) cube[z][y] &= ~(1 << x);
     4aa:	fa 01       	movw	r30, r20
     4ac:	ee 0f       	add	r30, r30
     4ae:	ff 1f       	adc	r31, r31
     4b0:	ee 0f       	add	r30, r30
     4b2:	ff 1f       	adc	r31, r31
     4b4:	e4 0f       	add	r30, r20
     4b6:	f5 1f       	adc	r31, r21
     4b8:	e6 0f       	add	r30, r22
     4ba:	f7 1f       	adc	r31, r23
     4bc:	ea 52       	subi	r30, 0x2A	; 42
     4be:	ff 4f       	sbci	r31, 0xFF	; 255
     4c0:	20 81       	ld	r18, Z
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	02 c0       	rjmp	.+4      	; 0x4cc <clrLED+0x3e>
     4c8:	88 0f       	add	r24, r24
     4ca:	99 1f       	adc	r25, r25
     4cc:	aa 95       	dec	r26
     4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <clrLED+0x3a>
     4d0:	80 95       	com	r24
     4d2:	82 23       	and	r24, r18
     4d4:	80 83       	st	Z, r24
     4d6:	08 95       	ret

000004d8 <getLED>:
}

// Get the current status of a LED
unsigned char getLED(int x, int y, int z)
{
     4d8:	9c 01       	movw	r18, r24
}

// This function validates that we are drawing inside the cube.
unsigned char inrange(int x, int y, int z)
{
	if (x >= 0 && x < 5 && y >= 0 && y < 5 && z >= 0 && z < 5){
     4da:	85 30       	cpi	r24, 0x05	; 5
     4dc:	91 05       	cpc	r25, r1
     4de:	f0 f4       	brcc	.+60     	; 0x51c <getLED+0x44>
     4e0:	77 fd       	sbrc	r23, 7
     4e2:	1c c0       	rjmp	.+56     	; 0x51c <getLED+0x44>
     4e4:	65 30       	cpi	r22, 0x05	; 5
     4e6:	71 05       	cpc	r23, r1
     4e8:	cc f4       	brge	.+50     	; 0x51c <getLED+0x44>
     4ea:	57 fd       	sbrc	r21, 7
     4ec:	17 c0       	rjmp	.+46     	; 0x51c <getLED+0x44>
     4ee:	45 30       	cpi	r20, 0x05	; 5
     4f0:	51 05       	cpc	r21, r1
     4f2:	a4 f4       	brge	.+40     	; 0x51c <getLED+0x44>

// Get the current status of a LED
unsigned char getLED(int x, int y, int z)
{
	if (inrange(x, y, z)){
		if (cube[z][y] & (1 << x)){
     4f4:	fa 01       	movw	r30, r20
     4f6:	ee 0f       	add	r30, r30
     4f8:	ff 1f       	adc	r31, r31
     4fa:	ee 0f       	add	r30, r30
     4fc:	ff 1f       	adc	r31, r31
     4fe:	e4 0f       	add	r30, r20
     500:	f5 1f       	adc	r31, r21
     502:	e6 0f       	add	r30, r22
     504:	f7 1f       	adc	r31, r23
     506:	ea 52       	subi	r30, 0x2A	; 42
     508:	ff 4f       	sbci	r31, 0xFF	; 255
     50a:	80 81       	ld	r24, Z
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	02 c0       	rjmp	.+4      	; 0x514 <getLED+0x3c>
     510:	95 95       	asr	r25
     512:	87 95       	ror	r24
     514:	2a 95       	dec	r18
     516:	e2 f7       	brpl	.-8      	; 0x510 <getLED+0x38>
     518:	81 70       	andi	r24, 0x01	; 1
     51a:	08 95       	ret
     51c:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	else{
		return 0x00;
	}
}
     51e:	08 95       	ret

00000520 <inrange>:

// This function validates that we are drawing inside the cube.
unsigned char inrange(int x, int y, int z)
{
	if (x >= 0 && x < 5 && y >= 0 && y < 5 && z >= 0 && z < 5){
     520:	05 97       	sbiw	r24, 0x05	; 5
     522:	78 f4       	brcc	.+30     	; 0x542 <inrange+0x22>
     524:	77 fd       	sbrc	r23, 7
     526:	0d c0       	rjmp	.+26     	; 0x542 <inrange+0x22>
     528:	65 30       	cpi	r22, 0x05	; 5
     52a:	71 05       	cpc	r23, r1
     52c:	54 f4       	brge	.+20     	; 0x542 <inrange+0x22>
     52e:	57 fd       	sbrc	r21, 7
     530:	08 c0       	rjmp	.+16     	; 0x542 <inrange+0x22>
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	45 30       	cpi	r20, 0x05	; 5
     536:	51 05       	cpc	r21, r1
     538:	0c f0       	brlt	.+2      	; 0x53c <inrange+0x1c>
     53a:	91 e0       	ldi	r25, 0x01	; 1
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	98 27       	eor	r25, r24
     540:	01 c0       	rjmp	.+2      	; 0x544 <inrange+0x24>
     542:	90 e0       	ldi	r25, 0x00	; 0
	} 
	else{
		// One of the coordinates was outside the cube.
		return 0x00;
	}
}
     544:	89 2f       	mov	r24, r25
     546:	08 95       	ret

00000548 <alterLED>:

// Alter the state of  a voxel in the cube buffer
// This function was made in order to make set and clr versions
// of other functions without writing two almost identical functions
void alterLED(int x, int y, int z, int state)
{
     548:	dc 01       	movw	r26, r24
	if (state == 1){
     54a:	21 30       	cpi	r18, 0x01	; 1
     54c:	31 05       	cpc	r19, r1
     54e:	09 f5       	brne	.+66     	; 0x592 <alterLED+0x4a>
}

// This function validates that we are drawing inside the cube.
unsigned char inrange(int x, int y, int z)
{
	if (x >= 0 && x < 5 && y >= 0 && y < 5 && z >= 0 && z < 5){
     550:	85 30       	cpi	r24, 0x05	; 5
     552:	91 05       	cpc	r25, r1
     554:	00 f5       	brcc	.+64     	; 0x596 <alterLED+0x4e>
     556:	77 fd       	sbrc	r23, 7
     558:	1e c0       	rjmp	.+60     	; 0x596 <alterLED+0x4e>
     55a:	65 30       	cpi	r22, 0x05	; 5
     55c:	71 05       	cpc	r23, r1
     55e:	dc f4       	brge	.+54     	; 0x596 <alterLED+0x4e>
     560:	57 fd       	sbrc	r21, 7
     562:	19 c0       	rjmp	.+50     	; 0x596 <alterLED+0x4e>
     564:	45 30       	cpi	r20, 0x05	; 5
     566:	51 05       	cpc	r21, r1
     568:	b4 f4       	brge	.+44     	; 0x596 <alterLED+0x4e>
// Voxel == 1 LED in the 3D cube grid
// Set a voxel (LED) in the cube buffer

void setLED(int x, int y, int z)
{ 
	if (inrange(x, y, z)) cube[z][y] |= (1 << x);
     56a:	fa 01       	movw	r30, r20
     56c:	ee 0f       	add	r30, r30
     56e:	ff 1f       	adc	r31, r31
     570:	ee 0f       	add	r30, r30
     572:	ff 1f       	adc	r31, r31
     574:	e4 0f       	add	r30, r20
     576:	f5 1f       	adc	r31, r21
     578:	e6 0f       	add	r30, r22
     57a:	f7 1f       	adc	r31, r23
     57c:	ea 52       	subi	r30, 0x2A	; 42
     57e:	ff 4f       	sbci	r31, 0xFF	; 255
     580:	80 81       	ld	r24, Z
     582:	02 c0       	rjmp	.+4      	; 0x588 <alterLED+0x40>
     584:	22 0f       	add	r18, r18
     586:	33 1f       	adc	r19, r19
     588:	aa 95       	dec	r26
     58a:	e2 f7       	brpl	.-8      	; 0x584 <alterLED+0x3c>
     58c:	82 2b       	or	r24, r18
     58e:	80 83       	st	Z, r24
     590:	08 95       	ret
{
	if (state == 1){
		setLED(x,y,z);
	} 
	else{
		clrLED(x,y,z);
     592:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
     596:	08 95       	ret

00000598 <flpLED>:
}

// Flip the state of a LED.
// If the voxel in the buffer is 1, its turned into a 0, and vice versa.
void flpLED(int x, int y, int z)
{
     598:	dc 01       	movw	r26, r24
}

// This function validates that we are drawing inside the cube.
unsigned char inrange(int x, int y, int z)
{
	if (x >= 0 && x < 5 && y >= 0 && y < 5 && z >= 0 && z < 5){
     59a:	85 30       	cpi	r24, 0x05	; 5
     59c:	91 05       	cpc	r25, r1
     59e:	f8 f4       	brcc	.+62     	; 0x5de <flpLED+0x46>
     5a0:	77 fd       	sbrc	r23, 7
     5a2:	1d c0       	rjmp	.+58     	; 0x5de <flpLED+0x46>
     5a4:	65 30       	cpi	r22, 0x05	; 5
     5a6:	71 05       	cpc	r23, r1
     5a8:	d4 f4       	brge	.+52     	; 0x5de <flpLED+0x46>
     5aa:	57 fd       	sbrc	r21, 7
     5ac:	18 c0       	rjmp	.+48     	; 0x5de <flpLED+0x46>
     5ae:	45 30       	cpi	r20, 0x05	; 5
     5b0:	51 05       	cpc	r21, r1
     5b2:	ac f4       	brge	.+42     	; 0x5de <flpLED+0x46>

// Flip the state of a LED.
// If the voxel in the buffer is 1, its turned into a 0, and vice versa.
void flpLED(int x, int y, int z)
{
	if (inrange(x, y, z)) cube[z][y] ^= (1 << x);
     5b4:	fa 01       	movw	r30, r20
     5b6:	ee 0f       	add	r30, r30
     5b8:	ff 1f       	adc	r31, r31
     5ba:	ee 0f       	add	r30, r30
     5bc:	ff 1f       	adc	r31, r31
     5be:	e4 0f       	add	r30, r20
     5c0:	f5 1f       	adc	r31, r21
     5c2:	e6 0f       	add	r30, r22
     5c4:	f7 1f       	adc	r31, r23
     5c6:	ea 52       	subi	r30, 0x2A	; 42
     5c8:	ff 4f       	sbci	r31, 0xFF	; 255
     5ca:	20 81       	ld	r18, Z
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <flpLED+0x3e>
     5d2:	88 0f       	add	r24, r24
     5d4:	99 1f       	adc	r25, r25
     5d6:	aa 95       	dec	r26
     5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <flpLED+0x3a>
     5da:	28 27       	eor	r18, r24
     5dc:	20 83       	st	Z, r18
     5de:	08 95       	ret

000005e0 <setplane_z>:
// i.e. draws a horizonal plane on a given level (z)
void setplane_z (int z)
{
	int y;
	// Loop the 5 rows on the given level and write 1 to the bits.
	for(y = 0 ; y < 5 ; y++) cube[z][y] = 0x1f;
     5e0:	fc 01       	movw	r30, r24
     5e2:	ee 0f       	add	r30, r30
     5e4:	ff 1f       	adc	r31, r31
     5e6:	ee 0f       	add	r30, r30
     5e8:	ff 1f       	adc	r31, r31
     5ea:	e8 0f       	add	r30, r24
     5ec:	f9 1f       	adc	r31, r25
     5ee:	ea 52       	subi	r30, 0x2A	; 42
     5f0:	ff 4f       	sbci	r31, 0xFF	; 255
     5f2:	8f e1       	ldi	r24, 0x1F	; 31
     5f4:	80 83       	st	Z, r24
     5f6:	81 83       	std	Z+1, r24	; 0x01
     5f8:	82 83       	std	Z+2, r24	; 0x02
     5fa:	83 83       	std	Z+3, r24	; 0x03
     5fc:	84 83       	std	Z+4, r24	; 0x04
}
     5fe:	08 95       	ret

00000600 <clrplane_z>:

// Clears all the leds on X and Y for a given Z
void clrplane_z (int z)
{
	int y;
	for(y = 0 ; y < 5 ; y++) cube[z][y] = 0x00;
     600:	fc 01       	movw	r30, r24
     602:	ee 0f       	add	r30, r30
     604:	ff 1f       	adc	r31, r31
     606:	ee 0f       	add	r30, r30
     608:	ff 1f       	adc	r31, r31
     60a:	e8 0f       	add	r30, r24
     60c:	f9 1f       	adc	r31, r25
     60e:	ea 52       	subi	r30, 0x2A	; 42
     610:	ff 4f       	sbci	r31, 0xFF	; 255
     612:	10 82       	st	Z, r1
     614:	11 82       	std	Z+1, r1	; 0x01
     616:	12 82       	std	Z+2, r1	; 0x02
     618:	13 82       	std	Z+3, r1	; 0x03
     61a:	14 82       	std	Z+4, r1	; 0x04
}
     61c:	08 95       	ret

0000061e <setplane_x>:
	// the actual bits in each row of each layer
	// We loop them all, and set the apropriate bit.
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
			// Set a bit, and shift it inwards to the right X
			cube[z][y] |= (1 << x);
     61e:	21 e0       	ldi	r18, 0x01	; 1
     620:	30 e0       	ldi	r19, 0x00	; 0
     622:	02 c0       	rjmp	.+4      	; 0x628 <setplane_x+0xa>
     624:	22 0f       	add	r18, r18
     626:	33 1f       	adc	r19, r19
     628:	8a 95       	dec	r24
     62a:	e2 f7       	brpl	.-8      	; 0x624 <setplane_x+0x6>
     62c:	60 e0       	ldi	r22, 0x00	; 0
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	12 c0       	rjmp	.+36     	; 0x656 <setplane_x+0x38>
     632:	fd 01       	movw	r30, r26
     634:	e4 0f       	add	r30, r20
     636:	f5 1f       	adc	r31, r21
     638:	ea 52       	subi	r30, 0x2A	; 42
     63a:	ff 4f       	sbci	r31, 0xFF	; 255
     63c:	80 81       	ld	r24, Z
     63e:	82 2b       	or	r24, r18
     640:	80 83       	st	Z, r24
	int y;
	// Since coordinates along the X axis are
	// the actual bits in each row of each layer
	// We loop them all, and set the apropriate bit.
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
     642:	4f 5f       	subi	r20, 0xFF	; 255
     644:	5f 4f       	sbci	r21, 0xFF	; 255
     646:	45 30       	cpi	r20, 0x05	; 5
     648:	51 05       	cpc	r21, r1
     64a:	99 f7       	brne	.-26     	; 0x632 <setplane_x+0x14>
	int z;
	int y;
	// Since coordinates along the X axis are
	// the actual bits in each row of each layer
	// We loop them all, and set the apropriate bit.
	for(z = 0 ; z < 5 ; z++){
     64c:	6f 5f       	subi	r22, 0xFF	; 255
     64e:	7f 4f       	sbci	r23, 0xFF	; 255
     650:	65 30       	cpi	r22, 0x05	; 5
     652:	71 05       	cpc	r23, r1
     654:	51 f0       	breq	.+20     	; 0x66a <setplane_x+0x4c>
     656:	40 e0       	ldi	r20, 0x00	; 0
     658:	50 e0       	ldi	r21, 0x00	; 0
		for(y = 0 ; y < 5 ; y++){
			// Set a bit, and shift it inwards to the right X
			cube[z][y] |= (1 << x);
     65a:	db 01       	movw	r26, r22
     65c:	aa 0f       	add	r26, r26
     65e:	bb 1f       	adc	r27, r27
     660:	aa 0f       	add	r26, r26
     662:	bb 1f       	adc	r27, r27
     664:	a6 0f       	add	r26, r22
     666:	b7 1f       	adc	r27, r23
     668:	e4 cf       	rjmp	.-56     	; 0x632 <setplane_x+0x14>
     66a:	08 95       	ret

0000066c <clrplane_x>:
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
			cube[z][y] &= ~(1 << x);
     66c:	21 e0       	ldi	r18, 0x01	; 1
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	02 c0       	rjmp	.+4      	; 0x676 <clrplane_x+0xa>
     672:	22 0f       	add	r18, r18
     674:	33 1f       	adc	r19, r19
     676:	8a 95       	dec	r24
     678:	e2 f7       	brpl	.-8      	; 0x672 <clrplane_x+0x6>
     67a:	20 95       	com	r18
     67c:	60 e0       	ldi	r22, 0x00	; 0
     67e:	70 e0       	ldi	r23, 0x00	; 0
     680:	12 c0       	rjmp	.+36     	; 0x6a6 <clrplane_x+0x3a>
     682:	fd 01       	movw	r30, r26
     684:	e4 0f       	add	r30, r20
     686:	f5 1f       	adc	r31, r21
     688:	ea 52       	subi	r30, 0x2A	; 42
     68a:	ff 4f       	sbci	r31, 0xFF	; 255
     68c:	80 81       	ld	r24, Z
     68e:	82 23       	and	r24, r18
     690:	80 83       	st	Z, r24
void clrplane_x (int x)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
     692:	4f 5f       	subi	r20, 0xFF	; 255
     694:	5f 4f       	sbci	r21, 0xFF	; 255
     696:	45 30       	cpi	r20, 0x05	; 5
     698:	51 05       	cpc	r21, r1
     69a:	99 f7       	brne	.-26     	; 0x682 <clrplane_x+0x16>
// Clear all the leds on Y and Z for a given X
void clrplane_x (int x)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
     69c:	6f 5f       	subi	r22, 0xFF	; 255
     69e:	7f 4f       	sbci	r23, 0xFF	; 255
     6a0:	65 30       	cpi	r22, 0x05	; 5
     6a2:	71 05       	cpc	r23, r1
     6a4:	51 f0       	breq	.+20     	; 0x6ba <clrplane_x+0x4e>
     6a6:	40 e0       	ldi	r20, 0x00	; 0
     6a8:	50 e0       	ldi	r21, 0x00	; 0
		for(y = 0 ; y < 5 ; y++){
			cube[z][y] &= ~(1 << x);
     6aa:	db 01       	movw	r26, r22
     6ac:	aa 0f       	add	r26, r26
     6ae:	bb 1f       	adc	r27, r27
     6b0:	aa 0f       	add	r26, r26
     6b2:	bb 1f       	adc	r27, r27
     6b4:	a6 0f       	add	r26, r22
     6b6:	b7 1f       	adc	r27, r23
     6b8:	e4 cf       	rjmp	.-56     	; 0x682 <clrplane_x+0x16>
     6ba:	08 95       	ret

000006bc <setplane_y>:

// Sets all the leds on X and Z for a given Y
void setplane_y (int y)
{
	int z;
	for (z = 0 ; z < 5 ; z++) cube[z][y] = 0x1f; 
     6bc:	fc 01       	movw	r30, r24
     6be:	ea 52       	subi	r30, 0x2A	; 42
     6c0:	ff 4f       	sbci	r31, 0xFF	; 255
     6c2:	8f e1       	ldi	r24, 0x1F	; 31
     6c4:	80 83       	st	Z, r24
     6c6:	85 83       	std	Z+5, r24	; 0x05
     6c8:	82 87       	std	Z+10, r24	; 0x0a
     6ca:	87 87       	std	Z+15, r24	; 0x0f
     6cc:	84 8b       	std	Z+20, r24	; 0x14
}
     6ce:	08 95       	ret

000006d0 <clrplane_y>:

// Sets all the leds on X and Z for a given Y
void clrplane_y (int y)
{
	int z;
	for(z = 0 ; z < 5 ; z++) cube[z][y] = 0x00; 
     6d0:	fc 01       	movw	r30, r24
     6d2:	ea 52       	subi	r30, 0x2A	; 42
     6d4:	ff 4f       	sbci	r31, 0xFF	; 255
     6d6:	10 82       	st	Z, r1
     6d8:	15 82       	std	Z+5, r1	; 0x05
     6da:	12 86       	std	Z+10, r1	; 0x0a
     6dc:	17 86       	std	Z+15, r1	; 0x0f
     6de:	14 8a       	std	Z+20, r1	; 0x14
}
     6e0:	08 95       	ret

000006e2 <setplane>:

// Set a plane using the functions above
void setplane(unsigned char plane, int i, int state)
{
	if (plane == 'x'){
     6e2:	88 37       	cpi	r24, 0x78	; 120
     6e4:	09 f0       	breq	.+2      	; 0x6e8 <setplane+0x6>
     6e6:	53 c0       	rjmp	.+166    	; 0x78e <setplane+0xac>
		if (state > 0){
     6e8:	14 16       	cp	r1, r20
     6ea:	15 06       	cpc	r1, r21
     6ec:	64 f0       	brlt	.+24     	; 0x706 <setplane+0x24>
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
			cube[z][y] &= ~(1 << x);
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <setplane+0x16>
     6f4:	88 0f       	add	r24, r24
     6f6:	99 1f       	adc	r25, r25
     6f8:	6a 95       	dec	r22
     6fa:	e2 f7       	brpl	.-8      	; 0x6f4 <setplane+0x12>
     6fc:	98 2f       	mov	r25, r24
     6fe:	90 95       	com	r25
     700:	40 e0       	ldi	r20, 0x00	; 0
     702:	50 e0       	ldi	r21, 0x00	; 0
     704:	3a c0       	rjmp	.+116    	; 0x77a <setplane+0x98>
	// the actual bits in each row of each layer
	// We loop them all, and set the apropriate bit.
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
			// Set a bit, and shift it inwards to the right X
			cube[z][y] |= (1 << x);
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	02 c0       	rjmp	.+4      	; 0x710 <setplane+0x2e>
     70c:	88 0f       	add	r24, r24
     70e:	99 1f       	adc	r25, r25
     710:	6a 95       	dec	r22
     712:	e2 f7       	brpl	.-8      	; 0x70c <setplane+0x2a>
     714:	98 2f       	mov	r25, r24
     716:	40 e0       	ldi	r20, 0x00	; 0
     718:	50 e0       	ldi	r21, 0x00	; 0
     71a:	13 c0       	rjmp	.+38     	; 0x742 <setplane+0x60>
     71c:	fb 01       	movw	r30, r22
     71e:	e2 0f       	add	r30, r18
     720:	f3 1f       	adc	r31, r19
     722:	ea 52       	subi	r30, 0x2A	; 42
     724:	ff 4f       	sbci	r31, 0xFF	; 255
     726:	80 81       	ld	r24, Z
     728:	89 2b       	or	r24, r25
     72a:	80 83       	st	Z, r24
	int y;
	// Since coordinates along the X axis are
	// the actual bits in each row of each layer
	// We loop them all, and set the apropriate bit.
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
     72c:	2f 5f       	subi	r18, 0xFF	; 255
     72e:	3f 4f       	sbci	r19, 0xFF	; 255
     730:	25 30       	cpi	r18, 0x05	; 5
     732:	31 05       	cpc	r19, r1
     734:	99 f7       	brne	.-26     	; 0x71c <setplane+0x3a>
	int z;
	int y;
	// Since coordinates along the X axis are
	// the actual bits in each row of each layer
	// We loop them all, and set the apropriate bit.
	for(z = 0 ; z < 5 ; z++){
     736:	4f 5f       	subi	r20, 0xFF	; 255
     738:	5f 4f       	sbci	r21, 0xFF	; 255
     73a:	45 30       	cpi	r20, 0x05	; 5
     73c:	51 05       	cpc	r21, r1
     73e:	09 f4       	brne	.+2      	; 0x742 <setplane+0x60>
     740:	59 c0       	rjmp	.+178    	; 0x7f4 <setplane+0x112>
     742:	20 e0       	ldi	r18, 0x00	; 0
     744:	30 e0       	ldi	r19, 0x00	; 0
		for(y = 0 ; y < 5 ; y++){
			// Set a bit, and shift it inwards to the right X
			cube[z][y] |= (1 << x);
     746:	ba 01       	movw	r22, r20
     748:	66 0f       	add	r22, r22
     74a:	77 1f       	adc	r23, r23
     74c:	66 0f       	add	r22, r22
     74e:	77 1f       	adc	r23, r23
     750:	64 0f       	add	r22, r20
     752:	75 1f       	adc	r23, r21
     754:	e3 cf       	rjmp	.-58     	; 0x71c <setplane+0x3a>
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
			cube[z][y] &= ~(1 << x);
     756:	fb 01       	movw	r30, r22
     758:	e2 0f       	add	r30, r18
     75a:	f3 1f       	adc	r31, r19
     75c:	ea 52       	subi	r30, 0x2A	; 42
     75e:	ff 4f       	sbci	r31, 0xFF	; 255
     760:	80 81       	ld	r24, Z
     762:	89 23       	and	r24, r25
     764:	80 83       	st	Z, r24
void clrplane_x (int x)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
     766:	2f 5f       	subi	r18, 0xFF	; 255
     768:	3f 4f       	sbci	r19, 0xFF	; 255
     76a:	25 30       	cpi	r18, 0x05	; 5
     76c:	31 05       	cpc	r19, r1
     76e:	99 f7       	brne	.-26     	; 0x756 <setplane+0x74>
// Clear all the leds on Y and Z for a given X
void clrplane_x (int x)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
     770:	4f 5f       	subi	r20, 0xFF	; 255
     772:	5f 4f       	sbci	r21, 0xFF	; 255
     774:	45 30       	cpi	r20, 0x05	; 5
     776:	51 05       	cpc	r21, r1
     778:	e9 f1       	breq	.+122    	; 0x7f4 <setplane+0x112>
     77a:	20 e0       	ldi	r18, 0x00	; 0
     77c:	30 e0       	ldi	r19, 0x00	; 0
		for(y = 0 ; y < 5 ; y++){
			cube[z][y] &= ~(1 << x);
     77e:	ba 01       	movw	r22, r20
     780:	66 0f       	add	r22, r22
     782:	77 1f       	adc	r23, r23
     784:	66 0f       	add	r22, r22
     786:	77 1f       	adc	r23, r23
     788:	64 0f       	add	r22, r20
     78a:	75 1f       	adc	r23, r21
     78c:	e4 cf       	rjmp	.-56     	; 0x756 <setplane+0x74>
		else{
			clrplane_x(i);
		}
	}
	
	if (plane == 'y'){
     78e:	89 37       	cpi	r24, 0x79	; 121
     790:	99 f4       	brne	.+38     	; 0x7b8 <setplane+0xd6>
     792:	fb 01       	movw	r30, r22
     794:	ea 52       	subi	r30, 0x2A	; 42
     796:	ff 4f       	sbci	r31, 0xFF	; 255
		if (state > 0){
     798:	14 16       	cp	r1, r20
     79a:	15 06       	cpc	r1, r21
     79c:	3c f4       	brge	.+14     	; 0x7ac <setplane+0xca>

// Sets all the leds on X and Z for a given Y
void setplane_y (int y)
{
	int z;
	for (z = 0 ; z < 5 ; z++) cube[z][y] = 0x1f; 
     79e:	8f e1       	ldi	r24, 0x1F	; 31
     7a0:	80 83       	st	Z, r24
     7a2:	85 83       	std	Z+5, r24	; 0x05
     7a4:	82 87       	std	Z+10, r24	; 0x0a
     7a6:	87 87       	std	Z+15, r24	; 0x0f
     7a8:	84 8b       	std	Z+20, r24	; 0x14
     7aa:	08 95       	ret

// Sets all the leds on X and Z for a given Y
void clrplane_y (int y)
{
	int z;
	for(z = 0 ; z < 5 ; z++) cube[z][y] = 0x00; 
     7ac:	10 82       	st	Z, r1
     7ae:	15 82       	std	Z+5, r1	; 0x05
     7b0:	12 86       	std	Z+10, r1	; 0x0a
     7b2:	17 86       	std	Z+15, r1	; 0x0f
     7b4:	14 8a       	std	Z+20, r1	; 0x14
     7b6:	08 95       	ret
		else{
			clrplane_y(i);
		}
	}
	
	if (plane == 'z'){
     7b8:	8a 37       	cpi	r24, 0x7A	; 122
     7ba:	e1 f4       	brne	.+56     	; 0x7f4 <setplane+0x112>
     7bc:	fb 01       	movw	r30, r22
     7be:	ee 0f       	add	r30, r30
     7c0:	ff 1f       	adc	r31, r31
     7c2:	ee 0f       	add	r30, r30
     7c4:	ff 1f       	adc	r31, r31
		if (state > 0){
     7c6:	14 16       	cp	r1, r20
     7c8:	15 06       	cpc	r1, r21
     7ca:	5c f4       	brge	.+22     	; 0x7e2 <setplane+0x100>
// i.e. draws a horizonal plane on a given level (z)
void setplane_z (int z)
{
	int y;
	// Loop the 5 rows on the given level and write 1 to the bits.
	for(y = 0 ; y < 5 ; y++) cube[z][y] = 0x1f;
     7cc:	e6 0f       	add	r30, r22
     7ce:	f7 1f       	adc	r31, r23
     7d0:	ea 52       	subi	r30, 0x2A	; 42
     7d2:	ff 4f       	sbci	r31, 0xFF	; 255
     7d4:	8f e1       	ldi	r24, 0x1F	; 31
     7d6:	80 83       	st	Z, r24
     7d8:	81 83       	std	Z+1, r24	; 0x01
     7da:	82 83       	std	Z+2, r24	; 0x02
     7dc:	83 83       	std	Z+3, r24	; 0x03
     7de:	84 83       	std	Z+4, r24	; 0x04
     7e0:	08 95       	ret

// Clears all the leds on X and Y for a given Z
void clrplane_z (int z)
{
	int y;
	for(y = 0 ; y < 5 ; y++) cube[z][y] = 0x00;
     7e2:	e6 0f       	add	r30, r22
     7e4:	f7 1f       	adc	r31, r23
     7e6:	ea 52       	subi	r30, 0x2A	; 42
     7e8:	ff 4f       	sbci	r31, 0xFF	; 255
     7ea:	10 82       	st	Z, r1
     7ec:	11 82       	std	Z+1, r1	; 0x01
     7ee:	12 82       	std	Z+2, r1	; 0x02
     7f0:	13 82       	std	Z+3, r1	; 0x03
     7f2:	14 82       	std	Z+4, r1	; 0x04
     7f4:	08 95       	ret

000007f6 <line_z>:

// Draw a line along the Z axis
// state=0 clears a line of voxels,
// state=1 sets a line of voxels.
void line_z(int x, int y, int z1, int z2, int state)
{
     7f6:	af 92       	push	r10
     7f8:	bf 92       	push	r11
     7fa:	cf 92       	push	r12
     7fc:	df 92       	push	r13
     7fe:	ef 92       	push	r14
     800:	ff 92       	push	r15
     802:	0f 93       	push	r16
     804:	1f 93       	push	r17
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
     80a:	5c 01       	movw	r10, r24
     80c:	6b 01       	movw	r12, r22
     80e:	79 01       	movw	r14, r18
	
	if (z1>z2){
     810:	24 17       	cp	r18, r20
     812:	35 07       	cpc	r19, r21
     814:	14 f4       	brge	.+4      	; 0x81a <line_z+0x24>
     816:	7a 01       	movw	r14, r20
     818:	a9 01       	movw	r20, r18
     81a:	ea 01       	movw	r28, r20
     81c:	07 c0       	rjmp	.+14     	; 0x82c <line_z+0x36>
		z1= z2;
		z2 = tmp;
	}
	int i;
	for (i=z1;i<=z2;i++){
		alterLED(x,y,i,state);
     81e:	c5 01       	movw	r24, r10
     820:	b6 01       	movw	r22, r12
     822:	ae 01       	movw	r20, r28
     824:	98 01       	movw	r18, r16
     826:	0e 94 a4 02 	call	0x548	; 0x548 <alterLED>
		tmp = z1;
		z1= z2;
		z2 = tmp;
	}
	int i;
	for (i=z1;i<=z2;i++){
     82a:	21 96       	adiw	r28, 0x01	; 1
     82c:	ec 16       	cp	r14, r28
     82e:	fd 06       	cpc	r15, r29
     830:	b4 f7       	brge	.-20     	; 0x81e <line_z+0x28>
		alterLED(x,y,i,state);
	}
}
     832:	df 91       	pop	r29
     834:	cf 91       	pop	r28
     836:	1f 91       	pop	r17
     838:	0f 91       	pop	r16
     83a:	ff 90       	pop	r15
     83c:	ef 90       	pop	r14
     83e:	df 90       	pop	r13
     840:	cf 90       	pop	r12
     842:	bf 90       	pop	r11
     844:	af 90       	pop	r10
     846:	08 95       	ret

00000848 <line_x>:

// Draw a line along the X axis
void line_x(int z, int y, int x1, int x2, int state)
{
     848:	af 92       	push	r10
     84a:	bf 92       	push	r11
     84c:	cf 92       	push	r12
     84e:	df 92       	push	r13
     850:	ef 92       	push	r14
     852:	ff 92       	push	r15
     854:	0f 93       	push	r16
     856:	1f 93       	push	r17
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
     85c:	5c 01       	movw	r10, r24
     85e:	6b 01       	movw	r12, r22
     860:	79 01       	movw	r14, r18
	if (x1>x2){
     862:	24 17       	cp	r18, r20
     864:	35 07       	cpc	r19, r21
     866:	14 f4       	brge	.+4      	; 0x86c <__stack+0xd>
     868:	7a 01       	movw	r14, r20
     86a:	a9 01       	movw	r20, r18
     86c:	ea 01       	movw	r28, r20
     86e:	07 c0       	rjmp	.+14     	; 0x87e <__stack+0x1f>
		x1= x2;
		x2 = tmp;
	}
	int i;
	for (i=x1;i<=x2;i++){
		alterLED(i,y,z,state);
     870:	ce 01       	movw	r24, r28
     872:	b6 01       	movw	r22, r12
     874:	a5 01       	movw	r20, r10
     876:	98 01       	movw	r18, r16
     878:	0e 94 a4 02 	call	0x548	; 0x548 <alterLED>
		tmp = x1;
		x1= x2;
		x2 = tmp;
	}
	int i;
	for (i=x1;i<=x2;i++){
     87c:	21 96       	adiw	r28, 0x01	; 1
     87e:	ec 16       	cp	r14, r28
     880:	fd 06       	cpc	r15, r29
     882:	b4 f7       	brge	.-20     	; 0x870 <__stack+0x11>
		alterLED(i,y,z,state);
	}
}
     884:	df 91       	pop	r29
     886:	cf 91       	pop	r28
     888:	1f 91       	pop	r17
     88a:	0f 91       	pop	r16
     88c:	ff 90       	pop	r15
     88e:	ef 90       	pop	r14
     890:	df 90       	pop	r13
     892:	cf 90       	pop	r12
     894:	bf 90       	pop	r11
     896:	af 90       	pop	r10
     898:	08 95       	ret

0000089a <line_y>:

// Draw a line along the Y axis.
void line_y(int z, int x, int y1, int y2, int state)
{
     89a:	af 92       	push	r10
     89c:	bf 92       	push	r11
     89e:	cf 92       	push	r12
     8a0:	df 92       	push	r13
     8a2:	ef 92       	push	r14
     8a4:	ff 92       	push	r15
     8a6:	0f 93       	push	r16
     8a8:	1f 93       	push	r17
     8aa:	cf 93       	push	r28
     8ac:	df 93       	push	r29
     8ae:	5c 01       	movw	r10, r24
     8b0:	6b 01       	movw	r12, r22
     8b2:	79 01       	movw	r14, r18
	if (y1>y2){
     8b4:	24 17       	cp	r18, r20
     8b6:	35 07       	cpc	r19, r21
     8b8:	14 f4       	brge	.+4      	; 0x8be <line_y+0x24>
     8ba:	7a 01       	movw	r14, r20
     8bc:	a9 01       	movw	r20, r18
     8be:	ea 01       	movw	r28, r20
     8c0:	07 c0       	rjmp	.+14     	; 0x8d0 <line_y+0x36>
		y1= y2;
		y2 = tmp;
	}
	int i;
	for (i=y1;i<=y2;i++){
			alterLED(x,i,z,state);
     8c2:	c6 01       	movw	r24, r12
     8c4:	be 01       	movw	r22, r28
     8c6:	a5 01       	movw	r20, r10
     8c8:	98 01       	movw	r18, r16
     8ca:	0e 94 a4 02 	call	0x548	; 0x548 <alterLED>
		tmp = y1;
		y1= y2;
		y2 = tmp;
	}
	int i;
	for (i=y1;i<=y2;i++){
     8ce:	21 96       	adiw	r28, 0x01	; 1
     8d0:	ec 16       	cp	r14, r28
     8d2:	fd 06       	cpc	r15, r29
     8d4:	b4 f7       	brge	.-20     	; 0x8c2 <line_y+0x28>
			alterLED(x,i,z,state);
	}
}
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28
     8da:	1f 91       	pop	r17
     8dc:	0f 91       	pop	r16
     8de:	ff 90       	pop	r15
     8e0:	ef 90       	pop	r14
     8e2:	df 90       	pop	r13
     8e4:	cf 90       	pop	r12
     8e6:	bf 90       	pop	r11
     8e8:	af 90       	pop	r10
     8ea:	08 95       	ret

000008ec <drawline_plane>:

// Draws a plane on any diagonal angle
// unsigned char anchor is the plane that is constant. ("x","y", or "z")
void drawline_plane(int x2, int y2, int x1, int y1,unsigned char anchor){
     8ec:	2f 92       	push	r2
     8ee:	3f 92       	push	r3
     8f0:	4f 92       	push	r4
     8f2:	5f 92       	push	r5
     8f4:	7f 92       	push	r7
     8f6:	8f 92       	push	r8
     8f8:	9f 92       	push	r9
     8fa:	af 92       	push	r10
     8fc:	bf 92       	push	r11
     8fe:	cf 92       	push	r12
     900:	df 92       	push	r13
     902:	ef 92       	push	r14
     904:	ff 92       	push	r15
     906:	0f 93       	push	r16
     908:	1f 93       	push	r17
     90a:	cf 93       	push	r28
     90c:	df 93       	push	r29
     90e:	fc 01       	movw	r30, r24
     910:	70 2e       	mov	r7, r16
	int deltax = abs(x2 - x1);        // The difference between the x's
     912:	84 1b       	sub	r24, r20
     914:	95 0b       	sbc	r25, r21
     916:	97 ff       	sbrs	r25, 7
     918:	03 c0       	rjmp	.+6      	; 0x920 <drawline_plane+0x34>
     91a:	90 95       	com	r25
     91c:	81 95       	neg	r24
     91e:	9f 4f       	sbci	r25, 0xFF	; 255
	int deltay = abs(y2 - y1);        // The difference between the y's
     920:	db 01       	movw	r26, r22
     922:	a2 1b       	sub	r26, r18
     924:	b3 0b       	sbc	r27, r19
     926:	b7 ff       	sbrs	r27, 7
     928:	03 c0       	rjmp	.+6      	; 0x930 <drawline_plane+0x44>
     92a:	b0 95       	com	r27
     92c:	a1 95       	neg	r26
     92e:	bf 4f       	sbci	r27, 0xFF	; 255
	int den;
	int num;
	int numadd;
	int numpixels;
	
	if (x2 >= x1){                 // The x-values are increasing
     930:	e4 17       	cp	r30, r20
     932:	f5 07       	cpc	r31, r21
     934:	3c f4       	brge	.+14     	; 0x944 <drawline_plane+0x58>
     936:	88 24       	eor	r8, r8
     938:	8a 94       	dec	r8
     93a:	98 2c       	mov	r9, r8
     93c:	aa 24       	eor	r10, r10
     93e:	aa 94       	dec	r10
     940:	ba 2c       	mov	r11, r10
     942:	06 c0       	rjmp	.+12     	; 0x950 <drawline_plane+0x64>
     944:	01 e0       	ldi	r16, 0x01	; 1
     946:	80 2e       	mov	r8, r16
     948:	91 2c       	mov	r9, r1
     94a:	11 e0       	ldi	r17, 0x01	; 1
     94c:	a1 2e       	mov	r10, r17
     94e:	b1 2c       	mov	r11, r1
	else{                          // The x-values are decreasing
		xinc1 = -1;
		xinc2 = -1;
	}
	
	if (y2 >= y1){                 // The y-values are increasing
     950:	62 17       	cp	r22, r18
     952:	73 07       	cpc	r23, r19
     954:	3c f4       	brge	.+14     	; 0x964 <drawline_plane+0x78>
     956:	cc 24       	eor	r12, r12
     958:	ca 94       	dec	r12
     95a:	dc 2c       	mov	r13, r12
     95c:	ee 24       	eor	r14, r14
     95e:	ea 94       	dec	r14
     960:	fe 2c       	mov	r15, r14
     962:	06 c0       	rjmp	.+12     	; 0x970 <drawline_plane+0x84>
     964:	f1 e0       	ldi	r31, 0x01	; 1
     966:	cf 2e       	mov	r12, r31
     968:	d1 2c       	mov	r13, r1
     96a:	e1 e0       	ldi	r30, 0x01	; 1
     96c:	ee 2e       	mov	r14, r30
     96e:	f1 2c       	mov	r15, r1
	else{                          // The y-values are decreasing
		yinc1 = -1;
		yinc2 = -1;
	}
	
	if (deltax >= deltay){         // There is at least one x-value for every y-value
     970:	8a 17       	cp	r24, r26
     972:	9b 07       	cpc	r25, r27
     974:	5c f0       	brlt	.+22     	; 0x98c <drawline_plane+0xa0>
		xinc1 = 0;                  // Don't change the x when numerator >= denominator
		yinc2 = 0;                  // Don't change the y for every iteration
		den = deltax;
		num = deltax / 2;
     976:	ec 01       	movw	r28, r24
     978:	d5 95       	asr	r29
     97a:	c7 95       	ror	r28
     97c:	8c 01       	movw	r16, r24
     97e:	1d 01       	movw	r2, r26
     980:	2c 01       	movw	r4, r24
     982:	ee 24       	eor	r14, r14
     984:	ff 24       	eor	r15, r15
     986:	aa 24       	eor	r10, r10
     988:	bb 24       	eor	r11, r11
     98a:	0a c0       	rjmp	.+20     	; 0x9a0 <drawline_plane+0xb4>
	}
	else{                          // There is at least one y-value for every x-value
		xinc2 = 0;                  // Don't change the x for every iteration
		yinc1 = 0;                  // Don't change the y when numerator >= denominator
		den = deltay;
		num = deltay / 2;
     98c:	ed 01       	movw	r28, r26
     98e:	d5 95       	asr	r29
     990:	c7 95       	ror	r28
     992:	8d 01       	movw	r16, r26
     994:	1c 01       	movw	r2, r24
     996:	2d 01       	movw	r4, r26
     998:	88 24       	eor	r8, r8
     99a:	99 24       	eor	r9, r9
     99c:	cc 24       	eor	r12, r12
     99e:	dd 24       	eor	r13, r13
     9a0:	b9 01       	movw	r22, r18
     9a2:	a0 e0       	ldi	r26, 0x00	; 0
     9a4:	b0 e0       	ldi	r27, 0x00	; 0
		numadd = deltax;
		numpixels = deltay;         // There are more y-values than x-values
	}
	int curpixel;
	for(curpixel = 0 ; curpixel <= numpixels ; curpixel++){
		if (anchor == 'z')
     9a6:	8a e7       	ldi	r24, 0x7A	; 122
     9a8:	78 16       	cp	r7, r24
     9aa:	11 f5       	brne	.+68     	; 0x9f0 <drawline_plane+0x104>
}

// This function validates that we are drawing inside the cube.
unsigned char inrange(int x, int y, int z)
{
	if (x >= 0 && x < 5 && y >= 0 && y < 5 && z >= 0 && z < 5){
     9ac:	45 30       	cpi	r20, 0x05	; 5
     9ae:	51 05       	cpc	r21, r1
     9b0:	08 f0       	brcs	.+2      	; 0x9b4 <drawline_plane+0xc8>
     9b2:	72 c0       	rjmp	.+228    	; 0xa98 <drawline_plane+0x1ac>
     9b4:	77 fd       	sbrc	r23, 7
     9b6:	70 c0       	rjmp	.+224    	; 0xa98 <drawline_plane+0x1ac>
     9b8:	65 30       	cpi	r22, 0x05	; 5
     9ba:	71 05       	cpc	r23, r1
     9bc:	0c f0       	brlt	.+2      	; 0x9c0 <drawline_plane+0xd4>
     9be:	6c c0       	rjmp	.+216    	; 0xa98 <drawline_plane+0x1ac>
// Voxel == 1 LED in the 3D cube grid
// Set a voxel (LED) in the cube buffer

void setLED(int x, int y, int z)
{ 
	if (inrange(x, y, z)) cube[z][y] |= (1 << x);
     9c0:	fb 01       	movw	r30, r22
     9c2:	ea 52       	subi	r30, 0x2A	; 42
     9c4:	ff 4f       	sbci	r31, 0xFF	; 255
     9c6:	24 89       	ldd	r18, Z+20	; 0x14
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	04 2e       	mov	r0, r20
     9ce:	02 c0       	rjmp	.+4      	; 0x9d4 <drawline_plane+0xe8>
     9d0:	88 0f       	add	r24, r24
     9d2:	99 1f       	adc	r25, r25
     9d4:	0a 94       	dec	r0
     9d6:	e2 f7       	brpl	.-8      	; 0x9d0 <drawline_plane+0xe4>
     9d8:	28 2b       	or	r18, r24
     9da:	24 8b       	std	Z+20, r18	; 0x14
			setLED(x, y, 2);
			setLED(x, y, 1);
			setLED(x, y, 0);
		}
		
		if (anchor == 'x')
     9dc:	27 85       	ldd	r18, Z+15	; 0x0f
     9de:	28 2b       	or	r18, r24
     9e0:	27 87       	std	Z+15, r18	; 0x0f
     9e2:	22 85       	ldd	r18, Z+10	; 0x0a
     9e4:	28 2b       	or	r18, r24
     9e6:	22 87       	std	Z+10, r18	; 0x0a
     9e8:	25 81       	ldd	r18, Z+5	; 0x05
     9ea:	28 2b       	or	r18, r24
     9ec:	25 83       	std	Z+5, r18	; 0x05
     9ee:	2a c0       	rjmp	.+84     	; 0xa44 <drawline_plane+0x158>
     9f0:	88 e7       	ldi	r24, 0x78	; 120
     9f2:	78 16       	cp	r7, r24
     9f4:	51 f5       	brne	.+84     	; 0xa4a <drawline_plane+0x15e>
}

// This function validates that we are drawing inside the cube.
unsigned char inrange(int x, int y, int z)
{
	if (x >= 0 && x < 5 && y >= 0 && y < 5 && z >= 0 && z < 5){
     9f6:	45 30       	cpi	r20, 0x05	; 5
     9f8:	51 05       	cpc	r21, r1
     9fa:	08 f0       	brcs	.+2      	; 0x9fe <drawline_plane+0x112>
     9fc:	4d c0       	rjmp	.+154    	; 0xa98 <drawline_plane+0x1ac>
     9fe:	77 fd       	sbrc	r23, 7
     a00:	4b c0       	rjmp	.+150    	; 0xa98 <drawline_plane+0x1ac>
     a02:	65 30       	cpi	r22, 0x05	; 5
     a04:	71 05       	cpc	r23, r1
     a06:	0c f0       	brlt	.+2      	; 0xa0a <drawline_plane+0x11e>
     a08:	47 c0       	rjmp	.+142    	; 0xa98 <drawline_plane+0x1ac>
// Voxel == 1 LED in the 3D cube grid
// Set a voxel (LED) in the cube buffer

void setLED(int x, int y, int z)
{ 
	if (inrange(x, y, z)) cube[z][y] |= (1 << x);
     a0a:	fb 01       	movw	r30, r22
     a0c:	ee 0f       	add	r30, r30
     a0e:	ff 1f       	adc	r31, r31
     a10:	ee 0f       	add	r30, r30
     a12:	ff 1f       	adc	r31, r31
     a14:	e6 0f       	add	r30, r22
     a16:	f7 1f       	adc	r31, r23
     a18:	ea 52       	subi	r30, 0x2A	; 42
     a1a:	ff 4f       	sbci	r31, 0xFF	; 255
     a1c:	24 81       	ldd	r18, Z+4	; 0x04
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	04 2e       	mov	r0, r20
     a24:	02 c0       	rjmp	.+4      	; 0xa2a <drawline_plane+0x13e>
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	0a 94       	dec	r0
     a2c:	e2 f7       	brpl	.-8      	; 0xa26 <drawline_plane+0x13a>
     a2e:	28 2b       	or	r18, r24
     a30:	24 83       	std	Z+4, r18	; 0x04
			setLED(x, 2, y);
			setLED(x, 1, y);
			setLED(x, 0, y);
		}
		
		if (anchor == 'y')
     a32:	23 81       	ldd	r18, Z+3	; 0x03
     a34:	28 2b       	or	r18, r24
     a36:	23 83       	std	Z+3, r18	; 0x03
     a38:	22 81       	ldd	r18, Z+2	; 0x02
     a3a:	28 2b       	or	r18, r24
     a3c:	22 83       	std	Z+2, r18	; 0x02
     a3e:	21 81       	ldd	r18, Z+1	; 0x01
     a40:	28 2b       	or	r18, r24
     a42:	21 83       	std	Z+1, r18	; 0x01
     a44:	20 81       	ld	r18, Z
     a46:	82 2b       	or	r24, r18
     a48:	26 c0       	rjmp	.+76     	; 0xa96 <drawline_plane+0x1aa>
     a4a:	89 e7       	ldi	r24, 0x79	; 121
     a4c:	78 16       	cp	r7, r24
     a4e:	21 f5       	brne	.+72     	; 0xa98 <drawline_plane+0x1ac>
}

// This function validates that we are drawing inside the cube.
unsigned char inrange(int x, int y, int z)
{
	if (x >= 0 && x < 5 && y >= 0 && y < 5 && z >= 0 && z < 5){
     a50:	77 fd       	sbrc	r23, 7
     a52:	22 c0       	rjmp	.+68     	; 0xa98 <drawline_plane+0x1ac>
     a54:	65 30       	cpi	r22, 0x05	; 5
     a56:	71 05       	cpc	r23, r1
     a58:	fc f4       	brge	.+62     	; 0xa98 <drawline_plane+0x1ac>
     a5a:	57 fd       	sbrc	r21, 7
     a5c:	1d c0       	rjmp	.+58     	; 0xa98 <drawline_plane+0x1ac>
     a5e:	45 30       	cpi	r20, 0x05	; 5
     a60:	51 05       	cpc	r21, r1
     a62:	d4 f4       	brge	.+52     	; 0xa98 <drawline_plane+0x1ac>
// Voxel == 1 LED in the 3D cube grid
// Set a voxel (LED) in the cube buffer

void setLED(int x, int y, int z)
{ 
	if (inrange(x, y, z)) cube[z][y] |= (1 << x);
     a64:	fa 01       	movw	r30, r20
     a66:	ee 0f       	add	r30, r30
     a68:	ff 1f       	adc	r31, r31
     a6a:	ee 0f       	add	r30, r30
     a6c:	ff 1f       	adc	r31, r31
     a6e:	e4 0f       	add	r30, r20
     a70:	f5 1f       	adc	r31, r21
     a72:	e6 0f       	add	r30, r22
     a74:	f7 1f       	adc	r31, r23
     a76:	ea 52       	subi	r30, 0x2A	; 42
     a78:	ff 4f       	sbci	r31, 0xFF	; 255
     a7a:	80 81       	ld	r24, Z
     a7c:	80 61       	ori	r24, 0x10	; 16
     a7e:	80 83       	st	Z, r24
			setLED(2, y, x);
			setLED(1, y, x);
			setLED(0, y, x);
		}
		
		num += numadd;              // Increase the numerator by the top of the fraction
     a80:	80 81       	ld	r24, Z
     a82:	88 60       	ori	r24, 0x08	; 8
     a84:	80 83       	st	Z, r24
     a86:	80 81       	ld	r24, Z
     a88:	84 60       	ori	r24, 0x04	; 4
     a8a:	80 83       	st	Z, r24
     a8c:	80 81       	ld	r24, Z
     a8e:	82 60       	ori	r24, 0x02	; 2
     a90:	80 83       	st	Z, r24
     a92:	80 81       	ld	r24, Z
     a94:	81 60       	ori	r24, 0x01	; 1
     a96:	80 83       	st	Z, r24
     a98:	c2 0d       	add	r28, r2
     a9a:	d3 1d       	adc	r29, r3
		if (num >= den){             // Check if numerator >= denominator
     a9c:	c0 17       	cp	r28, r16
     a9e:	d1 07       	cpc	r29, r17
     aa0:	34 f0       	brlt	.+12     	; 0xaae <drawline_plane+0x1c2>
			num -= den;               // Calculate the new numerator value
     aa2:	c0 1b       	sub	r28, r16
     aa4:	d1 0b       	sbc	r29, r17
			x += xinc1;               // Change the x as appropriate
     aa6:	4a 0d       	add	r20, r10
     aa8:	5b 1d       	adc	r21, r11
			y += yinc1;               // Change the y as appropriate
     aaa:	6c 0d       	add	r22, r12
     aac:	7d 1d       	adc	r23, r13
		num = deltay / 2;
		numadd = deltax;
		numpixels = deltay;         // There are more y-values than x-values
	}
	int curpixel;
	for(curpixel = 0 ; curpixel <= numpixels ; curpixel++){
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	4a 16       	cp	r4, r26
     ab2:	5b 06       	cpc	r5, r27
     ab4:	2c f0       	brlt	.+10     	; 0xac0 <drawline_plane+0x1d4>
		if (num >= den){             // Check if numerator >= denominator
			num -= den;               // Calculate the new numerator value
			x += xinc1;               // Change the x as appropriate
			y += yinc1;               // Change the y as appropriate
		}
		x += xinc2;                 // Change the x as appropriate
     ab6:	48 0d       	add	r20, r8
     ab8:	59 1d       	adc	r21, r9
		y += yinc2;                 // Change the y as appropriate
     aba:	6e 0d       	add	r22, r14
     abc:	7f 1d       	adc	r23, r15
     abe:	73 cf       	rjmp	.-282    	; 0x9a6 <drawline_plane+0xba>
	}
}
     ac0:	df 91       	pop	r29
     ac2:	cf 91       	pop	r28
     ac4:	1f 91       	pop	r17
     ac6:	0f 91       	pop	r16
     ac8:	ff 90       	pop	r15
     aca:	ef 90       	pop	r14
     acc:	df 90       	pop	r13
     ace:	cf 90       	pop	r12
     ad0:	bf 90       	pop	r11
     ad2:	af 90       	pop	r10
     ad4:	9f 90       	pop	r9
     ad6:	8f 90       	pop	r8
     ad8:	7f 90       	pop	r7
     ada:	5f 90       	pop	r5
     adc:	4f 90       	pop	r4
     ade:	3f 90       	pop	r3
     ae0:	2f 90       	pop	r2
     ae2:	08 95       	ret

00000ae4 <tmp2cube>:

// Copy the temp cube onto the real cube
void tmp2cube(void)
{
     ae4:	20 e0       	ldi	r18, 0x00	; 0
     ae6:	30 e0       	ldi	r19, 0x00	; 0
	int y, z;
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
			cube[z][y] = tmpcube[z][y];
     ae8:	f9 01       	movw	r30, r18
     aea:	ee 0f       	add	r30, r30
     aec:	ff 1f       	adc	r31, r31
     aee:	ee 0f       	add	r30, r30
     af0:	ff 1f       	adc	r31, r31
     af2:	e2 0f       	add	r30, r18
     af4:	f3 1f       	adc	r31, r19
     af6:	df 01       	movw	r26, r30
     af8:	a9 54       	subi	r26, 0x49	; 73
     afa:	bf 4f       	sbci	r27, 0xFF	; 255
     afc:	8c 91       	ld	r24, X
     afe:	ea 52       	subi	r30, 0x2A	; 42
     b00:	ff 4f       	sbci	r31, 0xFF	; 255
     b02:	80 83       	st	Z, r24
     b04:	11 96       	adiw	r26, 0x01	; 1
     b06:	8c 91       	ld	r24, X
     b08:	11 97       	sbiw	r26, 0x01	; 1
     b0a:	81 83       	std	Z+1, r24	; 0x01
     b0c:	12 96       	adiw	r26, 0x02	; 2
     b0e:	8c 91       	ld	r24, X
     b10:	12 97       	sbiw	r26, 0x02	; 2
     b12:	82 83       	std	Z+2, r24	; 0x02
     b14:	13 96       	adiw	r26, 0x03	; 3
     b16:	8c 91       	ld	r24, X
     b18:	13 97       	sbiw	r26, 0x03	; 3
     b1a:	83 83       	std	Z+3, r24	; 0x03
     b1c:	14 96       	adiw	r26, 0x04	; 4
     b1e:	8c 91       	ld	r24, X
     b20:	84 83       	std	Z+4, r24	; 0x04

// Copy the temp cube onto the real cube
void tmp2cube(void)
{
	int y, z;
	for(z = 0 ; z < 5 ; z++){
     b22:	2f 5f       	subi	r18, 0xFF	; 255
     b24:	3f 4f       	sbci	r19, 0xFF	; 255
     b26:	25 30       	cpi	r18, 0x05	; 5
     b28:	31 05       	cpc	r19, r1
     b2a:	f1 f6       	brne	.-68     	; 0xae8 <tmp2cube+0x4>
		for(y = 0 ; y < 5 ; y++){
			cube[z][y] = tmpcube[z][y];
		}
	}
}
     b2c:	08 95       	ret

00000b2e <cube2tmp>:

// Copy the cube into the temp buffer
void cube2tmp(void)
{
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
	int y, z;
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
			tmpcube[z][y] = cube[z][y];
     b32:	f9 01       	movw	r30, r18
     b34:	ee 0f       	add	r30, r30
     b36:	ff 1f       	adc	r31, r31
     b38:	ee 0f       	add	r30, r30
     b3a:	ff 1f       	adc	r31, r31
     b3c:	e2 0f       	add	r30, r18
     b3e:	f3 1f       	adc	r31, r19
     b40:	df 01       	movw	r26, r30
     b42:	aa 52       	subi	r26, 0x2A	; 42
     b44:	bf 4f       	sbci	r27, 0xFF	; 255
     b46:	8c 91       	ld	r24, X
     b48:	e9 54       	subi	r30, 0x49	; 73
     b4a:	ff 4f       	sbci	r31, 0xFF	; 255
     b4c:	80 83       	st	Z, r24
     b4e:	11 96       	adiw	r26, 0x01	; 1
     b50:	8c 91       	ld	r24, X
     b52:	11 97       	sbiw	r26, 0x01	; 1
     b54:	81 83       	std	Z+1, r24	; 0x01
     b56:	12 96       	adiw	r26, 0x02	; 2
     b58:	8c 91       	ld	r24, X
     b5a:	12 97       	sbiw	r26, 0x02	; 2
     b5c:	82 83       	std	Z+2, r24	; 0x02
     b5e:	13 96       	adiw	r26, 0x03	; 3
     b60:	8c 91       	ld	r24, X
     b62:	13 97       	sbiw	r26, 0x03	; 3
     b64:	83 83       	std	Z+3, r24	; 0x03
     b66:	14 96       	adiw	r26, 0x04	; 4
     b68:	8c 91       	ld	r24, X
     b6a:	84 83       	std	Z+4, r24	; 0x04

// Copy the cube into the temp buffer
void cube2tmp(void)
{
	int y, z;
	for(z = 0 ; z < 5 ; z++){
     b6c:	2f 5f       	subi	r18, 0xFF	; 255
     b6e:	3f 4f       	sbci	r19, 0xFF	; 255
     b70:	25 30       	cpi	r18, 0x05	; 5
     b72:	31 05       	cpc	r19, r1
     b74:	f1 f6       	brne	.-68     	; 0xb32 <cube2tmp+0x4>
		for(y = 0 ; y < 5 ; y++){
			tmpcube[z][y] = cube[z][y];
		}
	}
}
     b76:	08 95       	ret

00000b78 <fill>:

// Fill the cube with a given pattern.
// fill(0x00); clears the cube
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
     b78:	20 e0       	ldi	r18, 0x00	; 0
     b7a:	30 e0       	ldi	r19, 0x00	; 0
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
     b7c:	f9 01       	movw	r30, r18
     b7e:	ee 0f       	add	r30, r30
     b80:	ff 1f       	adc	r31, r31
     b82:	ee 0f       	add	r30, r30
     b84:	ff 1f       	adc	r31, r31
     b86:	e2 0f       	add	r30, r18
     b88:	f3 1f       	adc	r31, r19
     b8a:	ea 52       	subi	r30, 0x2A	; 42
     b8c:	ff 4f       	sbci	r31, 0xFF	; 255
     b8e:	80 83       	st	Z, r24
     b90:	81 83       	std	Z+1, r24	; 0x01
     b92:	82 83       	std	Z+2, r24	; 0x02
     b94:	83 83       	std	Z+3, r24	; 0x03
     b96:	84 83       	std	Z+4, r24	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
     b98:	2f 5f       	subi	r18, 0xFF	; 255
     b9a:	3f 4f       	sbci	r19, 0xFF	; 255
     b9c:	25 30       	cpi	r18, 0x05	; 5
     b9e:	31 05       	cpc	r19, r1
     ba0:	69 f7       	brne	.-38     	; 0xb7c <fill+0x4>
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
		}
	}
}
     ba2:	08 95       	ret

00000ba4 <effect_spinning_plane>:
	}
}

// Shows an animation of a spinning plane.
void effect_spinning_plane(int direction, int iterations, int delay)
{
     ba4:	cf 92       	push	r12
     ba6:	df 92       	push	r13
     ba8:	ef 92       	push	r14
     baa:	ff 92       	push	r15
     bac:	0f 93       	push	r16
     bae:	1f 93       	push	r17
     bb0:	cf 93       	push	r28
     bb2:	df 93       	push	r29
     bb4:	6b 01       	movw	r12, r22
     bb6:	7a 01       	movw	r14, r20
     bb8:	c0 e0       	ldi	r28, 0x00	; 0
     bba:	d0 e0       	ldi	r29, 0x00	; 0
     bbc:	16 c0       	rjmp	.+44     	; 0xbea <effect_spinning_plane+0x46>
	for (i=0;i<iterations;i++)
	{
		// Loop cube levels.
		for (z=0;z<5;z++)
		{
			cube[z][0] = pgm_read_byte(&spinning_line[(i)%6][0]);
     bbe:	fd 01       	movw	r30, r26
     bc0:	ee 0f       	add	r30, r30
     bc2:	ff 1f       	adc	r31, r31
     bc4:	ee 0f       	add	r30, r30
     bc6:	ff 1f       	adc	r31, r31
     bc8:	ea 0f       	add	r30, r26
     bca:	fb 1f       	adc	r31, r27
     bcc:	ea 52       	subi	r30, 0x2A	; 42
     bce:	ff 4f       	sbci	r31, 0xFF	; 255
     bd0:	00 83       	st	Z, r16
			cube[z][1] = pgm_read_byte(&spinning_line[(i)%6][1]);
     bd2:	11 83       	std	Z+1, r17	; 0x01
			cube[z][2] = pgm_read_byte(&spinning_line[(i)%6][2]);
     bd4:	22 83       	std	Z+2, r18	; 0x02
			cube[z][3] = pgm_read_byte(&spinning_line[(i)%6][3]);
     bd6:	93 83       	std	Z+3, r25	; 0x03
			cube[z][4] = pgm_read_byte(&spinning_line[(i)%6][4]);
     bd8:	84 83       	std	Z+4, r24	; 0x04
	int z;		// cube level

	for (i=0;i<iterations;i++)
	{
		// Loop cube levels.
		for (z=0;z<5;z++)
     bda:	11 96       	adiw	r26, 0x01	; 1
     bdc:	a5 30       	cpi	r26, 0x05	; 5
     bde:	b1 05       	cpc	r27, r1
     be0:	71 f7       	brne	.-36     	; 0xbbe <effect_spinning_plane+0x1a>
			cube[z][1] = pgm_read_byte(&spinning_line[(i)%6][1]);
			cube[z][2] = pgm_read_byte(&spinning_line[(i)%6][2]);
			cube[z][3] = pgm_read_byte(&spinning_line[(i)%6][3]);
			cube[z][4] = pgm_read_byte(&spinning_line[(i)%6][4]);
		}
		delay_ms(delay);
     be2:	c7 01       	movw	r24, r14
     be4:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
void effect_spinning_plane(int direction, int iterations, int delay)
{
	int i;
	int z;		// cube level

	for (i=0;i<iterations;i++)
     be8:	21 96       	adiw	r28, 0x01	; 1
     bea:	cc 15       	cp	r28, r12
     bec:	dd 05       	cpc	r29, r13
     bee:	34 f5       	brge	.+76     	; 0xc3c <effect_spinning_plane+0x98>
	{
		// Loop cube levels.
		for (z=0;z<5;z++)
		{
			cube[z][0] = pgm_read_byte(&spinning_line[(i)%6][0]);
     bf0:	ce 01       	movw	r24, r28
     bf2:	66 e0       	ldi	r22, 0x06	; 6
     bf4:	70 e0       	ldi	r23, 0x00	; 0
     bf6:	0e 94 a7 1c 	call	0x394e	; 0x394e <__divmodhi4>
     bfa:	fc 01       	movw	r30, r24
     bfc:	ee 0f       	add	r30, r30
     bfe:	ff 1f       	adc	r31, r31
     c00:	ee 0f       	add	r30, r30
     c02:	ff 1f       	adc	r31, r31
     c04:	e8 0f       	add	r30, r24
     c06:	f9 1f       	adc	r31, r25
			cube[z][1] = pgm_read_byte(&spinning_line[(i)%6][1]);
     c08:	cf 01       	movw	r24, r30
     c0a:	87 53       	subi	r24, 0x37	; 55
     c0c:	9f 4f       	sbci	r25, 0xFF	; 255
			cube[z][2] = pgm_read_byte(&spinning_line[(i)%6][2]);
     c0e:	9f 01       	movw	r18, r30
     c10:	26 53       	subi	r18, 0x36	; 54
     c12:	3f 4f       	sbci	r19, 0xFF	; 255
			cube[z][3] = pgm_read_byte(&spinning_line[(i)%6][3]);
     c14:	af 01       	movw	r20, r30
     c16:	45 53       	subi	r20, 0x35	; 53
     c18:	5f 4f       	sbci	r21, 0xFF	; 255
			cube[z][4] = pgm_read_byte(&spinning_line[(i)%6][4]);
     c1a:	bf 01       	movw	r22, r30
     c1c:	64 53       	subi	r22, 0x34	; 52
     c1e:	7f 4f       	sbci	r23, 0xFF	; 255
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
	for (i=0;i<iterations;i++)
	{
		// Loop cube levels.
		for (z=0;z<5;z++)
		{
			cube[z][0] = pgm_read_byte(&spinning_line[(i)%6][0]);
     c24:	e8 53       	subi	r30, 0x38	; 56
     c26:	ff 4f       	sbci	r31, 0xFF	; 255
     c28:	04 91       	lpm	r16, Z+
			cube[z][1] = pgm_read_byte(&spinning_line[(i)%6][1]);
     c2a:	fc 01       	movw	r30, r24
     c2c:	14 91       	lpm	r17, Z+
			cube[z][2] = pgm_read_byte(&spinning_line[(i)%6][2]);
     c2e:	f9 01       	movw	r30, r18
     c30:	24 91       	lpm	r18, Z+
			cube[z][3] = pgm_read_byte(&spinning_line[(i)%6][3]);
     c32:	fa 01       	movw	r30, r20
     c34:	94 91       	lpm	r25, Z+
			cube[z][4] = pgm_read_byte(&spinning_line[(i)%6][4]);
     c36:	fb 01       	movw	r30, r22
     c38:	84 91       	lpm	r24, Z+
     c3a:	c1 cf       	rjmp	.-126    	; 0xbbe <effect_spinning_plane+0x1a>
		}
		delay_ms(delay);
	}
}
     c3c:	df 91       	pop	r29
     c3e:	cf 91       	pop	r28
     c40:	1f 91       	pop	r17
     c42:	0f 91       	pop	r16
     c44:	ff 90       	pop	r15
     c46:	ef 90       	pop	r14
     c48:	df 90       	pop	r13
     c4a:	cf 90       	pop	r12
     c4c:	08 95       	ret

00000c4e <effect_spiral>:
	{ 0x08, 0x08, 0x04, 0x02, 0x02 },
};

// Shows an animation of a spinning spiral
void effect_spiral(int direction, int iterations, int delay)
{
     c4e:	cf 92       	push	r12
     c50:	df 92       	push	r13
     c52:	ef 92       	push	r14
     c54:	ff 92       	push	r15
     c56:	0f 93       	push	r16
     c58:	1f 93       	push	r17
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
     c5e:	6b 01       	movw	r12, r22
     c60:	7a 01       	movw	r14, r20
     c62:	00 e0       	ldi	r16, 0x00	; 0
     c64:	10 e0       	ldi	r17, 0x00	; 0
     c66:	43 c0       	rjmp	.+134    	; 0xcee <effect_spiral+0xa0>
	int i;
	int z;		// cube level

	for (i=0;i<iterations;i++)
     c68:	c0 e0       	ldi	r28, 0x00	; 0
     c6a:	d0 e0       	ldi	r29, 0x00	; 0
		// Loop cube levels
		for (z=0;z<5;z++)
		{
			// Read the animation from program memory and put it in the cube buffer.
			// y=0 and y=2 is stored in the upper nibble of the byte, and must be bitshifted into place.
			cube[z][0] = pgm_read_byte(&spinning_line[(i+z)%6][0]);
     c6c:	ce 01       	movw	r24, r28
     c6e:	80 0f       	add	r24, r16
     c70:	91 1f       	adc	r25, r17
     c72:	66 e0       	ldi	r22, 0x06	; 6
     c74:	70 e0       	ldi	r23, 0x00	; 0
     c76:	0e 94 a7 1c 	call	0x394e	; 0x394e <__divmodhi4>
     c7a:	9c 01       	movw	r18, r24
     c7c:	22 0f       	add	r18, r18
     c7e:	33 1f       	adc	r19, r19
     c80:	22 0f       	add	r18, r18
     c82:	33 1f       	adc	r19, r19
     c84:	28 0f       	add	r18, r24
     c86:	39 1f       	adc	r19, r25
     c88:	f9 01       	movw	r30, r18
     c8a:	e8 53       	subi	r30, 0x38	; 56
     c8c:	ff 4f       	sbci	r31, 0xFF	; 255
     c8e:	e4 91       	lpm	r30, Z+
     c90:	de 01       	movw	r26, r28
     c92:	aa 0f       	add	r26, r26
     c94:	bb 1f       	adc	r27, r27
     c96:	aa 0f       	add	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	ac 0f       	add	r26, r28
     c9c:	bd 1f       	adc	r27, r29
     c9e:	aa 52       	subi	r26, 0x2A	; 42
     ca0:	bf 4f       	sbci	r27, 0xFF	; 255
     ca2:	ec 93       	st	X, r30
			cube[z][1] = pgm_read_byte(&spinning_line[(i+z)%6][1]);
     ca4:	f9 01       	movw	r30, r18
     ca6:	e7 53       	subi	r30, 0x37	; 55
     ca8:	ff 4f       	sbci	r31, 0xFF	; 255
     caa:	e4 91       	lpm	r30, Z+
     cac:	11 96       	adiw	r26, 0x01	; 1
     cae:	ec 93       	st	X, r30
     cb0:	11 97       	sbiw	r26, 0x01	; 1
			cube[z][2] = pgm_read_byte(&spinning_line[(i+z)%6][2]);
     cb2:	f9 01       	movw	r30, r18
     cb4:	e6 53       	subi	r30, 0x36	; 54
     cb6:	ff 4f       	sbci	r31, 0xFF	; 255
     cb8:	e4 91       	lpm	r30, Z+
     cba:	12 96       	adiw	r26, 0x02	; 2
     cbc:	ec 93       	st	X, r30
     cbe:	12 97       	sbiw	r26, 0x02	; 2
			cube[z][3] = pgm_read_byte(&spinning_line[(i+z)%6][3]);
     cc0:	f9 01       	movw	r30, r18
     cc2:	e5 53       	subi	r30, 0x35	; 53
     cc4:	ff 4f       	sbci	r31, 0xFF	; 255
     cc6:	e4 91       	lpm	r30, Z+
     cc8:	13 96       	adiw	r26, 0x03	; 3
     cca:	ec 93       	st	X, r30
     ccc:	13 97       	sbiw	r26, 0x03	; 3
			cube[z][4] = pgm_read_byte(&spinning_line[(i+z)%6][4]);
     cce:	24 53       	subi	r18, 0x34	; 52
     cd0:	3f 4f       	sbci	r19, 0xFF	; 255
     cd2:	f9 01       	movw	r30, r18
     cd4:	84 91       	lpm	r24, Z+
     cd6:	14 96       	adiw	r26, 0x04	; 4
     cd8:	8c 93       	st	X, r24
	int z;		// cube level

	for (i=0;i<iterations;i++)
	{
		// Loop cube levels
		for (z=0;z<5;z++)
     cda:	21 96       	adiw	r28, 0x01	; 1
     cdc:	c5 30       	cpi	r28, 0x05	; 5
     cde:	d1 05       	cpc	r29, r1
     ce0:	09 f0       	breq	.+2      	; 0xce4 <effect_spiral+0x96>
     ce2:	c4 cf       	rjmp	.-120    	; 0xc6c <effect_spiral+0x1e>
			cube[z][3] = pgm_read_byte(&spinning_line[(i+z)%6][3]);
			cube[z][4] = pgm_read_byte(&spinning_line[(i+z)%6][4]);
			// the +z makes the animation iterate one step for each plane
			// making it into a spiral
		}
		delay_ms(delay);
     ce4:	c7 01       	movw	r24, r14
     ce6:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
void effect_spiral(int direction, int iterations, int delay)
{
	int i;
	int z;		// cube level

	for (i=0;i<iterations;i++)
     cea:	0f 5f       	subi	r16, 0xFF	; 255
     cec:	1f 4f       	sbci	r17, 0xFF	; 255
     cee:	0c 15       	cp	r16, r12
     cf0:	1d 05       	cpc	r17, r13
     cf2:	0c f4       	brge	.+2      	; 0xcf6 <effect_spiral+0xa8>
     cf4:	b9 cf       	rjmp	.-142    	; 0xc68 <effect_spiral+0x1a>
			// the +z makes the animation iterate one step for each plane
			// making it into a spiral
		}
		delay_ms(delay);
	}
}
     cf6:	df 91       	pop	r29
     cf8:	cf 91       	pop	r28
     cfa:	1f 91       	pop	r17
     cfc:	0f 91       	pop	r16
     cfe:	ff 90       	pop	r15
     d00:	ef 90       	pop	r14
     d02:	df 90       	pop	r13
     d04:	cf 90       	pop	r12
     d06:	08 95       	ret

00000d08 <effect_EESTEC>:
delay_ms(150);
}


void effect_EESTEC()
{
     d08:	0f 93       	push	r16
     d0a:	1f 93       	push	r17
	fill(0);	// E
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
	delay_ms(70);
     d12:	86 e4       	ldi	r24, 0x46	; 70
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	line_z(0, 0, 0, 4, 1);	
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	60 e0       	ldi	r22, 0x00	; 0
     d20:	70 e0       	ldi	r23, 0x00	; 0
     d22:	40 e0       	ldi	r20, 0x00	; 0
     d24:	50 e0       	ldi	r21, 0x00	; 0
     d26:	24 e0       	ldi	r18, 0x04	; 4
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	01 e0       	ldi	r16, 0x01	; 1
     d2c:	10 e0       	ldi	r17, 0x00	; 0
     d2e:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	line_y(0, 0, 0, 4, 1);
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	60 e0       	ldi	r22, 0x00	; 0
     d38:	70 e0       	ldi	r23, 0x00	; 0
     d3a:	40 e0       	ldi	r20, 0x00	; 0
     d3c:	50 e0       	ldi	r21, 0x00	; 0
     d3e:	24 e0       	ldi	r18, 0x04	; 4
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	line_y(2, 0, 0, 4, 1);
     d46:	82 e0       	ldi	r24, 0x02	; 2
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	60 e0       	ldi	r22, 0x00	; 0
     d4c:	70 e0       	ldi	r23, 0x00	; 0
     d4e:	40 e0       	ldi	r20, 0x00	; 0
     d50:	50 e0       	ldi	r21, 0x00	; 0
     d52:	24 e0       	ldi	r18, 0x04	; 4
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	line_y(4, 0, 0, 4, 1);
     d5a:	84 e0       	ldi	r24, 0x04	; 4
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	60 e0       	ldi	r22, 0x00	; 0
     d60:	70 e0       	ldi	r23, 0x00	; 0
     d62:	40 e0       	ldi	r20, 0x00	; 0
     d64:	50 e0       	ldi	r21, 0x00	; 0
     d66:	24 e0       	ldi	r18, 0x04	; 4
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	delay_ms(250);
     d6e:	8a ef       	ldi	r24, 0xFA	; 250
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	
	
	fill(0);	// E  
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
	delay_ms(70);
     d7c:	86 e4       	ldi	r24, 0x46	; 70
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	line_z(0, 0, 0, 4, 1);	
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	60 e0       	ldi	r22, 0x00	; 0
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	40 e0       	ldi	r20, 0x00	; 0
     d8e:	50 e0       	ldi	r21, 0x00	; 0
     d90:	24 e0       	ldi	r18, 0x04	; 4
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	line_y(0, 0, 0, 4, 1);
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	60 e0       	ldi	r22, 0x00	; 0
     d9e:	70 e0       	ldi	r23, 0x00	; 0
     da0:	40 e0       	ldi	r20, 0x00	; 0
     da2:	50 e0       	ldi	r21, 0x00	; 0
     da4:	24 e0       	ldi	r18, 0x04	; 4
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	line_y(2, 0, 0, 4, 1);
     dac:	82 e0       	ldi	r24, 0x02	; 2
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	60 e0       	ldi	r22, 0x00	; 0
     db2:	70 e0       	ldi	r23, 0x00	; 0
     db4:	40 e0       	ldi	r20, 0x00	; 0
     db6:	50 e0       	ldi	r21, 0x00	; 0
     db8:	24 e0       	ldi	r18, 0x04	; 4
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	line_y(4, 0, 0, 4, 1);
     dc0:	84 e0       	ldi	r24, 0x04	; 4
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	60 e0       	ldi	r22, 0x00	; 0
     dc6:	70 e0       	ldi	r23, 0x00	; 0
     dc8:	40 e0       	ldi	r20, 0x00	; 0
     dca:	50 e0       	ldi	r21, 0x00	; 0
     dcc:	24 e0       	ldi	r18, 0x04	; 4
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	delay_ms(250);
     dd4:	8a ef       	ldi	r24, 0xFA	; 250
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	
	fill(0);     // S
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
	delay_ms(70);
     de2:	86 e4       	ldi	r24, 0x46	; 70
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	setLED(0, 0, 3);	
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	43 e0       	ldi	r20, 0x03	; 3
     df4:	50 e0       	ldi	r21, 0x00	; 0
     df6:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
	setLED(0, 4, 1);	
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	64 e0       	ldi	r22, 0x04	; 4
     e00:	70 e0       	ldi	r23, 0x00	; 0
     e02:	41 e0       	ldi	r20, 0x01	; 1
     e04:	50 e0       	ldi	r21, 0x00	; 0
     e06:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
	line_y(0, 0, 0, 4, 1);
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	60 e0       	ldi	r22, 0x00	; 0
     e10:	70 e0       	ldi	r23, 0x00	; 0
     e12:	40 e0       	ldi	r20, 0x00	; 0
     e14:	50 e0       	ldi	r21, 0x00	; 0
     e16:	24 e0       	ldi	r18, 0x04	; 4
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	line_y(2, 0, 0, 4, 1);
     e1e:	82 e0       	ldi	r24, 0x02	; 2
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	60 e0       	ldi	r22, 0x00	; 0
     e24:	70 e0       	ldi	r23, 0x00	; 0
     e26:	40 e0       	ldi	r20, 0x00	; 0
     e28:	50 e0       	ldi	r21, 0x00	; 0
     e2a:	24 e0       	ldi	r18, 0x04	; 4
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	line_y(4, 0, 0, 4, 1);
     e32:	84 e0       	ldi	r24, 0x04	; 4
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	60 e0       	ldi	r22, 0x00	; 0
     e38:	70 e0       	ldi	r23, 0x00	; 0
     e3a:	40 e0       	ldi	r20, 0x00	; 0
     e3c:	50 e0       	ldi	r21, 0x00	; 0
     e3e:	24 e0       	ldi	r18, 0x04	; 4
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	clrLED(0,4,0);
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	64 e0       	ldi	r22, 0x04	; 4
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	40 e0       	ldi	r20, 0x00	; 0
     e50:	50 e0       	ldi	r21, 0x00	; 0
     e52:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	clrLED(0,0,4);
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	60 e0       	ldi	r22, 0x00	; 0
     e5c:	70 e0       	ldi	r23, 0x00	; 0
     e5e:	44 e0       	ldi	r20, 0x04	; 4
     e60:	50 e0       	ldi	r21, 0x00	; 0
     e62:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	delay_ms(250);
     e66:	8a ef       	ldi	r24, 0xFA	; 250
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	
	fill(0);	// T
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
	delay_ms(70);
     e74:	86 e4       	ldi	r24, 0x46	; 70
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	line_y(4, 0, 0, 4, 1);
     e7c:	84 e0       	ldi	r24, 0x04	; 4
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	70 e0       	ldi	r23, 0x00	; 0
     e84:	40 e0       	ldi	r20, 0x00	; 0
     e86:	50 e0       	ldi	r21, 0x00	; 0
     e88:	24 e0       	ldi	r18, 0x04	; 4
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	line_z(0, 2, 0, 4, 1);
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	62 e0       	ldi	r22, 0x02	; 2
     e96:	70 e0       	ldi	r23, 0x00	; 0
     e98:	40 e0       	ldi	r20, 0x00	; 0
     e9a:	50 e0       	ldi	r21, 0x00	; 0
     e9c:	24 e0       	ldi	r18, 0x04	; 4
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	delay_ms(250);
     ea4:	8a ef       	ldi	r24, 0xFA	; 250
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
		
	fill(0);	// E
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
	delay_ms(70);
     eb2:	86 e4       	ldi	r24, 0x46	; 70
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	line_z(0, 0, 0, 4, 1);	
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	60 e0       	ldi	r22, 0x00	; 0
     ec0:	70 e0       	ldi	r23, 0x00	; 0
     ec2:	40 e0       	ldi	r20, 0x00	; 0
     ec4:	50 e0       	ldi	r21, 0x00	; 0
     ec6:	24 e0       	ldi	r18, 0x04	; 4
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	line_y(0, 0, 0, 4, 1);
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	60 e0       	ldi	r22, 0x00	; 0
     ed4:	70 e0       	ldi	r23, 0x00	; 0
     ed6:	40 e0       	ldi	r20, 0x00	; 0
     ed8:	50 e0       	ldi	r21, 0x00	; 0
     eda:	24 e0       	ldi	r18, 0x04	; 4
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	line_y(2, 0, 0, 4, 1);
     ee2:	82 e0       	ldi	r24, 0x02	; 2
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	60 e0       	ldi	r22, 0x00	; 0
     ee8:	70 e0       	ldi	r23, 0x00	; 0
     eea:	40 e0       	ldi	r20, 0x00	; 0
     eec:	50 e0       	ldi	r21, 0x00	; 0
     eee:	24 e0       	ldi	r18, 0x04	; 4
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	line_y(4, 0, 0, 4, 1);
     ef6:	84 e0       	ldi	r24, 0x04	; 4
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	60 e0       	ldi	r22, 0x00	; 0
     efc:	70 e0       	ldi	r23, 0x00	; 0
     efe:	40 e0       	ldi	r20, 0x00	; 0
     f00:	50 e0       	ldi	r21, 0x00	; 0
     f02:	24 e0       	ldi	r18, 0x04	; 4
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	delay_ms(250);
     f0a:	8a ef       	ldi	r24, 0xFA	; 250
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	
	fill(0);	// C
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
	delay_ms(70);
     f18:	86 e4       	ldi	r24, 0x46	; 70
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	line_z(0, 0, 0, 4, 1);	
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	60 e0       	ldi	r22, 0x00	; 0
     f26:	70 e0       	ldi	r23, 0x00	; 0
     f28:	40 e0       	ldi	r20, 0x00	; 0
     f2a:	50 e0       	ldi	r21, 0x00	; 0
     f2c:	24 e0       	ldi	r18, 0x04	; 4
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	line_y(0, 0, 0, 4, 1);
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	60 e0       	ldi	r22, 0x00	; 0
     f3a:	70 e0       	ldi	r23, 0x00	; 0
     f3c:	40 e0       	ldi	r20, 0x00	; 0
     f3e:	50 e0       	ldi	r21, 0x00	; 0
     f40:	24 e0       	ldi	r18, 0x04	; 4
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	line_y(4, 0, 0, 4, 1);
     f48:	84 e0       	ldi	r24, 0x04	; 4
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	60 e0       	ldi	r22, 0x00	; 0
     f4e:	70 e0       	ldi	r23, 0x00	; 0
     f50:	40 e0       	ldi	r20, 0x00	; 0
     f52:	50 e0       	ldi	r21, 0x00	; 0
     f54:	24 e0       	ldi	r18, 0x04	; 4
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	delay_ms(250);
     f5c:	8a ef       	ldi	r24, 0xFA	; 250
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	
	fill(0);	// W
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
	delay_ms(270);
     f6a:	8e e0       	ldi	r24, 0x0E	; 14
     f6c:	91 e0       	ldi	r25, 0x01	; 1
     f6e:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	line_z(0, 0, 0, 4, 1);	
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	60 e0       	ldi	r22, 0x00	; 0
     f78:	70 e0       	ldi	r23, 0x00	; 0
     f7a:	40 e0       	ldi	r20, 0x00	; 0
     f7c:	50 e0       	ldi	r21, 0x00	; 0
     f7e:	24 e0       	ldi	r18, 0x04	; 4
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	line_z(0, 4, 0, 4, 1);
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	64 e0       	ldi	r22, 0x04	; 4
     f8c:	70 e0       	ldi	r23, 0x00	; 0
     f8e:	40 e0       	ldi	r20, 0x00	; 0
     f90:	50 e0       	ldi	r21, 0x00	; 0
     f92:	24 e0       	ldi	r18, 0x04	; 4
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	setLED(0, 1, 1);
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	61 e0       	ldi	r22, 0x01	; 1
     fa0:	70 e0       	ldi	r23, 0x00	; 0
     fa2:	41 e0       	ldi	r20, 0x01	; 1
     fa4:	50 e0       	ldi	r21, 0x00	; 0
     fa6:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
	setLED(0, 2, 2);
     faa:	80 e0       	ldi	r24, 0x00	; 0
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	62 e0       	ldi	r22, 0x02	; 2
     fb0:	70 e0       	ldi	r23, 0x00	; 0
     fb2:	42 e0       	ldi	r20, 0x02	; 2
     fb4:	50 e0       	ldi	r21, 0x00	; 0
     fb6:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
	setLED(0, 3, 1);
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	63 e0       	ldi	r22, 0x03	; 3
     fc0:	70 e0       	ldi	r23, 0x00	; 0
     fc2:	41 e0       	ldi	r20, 0x01	; 1
     fc4:	50 e0       	ldi	r21, 0x00	; 0
     fc6:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
	delay_ms(250); 
     fca:	8a ef       	ldi	r24, 0xFA	; 250
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	
	fill(0);	// H
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
	delay_ms(70);  
     fd8:	86 e4       	ldi	r24, 0x46	; 70
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	line_z(0, 0, 0, 4, 1);	
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	60 e0       	ldi	r22, 0x00	; 0
     fe6:	70 e0       	ldi	r23, 0x00	; 0
     fe8:	40 e0       	ldi	r20, 0x00	; 0
     fea:	50 e0       	ldi	r21, 0x00	; 0
     fec:	24 e0       	ldi	r18, 0x04	; 4
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	line_z(0, 4, 0, 4, 1);
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	64 e0       	ldi	r22, 0x04	; 4
     ffa:	70 e0       	ldi	r23, 0x00	; 0
     ffc:	40 e0       	ldi	r20, 0x00	; 0
     ffe:	50 e0       	ldi	r21, 0x00	; 0
    1000:	24 e0       	ldi	r18, 0x04	; 4
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	line_y(2, 0, 0, 4, 1);	
    1008:	82 e0       	ldi	r24, 0x02	; 2
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	60 e0       	ldi	r22, 0x00	; 0
    100e:	70 e0       	ldi	r23, 0x00	; 0
    1010:	40 e0       	ldi	r20, 0x00	; 0
    1012:	50 e0       	ldi	r21, 0x00	; 0
    1014:	24 e0       	ldi	r18, 0x04	; 4
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	delay_ms(250);
    101c:	8a ef       	ldi	r24, 0xFA	; 250
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	
	fill(0);	// A
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
	delay_ms(70);  
    102a:	86 e4       	ldi	r24, 0x46	; 70
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	line_z(0, 0, 0, 4, 1);	
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	60 e0       	ldi	r22, 0x00	; 0
    1038:	70 e0       	ldi	r23, 0x00	; 0
    103a:	40 e0       	ldi	r20, 0x00	; 0
    103c:	50 e0       	ldi	r21, 0x00	; 0
    103e:	24 e0       	ldi	r18, 0x04	; 4
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	line_z(0, 4, 0, 4, 1);
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	64 e0       	ldi	r22, 0x04	; 4
    104c:	70 e0       	ldi	r23, 0x00	; 0
    104e:	40 e0       	ldi	r20, 0x00	; 0
    1050:	50 e0       	ldi	r21, 0x00	; 0
    1052:	24 e0       	ldi	r18, 0x04	; 4
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	line_y(2, 0, 0, 4, 1);	
    105a:	82 e0       	ldi	r24, 0x02	; 2
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	60 e0       	ldi	r22, 0x00	; 0
    1060:	70 e0       	ldi	r23, 0x00	; 0
    1062:	40 e0       	ldi	r20, 0x00	; 0
    1064:	50 e0       	ldi	r21, 0x00	; 0
    1066:	24 e0       	ldi	r18, 0x04	; 4
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	line_y(4, 0, 0, 4, 1);	
    106e:	84 e0       	ldi	r24, 0x04	; 4
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	60 e0       	ldi	r22, 0x00	; 0
    1074:	70 e0       	ldi	r23, 0x00	; 0
    1076:	40 e0       	ldi	r20, 0x00	; 0
    1078:	50 e0       	ldi	r21, 0x00	; 0
    107a:	24 e0       	ldi	r18, 0x04	; 4
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	clrLED(0, 0, 4);
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	60 e0       	ldi	r22, 0x00	; 0
    1088:	70 e0       	ldi	r23, 0x00	; 0
    108a:	44 e0       	ldi	r20, 0x04	; 4
    108c:	50 e0       	ldi	r21, 0x00	; 0
    108e:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	clrLED(0, 4, 4);
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	64 e0       	ldi	r22, 0x04	; 4
    1098:	70 e0       	ldi	r23, 0x00	; 0
    109a:	44 e0       	ldi	r20, 0x04	; 4
    109c:	50 e0       	ldi	r21, 0x00	; 0
    109e:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	delay_ms(250);
    10a2:	8a ef       	ldi	r24, 0xFA	; 250
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	fill(0);
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
	
	fill(0);	// T
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
	delay_ms(70);
    10b6:	86 e4       	ldi	r24, 0x46	; 70
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	line_y(4, 0, 0, 4, 1);
    10be:	84 e0       	ldi	r24, 0x04	; 4
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	60 e0       	ldi	r22, 0x00	; 0
    10c4:	70 e0       	ldi	r23, 0x00	; 0
    10c6:	40 e0       	ldi	r20, 0x00	; 0
    10c8:	50 e0       	ldi	r21, 0x00	; 0
    10ca:	24 e0       	ldi	r18, 0x04	; 4
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	line_z(0, 2, 0, 4, 1);
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	62 e0       	ldi	r22, 0x02	; 2
    10d8:	70 e0       	ldi	r23, 0x00	; 0
    10da:	40 e0       	ldi	r20, 0x00	; 0
    10dc:	50 e0       	ldi	r21, 0x00	; 0
    10de:	24 e0       	ldi	r18, 0x04	; 4
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	delay_ms(250);
    10e6:	8a ef       	ldi	r24, 0xFA	; 250
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	
	fill(0);	// I
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
	delay_ms(270);
    10f4:	8e e0       	ldi	r24, 0x0E	; 14
    10f6:	91 e0       	ldi	r25, 0x01	; 1
    10f8:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	line_z(0, 2, 0, 4, 1);
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	62 e0       	ldi	r22, 0x02	; 2
    1102:	70 e0       	ldi	r23, 0x00	; 0
    1104:	40 e0       	ldi	r20, 0x00	; 0
    1106:	50 e0       	ldi	r21, 0x00	; 0
    1108:	24 e0       	ldi	r18, 0x04	; 4
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	setLED(0,1,0);
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	61 e0       	ldi	r22, 0x01	; 1
    1116:	70 e0       	ldi	r23, 0x00	; 0
    1118:	40 e0       	ldi	r20, 0x00	; 0
    111a:	50 e0       	ldi	r21, 0x00	; 0
    111c:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
	setLED(0,3,0);	
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	63 e0       	ldi	r22, 0x03	; 3
    1126:	70 e0       	ldi	r23, 0x00	; 0
    1128:	40 e0       	ldi	r20, 0x00	; 0
    112a:	50 e0       	ldi	r21, 0x00	; 0
    112c:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
	setLED(0,1,4);
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	61 e0       	ldi	r22, 0x01	; 1
    1136:	70 e0       	ldi	r23, 0x00	; 0
    1138:	44 e0       	ldi	r20, 0x04	; 4
    113a:	50 e0       	ldi	r21, 0x00	; 0
    113c:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
	setLED(0,3,4);	
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	63 e0       	ldi	r22, 0x03	; 3
    1146:	70 e0       	ldi	r23, 0x00	; 0
    1148:	44 e0       	ldi	r20, 0x04	; 4
    114a:	50 e0       	ldi	r21, 0x00	; 0
    114c:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
	delay_ms(250);
    1150:	8a ef       	ldi	r24, 0xFA	; 250
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	
	fill(0);     // S
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
	delay_ms(70);
    115e:	86 e4       	ldi	r24, 0x46	; 70
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	setLED(0, 0, 3);	
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	60 e0       	ldi	r22, 0x00	; 0
    116c:	70 e0       	ldi	r23, 0x00	; 0
    116e:	43 e0       	ldi	r20, 0x03	; 3
    1170:	50 e0       	ldi	r21, 0x00	; 0
    1172:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
	setLED(0, 4, 1);	
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	64 e0       	ldi	r22, 0x04	; 4
    117c:	70 e0       	ldi	r23, 0x00	; 0
    117e:	41 e0       	ldi	r20, 0x01	; 1
    1180:	50 e0       	ldi	r21, 0x00	; 0
    1182:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
	line_y(0, 0, 0, 4, 1);
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	60 e0       	ldi	r22, 0x00	; 0
    118c:	70 e0       	ldi	r23, 0x00	; 0
    118e:	40 e0       	ldi	r20, 0x00	; 0
    1190:	50 e0       	ldi	r21, 0x00	; 0
    1192:	24 e0       	ldi	r18, 0x04	; 4
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	line_y(2, 0, 0, 4, 1);
    119a:	82 e0       	ldi	r24, 0x02	; 2
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	60 e0       	ldi	r22, 0x00	; 0
    11a0:	70 e0       	ldi	r23, 0x00	; 0
    11a2:	40 e0       	ldi	r20, 0x00	; 0
    11a4:	50 e0       	ldi	r21, 0x00	; 0
    11a6:	24 e0       	ldi	r18, 0x04	; 4
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	line_y(4, 0, 0, 4, 1);
    11ae:	84 e0       	ldi	r24, 0x04	; 4
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	60 e0       	ldi	r22, 0x00	; 0
    11b4:	70 e0       	ldi	r23, 0x00	; 0
    11b6:	40 e0       	ldi	r20, 0x00	; 0
    11b8:	50 e0       	ldi	r21, 0x00	; 0
    11ba:	24 e0       	ldi	r18, 0x04	; 4
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	clrLED(0,4,0);
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	64 e0       	ldi	r22, 0x04	; 4
    11c8:	70 e0       	ldi	r23, 0x00	; 0
    11ca:	40 e0       	ldi	r20, 0x00	; 0
    11cc:	50 e0       	ldi	r21, 0x00	; 0
    11ce:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	clrLED(0,0,4);
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	60 e0       	ldi	r22, 0x00	; 0
    11d8:	70 e0       	ldi	r23, 0x00	; 0
    11da:	44 e0       	ldi	r20, 0x04	; 4
    11dc:	50 e0       	ldi	r21, 0x00	; 0
    11de:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	delay_ms(250);
    11e2:	8a ef       	ldi	r24, 0xFA	; 250
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	
	fill(0);     // Y
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
	delay_ms(270);
    11f0:	8e e0       	ldi	r24, 0x0E	; 14
    11f2:	91 e0       	ldi	r25, 0x01	; 1
    11f4:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	line_z(0, 2, 0, 2, 1);
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	62 e0       	ldi	r22, 0x02	; 2
    11fe:	70 e0       	ldi	r23, 0x00	; 0
    1200:	40 e0       	ldi	r20, 0x00	; 0
    1202:	50 e0       	ldi	r21, 0x00	; 0
    1204:	22 e0       	ldi	r18, 0x02	; 2
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	setLED(0, 1, 3);	
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	61 e0       	ldi	r22, 0x01	; 1
    1212:	70 e0       	ldi	r23, 0x00	; 0
    1214:	43 e0       	ldi	r20, 0x03	; 3
    1216:	50 e0       	ldi	r21, 0x00	; 0
    1218:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
	setLED(0, 3, 3);
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	63 e0       	ldi	r22, 0x03	; 3
    1222:	70 e0       	ldi	r23, 0x00	; 0
    1224:	43 e0       	ldi	r20, 0x03	; 3
    1226:	50 e0       	ldi	r21, 0x00	; 0
    1228:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
	setLED(0, 0, 4);	
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	60 e0       	ldi	r22, 0x00	; 0
    1232:	70 e0       	ldi	r23, 0x00	; 0
    1234:	44 e0       	ldi	r20, 0x04	; 4
    1236:	50 e0       	ldi	r21, 0x00	; 0
    1238:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
	setLED(0, 4, 4);
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	64 e0       	ldi	r22, 0x04	; 4
    1242:	70 e0       	ldi	r23, 0x00	; 0
    1244:	44 e0       	ldi	r20, 0x04	; 4
    1246:	50 e0       	ldi	r21, 0x00	; 0
    1248:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
	delay_ms(250); 
    124c:	8a ef       	ldi	r24, 0xFA	; 250
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	
	fill(0);	// O
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
	delay_ms(70);  
    125a:	86 e4       	ldi	r24, 0x46	; 70
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	line_z(0, 0, 0, 4, 1);	
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	60 e0       	ldi	r22, 0x00	; 0
    1268:	70 e0       	ldi	r23, 0x00	; 0
    126a:	40 e0       	ldi	r20, 0x00	; 0
    126c:	50 e0       	ldi	r21, 0x00	; 0
    126e:	24 e0       	ldi	r18, 0x04	; 4
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	line_z(0, 4, 0, 4, 1);	
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	64 e0       	ldi	r22, 0x04	; 4
    127c:	70 e0       	ldi	r23, 0x00	; 0
    127e:	40 e0       	ldi	r20, 0x00	; 0
    1280:	50 e0       	ldi	r21, 0x00	; 0
    1282:	24 e0       	ldi	r18, 0x04	; 4
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	line_y(0, 0, 0, 4, 1);
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	60 e0       	ldi	r22, 0x00	; 0
    1290:	70 e0       	ldi	r23, 0x00	; 0
    1292:	40 e0       	ldi	r20, 0x00	; 0
    1294:	50 e0       	ldi	r21, 0x00	; 0
    1296:	24 e0       	ldi	r18, 0x04	; 4
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	line_y(4, 0, 0, 4, 1);
    129e:	84 e0       	ldi	r24, 0x04	; 4
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	60 e0       	ldi	r22, 0x00	; 0
    12a4:	70 e0       	ldi	r23, 0x00	; 0
    12a6:	40 e0       	ldi	r20, 0x00	; 0
    12a8:	50 e0       	ldi	r21, 0x00	; 0
    12aa:	24 e0       	ldi	r18, 0x04	; 4
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	clrLED(0, 0, 0);
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	60 e0       	ldi	r22, 0x00	; 0
    12b8:	70 e0       	ldi	r23, 0x00	; 0
    12ba:	40 e0       	ldi	r20, 0x00	; 0
    12bc:	50 e0       	ldi	r21, 0x00	; 0
    12be:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	clrLED(0, 0, 4);
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	60 e0       	ldi	r22, 0x00	; 0
    12c8:	70 e0       	ldi	r23, 0x00	; 0
    12ca:	44 e0       	ldi	r20, 0x04	; 4
    12cc:	50 e0       	ldi	r21, 0x00	; 0
    12ce:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	clrLED(0, 4, 0);
    12d2:	80 e0       	ldi	r24, 0x00	; 0
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	64 e0       	ldi	r22, 0x04	; 4
    12d8:	70 e0       	ldi	r23, 0x00	; 0
    12da:	40 e0       	ldi	r20, 0x00	; 0
    12dc:	50 e0       	ldi	r21, 0x00	; 0
    12de:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	clrLED(0, 4, 4);
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	64 e0       	ldi	r22, 0x04	; 4
    12e8:	70 e0       	ldi	r23, 0x00	; 0
    12ea:	44 e0       	ldi	r20, 0x04	; 4
    12ec:	50 e0       	ldi	r21, 0x00	; 0
    12ee:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	delay_ms(250); 
    12f2:	8a ef       	ldi	r24, 0xFA	; 250
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	
	fill(0);	// U
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
	delay_ms(70);  
    1300:	86 e4       	ldi	r24, 0x46	; 70
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	line_z(0, 0, 0, 4, 1);	
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	60 e0       	ldi	r22, 0x00	; 0
    130e:	70 e0       	ldi	r23, 0x00	; 0
    1310:	40 e0       	ldi	r20, 0x00	; 0
    1312:	50 e0       	ldi	r21, 0x00	; 0
    1314:	24 e0       	ldi	r18, 0x04	; 4
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	line_z(0, 4, 0, 4, 1);	
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	64 e0       	ldi	r22, 0x04	; 4
    1322:	70 e0       	ldi	r23, 0x00	; 0
    1324:	40 e0       	ldi	r20, 0x00	; 0
    1326:	50 e0       	ldi	r21, 0x00	; 0
    1328:	24 e0       	ldi	r18, 0x04	; 4
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	line_y(0, 0, 0, 4, 1);
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	60 e0       	ldi	r22, 0x00	; 0
    1336:	70 e0       	ldi	r23, 0x00	; 0
    1338:	40 e0       	ldi	r20, 0x00	; 0
    133a:	50 e0       	ldi	r21, 0x00	; 0
    133c:	24 e0       	ldi	r18, 0x04	; 4
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	clrLED(0, 0, 0);
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	60 e0       	ldi	r22, 0x00	; 0
    134a:	70 e0       	ldi	r23, 0x00	; 0
    134c:	40 e0       	ldi	r20, 0x00	; 0
    134e:	50 e0       	ldi	r21, 0x00	; 0
    1350:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	clrLED(0, 4, 0);
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	64 e0       	ldi	r22, 0x04	; 4
    135a:	70 e0       	ldi	r23, 0x00	; 0
    135c:	40 e0       	ldi	r20, 0x00	; 0
    135e:	50 e0       	ldi	r21, 0x00	; 0
    1360:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	delay_ms(250); 
    1364:	8a ef       	ldi	r24, 0xFA	; 250
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	
	fill(0);	// R
    136c:	80 e0       	ldi	r24, 0x00	; 0
    136e:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
	delay_ms(70);
    1372:	86 e4       	ldi	r24, 0x46	; 70
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	line_z(0, 0, 0, 4, 1);		
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	60 e0       	ldi	r22, 0x00	; 0
    1380:	70 e0       	ldi	r23, 0x00	; 0
    1382:	40 e0       	ldi	r20, 0x00	; 0
    1384:	50 e0       	ldi	r21, 0x00	; 0
    1386:	24 e0       	ldi	r18, 0x04	; 4
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	line_y(2, 0, 0, 4, 1);
    138e:	82 e0       	ldi	r24, 0x02	; 2
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	60 e0       	ldi	r22, 0x00	; 0
    1394:	70 e0       	ldi	r23, 0x00	; 0
    1396:	40 e0       	ldi	r20, 0x00	; 0
    1398:	50 e0       	ldi	r21, 0x00	; 0
    139a:	24 e0       	ldi	r18, 0x04	; 4
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	line_y(4, 0, 0, 4, 1);
    13a2:	84 e0       	ldi	r24, 0x04	; 4
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	60 e0       	ldi	r22, 0x00	; 0
    13a8:	70 e0       	ldi	r23, 0x00	; 0
    13aa:	40 e0       	ldi	r20, 0x00	; 0
    13ac:	50 e0       	ldi	r21, 0x00	; 0
    13ae:	24 e0       	ldi	r18, 0x04	; 4
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	clrLED(0, 4, 2);
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	64 e0       	ldi	r22, 0x04	; 4
    13bc:	70 e0       	ldi	r23, 0x00	; 0
    13be:	42 e0       	ldi	r20, 0x02	; 2
    13c0:	50 e0       	ldi	r21, 0x00	; 0
    13c2:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	clrLED(0, 4, 4);
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	64 e0       	ldi	r22, 0x04	; 4
    13cc:	70 e0       	ldi	r23, 0x00	; 0
    13ce:	44 e0       	ldi	r20, 0x04	; 4
    13d0:	50 e0       	ldi	r21, 0x00	; 0
    13d2:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	setLED(0, 4, 0);
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	64 e0       	ldi	r22, 0x04	; 4
    13dc:	70 e0       	ldi	r23, 0x00	; 0
    13de:	40 e0       	ldi	r20, 0x00	; 0
    13e0:	50 e0       	ldi	r21, 0x00	; 0
    13e2:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
	setLED(0, 3, 1);
    13e6:	80 e0       	ldi	r24, 0x00	; 0
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	63 e0       	ldi	r22, 0x03	; 3
    13ec:	70 e0       	ldi	r23, 0x00	; 0
    13ee:	41 e0       	ldi	r20, 0x01	; 1
    13f0:	50 e0       	ldi	r21, 0x00	; 0
    13f2:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
	setLED(0, 4, 3);
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	64 e0       	ldi	r22, 0x04	; 4
    13fc:	70 e0       	ldi	r23, 0x00	; 0
    13fe:	43 e0       	ldi	r20, 0x03	; 3
    1400:	50 e0       	ldi	r21, 0x00	; 0
    1402:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
	delay_ms(250); 
    1406:	8a ef       	ldi	r24, 0xFA	; 250
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	
	fill(0);	// P
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
	delay_ms(270);
    1414:	8e e0       	ldi	r24, 0x0E	; 14
    1416:	91 e0       	ldi	r25, 0x01	; 1
    1418:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	line_z(0, 0, 0, 4, 1);		
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	60 e0       	ldi	r22, 0x00	; 0
    1422:	70 e0       	ldi	r23, 0x00	; 0
    1424:	40 e0       	ldi	r20, 0x00	; 0
    1426:	50 e0       	ldi	r21, 0x00	; 0
    1428:	24 e0       	ldi	r18, 0x04	; 4
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	line_y(2, 0, 0, 4, 1);
    1430:	82 e0       	ldi	r24, 0x02	; 2
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	60 e0       	ldi	r22, 0x00	; 0
    1436:	70 e0       	ldi	r23, 0x00	; 0
    1438:	40 e0       	ldi	r20, 0x00	; 0
    143a:	50 e0       	ldi	r21, 0x00	; 0
    143c:	24 e0       	ldi	r18, 0x04	; 4
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	line_y(4, 0, 0, 4, 1);
    1444:	84 e0       	ldi	r24, 0x04	; 4
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	60 e0       	ldi	r22, 0x00	; 0
    144a:	70 e0       	ldi	r23, 0x00	; 0
    144c:	40 e0       	ldi	r20, 0x00	; 0
    144e:	50 e0       	ldi	r21, 0x00	; 0
    1450:	24 e0       	ldi	r18, 0x04	; 4
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	clrLED(0, 4, 2);
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	64 e0       	ldi	r22, 0x04	; 4
    145e:	70 e0       	ldi	r23, 0x00	; 0
    1460:	42 e0       	ldi	r20, 0x02	; 2
    1462:	50 e0       	ldi	r21, 0x00	; 0
    1464:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	clrLED(0, 4, 4);
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	64 e0       	ldi	r22, 0x04	; 4
    146e:	70 e0       	ldi	r23, 0x00	; 0
    1470:	44 e0       	ldi	r20, 0x04	; 4
    1472:	50 e0       	ldi	r21, 0x00	; 0
    1474:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	setLED(0, 4, 3);
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	64 e0       	ldi	r22, 0x04	; 4
    147e:	70 e0       	ldi	r23, 0x00	; 0
    1480:	43 e0       	ldi	r20, 0x03	; 3
    1482:	50 e0       	ldi	r21, 0x00	; 0
    1484:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
	delay_ms(250); 
    1488:	8a ef       	ldi	r24, 0xFA	; 250
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	
	fill(0);	// R
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
	delay_ms(70);
    1496:	86 e4       	ldi	r24, 0x46	; 70
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	line_z(0, 0, 0, 4, 1);		
    149e:	80 e0       	ldi	r24, 0x00	; 0
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	60 e0       	ldi	r22, 0x00	; 0
    14a4:	70 e0       	ldi	r23, 0x00	; 0
    14a6:	40 e0       	ldi	r20, 0x00	; 0
    14a8:	50 e0       	ldi	r21, 0x00	; 0
    14aa:	24 e0       	ldi	r18, 0x04	; 4
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	line_y(2, 0, 0, 4, 1);
    14b2:	82 e0       	ldi	r24, 0x02	; 2
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	60 e0       	ldi	r22, 0x00	; 0
    14b8:	70 e0       	ldi	r23, 0x00	; 0
    14ba:	40 e0       	ldi	r20, 0x00	; 0
    14bc:	50 e0       	ldi	r21, 0x00	; 0
    14be:	24 e0       	ldi	r18, 0x04	; 4
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	line_y(4, 0, 0, 4, 1);
    14c6:	84 e0       	ldi	r24, 0x04	; 4
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	60 e0       	ldi	r22, 0x00	; 0
    14cc:	70 e0       	ldi	r23, 0x00	; 0
    14ce:	40 e0       	ldi	r20, 0x00	; 0
    14d0:	50 e0       	ldi	r21, 0x00	; 0
    14d2:	24 e0       	ldi	r18, 0x04	; 4
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	clrLED(0, 4, 2);
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	64 e0       	ldi	r22, 0x04	; 4
    14e0:	70 e0       	ldi	r23, 0x00	; 0
    14e2:	42 e0       	ldi	r20, 0x02	; 2
    14e4:	50 e0       	ldi	r21, 0x00	; 0
    14e6:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	clrLED(0, 4, 4);
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	64 e0       	ldi	r22, 0x04	; 4
    14f0:	70 e0       	ldi	r23, 0x00	; 0
    14f2:	44 e0       	ldi	r20, 0x04	; 4
    14f4:	50 e0       	ldi	r21, 0x00	; 0
    14f6:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	setLED(0, 4, 0);
    14fa:	80 e0       	ldi	r24, 0x00	; 0
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	64 e0       	ldi	r22, 0x04	; 4
    1500:	70 e0       	ldi	r23, 0x00	; 0
    1502:	40 e0       	ldi	r20, 0x00	; 0
    1504:	50 e0       	ldi	r21, 0x00	; 0
    1506:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
	setLED(0, 3, 1);
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	63 e0       	ldi	r22, 0x03	; 3
    1510:	70 e0       	ldi	r23, 0x00	; 0
    1512:	41 e0       	ldi	r20, 0x01	; 1
    1514:	50 e0       	ldi	r21, 0x00	; 0
    1516:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
	setLED(0, 4, 3);
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	64 e0       	ldi	r22, 0x04	; 4
    1520:	70 e0       	ldi	r23, 0x00	; 0
    1522:	43 e0       	ldi	r20, 0x03	; 3
    1524:	50 e0       	ldi	r21, 0x00	; 0
    1526:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
	delay_ms(250); 
    152a:	8a ef       	ldi	r24, 0xFA	; 250
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	
	fill(0);	// O
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
	delay_ms(70);  
    1538:	86 e4       	ldi	r24, 0x46	; 70
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	line_z(0, 0, 0, 4, 1);	
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	60 e0       	ldi	r22, 0x00	; 0
    1546:	70 e0       	ldi	r23, 0x00	; 0
    1548:	40 e0       	ldi	r20, 0x00	; 0
    154a:	50 e0       	ldi	r21, 0x00	; 0
    154c:	24 e0       	ldi	r18, 0x04	; 4
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	line_z(0, 4, 0, 4, 1);	
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	64 e0       	ldi	r22, 0x04	; 4
    155a:	70 e0       	ldi	r23, 0x00	; 0
    155c:	40 e0       	ldi	r20, 0x00	; 0
    155e:	50 e0       	ldi	r21, 0x00	; 0
    1560:	24 e0       	ldi	r18, 0x04	; 4
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	line_y(0, 0, 0, 4, 1);
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	60 e0       	ldi	r22, 0x00	; 0
    156e:	70 e0       	ldi	r23, 0x00	; 0
    1570:	40 e0       	ldi	r20, 0x00	; 0
    1572:	50 e0       	ldi	r21, 0x00	; 0
    1574:	24 e0       	ldi	r18, 0x04	; 4
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	line_y(4, 0, 0, 4, 1);
    157c:	84 e0       	ldi	r24, 0x04	; 4
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	60 e0       	ldi	r22, 0x00	; 0
    1582:	70 e0       	ldi	r23, 0x00	; 0
    1584:	40 e0       	ldi	r20, 0x00	; 0
    1586:	50 e0       	ldi	r21, 0x00	; 0
    1588:	24 e0       	ldi	r18, 0x04	; 4
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	clrLED(0, 0, 0);
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	60 e0       	ldi	r22, 0x00	; 0
    1596:	70 e0       	ldi	r23, 0x00	; 0
    1598:	40 e0       	ldi	r20, 0x00	; 0
    159a:	50 e0       	ldi	r21, 0x00	; 0
    159c:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	clrLED(0, 0, 4);
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	60 e0       	ldi	r22, 0x00	; 0
    15a6:	70 e0       	ldi	r23, 0x00	; 0
    15a8:	44 e0       	ldi	r20, 0x04	; 4
    15aa:	50 e0       	ldi	r21, 0x00	; 0
    15ac:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	clrLED(0, 4, 0);
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	64 e0       	ldi	r22, 0x04	; 4
    15b6:	70 e0       	ldi	r23, 0x00	; 0
    15b8:	40 e0       	ldi	r20, 0x00	; 0
    15ba:	50 e0       	ldi	r21, 0x00	; 0
    15bc:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	clrLED(0, 4, 4);
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	64 e0       	ldi	r22, 0x04	; 4
    15c6:	70 e0       	ldi	r23, 0x00	; 0
    15c8:	44 e0       	ldi	r20, 0x04	; 4
    15ca:	50 e0       	ldi	r21, 0x00	; 0
    15cc:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	delay_ms(250);
    15d0:	8a ef       	ldi	r24, 0xFA	; 250
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	
	fill(0);	// F
    15d8:	80 e0       	ldi	r24, 0x00	; 0
    15da:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
	delay_ms(70);
    15de:	86 e4       	ldi	r24, 0x46	; 70
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	line_z(0, 0, 0, 4, 1);	
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	60 e0       	ldi	r22, 0x00	; 0
    15ec:	70 e0       	ldi	r23, 0x00	; 0
    15ee:	40 e0       	ldi	r20, 0x00	; 0
    15f0:	50 e0       	ldi	r21, 0x00	; 0
    15f2:	24 e0       	ldi	r18, 0x04	; 4
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	line_y(2, 0, 0, 4, 1);
    15fa:	82 e0       	ldi	r24, 0x02	; 2
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	60 e0       	ldi	r22, 0x00	; 0
    1600:	70 e0       	ldi	r23, 0x00	; 0
    1602:	40 e0       	ldi	r20, 0x00	; 0
    1604:	50 e0       	ldi	r21, 0x00	; 0
    1606:	24 e0       	ldi	r18, 0x04	; 4
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	line_y(4, 0, 0, 4, 1);
    160e:	84 e0       	ldi	r24, 0x04	; 4
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	60 e0       	ldi	r22, 0x00	; 0
    1614:	70 e0       	ldi	r23, 0x00	; 0
    1616:	40 e0       	ldi	r20, 0x00	; 0
    1618:	50 e0       	ldi	r21, 0x00	; 0
    161a:	24 e0       	ldi	r18, 0x04	; 4
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	delay_ms(250);
    1622:	8a ef       	ldi	r24, 0xFA	; 250
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	
	fill(0);	// E
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
	delay_ms(70);  
    1630:	86 e4       	ldi	r24, 0x46	; 70
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	line_z(0, 0, 0, 4, 1);	
    1638:	80 e0       	ldi	r24, 0x00	; 0
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	60 e0       	ldi	r22, 0x00	; 0
    163e:	70 e0       	ldi	r23, 0x00	; 0
    1640:	40 e0       	ldi	r20, 0x00	; 0
    1642:	50 e0       	ldi	r21, 0x00	; 0
    1644:	24 e0       	ldi	r18, 0x04	; 4
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	line_y(0, 0, 0, 4, 1);
    164c:	80 e0       	ldi	r24, 0x00	; 0
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	60 e0       	ldi	r22, 0x00	; 0
    1652:	70 e0       	ldi	r23, 0x00	; 0
    1654:	40 e0       	ldi	r20, 0x00	; 0
    1656:	50 e0       	ldi	r21, 0x00	; 0
    1658:	24 e0       	ldi	r18, 0x04	; 4
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	line_y(2, 0, 0, 4, 1);
    1660:	82 e0       	ldi	r24, 0x02	; 2
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	60 e0       	ldi	r22, 0x00	; 0
    1666:	70 e0       	ldi	r23, 0x00	; 0
    1668:	40 e0       	ldi	r20, 0x00	; 0
    166a:	50 e0       	ldi	r21, 0x00	; 0
    166c:	24 e0       	ldi	r18, 0x04	; 4
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	line_y(4, 0, 0, 4, 1);
    1674:	84 e0       	ldi	r24, 0x04	; 4
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	60 e0       	ldi	r22, 0x00	; 0
    167a:	70 e0       	ldi	r23, 0x00	; 0
    167c:	40 e0       	ldi	r20, 0x00	; 0
    167e:	50 e0       	ldi	r21, 0x00	; 0
    1680:	24 e0       	ldi	r18, 0x04	; 4
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	delay_ms(250);
    1688:	8a ef       	ldi	r24, 0xFA	; 250
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	
		fill(0);     // S
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
	delay_ms(70);
    1696:	86 e4       	ldi	r24, 0x46	; 70
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	setLED(0, 0, 3);	
    169e:	80 e0       	ldi	r24, 0x00	; 0
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	60 e0       	ldi	r22, 0x00	; 0
    16a4:	70 e0       	ldi	r23, 0x00	; 0
    16a6:	43 e0       	ldi	r20, 0x03	; 3
    16a8:	50 e0       	ldi	r21, 0x00	; 0
    16aa:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
	setLED(0, 4, 1);	
    16ae:	80 e0       	ldi	r24, 0x00	; 0
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	64 e0       	ldi	r22, 0x04	; 4
    16b4:	70 e0       	ldi	r23, 0x00	; 0
    16b6:	41 e0       	ldi	r20, 0x01	; 1
    16b8:	50 e0       	ldi	r21, 0x00	; 0
    16ba:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
	line_y(0, 0, 0, 4, 1);
    16be:	80 e0       	ldi	r24, 0x00	; 0
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	60 e0       	ldi	r22, 0x00	; 0
    16c4:	70 e0       	ldi	r23, 0x00	; 0
    16c6:	40 e0       	ldi	r20, 0x00	; 0
    16c8:	50 e0       	ldi	r21, 0x00	; 0
    16ca:	24 e0       	ldi	r18, 0x04	; 4
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	line_y(2, 0, 0, 4, 1);
    16d2:	82 e0       	ldi	r24, 0x02	; 2
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	60 e0       	ldi	r22, 0x00	; 0
    16d8:	70 e0       	ldi	r23, 0x00	; 0
    16da:	40 e0       	ldi	r20, 0x00	; 0
    16dc:	50 e0       	ldi	r21, 0x00	; 0
    16de:	24 e0       	ldi	r18, 0x04	; 4
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	line_y(4, 0, 0, 4, 1);
    16e6:	84 e0       	ldi	r24, 0x04	; 4
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	60 e0       	ldi	r22, 0x00	; 0
    16ec:	70 e0       	ldi	r23, 0x00	; 0
    16ee:	40 e0       	ldi	r20, 0x00	; 0
    16f0:	50 e0       	ldi	r21, 0x00	; 0
    16f2:	24 e0       	ldi	r18, 0x04	; 4
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	clrLED(0,4,0);
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	64 e0       	ldi	r22, 0x04	; 4
    1700:	70 e0       	ldi	r23, 0x00	; 0
    1702:	40 e0       	ldi	r20, 0x00	; 0
    1704:	50 e0       	ldi	r21, 0x00	; 0
    1706:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	clrLED(0,0,4);
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	60 e0       	ldi	r22, 0x00	; 0
    1710:	70 e0       	ldi	r23, 0x00	; 0
    1712:	44 e0       	ldi	r20, 0x04	; 4
    1714:	50 e0       	ldi	r21, 0x00	; 0
    1716:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	delay_ms(250);	
    171a:	8a ef       	ldi	r24, 0xFA	; 250
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	
	fill(0);     // S
    1722:	80 e0       	ldi	r24, 0x00	; 0
    1724:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
	delay_ms(70);
    1728:	86 e4       	ldi	r24, 0x46	; 70
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	setLED(0, 0, 3);	
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	60 e0       	ldi	r22, 0x00	; 0
    1736:	70 e0       	ldi	r23, 0x00	; 0
    1738:	43 e0       	ldi	r20, 0x03	; 3
    173a:	50 e0       	ldi	r21, 0x00	; 0
    173c:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
	setLED(0, 4, 1);	
    1740:	80 e0       	ldi	r24, 0x00	; 0
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	64 e0       	ldi	r22, 0x04	; 4
    1746:	70 e0       	ldi	r23, 0x00	; 0
    1748:	41 e0       	ldi	r20, 0x01	; 1
    174a:	50 e0       	ldi	r21, 0x00	; 0
    174c:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
	line_y(0, 0, 0, 4, 1);
    1750:	80 e0       	ldi	r24, 0x00	; 0
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	60 e0       	ldi	r22, 0x00	; 0
    1756:	70 e0       	ldi	r23, 0x00	; 0
    1758:	40 e0       	ldi	r20, 0x00	; 0
    175a:	50 e0       	ldi	r21, 0x00	; 0
    175c:	24 e0       	ldi	r18, 0x04	; 4
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	line_y(2, 0, 0, 4, 1);
    1764:	82 e0       	ldi	r24, 0x02	; 2
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	60 e0       	ldi	r22, 0x00	; 0
    176a:	70 e0       	ldi	r23, 0x00	; 0
    176c:	40 e0       	ldi	r20, 0x00	; 0
    176e:	50 e0       	ldi	r21, 0x00	; 0
    1770:	24 e0       	ldi	r18, 0x04	; 4
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	line_y(4, 0, 0, 4, 1);
    1778:	84 e0       	ldi	r24, 0x04	; 4
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	60 e0       	ldi	r22, 0x00	; 0
    177e:	70 e0       	ldi	r23, 0x00	; 0
    1780:	40 e0       	ldi	r20, 0x00	; 0
    1782:	50 e0       	ldi	r21, 0x00	; 0
    1784:	24 e0       	ldi	r18, 0x04	; 4
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	clrLED(0,4,0);
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	64 e0       	ldi	r22, 0x04	; 4
    1792:	70 e0       	ldi	r23, 0x00	; 0
    1794:	40 e0       	ldi	r20, 0x00	; 0
    1796:	50 e0       	ldi	r21, 0x00	; 0
    1798:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	clrLED(0,0,4);
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	60 e0       	ldi	r22, 0x00	; 0
    17a2:	70 e0       	ldi	r23, 0x00	; 0
    17a4:	44 e0       	ldi	r20, 0x04	; 4
    17a6:	50 e0       	ldi	r21, 0x00	; 0
    17a8:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	delay_ms(250);
    17ac:	8a ef       	ldi	r24, 0xFA	; 250
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	
	fill(0);	// I
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
	delay_ms(70);
    17ba:	86 e4       	ldi	r24, 0x46	; 70
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	line_z(0, 2, 0, 4, 1);
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	62 e0       	ldi	r22, 0x02	; 2
    17c8:	70 e0       	ldi	r23, 0x00	; 0
    17ca:	40 e0       	ldi	r20, 0x00	; 0
    17cc:	50 e0       	ldi	r21, 0x00	; 0
    17ce:	24 e0       	ldi	r18, 0x04	; 4
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	setLED(0,1,0);
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	61 e0       	ldi	r22, 0x01	; 1
    17dc:	70 e0       	ldi	r23, 0x00	; 0
    17de:	40 e0       	ldi	r20, 0x00	; 0
    17e0:	50 e0       	ldi	r21, 0x00	; 0
    17e2:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
	setLED(0,3,0);	
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	63 e0       	ldi	r22, 0x03	; 3
    17ec:	70 e0       	ldi	r23, 0x00	; 0
    17ee:	40 e0       	ldi	r20, 0x00	; 0
    17f0:	50 e0       	ldi	r21, 0x00	; 0
    17f2:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
	setLED(0,1,4);
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	61 e0       	ldi	r22, 0x01	; 1
    17fc:	70 e0       	ldi	r23, 0x00	; 0
    17fe:	44 e0       	ldi	r20, 0x04	; 4
    1800:	50 e0       	ldi	r21, 0x00	; 0
    1802:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
	setLED(0,3,4);	
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	63 e0       	ldi	r22, 0x03	; 3
    180c:	70 e0       	ldi	r23, 0x00	; 0
    180e:	44 e0       	ldi	r20, 0x04	; 4
    1810:	50 e0       	ldi	r21, 0x00	; 0
    1812:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
	delay_ms(250);
    1816:	8a ef       	ldi	r24, 0xFA	; 250
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	
	fill(0);	// O
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
	delay_ms(70);  
    1824:	86 e4       	ldi	r24, 0x46	; 70
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	line_z(0, 0, 0, 4, 1);	
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	60 e0       	ldi	r22, 0x00	; 0
    1832:	70 e0       	ldi	r23, 0x00	; 0
    1834:	40 e0       	ldi	r20, 0x00	; 0
    1836:	50 e0       	ldi	r21, 0x00	; 0
    1838:	24 e0       	ldi	r18, 0x04	; 4
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	line_z(0, 4, 0, 4, 1);	
    1840:	80 e0       	ldi	r24, 0x00	; 0
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	64 e0       	ldi	r22, 0x04	; 4
    1846:	70 e0       	ldi	r23, 0x00	; 0
    1848:	40 e0       	ldi	r20, 0x00	; 0
    184a:	50 e0       	ldi	r21, 0x00	; 0
    184c:	24 e0       	ldi	r18, 0x04	; 4
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	line_y(0, 0, 0, 4, 1);
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	60 e0       	ldi	r22, 0x00	; 0
    185a:	70 e0       	ldi	r23, 0x00	; 0
    185c:	40 e0       	ldi	r20, 0x00	; 0
    185e:	50 e0       	ldi	r21, 0x00	; 0
    1860:	24 e0       	ldi	r18, 0x04	; 4
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	line_y(4, 0, 0, 4, 1);
    1868:	84 e0       	ldi	r24, 0x04	; 4
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	60 e0       	ldi	r22, 0x00	; 0
    186e:	70 e0       	ldi	r23, 0x00	; 0
    1870:	40 e0       	ldi	r20, 0x00	; 0
    1872:	50 e0       	ldi	r21, 0x00	; 0
    1874:	24 e0       	ldi	r18, 0x04	; 4
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	clrLED(0, 0, 0);
    187c:	80 e0       	ldi	r24, 0x00	; 0
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	60 e0       	ldi	r22, 0x00	; 0
    1882:	70 e0       	ldi	r23, 0x00	; 0
    1884:	40 e0       	ldi	r20, 0x00	; 0
    1886:	50 e0       	ldi	r21, 0x00	; 0
    1888:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	clrLED(0, 0, 4);
    188c:	80 e0       	ldi	r24, 0x00	; 0
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	60 e0       	ldi	r22, 0x00	; 0
    1892:	70 e0       	ldi	r23, 0x00	; 0
    1894:	44 e0       	ldi	r20, 0x04	; 4
    1896:	50 e0       	ldi	r21, 0x00	; 0
    1898:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	clrLED(0, 4, 0);
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	64 e0       	ldi	r22, 0x04	; 4
    18a2:	70 e0       	ldi	r23, 0x00	; 0
    18a4:	40 e0       	ldi	r20, 0x00	; 0
    18a6:	50 e0       	ldi	r21, 0x00	; 0
    18a8:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	clrLED(0, 4, 4);
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	64 e0       	ldi	r22, 0x04	; 4
    18b2:	70 e0       	ldi	r23, 0x00	; 0
    18b4:	44 e0       	ldi	r20, 0x04	; 4
    18b6:	50 e0       	ldi	r21, 0x00	; 0
    18b8:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	delay_ms(250); 
    18bc:	8a ef       	ldi	r24, 0xFA	; 250
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	
	fill(0);	// N
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
	delay_ms(70);  
    18ca:	86 e4       	ldi	r24, 0x46	; 70
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	line_z(0, 0, 0, 4, 1);	
    18d2:	80 e0       	ldi	r24, 0x00	; 0
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	60 e0       	ldi	r22, 0x00	; 0
    18d8:	70 e0       	ldi	r23, 0x00	; 0
    18da:	40 e0       	ldi	r20, 0x00	; 0
    18dc:	50 e0       	ldi	r21, 0x00	; 0
    18de:	24 e0       	ldi	r18, 0x04	; 4
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	line_z(0, 4, 0, 4, 1);
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	64 e0       	ldi	r22, 0x04	; 4
    18ec:	70 e0       	ldi	r23, 0x00	; 0
    18ee:	40 e0       	ldi	r20, 0x00	; 0
    18f0:	50 e0       	ldi	r21, 0x00	; 0
    18f2:	24 e0       	ldi	r18, 0x04	; 4
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	setLED(0, 1, 3);
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	61 e0       	ldi	r22, 0x01	; 1
    1900:	70 e0       	ldi	r23, 0x00	; 0
    1902:	43 e0       	ldi	r20, 0x03	; 3
    1904:	50 e0       	ldi	r21, 0x00	; 0
    1906:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
	setLED(0, 2, 2);
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	62 e0       	ldi	r22, 0x02	; 2
    1910:	70 e0       	ldi	r23, 0x00	; 0
    1912:	42 e0       	ldi	r20, 0x02	; 2
    1914:	50 e0       	ldi	r21, 0x00	; 0
    1916:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
	setLED(0, 3, 1);
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	63 e0       	ldi	r22, 0x03	; 3
    1920:	70 e0       	ldi	r23, 0x00	; 0
    1922:	41 e0       	ldi	r20, 0x01	; 1
    1924:	50 e0       	ldi	r21, 0x00	; 0
    1926:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
	delay_ms(250); 
    192a:	8a ef       	ldi	r24, 0xFA	; 250
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	
	fill(0);	// ?
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
	delay_ms(70);  
    1938:	86 e4       	ldi	r24, 0x46	; 70
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	line_y(4, 0, 1, 3, 1);	
    1940:	84 e0       	ldi	r24, 0x04	; 4
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	60 e0       	ldi	r22, 0x00	; 0
    1946:	70 e0       	ldi	r23, 0x00	; 0
    1948:	41 e0       	ldi	r20, 0x01	; 1
    194a:	50 e0       	ldi	r21, 0x00	; 0
    194c:	23 e0       	ldi	r18, 0x03	; 3
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	setLED(0, 0, 3);
    1954:	80 e0       	ldi	r24, 0x00	; 0
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	60 e0       	ldi	r22, 0x00	; 0
    195a:	70 e0       	ldi	r23, 0x00	; 0
    195c:	43 e0       	ldi	r20, 0x03	; 3
    195e:	50 e0       	ldi	r21, 0x00	; 0
    1960:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
	setLED(0, 3, 2);
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	63 e0       	ldi	r22, 0x03	; 3
    196a:	70 e0       	ldi	r23, 0x00	; 0
    196c:	42 e0       	ldi	r20, 0x02	; 2
    196e:	50 e0       	ldi	r21, 0x00	; 0
    1970:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
	setLED(0, 2, 2);
    1974:	80 e0       	ldi	r24, 0x00	; 0
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	62 e0       	ldi	r22, 0x02	; 2
    197a:	70 e0       	ldi	r23, 0x00	; 0
    197c:	42 e0       	ldi	r20, 0x02	; 2
    197e:	50 e0       	ldi	r21, 0x00	; 0
    1980:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
	setLED(0, 2, 0);
    1984:	80 e0       	ldi	r24, 0x00	; 0
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	62 e0       	ldi	r22, 0x02	; 2
    198a:	70 e0       	ldi	r23, 0x00	; 0
    198c:	40 e0       	ldi	r20, 0x00	; 0
    198e:	50 e0       	ldi	r21, 0x00	; 0
    1990:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
	setLED(0, 4, 3);
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	64 e0       	ldi	r22, 0x04	; 4
    199a:	70 e0       	ldi	r23, 0x00	; 0
    199c:	43 e0       	ldi	r20, 0x03	; 3
    199e:	50 e0       	ldi	r21, 0x00	; 0
    19a0:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
	delay_ms(650);
    19a4:	8a e8       	ldi	r24, 0x8A	; 138
    19a6:	92 e0       	ldi	r25, 0x02	; 2
    19a8:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	
	fill(0);	// A
    19ac:	80 e0       	ldi	r24, 0x00	; 0
    19ae:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
	delay_ms(70);  
    19b2:	86 e4       	ldi	r24, 0x46	; 70
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	line_z(0, 0, 0, 4, 1);	
    19ba:	80 e0       	ldi	r24, 0x00	; 0
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	60 e0       	ldi	r22, 0x00	; 0
    19c0:	70 e0       	ldi	r23, 0x00	; 0
    19c2:	40 e0       	ldi	r20, 0x00	; 0
    19c4:	50 e0       	ldi	r21, 0x00	; 0
    19c6:	24 e0       	ldi	r18, 0x04	; 4
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	line_z(0, 4, 0, 4, 1);
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	64 e0       	ldi	r22, 0x04	; 4
    19d4:	70 e0       	ldi	r23, 0x00	; 0
    19d6:	40 e0       	ldi	r20, 0x00	; 0
    19d8:	50 e0       	ldi	r21, 0x00	; 0
    19da:	24 e0       	ldi	r18, 0x04	; 4
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	line_y(2, 0, 0, 4, 1);	
    19e2:	82 e0       	ldi	r24, 0x02	; 2
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	60 e0       	ldi	r22, 0x00	; 0
    19e8:	70 e0       	ldi	r23, 0x00	; 0
    19ea:	40 e0       	ldi	r20, 0x00	; 0
    19ec:	50 e0       	ldi	r21, 0x00	; 0
    19ee:	24 e0       	ldi	r18, 0x04	; 4
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	line_y(4, 0, 0, 4, 1);	
    19f6:	84 e0       	ldi	r24, 0x04	; 4
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	60 e0       	ldi	r22, 0x00	; 0
    19fc:	70 e0       	ldi	r23, 0x00	; 0
    19fe:	40 e0       	ldi	r20, 0x00	; 0
    1a00:	50 e0       	ldi	r21, 0x00	; 0
    1a02:	24 e0       	ldi	r18, 0x04	; 4
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	clrLED(0, 0, 4);
    1a0a:	80 e0       	ldi	r24, 0x00	; 0
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	60 e0       	ldi	r22, 0x00	; 0
    1a10:	70 e0       	ldi	r23, 0x00	; 0
    1a12:	44 e0       	ldi	r20, 0x04	; 4
    1a14:	50 e0       	ldi	r21, 0x00	; 0
    1a16:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	clrLED(0, 4, 4);
    1a1a:	80 e0       	ldi	r24, 0x00	; 0
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	64 e0       	ldi	r22, 0x04	; 4
    1a20:	70 e0       	ldi	r23, 0x00	; 0
    1a22:	44 e0       	ldi	r20, 0x04	; 4
    1a24:	50 e0       	ldi	r21, 0x00	; 0
    1a26:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	delay_ms(250);
    1a2a:	8a ef       	ldi	r24, 0xFA	; 250
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	fill(0);
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
	
	fill(0);	// U
    1a38:	80 e0       	ldi	r24, 0x00	; 0
    1a3a:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
	delay_ms(70);  
    1a3e:	86 e4       	ldi	r24, 0x46	; 70
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	line_z(0, 0, 0, 4, 1);	
    1a46:	80 e0       	ldi	r24, 0x00	; 0
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	60 e0       	ldi	r22, 0x00	; 0
    1a4c:	70 e0       	ldi	r23, 0x00	; 0
    1a4e:	40 e0       	ldi	r20, 0x00	; 0
    1a50:	50 e0       	ldi	r21, 0x00	; 0
    1a52:	24 e0       	ldi	r18, 0x04	; 4
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	line_z(0, 4, 0, 4, 1);	
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	64 e0       	ldi	r22, 0x04	; 4
    1a60:	70 e0       	ldi	r23, 0x00	; 0
    1a62:	40 e0       	ldi	r20, 0x00	; 0
    1a64:	50 e0       	ldi	r21, 0x00	; 0
    1a66:	24 e0       	ldi	r18, 0x04	; 4
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	line_y(0, 0, 0, 4, 1);
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	60 e0       	ldi	r22, 0x00	; 0
    1a74:	70 e0       	ldi	r23, 0x00	; 0
    1a76:	40 e0       	ldi	r20, 0x00	; 0
    1a78:	50 e0       	ldi	r21, 0x00	; 0
    1a7a:	24 e0       	ldi	r18, 0x04	; 4
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	clrLED(0, 0, 0);
    1a82:	80 e0       	ldi	r24, 0x00	; 0
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	60 e0       	ldi	r22, 0x00	; 0
    1a88:	70 e0       	ldi	r23, 0x00	; 0
    1a8a:	40 e0       	ldi	r20, 0x00	; 0
    1a8c:	50 e0       	ldi	r21, 0x00	; 0
    1a8e:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	clrLED(0, 4, 0);
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	64 e0       	ldi	r22, 0x04	; 4
    1a98:	70 e0       	ldi	r23, 0x00	; 0
    1a9a:	40 e0       	ldi	r20, 0x00	; 0
    1a9c:	50 e0       	ldi	r21, 0x00	; 0
    1a9e:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	delay_ms(250);
    1aa2:	8a ef       	ldi	r24, 0xFA	; 250
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	
	fill(0);	// !!!
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
	delay_ms(70);
    1ab0:	86 e4       	ldi	r24, 0x46	; 70
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	line_z(0, 2, 0, 4, 1);
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	62 e0       	ldi	r22, 0x02	; 2
    1abe:	70 e0       	ldi	r23, 0x00	; 0
    1ac0:	40 e0       	ldi	r20, 0x00	; 0
    1ac2:	50 e0       	ldi	r21, 0x00	; 0
    1ac4:	24 e0       	ldi	r18, 0x04	; 4
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	
	
	line_z(0, 0, 0, 4, 1);
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	60 e0       	ldi	r22, 0x00	; 0
    1ad2:	70 e0       	ldi	r23, 0x00	; 0
    1ad4:	40 e0       	ldi	r20, 0x00	; 0
    1ad6:	50 e0       	ldi	r21, 0x00	; 0
    1ad8:	24 e0       	ldi	r18, 0x04	; 4
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	clrLED(0, 2, 1);
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	62 e0       	ldi	r22, 0x02	; 2
    1ae6:	70 e0       	ldi	r23, 0x00	; 0
    1ae8:	41 e0       	ldi	r20, 0x01	; 1
    1aea:	50 e0       	ldi	r21, 0x00	; 0
    1aec:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	clrLED(0, 0, 1);
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	60 e0       	ldi	r22, 0x00	; 0
    1af6:	70 e0       	ldi	r23, 0x00	; 0
    1af8:	41 e0       	ldi	r20, 0x01	; 1
    1afa:	50 e0       	ldi	r21, 0x00	; 0
    1afc:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	line_z(0, 4, 0, 4, 1);
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	64 e0       	ldi	r22, 0x04	; 4
    1b06:	70 e0       	ldi	r23, 0x00	; 0
    1b08:	40 e0       	ldi	r20, 0x00	; 0
    1b0a:	50 e0       	ldi	r21, 0x00	; 0
    1b0c:	24 e0       	ldi	r18, 0x04	; 4
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	clrLED(0, 4, 1);	
    1b14:	80 e0       	ldi	r24, 0x00	; 0
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	64 e0       	ldi	r22, 0x04	; 4
    1b1a:	70 e0       	ldi	r23, 0x00	; 0
    1b1c:	41 e0       	ldi	r20, 0x01	; 1
    1b1e:	50 e0       	ldi	r21, 0x00	; 0
    1b20:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	
	fill(0);	// A
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
	delay_ms(70);  
    1b2a:	86 e4       	ldi	r24, 0x46	; 70
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	line_z(0, 0, 0, 4, 1);	
    1b32:	80 e0       	ldi	r24, 0x00	; 0
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	60 e0       	ldi	r22, 0x00	; 0
    1b38:	70 e0       	ldi	r23, 0x00	; 0
    1b3a:	40 e0       	ldi	r20, 0x00	; 0
    1b3c:	50 e0       	ldi	r21, 0x00	; 0
    1b3e:	24 e0       	ldi	r18, 0x04	; 4
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	line_z(0, 4, 0, 4, 1);
    1b46:	80 e0       	ldi	r24, 0x00	; 0
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	64 e0       	ldi	r22, 0x04	; 4
    1b4c:	70 e0       	ldi	r23, 0x00	; 0
    1b4e:	40 e0       	ldi	r20, 0x00	; 0
    1b50:	50 e0       	ldi	r21, 0x00	; 0
    1b52:	24 e0       	ldi	r18, 0x04	; 4
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	line_y(2, 0, 0, 4, 1);	
    1b5a:	82 e0       	ldi	r24, 0x02	; 2
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	60 e0       	ldi	r22, 0x00	; 0
    1b60:	70 e0       	ldi	r23, 0x00	; 0
    1b62:	40 e0       	ldi	r20, 0x00	; 0
    1b64:	50 e0       	ldi	r21, 0x00	; 0
    1b66:	24 e0       	ldi	r18, 0x04	; 4
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	line_y(4, 0, 0, 4, 1);	
    1b6e:	84 e0       	ldi	r24, 0x04	; 4
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	60 e0       	ldi	r22, 0x00	; 0
    1b74:	70 e0       	ldi	r23, 0x00	; 0
    1b76:	40 e0       	ldi	r20, 0x00	; 0
    1b78:	50 e0       	ldi	r21, 0x00	; 0
    1b7a:	24 e0       	ldi	r18, 0x04	; 4
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	clrLED(0, 0, 4);
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	60 e0       	ldi	r22, 0x00	; 0
    1b88:	70 e0       	ldi	r23, 0x00	; 0
    1b8a:	44 e0       	ldi	r20, 0x04	; 4
    1b8c:	50 e0       	ldi	r21, 0x00	; 0
    1b8e:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	clrLED(0, 4, 4);
    1b92:	80 e0       	ldi	r24, 0x00	; 0
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	64 e0       	ldi	r22, 0x04	; 4
    1b98:	70 e0       	ldi	r23, 0x00	; 0
    1b9a:	44 e0       	ldi	r20, 0x04	; 4
    1b9c:	50 e0       	ldi	r21, 0x00	; 0
    1b9e:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	delay_ms(250);
    1ba2:	8a ef       	ldi	r24, 0xFA	; 250
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	fill(0);
    1baa:	80 e0       	ldi	r24, 0x00	; 0
    1bac:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
	
	fill(0);	// U
    1bb0:	80 e0       	ldi	r24, 0x00	; 0
    1bb2:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
	delay_ms(70);  
    1bb6:	86 e4       	ldi	r24, 0x46	; 70
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	line_z(0, 0, 0, 4, 1);	
    1bbe:	80 e0       	ldi	r24, 0x00	; 0
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	60 e0       	ldi	r22, 0x00	; 0
    1bc4:	70 e0       	ldi	r23, 0x00	; 0
    1bc6:	40 e0       	ldi	r20, 0x00	; 0
    1bc8:	50 e0       	ldi	r21, 0x00	; 0
    1bca:	24 e0       	ldi	r18, 0x04	; 4
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	line_z(0, 4, 0, 4, 1);	
    1bd2:	80 e0       	ldi	r24, 0x00	; 0
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	64 e0       	ldi	r22, 0x04	; 4
    1bd8:	70 e0       	ldi	r23, 0x00	; 0
    1bda:	40 e0       	ldi	r20, 0x00	; 0
    1bdc:	50 e0       	ldi	r21, 0x00	; 0
    1bde:	24 e0       	ldi	r18, 0x04	; 4
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	line_y(0, 0, 0, 4, 1);
    1be6:	80 e0       	ldi	r24, 0x00	; 0
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	60 e0       	ldi	r22, 0x00	; 0
    1bec:	70 e0       	ldi	r23, 0x00	; 0
    1bee:	40 e0       	ldi	r20, 0x00	; 0
    1bf0:	50 e0       	ldi	r21, 0x00	; 0
    1bf2:	24 e0       	ldi	r18, 0x04	; 4
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	clrLED(0, 0, 0);
    1bfa:	80 e0       	ldi	r24, 0x00	; 0
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	60 e0       	ldi	r22, 0x00	; 0
    1c00:	70 e0       	ldi	r23, 0x00	; 0
    1c02:	40 e0       	ldi	r20, 0x00	; 0
    1c04:	50 e0       	ldi	r21, 0x00	; 0
    1c06:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	clrLED(0, 4, 0);
    1c0a:	80 e0       	ldi	r24, 0x00	; 0
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	64 e0       	ldi	r22, 0x04	; 4
    1c10:	70 e0       	ldi	r23, 0x00	; 0
    1c12:	40 e0       	ldi	r20, 0x00	; 0
    1c14:	50 e0       	ldi	r21, 0x00	; 0
    1c16:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	delay_ms(250);
    1c1a:	8a ef       	ldi	r24, 0xFA	; 250
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	
	fill(0);	// !!!
    1c22:	80 e0       	ldi	r24, 0x00	; 0
    1c24:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
	delay_ms(70);
    1c28:	86 e4       	ldi	r24, 0x46	; 70
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	line_z(0, 2, 0, 4, 1);
    1c30:	80 e0       	ldi	r24, 0x00	; 0
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	62 e0       	ldi	r22, 0x02	; 2
    1c36:	70 e0       	ldi	r23, 0x00	; 0
    1c38:	40 e0       	ldi	r20, 0x00	; 0
    1c3a:	50 e0       	ldi	r21, 0x00	; 0
    1c3c:	24 e0       	ldi	r18, 0x04	; 4
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	
	
	line_z(0, 0, 0, 4, 1);
    1c44:	80 e0       	ldi	r24, 0x00	; 0
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	60 e0       	ldi	r22, 0x00	; 0
    1c4a:	70 e0       	ldi	r23, 0x00	; 0
    1c4c:	40 e0       	ldi	r20, 0x00	; 0
    1c4e:	50 e0       	ldi	r21, 0x00	; 0
    1c50:	24 e0       	ldi	r18, 0x04	; 4
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	clrLED(0, 2, 1);
    1c58:	80 e0       	ldi	r24, 0x00	; 0
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	62 e0       	ldi	r22, 0x02	; 2
    1c5e:	70 e0       	ldi	r23, 0x00	; 0
    1c60:	41 e0       	ldi	r20, 0x01	; 1
    1c62:	50 e0       	ldi	r21, 0x00	; 0
    1c64:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	clrLED(0, 0, 1);
    1c68:	80 e0       	ldi	r24, 0x00	; 0
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	60 e0       	ldi	r22, 0x00	; 0
    1c6e:	70 e0       	ldi	r23, 0x00	; 0
    1c70:	41 e0       	ldi	r20, 0x01	; 1
    1c72:	50 e0       	ldi	r21, 0x00	; 0
    1c74:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	line_z(0, 4, 0, 4, 1);
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	64 e0       	ldi	r22, 0x04	; 4
    1c7e:	70 e0       	ldi	r23, 0x00	; 0
    1c80:	40 e0       	ldi	r20, 0x00	; 0
    1c82:	50 e0       	ldi	r21, 0x00	; 0
    1c84:	24 e0       	ldi	r18, 0x04	; 4
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	clrLED(0, 4, 1);	
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	64 e0       	ldi	r22, 0x04	; 4
    1c92:	70 e0       	ldi	r23, 0x00	; 0
    1c94:	41 e0       	ldi	r20, 0x01	; 1
    1c96:	50 e0       	ldi	r21, 0x00	; 0
    1c98:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	
	fill(0);	// A
    1c9c:	80 e0       	ldi	r24, 0x00	; 0
    1c9e:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
	delay_ms(70);  
    1ca2:	86 e4       	ldi	r24, 0x46	; 70
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	line_z(0, 0, 0, 4, 1);	
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	60 e0       	ldi	r22, 0x00	; 0
    1cb0:	70 e0       	ldi	r23, 0x00	; 0
    1cb2:	40 e0       	ldi	r20, 0x00	; 0
    1cb4:	50 e0       	ldi	r21, 0x00	; 0
    1cb6:	24 e0       	ldi	r18, 0x04	; 4
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	line_z(0, 4, 0, 4, 1);
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	64 e0       	ldi	r22, 0x04	; 4
    1cc4:	70 e0       	ldi	r23, 0x00	; 0
    1cc6:	40 e0       	ldi	r20, 0x00	; 0
    1cc8:	50 e0       	ldi	r21, 0x00	; 0
    1cca:	24 e0       	ldi	r18, 0x04	; 4
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	line_y(2, 0, 0, 4, 1);	
    1cd2:	82 e0       	ldi	r24, 0x02	; 2
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	60 e0       	ldi	r22, 0x00	; 0
    1cd8:	70 e0       	ldi	r23, 0x00	; 0
    1cda:	40 e0       	ldi	r20, 0x00	; 0
    1cdc:	50 e0       	ldi	r21, 0x00	; 0
    1cde:	24 e0       	ldi	r18, 0x04	; 4
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	line_y(4, 0, 0, 4, 1);	
    1ce6:	84 e0       	ldi	r24, 0x04	; 4
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	60 e0       	ldi	r22, 0x00	; 0
    1cec:	70 e0       	ldi	r23, 0x00	; 0
    1cee:	40 e0       	ldi	r20, 0x00	; 0
    1cf0:	50 e0       	ldi	r21, 0x00	; 0
    1cf2:	24 e0       	ldi	r18, 0x04	; 4
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	clrLED(0, 0, 4);
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	60 e0       	ldi	r22, 0x00	; 0
    1d00:	70 e0       	ldi	r23, 0x00	; 0
    1d02:	44 e0       	ldi	r20, 0x04	; 4
    1d04:	50 e0       	ldi	r21, 0x00	; 0
    1d06:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	clrLED(0, 4, 4);
    1d0a:	80 e0       	ldi	r24, 0x00	; 0
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	64 e0       	ldi	r22, 0x04	; 4
    1d10:	70 e0       	ldi	r23, 0x00	; 0
    1d12:	44 e0       	ldi	r20, 0x04	; 4
    1d14:	50 e0       	ldi	r21, 0x00	; 0
    1d16:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	delay_ms(250);
    1d1a:	8a ef       	ldi	r24, 0xFA	; 250
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	fill(0);
    1d22:	80 e0       	ldi	r24, 0x00	; 0
    1d24:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
	
	fill(0);	// U
    1d28:	80 e0       	ldi	r24, 0x00	; 0
    1d2a:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
	delay_ms(70);  
    1d2e:	86 e4       	ldi	r24, 0x46	; 70
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	line_z(0, 0, 0, 4, 1);	
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	60 e0       	ldi	r22, 0x00	; 0
    1d3c:	70 e0       	ldi	r23, 0x00	; 0
    1d3e:	40 e0       	ldi	r20, 0x00	; 0
    1d40:	50 e0       	ldi	r21, 0x00	; 0
    1d42:	24 e0       	ldi	r18, 0x04	; 4
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	line_z(0, 4, 0, 4, 1);	
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	64 e0       	ldi	r22, 0x04	; 4
    1d50:	70 e0       	ldi	r23, 0x00	; 0
    1d52:	40 e0       	ldi	r20, 0x00	; 0
    1d54:	50 e0       	ldi	r21, 0x00	; 0
    1d56:	24 e0       	ldi	r18, 0x04	; 4
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	line_y(0, 0, 0, 4, 1);
    1d5e:	80 e0       	ldi	r24, 0x00	; 0
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	60 e0       	ldi	r22, 0x00	; 0
    1d64:	70 e0       	ldi	r23, 0x00	; 0
    1d66:	40 e0       	ldi	r20, 0x00	; 0
    1d68:	50 e0       	ldi	r21, 0x00	; 0
    1d6a:	24 e0       	ldi	r18, 0x04	; 4
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	0e 94 4d 04 	call	0x89a	; 0x89a <line_y>
	clrLED(0, 0, 0);
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	60 e0       	ldi	r22, 0x00	; 0
    1d78:	70 e0       	ldi	r23, 0x00	; 0
    1d7a:	40 e0       	ldi	r20, 0x00	; 0
    1d7c:	50 e0       	ldi	r21, 0x00	; 0
    1d7e:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	clrLED(0, 4, 0);
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	64 e0       	ldi	r22, 0x04	; 4
    1d88:	70 e0       	ldi	r23, 0x00	; 0
    1d8a:	40 e0       	ldi	r20, 0x00	; 0
    1d8c:	50 e0       	ldi	r21, 0x00	; 0
    1d8e:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	delay_ms(250);
    1d92:	8a ef       	ldi	r24, 0xFA	; 250
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	
	fill(0);	// !!!
    1d9a:	80 e0       	ldi	r24, 0x00	; 0
    1d9c:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
	delay_ms(70);
    1da0:	86 e4       	ldi	r24, 0x46	; 70
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	line_z(0, 2, 0, 4, 1);
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	62 e0       	ldi	r22, 0x02	; 2
    1dae:	70 e0       	ldi	r23, 0x00	; 0
    1db0:	40 e0       	ldi	r20, 0x00	; 0
    1db2:	50 e0       	ldi	r21, 0x00	; 0
    1db4:	24 e0       	ldi	r18, 0x04	; 4
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	
	
	line_z(0, 0, 0, 4, 1);
    1dbc:	80 e0       	ldi	r24, 0x00	; 0
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	60 e0       	ldi	r22, 0x00	; 0
    1dc2:	70 e0       	ldi	r23, 0x00	; 0
    1dc4:	40 e0       	ldi	r20, 0x00	; 0
    1dc6:	50 e0       	ldi	r21, 0x00	; 0
    1dc8:	24 e0       	ldi	r18, 0x04	; 4
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	clrLED(0, 2, 1);
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	62 e0       	ldi	r22, 0x02	; 2
    1dd6:	70 e0       	ldi	r23, 0x00	; 0
    1dd8:	41 e0       	ldi	r20, 0x01	; 1
    1dda:	50 e0       	ldi	r21, 0x00	; 0
    1ddc:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	clrLED(0, 0, 1);
    1de0:	80 e0       	ldi	r24, 0x00	; 0
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	60 e0       	ldi	r22, 0x00	; 0
    1de6:	70 e0       	ldi	r23, 0x00	; 0
    1de8:	41 e0       	ldi	r20, 0x01	; 1
    1dea:	50 e0       	ldi	r21, 0x00	; 0
    1dec:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	line_z(0, 4, 0, 4, 1);
    1df0:	80 e0       	ldi	r24, 0x00	; 0
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	64 e0       	ldi	r22, 0x04	; 4
    1df6:	70 e0       	ldi	r23, 0x00	; 0
    1df8:	40 e0       	ldi	r20, 0x00	; 0
    1dfa:	50 e0       	ldi	r21, 0x00	; 0
    1dfc:	24 e0       	ldi	r18, 0x04	; 4
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <line_z>
	clrLED(0, 4, 1);	
    1e04:	80 e0       	ldi	r24, 0x00	; 0
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	64 e0       	ldi	r22, 0x04	; 4
    1e0a:	70 e0       	ldi	r23, 0x00	; 0
    1e0c:	41 e0       	ldi	r20, 0x01	; 1
    1e0e:	50 e0       	ldi	r21, 0x00	; 0
    1e10:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
	
	delay_ms(650);
    1e14:	8a e8       	ldi	r24, 0x8A	; 138
    1e16:	92 e0       	ldi	r25, 0x02	; 2
    1e18:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	fill(0);
    1e1c:	80 e0       	ldi	r24, 0x00	; 0
    1e1e:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
	delay_ms(650);
    1e22:	8a e8       	ldi	r24, 0x8A	; 138
    1e24:	92 e0       	ldi	r25, 0x02	; 2
    1e26:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	
	
}
    1e2a:	1f 91       	pop	r17
    1e2c:	0f 91       	pop	r16
    1e2e:	08 95       	ret

00001e30 <shiftBack2>:
       }
}
}

void shiftBack2()
{
    1e30:	ef 92       	push	r14
    1e32:	ff 92       	push	r15
    1e34:	0f 93       	push	r16
    1e36:	1f 93       	push	r17
    1e38:	cf 93       	push	r28
    1e3a:	df 93       	push	r29
    1e3c:	04 e0       	ldi	r16, 0x04	; 4
    1e3e:	10 e0       	ldi	r17, 0x00	; 0
    1e40:	1c c0       	rjmp	.+56     	; 0x1e7a <shiftBack2+0x4a>
    {
        for (j=0;j<1;j++)
        {
			for (k=0;k<5;k++)
            {
                if(getLED(i-1,j,k))
    1e42:	c7 01       	movw	r24, r14
    1e44:	60 e0       	ldi	r22, 0x00	; 0
    1e46:	70 e0       	ldi	r23, 0x00	; 0
    1e48:	ae 01       	movw	r20, r28
    1e4a:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <getLED>
    1e4e:	88 23       	and	r24, r24
    1e50:	39 f0       	breq	.+14     	; 0x1e60 <shiftBack2+0x30>
                    setLED(i,j,k);
    1e52:	c8 01       	movw	r24, r16
    1e54:	60 e0       	ldi	r22, 0x00	; 0
    1e56:	70 e0       	ldi	r23, 0x00	; 0
    1e58:	ae 01       	movw	r20, r28
    1e5a:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
    1e5e:	06 c0       	rjmp	.+12     	; 0x1e6c <shiftBack2+0x3c>
							   //clrLED(i-1,j,k);
                else
                    clrLED(i,j,k);
    1e60:	c8 01       	movw	r24, r16
    1e62:	60 e0       	ldi	r22, 0x00	; 0
    1e64:	70 e0       	ldi	r23, 0x00	; 0
    1e66:	ae 01       	movw	r20, r28
    1e68:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
int i,j,k;
    for (i=4;i>0;i--)
    {
        for (j=0;j<1;j++)
        {
			for (k=0;k<5;k++)
    1e6c:	21 96       	adiw	r28, 0x01	; 1
    1e6e:	c5 30       	cpi	r28, 0x05	; 5
    1e70:	d1 05       	cpc	r29, r1
    1e72:	39 f7       	brne	.-50     	; 0x1e42 <shiftBack2+0x12>
    1e74:	01 50       	subi	r16, 0x01	; 1
    1e76:	10 40       	sbci	r17, 0x00	; 0
}

void shiftBack2()
{
int i,j,k;
    for (i=4;i>0;i--)
    1e78:	39 f0       	breq	.+14     	; 0x1e88 <shiftBack2+0x58>
    1e7a:	c0 e0       	ldi	r28, 0x00	; 0
    1e7c:	d0 e0       	ldi	r29, 0x00	; 0
       }
}
}

void shiftBack2()
{
    1e7e:	78 01       	movw	r14, r16
    1e80:	08 94       	sec
    1e82:	e1 08       	sbc	r14, r1
    1e84:	f1 08       	sbc	r15, r1
    1e86:	dd cf       	rjmp	.-70     	; 0x1e42 <shiftBack2+0x12>
                    clrLED(i,j,k);
			}
        }
	}

}
    1e88:	df 91       	pop	r29
    1e8a:	cf 91       	pop	r28
    1e8c:	1f 91       	pop	r17
    1e8e:	0f 91       	pop	r16
    1e90:	ff 90       	pop	r15
    1e92:	ef 90       	pop	r14
    1e94:	08 95       	ret

00001e96 <shiftLeft>:

void shiftLeft()
{
    1e96:	ef 92       	push	r14
    1e98:	ff 92       	push	r15
    1e9a:	0f 93       	push	r16
    1e9c:	1f 93       	push	r17
    1e9e:	cf 93       	push	r28
    1ea0:	df 93       	push	r29
    1ea2:	00 e0       	ldi	r16, 0x00	; 0
    1ea4:	10 e0       	ldi	r17, 0x00	; 0
    1ea6:	1e c0       	rjmp	.+60     	; 0x1ee4 <shiftLeft+0x4e>

       for (j=0;j<4;j++)
       {
       for (k=0;k<5;k++)
       {
                       if(getLED(0,j+1,k)){
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	b7 01       	movw	r22, r14
    1eae:	ae 01       	movw	r20, r28
    1eb0:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <getLED>
    1eb4:	88 23       	and	r24, r24
    1eb6:	39 f0       	breq	.+14     	; 0x1ec6 <shiftLeft+0x30>
                            setLED(0,j,k);
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	b8 01       	movw	r22, r16
    1ebe:	ae 01       	movw	r20, r28
    1ec0:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
    1ec4:	06 c0       	rjmp	.+12     	; 0x1ed2 <shiftLeft+0x3c>
							//clrLED(0,j+1,k);
							  }
                       else
                               clrLED(0,j,k);
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	b8 01       	movw	r22, r16
    1ecc:	ae 01       	movw	r20, r28
    1ece:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>



       for (j=0;j<4;j++)
       {
       for (k=0;k<5;k++)
    1ed2:	21 96       	adiw	r28, 0x01	; 1
    1ed4:	c5 30       	cpi	r28, 0x05	; 5
    1ed6:	d1 05       	cpc	r29, r1
    1ed8:	39 f7       	brne	.-50     	; 0x1ea8 <shiftLeft+0x12>
    1eda:	0f 5f       	subi	r16, 0xFF	; 255
    1edc:	1f 4f       	sbci	r17, 0xFF	; 255
{
int i,j,k;



       for (j=0;j<4;j++)
    1ede:	04 30       	cpi	r16, 0x04	; 4
    1ee0:	11 05       	cpc	r17, r1
    1ee2:	39 f0       	breq	.+14     	; 0x1ef2 <shiftLeft+0x5c>
    1ee4:	c0 e0       	ldi	r28, 0x00	; 0
    1ee6:	d0 e0       	ldi	r29, 0x00	; 0
	}

}

void shiftLeft()
{
    1ee8:	78 01       	movw	r14, r16
    1eea:	08 94       	sec
    1eec:	e1 1c       	adc	r14, r1
    1eee:	f1 1c       	adc	r15, r1
    1ef0:	db cf       	rjmp	.-74     	; 0x1ea8 <shiftLeft+0x12>
		else
			clrLED(i,0,j);
		}
	
}*/
shiftBack2();
    1ef2:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <shiftBack2>


delay_ms(150);
    1ef6:	86 e9       	ldi	r24, 0x96	; 150
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
}
    1efe:	df 91       	pop	r29
    1f00:	cf 91       	pop	r28
    1f02:	1f 91       	pop	r17
    1f04:	0f 91       	pop	r16
    1f06:	ff 90       	pop	r15
    1f08:	ef 90       	pop	r14
    1f0a:	08 95       	ret

00001f0c <setLine>:
	
}


void setLine(int one, int two, int three, int four, int five)
{
    1f0c:	cf 92       	push	r12
    1f0e:	df 92       	push	r13
    1f10:	ef 92       	push	r14
    1f12:	ff 92       	push	r15
    1f14:	0f 93       	push	r16
    1f16:	1f 93       	push	r17
    1f18:	cf 93       	push	r28
    1f1a:	df 93       	push	r29
    1f1c:	eb 01       	movw	r28, r22
    1f1e:	7a 01       	movw	r14, r20
    1f20:	69 01       	movw	r12, r18
	if (one == 0)
    1f22:	89 2b       	or	r24, r25
    1f24:	49 f4       	brne	.+18     	; 0x1f38 <setLine+0x2c>
	clrLED(0,4,4);
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	64 e0       	ldi	r22, 0x04	; 4
    1f2c:	70 e0       	ldi	r23, 0x00	; 0
    1f2e:	44 e0       	ldi	r20, 0x04	; 4
    1f30:	50 e0       	ldi	r21, 0x00	; 0
    1f32:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
    1f36:	08 c0       	rjmp	.+16     	; 0x1f48 <setLine+0x3c>
	else setLED(0,4,4);
    1f38:	80 e0       	ldi	r24, 0x00	; 0
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	64 e0       	ldi	r22, 0x04	; 4
    1f3e:	70 e0       	ldi	r23, 0x00	; 0
    1f40:	44 e0       	ldi	r20, 0x04	; 4
    1f42:	50 e0       	ldi	r21, 0x00	; 0
    1f44:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
	if (two == 0) 
    1f48:	cd 2b       	or	r28, r29
    1f4a:	49 f4       	brne	.+18     	; 0x1f5e <setLine+0x52>
	clrLED(0,4,3);
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	64 e0       	ldi	r22, 0x04	; 4
    1f52:	70 e0       	ldi	r23, 0x00	; 0
    1f54:	43 e0       	ldi	r20, 0x03	; 3
    1f56:	50 e0       	ldi	r21, 0x00	; 0
    1f58:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
    1f5c:	08 c0       	rjmp	.+16     	; 0x1f6e <setLine+0x62>
	else setLED(0,4,3);
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	64 e0       	ldi	r22, 0x04	; 4
    1f64:	70 e0       	ldi	r23, 0x00	; 0
    1f66:	43 e0       	ldi	r20, 0x03	; 3
    1f68:	50 e0       	ldi	r21, 0x00	; 0
    1f6a:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
	if (three == 0) 
    1f6e:	ef 28       	or	r14, r15
    1f70:	49 f4       	brne	.+18     	; 0x1f84 <setLine+0x78>
	clrLED(0,4,2);
    1f72:	80 e0       	ldi	r24, 0x00	; 0
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	64 e0       	ldi	r22, 0x04	; 4
    1f78:	70 e0       	ldi	r23, 0x00	; 0
    1f7a:	42 e0       	ldi	r20, 0x02	; 2
    1f7c:	50 e0       	ldi	r21, 0x00	; 0
    1f7e:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
    1f82:	08 c0       	rjmp	.+16     	; 0x1f94 <setLine+0x88>
	else setLED(0,4,2);
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	64 e0       	ldi	r22, 0x04	; 4
    1f8a:	70 e0       	ldi	r23, 0x00	; 0
    1f8c:	42 e0       	ldi	r20, 0x02	; 2
    1f8e:	50 e0       	ldi	r21, 0x00	; 0
    1f90:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
	if (four == 0) 
    1f94:	cd 28       	or	r12, r13
    1f96:	49 f4       	brne	.+18     	; 0x1faa <setLine+0x9e>
	clrLED(0,4,1);
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	64 e0       	ldi	r22, 0x04	; 4
    1f9e:	70 e0       	ldi	r23, 0x00	; 0
    1fa0:	41 e0       	ldi	r20, 0x01	; 1
    1fa2:	50 e0       	ldi	r21, 0x00	; 0
    1fa4:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
    1fa8:	08 c0       	rjmp	.+16     	; 0x1fba <setLine+0xae>
	else setLED(0,4,1);
    1faa:	80 e0       	ldi	r24, 0x00	; 0
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	64 e0       	ldi	r22, 0x04	; 4
    1fb0:	70 e0       	ldi	r23, 0x00	; 0
    1fb2:	41 e0       	ldi	r20, 0x01	; 1
    1fb4:	50 e0       	ldi	r21, 0x00	; 0
    1fb6:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
	if (five == 0) 
    1fba:	01 2b       	or	r16, r17
    1fbc:	49 f4       	brne	.+18     	; 0x1fd0 <setLine+0xc4>
	clrLED(0,4,0);
    1fbe:	80 e0       	ldi	r24, 0x00	; 0
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	64 e0       	ldi	r22, 0x04	; 4
    1fc4:	70 e0       	ldi	r23, 0x00	; 0
    1fc6:	40 e0       	ldi	r20, 0x00	; 0
    1fc8:	50 e0       	ldi	r21, 0x00	; 0
    1fca:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
    1fce:	08 c0       	rjmp	.+16     	; 0x1fe0 <setLine+0xd4>
	else setLED(0,4,0);
    1fd0:	80 e0       	ldi	r24, 0x00	; 0
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	64 e0       	ldi	r22, 0x04	; 4
    1fd6:	70 e0       	ldi	r23, 0x00	; 0
    1fd8:	40 e0       	ldi	r20, 0x00	; 0
    1fda:	50 e0       	ldi	r21, 0x00	; 0
    1fdc:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
	shiftLeft();
    1fe0:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <shiftLeft>

}
    1fe4:	df 91       	pop	r29
    1fe6:	cf 91       	pop	r28
    1fe8:	1f 91       	pop	r17
    1fea:	0f 91       	pop	r16
    1fec:	ff 90       	pop	r15
    1fee:	ef 90       	pop	r14
    1ff0:	df 90       	pop	r13
    1ff2:	cf 90       	pop	r12
    1ff4:	08 95       	ret

00001ff6 <writeBRKC>:
setLine(1,0,0,0,1);
setLine(0,0,0,0,0);
}

void writeBRKC()
{
    1ff6:	0f 93       	push	r16
    1ff8:	1f 93       	push	r17
setLine(1,0,0,0,1);
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	60 e0       	ldi	r22, 0x00	; 0
    2000:	70 e0       	ldi	r23, 0x00	; 0
    2002:	40 e0       	ldi	r20, 0x00	; 0
    2004:	50 e0       	ldi	r21, 0x00	; 0
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	01 e0       	ldi	r16, 0x01	; 1
    200c:	10 e0       	ldi	r17, 0x00	; 0
    200e:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,1,1,1,0);
    2012:	80 e0       	ldi	r24, 0x00	; 0
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	61 e0       	ldi	r22, 0x01	; 1
    2018:	70 e0       	ldi	r23, 0x00	; 0
    201a:	41 e0       	ldi	r20, 0x01	; 1
    201c:	50 e0       	ldi	r21, 0x00	; 0
    201e:	21 e0       	ldi	r18, 0x01	; 1
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	00 e0       	ldi	r16, 0x00	; 0
    2024:	10 e0       	ldi	r17, 0x00	; 0
    2026:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,0,0);
    202a:	80 e0       	ldi	r24, 0x00	; 0
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	60 e0       	ldi	r22, 0x00	; 0
    2030:	70 e0       	ldi	r23, 0x00	; 0
    2032:	40 e0       	ldi	r20, 0x00	; 0
    2034:	50 e0       	ldi	r21, 0x00	; 0
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
}
    203e:	1f 91       	pop	r17
    2040:	0f 91       	pop	r16
    2042:	08 95       	ret

00002044 <writeBRKO>:
setLine(0,1,0,1,0);
setLine(0,0,0,0,0);
}

void writeBRKO()
{
    2044:	0f 93       	push	r16
    2046:	1f 93       	push	r17
setLine(0,1,1,1,0);
    2048:	80 e0       	ldi	r24, 0x00	; 0
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	61 e0       	ldi	r22, 0x01	; 1
    204e:	70 e0       	ldi	r23, 0x00	; 0
    2050:	41 e0       	ldi	r20, 0x01	; 1
    2052:	50 e0       	ldi	r21, 0x00	; 0
    2054:	21 e0       	ldi	r18, 0x01	; 1
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	00 e0       	ldi	r16, 0x00	; 0
    205a:	10 e0       	ldi	r17, 0x00	; 0
    205c:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,0,0,0,1);
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	60 e0       	ldi	r22, 0x00	; 0
    2066:	70 e0       	ldi	r23, 0x00	; 0
    2068:	40 e0       	ldi	r20, 0x00	; 0
    206a:	50 e0       	ldi	r21, 0x00	; 0
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	01 e0       	ldi	r16, 0x01	; 1
    2072:	10 e0       	ldi	r17, 0x00	; 0
    2074:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,0,0);
    2078:	80 e0       	ldi	r24, 0x00	; 0
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	60 e0       	ldi	r22, 0x00	; 0
    207e:	70 e0       	ldi	r23, 0x00	; 0
    2080:	40 e0       	ldi	r20, 0x00	; 0
    2082:	50 e0       	ldi	r21, 0x00	; 0
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	00 e0       	ldi	r16, 0x00	; 0
    208a:	10 e0       	ldi	r17, 0x00	; 0
    208c:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
}
    2090:	1f 91       	pop	r17
    2092:	0f 91       	pop	r16
    2094:	08 95       	ret

00002096 <writeEQL>:
setLine(0,0,0,1,1);
setLine(0,0,0,0,0);
}

void writeEQL()
{
    2096:	0f 93       	push	r16
    2098:	1f 93       	push	r17
setLine(0,1,0,1,0);
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	61 e0       	ldi	r22, 0x01	; 1
    20a0:	70 e0       	ldi	r23, 0x00	; 0
    20a2:	40 e0       	ldi	r20, 0x00	; 0
    20a4:	50 e0       	ldi	r21, 0x00	; 0
    20a6:	21 e0       	ldi	r18, 0x01	; 1
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	00 e0       	ldi	r16, 0x00	; 0
    20ac:	10 e0       	ldi	r17, 0x00	; 0
    20ae:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,1,0,1,0);
    20b2:	80 e0       	ldi	r24, 0x00	; 0
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	61 e0       	ldi	r22, 0x01	; 1
    20b8:	70 e0       	ldi	r23, 0x00	; 0
    20ba:	40 e0       	ldi	r20, 0x00	; 0
    20bc:	50 e0       	ldi	r21, 0x00	; 0
    20be:	21 e0       	ldi	r18, 0x01	; 1
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,1,0,1,0);
    20c6:	80 e0       	ldi	r24, 0x00	; 0
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	61 e0       	ldi	r22, 0x01	; 1
    20cc:	70 e0       	ldi	r23, 0x00	; 0
    20ce:	40 e0       	ldi	r20, 0x00	; 0
    20d0:	50 e0       	ldi	r21, 0x00	; 0
    20d2:	21 e0       	ldi	r18, 0x01	; 1
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,0,0);
    20da:	80 e0       	ldi	r24, 0x00	; 0
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	60 e0       	ldi	r22, 0x00	; 0
    20e0:	70 e0       	ldi	r23, 0x00	; 0
    20e2:	40 e0       	ldi	r20, 0x00	; 0
    20e4:	50 e0       	ldi	r21, 0x00	; 0
    20e6:	20 e0       	ldi	r18, 0x00	; 0
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
}
    20ee:	1f 91       	pop	r17
    20f0:	0f 91       	pop	r16
    20f2:	08 95       	ret

000020f4 <writeCOM>:
setLine(0,0,0,0,1);
setLine(0,0,0,0,0);
}

void writeCOM()
{
    20f4:	0f 93       	push	r16
    20f6:	1f 93       	push	r17
setLine(0,0,0,1,1);
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	60 e0       	ldi	r22, 0x00	; 0
    20fe:	70 e0       	ldi	r23, 0x00	; 0
    2100:	40 e0       	ldi	r20, 0x00	; 0
    2102:	50 e0       	ldi	r21, 0x00	; 0
    2104:	21 e0       	ldi	r18, 0x01	; 1
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	01 e0       	ldi	r16, 0x01	; 1
    210a:	10 e0       	ldi	r17, 0x00	; 0
    210c:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,0,0);
    2110:	80 e0       	ldi	r24, 0x00	; 0
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	60 e0       	ldi	r22, 0x00	; 0
    2116:	70 e0       	ldi	r23, 0x00	; 0
    2118:	40 e0       	ldi	r20, 0x00	; 0
    211a:	50 e0       	ldi	r21, 0x00	; 0
    211c:	20 e0       	ldi	r18, 0x00	; 0
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	00 e0       	ldi	r16, 0x00	; 0
    2122:	10 e0       	ldi	r17, 0x00	; 0
    2124:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
}
    2128:	1f 91       	pop	r17
    212a:	0f 91       	pop	r16
    212c:	08 95       	ret

0000212e <writeDOT>:
setLine(1,1,1,0,1);
setLine(0,0,0,0,0);
}

void writeDOT()
{
    212e:	0f 93       	push	r16
    2130:	1f 93       	push	r17
setLine(0,0,0,0,1);
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	60 e0       	ldi	r22, 0x00	; 0
    2138:	70 e0       	ldi	r23, 0x00	; 0
    213a:	40 e0       	ldi	r20, 0x00	; 0
    213c:	50 e0       	ldi	r21, 0x00	; 0
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	01 e0       	ldi	r16, 0x01	; 1
    2144:	10 e0       	ldi	r17, 0x00	; 0
    2146:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,0,0);
    214a:	80 e0       	ldi	r24, 0x00	; 0
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	60 e0       	ldi	r22, 0x00	; 0
    2150:	70 e0       	ldi	r23, 0x00	; 0
    2152:	40 e0       	ldi	r20, 0x00	; 0
    2154:	50 e0       	ldi	r21, 0x00	; 0
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	00 e0       	ldi	r16, 0x00	; 0
    215c:	10 e0       	ldi	r17, 0x00	; 0
    215e:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
}
    2162:	1f 91       	pop	r17
    2164:	0f 91       	pop	r16
    2166:	08 95       	ret

00002168 <writeEM>:
setLine(0,0,0,0,0);
setLine(0,0,0,0,0);
}

void writeEM()
{
    2168:	0f 93       	push	r16
    216a:	1f 93       	push	r17
setLine(1,1,1,0,1);
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	61 e0       	ldi	r22, 0x01	; 1
    2172:	70 e0       	ldi	r23, 0x00	; 0
    2174:	41 e0       	ldi	r20, 0x01	; 1
    2176:	50 e0       	ldi	r21, 0x00	; 0
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	01 e0       	ldi	r16, 0x01	; 1
    217e:	10 e0       	ldi	r17, 0x00	; 0
    2180:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,0,0);
    2184:	80 e0       	ldi	r24, 0x00	; 0
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	60 e0       	ldi	r22, 0x00	; 0
    218a:	70 e0       	ldi	r23, 0x00	; 0
    218c:	40 e0       	ldi	r20, 0x00	; 0
    218e:	50 e0       	ldi	r21, 0x00	; 0
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	00 e0       	ldi	r16, 0x00	; 0
    2196:	10 e0       	ldi	r17, 0x00	; 0
    2198:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
}
    219c:	1f 91       	pop	r17
    219e:	0f 91       	pop	r16
    21a0:	08 95       	ret

000021a2 <writeEMP>:
setLine(1,1,0,0,0);
setLine(0,0,0,0,0);	
}

void writeEMP()
{
    21a2:	0f 93       	push	r16
    21a4:	1f 93       	push	r17
setLine(0,0,0,0,0);
    21a6:	80 e0       	ldi	r24, 0x00	; 0
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	60 e0       	ldi	r22, 0x00	; 0
    21ac:	70 e0       	ldi	r23, 0x00	; 0
    21ae:	40 e0       	ldi	r20, 0x00	; 0
    21b0:	50 e0       	ldi	r21, 0x00	; 0
    21b2:	20 e0       	ldi	r18, 0x00	; 0
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	00 e0       	ldi	r16, 0x00	; 0
    21b8:	10 e0       	ldi	r17, 0x00	; 0
    21ba:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,0,0);
    21be:	80 e0       	ldi	r24, 0x00	; 0
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	60 e0       	ldi	r22, 0x00	; 0
    21c4:	70 e0       	ldi	r23, 0x00	; 0
    21c6:	40 e0       	ldi	r20, 0x00	; 0
    21c8:	50 e0       	ldi	r21, 0x00	; 0
    21ca:	20 e0       	ldi	r18, 0x00	; 0
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,0,0);
    21d2:	80 e0       	ldi	r24, 0x00	; 0
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	60 e0       	ldi	r22, 0x00	; 0
    21d8:	70 e0       	ldi	r23, 0x00	; 0
    21da:	40 e0       	ldi	r20, 0x00	; 0
    21dc:	50 e0       	ldi	r21, 0x00	; 0
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,0,0);
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	60 e0       	ldi	r22, 0x00	; 0
    21ec:	70 e0       	ldi	r23, 0x00	; 0
    21ee:	40 e0       	ldi	r20, 0x00	; 0
    21f0:	50 e0       	ldi	r21, 0x00	; 0
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
}
    21fa:	1f 91       	pop	r17
    21fc:	0f 91       	pop	r16
    21fe:	08 95       	ret

00002200 <writeAPO>:
setLine(0,1,0,0,0);
setLine(0,0,0,0,0);	
}

void writeAPO()
{
    2200:	0f 93       	push	r16
    2202:	1f 93       	push	r17
setLine(1,1,0,0,0);
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	61 e0       	ldi	r22, 0x01	; 1
    220a:	70 e0       	ldi	r23, 0x00	; 0
    220c:	40 e0       	ldi	r20, 0x00	; 0
    220e:	50 e0       	ldi	r21, 0x00	; 0
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	00 e0       	ldi	r16, 0x00	; 0
    2216:	10 e0       	ldi	r17, 0x00	; 0
    2218:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,0,0);	
    221c:	80 e0       	ldi	r24, 0x00	; 0
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	60 e0       	ldi	r22, 0x00	; 0
    2222:	70 e0       	ldi	r23, 0x00	; 0
    2224:	40 e0       	ldi	r20, 0x00	; 0
    2226:	50 e0       	ldi	r21, 0x00	; 0
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
}
    2230:	1f 91       	pop	r17
    2232:	0f 91       	pop	r16
    2234:	08 95       	ret

00002236 <writeQM>:
setLine(1,0,0,0,1);
setLine(0,0,0,0,0);
}

void writeQM()
{
    2236:	0f 93       	push	r16
    2238:	1f 93       	push	r17
setLine(0,1,0,0,0);
    223a:	80 e0       	ldi	r24, 0x00	; 0
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	61 e0       	ldi	r22, 0x01	; 1
    2240:	70 e0       	ldi	r23, 0x00	; 0
    2242:	40 e0       	ldi	r20, 0x00	; 0
    2244:	50 e0       	ldi	r21, 0x00	; 0
    2246:	20 e0       	ldi	r18, 0x00	; 0
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	00 e0       	ldi	r16, 0x00	; 0
    224c:	10 e0       	ldi	r17, 0x00	; 0
    224e:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,0,0,0,0);
    2252:	81 e0       	ldi	r24, 0x01	; 1
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	60 e0       	ldi	r22, 0x00	; 0
    2258:	70 e0       	ldi	r23, 0x00	; 0
    225a:	40 e0       	ldi	r20, 0x00	; 0
    225c:	50 e0       	ldi	r21, 0x00	; 0
    225e:	20 e0       	ldi	r18, 0x00	; 0
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,0,1,0,1);
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	60 e0       	ldi	r22, 0x00	; 0
    226c:	70 e0       	ldi	r23, 0x00	; 0
    226e:	41 e0       	ldi	r20, 0x01	; 1
    2270:	50 e0       	ldi	r21, 0x00	; 0
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	01 e0       	ldi	r16, 0x01	; 1
    2278:	10 e0       	ldi	r17, 0x00	; 0
    227a:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,0,1,0,0);
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	60 e0       	ldi	r22, 0x00	; 0
    2284:	70 e0       	ldi	r23, 0x00	; 0
    2286:	41 e0       	ldi	r20, 0x01	; 1
    2288:	50 e0       	ldi	r21, 0x00	; 0
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	00 e0       	ldi	r16, 0x00	; 0
    2290:	10 e0       	ldi	r17, 0x00	; 0
    2292:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,1,0,0,0);
    2296:	80 e0       	ldi	r24, 0x00	; 0
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	61 e0       	ldi	r22, 0x01	; 1
    229c:	70 e0       	ldi	r23, 0x00	; 0
    229e:	40 e0       	ldi	r20, 0x00	; 0
    22a0:	50 e0       	ldi	r21, 0x00	; 0
    22a2:	20 e0       	ldi	r18, 0x00	; 0
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,0,0);	
    22aa:	80 e0       	ldi	r24, 0x00	; 0
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	60 e0       	ldi	r22, 0x00	; 0
    22b0:	70 e0       	ldi	r23, 0x00	; 0
    22b2:	40 e0       	ldi	r20, 0x00	; 0
    22b4:	50 e0       	ldi	r21, 0x00	; 0
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
}
    22be:	1f 91       	pop	r17
    22c0:	0f 91       	pop	r16
    22c2:	08 95       	ret

000022c4 <writeZ>:
setLine(1,0,0,0,0);
setLine(0,0,0,0,0);
}

void writeZ()
{
    22c4:	0f 93       	push	r16
    22c6:	1f 93       	push	r17
setLine(1,0,0,0,1);
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	60 e0       	ldi	r22, 0x00	; 0
    22ce:	70 e0       	ldi	r23, 0x00	; 0
    22d0:	40 e0       	ldi	r20, 0x00	; 0
    22d2:	50 e0       	ldi	r21, 0x00	; 0
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	01 e0       	ldi	r16, 0x01	; 1
    22da:	10 e0       	ldi	r17, 0x00	; 0
    22dc:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,0,0,1,1);
    22e0:	81 e0       	ldi	r24, 0x01	; 1
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	60 e0       	ldi	r22, 0x00	; 0
    22e6:	70 e0       	ldi	r23, 0x00	; 0
    22e8:	40 e0       	ldi	r20, 0x00	; 0
    22ea:	50 e0       	ldi	r21, 0x00	; 0
    22ec:	21 e0       	ldi	r18, 0x01	; 1
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,0,1,0,1);
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	60 e0       	ldi	r22, 0x00	; 0
    22fa:	70 e0       	ldi	r23, 0x00	; 0
    22fc:	41 e0       	ldi	r20, 0x01	; 1
    22fe:	50 e0       	ldi	r21, 0x00	; 0
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,1,0,0,1);
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	61 e0       	ldi	r22, 0x01	; 1
    230e:	70 e0       	ldi	r23, 0x00	; 0
    2310:	40 e0       	ldi	r20, 0x00	; 0
    2312:	50 e0       	ldi	r21, 0x00	; 0
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,0,0,0,1);
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	60 e0       	ldi	r22, 0x00	; 0
    2322:	70 e0       	ldi	r23, 0x00	; 0
    2324:	40 e0       	ldi	r20, 0x00	; 0
    2326:	50 e0       	ldi	r21, 0x00	; 0
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,0,0);
    2330:	80 e0       	ldi	r24, 0x00	; 0
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	60 e0       	ldi	r22, 0x00	; 0
    2336:	70 e0       	ldi	r23, 0x00	; 0
    2338:	40 e0       	ldi	r20, 0x00	; 0
    233a:	50 e0       	ldi	r21, 0x00	; 0
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	00 e0       	ldi	r16, 0x00	; 0
    2342:	10 e0       	ldi	r17, 0x00	; 0
    2344:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
}
    2348:	1f 91       	pop	r17
    234a:	0f 91       	pop	r16
    234c:	08 95       	ret

0000234e <writeY>:
setLine(1,0,0,0,1);
setLine(0,0,0,0,0);
}

void writeY()
{
    234e:	0f 93       	push	r16
    2350:	1f 93       	push	r17
setLine(1,0,0,0,0);
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	60 e0       	ldi	r22, 0x00	; 0
    2358:	70 e0       	ldi	r23, 0x00	; 0
    235a:	40 e0       	ldi	r20, 0x00	; 0
    235c:	50 e0       	ldi	r21, 0x00	; 0
    235e:	20 e0       	ldi	r18, 0x00	; 0
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	00 e0       	ldi	r16, 0x00	; 0
    2364:	10 e0       	ldi	r17, 0x00	; 0
    2366:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,1,0,0,0);
    236a:	80 e0       	ldi	r24, 0x00	; 0
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	61 e0       	ldi	r22, 0x01	; 1
    2370:	70 e0       	ldi	r23, 0x00	; 0
    2372:	40 e0       	ldi	r20, 0x00	; 0
    2374:	50 e0       	ldi	r21, 0x00	; 0
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,1,1,1);
    237e:	80 e0       	ldi	r24, 0x00	; 0
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	60 e0       	ldi	r22, 0x00	; 0
    2384:	70 e0       	ldi	r23, 0x00	; 0
    2386:	41 e0       	ldi	r20, 0x01	; 1
    2388:	50 e0       	ldi	r21, 0x00	; 0
    238a:	21 e0       	ldi	r18, 0x01	; 1
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	01 e0       	ldi	r16, 0x01	; 1
    2390:	10 e0       	ldi	r17, 0x00	; 0
    2392:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,1,0,0,0);
    2396:	80 e0       	ldi	r24, 0x00	; 0
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	61 e0       	ldi	r22, 0x01	; 1
    239c:	70 e0       	ldi	r23, 0x00	; 0
    239e:	40 e0       	ldi	r20, 0x00	; 0
    23a0:	50 e0       	ldi	r21, 0x00	; 0
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	00 e0       	ldi	r16, 0x00	; 0
    23a8:	10 e0       	ldi	r17, 0x00	; 0
    23aa:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,0,0,0,0);
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	60 e0       	ldi	r22, 0x00	; 0
    23b4:	70 e0       	ldi	r23, 0x00	; 0
    23b6:	40 e0       	ldi	r20, 0x00	; 0
    23b8:	50 e0       	ldi	r21, 0x00	; 0
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,0,0);
    23c2:	80 e0       	ldi	r24, 0x00	; 0
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	60 e0       	ldi	r22, 0x00	; 0
    23c8:	70 e0       	ldi	r23, 0x00	; 0
    23ca:	40 e0       	ldi	r20, 0x00	; 0
    23cc:	50 e0       	ldi	r21, 0x00	; 0
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
}
    23d6:	1f 91       	pop	r17
    23d8:	0f 91       	pop	r16
    23da:	08 95       	ret

000023dc <writeX>:
setLine(1,1,1,1,1);
setLine(0,0,0,0,0);
}

void writeX()
{
    23dc:	0f 93       	push	r16
    23de:	1f 93       	push	r17
setLine(1,0,0,0,1);
    23e0:	81 e0       	ldi	r24, 0x01	; 1
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	60 e0       	ldi	r22, 0x00	; 0
    23e6:	70 e0       	ldi	r23, 0x00	; 0
    23e8:	40 e0       	ldi	r20, 0x00	; 0
    23ea:	50 e0       	ldi	r21, 0x00	; 0
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	01 e0       	ldi	r16, 0x01	; 1
    23f2:	10 e0       	ldi	r17, 0x00	; 0
    23f4:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,1,0,1,0);
    23f8:	80 e0       	ldi	r24, 0x00	; 0
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	61 e0       	ldi	r22, 0x01	; 1
    23fe:	70 e0       	ldi	r23, 0x00	; 0
    2400:	40 e0       	ldi	r20, 0x00	; 0
    2402:	50 e0       	ldi	r21, 0x00	; 0
    2404:	21 e0       	ldi	r18, 0x01	; 1
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	00 e0       	ldi	r16, 0x00	; 0
    240a:	10 e0       	ldi	r17, 0x00	; 0
    240c:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,1,0,0);
    2410:	80 e0       	ldi	r24, 0x00	; 0
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	60 e0       	ldi	r22, 0x00	; 0
    2416:	70 e0       	ldi	r23, 0x00	; 0
    2418:	41 e0       	ldi	r20, 0x01	; 1
    241a:	50 e0       	ldi	r21, 0x00	; 0
    241c:	20 e0       	ldi	r18, 0x00	; 0
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,1,0,1,0);
    2424:	80 e0       	ldi	r24, 0x00	; 0
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	61 e0       	ldi	r22, 0x01	; 1
    242a:	70 e0       	ldi	r23, 0x00	; 0
    242c:	40 e0       	ldi	r20, 0x00	; 0
    242e:	50 e0       	ldi	r21, 0x00	; 0
    2430:	21 e0       	ldi	r18, 0x01	; 1
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,0,0,0,1);
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	60 e0       	ldi	r22, 0x00	; 0
    243e:	70 e0       	ldi	r23, 0x00	; 0
    2440:	40 e0       	ldi	r20, 0x00	; 0
    2442:	50 e0       	ldi	r21, 0x00	; 0
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	01 e0       	ldi	r16, 0x01	; 1
    244a:	10 e0       	ldi	r17, 0x00	; 0
    244c:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,0,0);
    2450:	80 e0       	ldi	r24, 0x00	; 0
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	60 e0       	ldi	r22, 0x00	; 0
    2456:	70 e0       	ldi	r23, 0x00	; 0
    2458:	40 e0       	ldi	r20, 0x00	; 0
    245a:	50 e0       	ldi	r21, 0x00	; 0
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	00 e0       	ldi	r16, 0x00	; 0
    2462:	10 e0       	ldi	r17, 0x00	; 0
    2464:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
}
    2468:	1f 91       	pop	r17
    246a:	0f 91       	pop	r16
    246c:	08 95       	ret

0000246e <writeW>:
setLine(1,1,1,0,0);
setLine(0,0,0,0,0);
}

void writeW()
{
    246e:	0f 93       	push	r16
    2470:	1f 93       	push	r17
setLine(1,1,1,1,1);
    2472:	81 e0       	ldi	r24, 0x01	; 1
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	61 e0       	ldi	r22, 0x01	; 1
    2478:	70 e0       	ldi	r23, 0x00	; 0
    247a:	41 e0       	ldi	r20, 0x01	; 1
    247c:	50 e0       	ldi	r21, 0x00	; 0
    247e:	21 e0       	ldi	r18, 0x01	; 1
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	01 e0       	ldi	r16, 0x01	; 1
    2484:	10 e0       	ldi	r17, 0x00	; 0
    2486:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,1,0);
    248a:	80 e0       	ldi	r24, 0x00	; 0
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	60 e0       	ldi	r22, 0x00	; 0
    2490:	70 e0       	ldi	r23, 0x00	; 0
    2492:	40 e0       	ldi	r20, 0x00	; 0
    2494:	50 e0       	ldi	r21, 0x00	; 0
    2496:	21 e0       	ldi	r18, 0x01	; 1
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	00 e0       	ldi	r16, 0x00	; 0
    249c:	10 e0       	ldi	r17, 0x00	; 0
    249e:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,1,0,0);
    24a2:	80 e0       	ldi	r24, 0x00	; 0
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	60 e0       	ldi	r22, 0x00	; 0
    24a8:	70 e0       	ldi	r23, 0x00	; 0
    24aa:	41 e0       	ldi	r20, 0x01	; 1
    24ac:	50 e0       	ldi	r21, 0x00	; 0
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,1,0);
    24b6:	80 e0       	ldi	r24, 0x00	; 0
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	60 e0       	ldi	r22, 0x00	; 0
    24bc:	70 e0       	ldi	r23, 0x00	; 0
    24be:	40 e0       	ldi	r20, 0x00	; 0
    24c0:	50 e0       	ldi	r21, 0x00	; 0
    24c2:	21 e0       	ldi	r18, 0x01	; 1
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,1,1,1,1);
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	61 e0       	ldi	r22, 0x01	; 1
    24d0:	70 e0       	ldi	r23, 0x00	; 0
    24d2:	41 e0       	ldi	r20, 0x01	; 1
    24d4:	50 e0       	ldi	r21, 0x00	; 0
    24d6:	21 e0       	ldi	r18, 0x01	; 1
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	01 e0       	ldi	r16, 0x01	; 1
    24dc:	10 e0       	ldi	r17, 0x00	; 0
    24de:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,0,0);
    24e2:	80 e0       	ldi	r24, 0x00	; 0
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	60 e0       	ldi	r22, 0x00	; 0
    24e8:	70 e0       	ldi	r23, 0x00	; 0
    24ea:	40 e0       	ldi	r20, 0x00	; 0
    24ec:	50 e0       	ldi	r21, 0x00	; 0
    24ee:	20 e0       	ldi	r18, 0x00	; 0
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	00 e0       	ldi	r16, 0x00	; 0
    24f4:	10 e0       	ldi	r17, 0x00	; 0
    24f6:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
}
    24fa:	1f 91       	pop	r17
    24fc:	0f 91       	pop	r16
    24fe:	08 95       	ret

00002500 <writeV>:
setLine(1,1,1,1,0);
setLine(0,0,0,0,0);
}

void writeV()
{
    2500:	0f 93       	push	r16
    2502:	1f 93       	push	r17
setLine(1,1,1,0,0);
    2504:	81 e0       	ldi	r24, 0x01	; 1
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	61 e0       	ldi	r22, 0x01	; 1
    250a:	70 e0       	ldi	r23, 0x00	; 0
    250c:	41 e0       	ldi	r20, 0x01	; 1
    250e:	50 e0       	ldi	r21, 0x00	; 0
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	00 e0       	ldi	r16, 0x00	; 0
    2516:	10 e0       	ldi	r17, 0x00	; 0
    2518:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,1,0);
    251c:	80 e0       	ldi	r24, 0x00	; 0
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	60 e0       	ldi	r22, 0x00	; 0
    2522:	70 e0       	ldi	r23, 0x00	; 0
    2524:	40 e0       	ldi	r20, 0x00	; 0
    2526:	50 e0       	ldi	r21, 0x00	; 0
    2528:	21 e0       	ldi	r18, 0x01	; 1
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,0,1);
    2530:	80 e0       	ldi	r24, 0x00	; 0
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	60 e0       	ldi	r22, 0x00	; 0
    2536:	70 e0       	ldi	r23, 0x00	; 0
    2538:	40 e0       	ldi	r20, 0x00	; 0
    253a:	50 e0       	ldi	r21, 0x00	; 0
    253c:	20 e0       	ldi	r18, 0x00	; 0
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	01 e0       	ldi	r16, 0x01	; 1
    2542:	10 e0       	ldi	r17, 0x00	; 0
    2544:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,1,0);
    2548:	80 e0       	ldi	r24, 0x00	; 0
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	60 e0       	ldi	r22, 0x00	; 0
    254e:	70 e0       	ldi	r23, 0x00	; 0
    2550:	40 e0       	ldi	r20, 0x00	; 0
    2552:	50 e0       	ldi	r21, 0x00	; 0
    2554:	21 e0       	ldi	r18, 0x01	; 1
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	00 e0       	ldi	r16, 0x00	; 0
    255a:	10 e0       	ldi	r17, 0x00	; 0
    255c:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,1,1,0,0);
    2560:	81 e0       	ldi	r24, 0x01	; 1
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	61 e0       	ldi	r22, 0x01	; 1
    2566:	70 e0       	ldi	r23, 0x00	; 0
    2568:	41 e0       	ldi	r20, 0x01	; 1
    256a:	50 e0       	ldi	r21, 0x00	; 0
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,0,0);
    2574:	80 e0       	ldi	r24, 0x00	; 0
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	60 e0       	ldi	r22, 0x00	; 0
    257a:	70 e0       	ldi	r23, 0x00	; 0
    257c:	40 e0       	ldi	r20, 0x00	; 0
    257e:	50 e0       	ldi	r21, 0x00	; 0
    2580:	20 e0       	ldi	r18, 0x00	; 0
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
}
    2588:	1f 91       	pop	r17
    258a:	0f 91       	pop	r16
    258c:	08 95       	ret

0000258e <writeU>:

}


void writeU()
{
    258e:	0f 93       	push	r16
    2590:	1f 93       	push	r17
setLine(1,1,1,1,0);
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	61 e0       	ldi	r22, 0x01	; 1
    2598:	70 e0       	ldi	r23, 0x00	; 0
    259a:	41 e0       	ldi	r20, 0x01	; 1
    259c:	50 e0       	ldi	r21, 0x00	; 0
    259e:	21 e0       	ldi	r18, 0x01	; 1
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	00 e0       	ldi	r16, 0x00	; 0
    25a4:	10 e0       	ldi	r17, 0x00	; 0
    25a6:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,0,1);
    25aa:	80 e0       	ldi	r24, 0x00	; 0
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	60 e0       	ldi	r22, 0x00	; 0
    25b0:	70 e0       	ldi	r23, 0x00	; 0
    25b2:	40 e0       	ldi	r20, 0x00	; 0
    25b4:	50 e0       	ldi	r21, 0x00	; 0
    25b6:	20 e0       	ldi	r18, 0x00	; 0
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	01 e0       	ldi	r16, 0x01	; 1
    25bc:	10 e0       	ldi	r17, 0x00	; 0
    25be:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,0,1);
    25c2:	80 e0       	ldi	r24, 0x00	; 0
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	60 e0       	ldi	r22, 0x00	; 0
    25c8:	70 e0       	ldi	r23, 0x00	; 0
    25ca:	40 e0       	ldi	r20, 0x00	; 0
    25cc:	50 e0       	ldi	r21, 0x00	; 0
    25ce:	20 e0       	ldi	r18, 0x00	; 0
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,1,1,1,0);
    25d6:	81 e0       	ldi	r24, 0x01	; 1
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	61 e0       	ldi	r22, 0x01	; 1
    25dc:	70 e0       	ldi	r23, 0x00	; 0
    25de:	41 e0       	ldi	r20, 0x01	; 1
    25e0:	50 e0       	ldi	r21, 0x00	; 0
    25e2:	21 e0       	ldi	r18, 0x01	; 1
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	00 e0       	ldi	r16, 0x00	; 0
    25e8:	10 e0       	ldi	r17, 0x00	; 0
    25ea:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,0,0);
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	60 e0       	ldi	r22, 0x00	; 0
    25f4:	70 e0       	ldi	r23, 0x00	; 0
    25f6:	40 e0       	ldi	r20, 0x00	; 0
    25f8:	50 e0       	ldi	r21, 0x00	; 0
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
}
    2602:	1f 91       	pop	r17
    2604:	0f 91       	pop	r16
    2606:	08 95       	ret

00002608 <writeT>:
setLine(0,0,0,0,0);

}

void writeT()
{
    2608:	0f 93       	push	r16
    260a:	1f 93       	push	r17
setLine(1,0,0,0,0);
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	60 e0       	ldi	r22, 0x00	; 0
    2612:	70 e0       	ldi	r23, 0x00	; 0
    2614:	40 e0       	ldi	r20, 0x00	; 0
    2616:	50 e0       	ldi	r21, 0x00	; 0
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	00 e0       	ldi	r16, 0x00	; 0
    261e:	10 e0       	ldi	r17, 0x00	; 0
    2620:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,0,0,0,0);
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	60 e0       	ldi	r22, 0x00	; 0
    262a:	70 e0       	ldi	r23, 0x00	; 0
    262c:	40 e0       	ldi	r20, 0x00	; 0
    262e:	50 e0       	ldi	r21, 0x00	; 0
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,1,1,1,1);
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	61 e0       	ldi	r22, 0x01	; 1
    263e:	70 e0       	ldi	r23, 0x00	; 0
    2640:	41 e0       	ldi	r20, 0x01	; 1
    2642:	50 e0       	ldi	r21, 0x00	; 0
    2644:	21 e0       	ldi	r18, 0x01	; 1
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	01 e0       	ldi	r16, 0x01	; 1
    264a:	10 e0       	ldi	r17, 0x00	; 0
    264c:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,0,0,0,0);
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	60 e0       	ldi	r22, 0x00	; 0
    2656:	70 e0       	ldi	r23, 0x00	; 0
    2658:	40 e0       	ldi	r20, 0x00	; 0
    265a:	50 e0       	ldi	r21, 0x00	; 0
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	00 e0       	ldi	r16, 0x00	; 0
    2662:	10 e0       	ldi	r17, 0x00	; 0
    2664:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,0,0,0,0);
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	60 e0       	ldi	r22, 0x00	; 0
    266e:	70 e0       	ldi	r23, 0x00	; 0
    2670:	40 e0       	ldi	r20, 0x00	; 0
    2672:	50 e0       	ldi	r21, 0x00	; 0
    2674:	20 e0       	ldi	r18, 0x00	; 0
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,0,0);
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	60 e0       	ldi	r22, 0x00	; 0
    2682:	70 e0       	ldi	r23, 0x00	; 0
    2684:	40 e0       	ldi	r20, 0x00	; 0
    2686:	50 e0       	ldi	r21, 0x00	; 0
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>

}
    2690:	1f 91       	pop	r17
    2692:	0f 91       	pop	r16
    2694:	08 95       	ret

00002696 <writeS>:
setLine(0,1,0,0,1);
setLine(0,0,0,0,0);
}

void writeS()
{
    2696:	0f 93       	push	r16
    2698:	1f 93       	push	r17
setLine(0,1,0,0,1);
    269a:	80 e0       	ldi	r24, 0x00	; 0
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	61 e0       	ldi	r22, 0x01	; 1
    26a0:	70 e0       	ldi	r23, 0x00	; 0
    26a2:	40 e0       	ldi	r20, 0x00	; 0
    26a4:	50 e0       	ldi	r21, 0x00	; 0
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	01 e0       	ldi	r16, 0x01	; 1
    26ac:	10 e0       	ldi	r17, 0x00	; 0
    26ae:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,0,1,0,1);
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	60 e0       	ldi	r22, 0x00	; 0
    26b8:	70 e0       	ldi	r23, 0x00	; 0
    26ba:	41 e0       	ldi	r20, 0x01	; 1
    26bc:	50 e0       	ldi	r21, 0x00	; 0
    26be:	20 e0       	ldi	r18, 0x00	; 0
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,0,1,0,1);
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	60 e0       	ldi	r22, 0x00	; 0
    26cc:	70 e0       	ldi	r23, 0x00	; 0
    26ce:	41 e0       	ldi	r20, 0x01	; 1
    26d0:	50 e0       	ldi	r21, 0x00	; 0
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,0,0,1,0);
    26da:	81 e0       	ldi	r24, 0x01	; 1
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	60 e0       	ldi	r22, 0x00	; 0
    26e0:	70 e0       	ldi	r23, 0x00	; 0
    26e2:	40 e0       	ldi	r20, 0x00	; 0
    26e4:	50 e0       	ldi	r21, 0x00	; 0
    26e6:	21 e0       	ldi	r18, 0x01	; 1
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	00 e0       	ldi	r16, 0x00	; 0
    26ec:	10 e0       	ldi	r17, 0x00	; 0
    26ee:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,0,0);
    26f2:	80 e0       	ldi	r24, 0x00	; 0
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	60 e0       	ldi	r22, 0x00	; 0
    26f8:	70 e0       	ldi	r23, 0x00	; 0
    26fa:	40 e0       	ldi	r20, 0x00	; 0
    26fc:	50 e0       	ldi	r21, 0x00	; 0
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>

}
    2706:	1f 91       	pop	r17
    2708:	0f 91       	pop	r16
    270a:	08 95       	ret

0000270c <writeR>:
setLine(0,0,0,0,0);
}


void writeR()
{
    270c:	0f 93       	push	r16
    270e:	1f 93       	push	r17
setLine(1,1,1,1,1);
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	61 e0       	ldi	r22, 0x01	; 1
    2716:	70 e0       	ldi	r23, 0x00	; 0
    2718:	41 e0       	ldi	r20, 0x01	; 1
    271a:	50 e0       	ldi	r21, 0x00	; 0
    271c:	21 e0       	ldi	r18, 0x01	; 1
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	01 e0       	ldi	r16, 0x01	; 1
    2722:	10 e0       	ldi	r17, 0x00	; 0
    2724:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,0,1,0,0);
    2728:	81 e0       	ldi	r24, 0x01	; 1
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	60 e0       	ldi	r22, 0x00	; 0
    272e:	70 e0       	ldi	r23, 0x00	; 0
    2730:	41 e0       	ldi	r20, 0x01	; 1
    2732:	50 e0       	ldi	r21, 0x00	; 0
    2734:	20 e0       	ldi	r18, 0x00	; 0
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	00 e0       	ldi	r16, 0x00	; 0
    273a:	10 e0       	ldi	r17, 0x00	; 0
    273c:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,0,1,1,0);
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	60 e0       	ldi	r22, 0x00	; 0
    2746:	70 e0       	ldi	r23, 0x00	; 0
    2748:	41 e0       	ldi	r20, 0x01	; 1
    274a:	50 e0       	ldi	r21, 0x00	; 0
    274c:	21 e0       	ldi	r18, 0x01	; 1
    274e:	30 e0       	ldi	r19, 0x00	; 0
    2750:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,1,0,0,1);
    2754:	80 e0       	ldi	r24, 0x00	; 0
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	61 e0       	ldi	r22, 0x01	; 1
    275a:	70 e0       	ldi	r23, 0x00	; 0
    275c:	40 e0       	ldi	r20, 0x00	; 0
    275e:	50 e0       	ldi	r21, 0x00	; 0
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	01 e0       	ldi	r16, 0x01	; 1
    2766:	10 e0       	ldi	r17, 0x00	; 0
    2768:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,0,0);
    276c:	80 e0       	ldi	r24, 0x00	; 0
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	60 e0       	ldi	r22, 0x00	; 0
    2772:	70 e0       	ldi	r23, 0x00	; 0
    2774:	40 e0       	ldi	r20, 0x00	; 0
    2776:	50 e0       	ldi	r21, 0x00	; 0
    2778:	20 e0       	ldi	r18, 0x00	; 0
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	00 e0       	ldi	r16, 0x00	; 0
    277e:	10 e0       	ldi	r17, 0x00	; 0
    2780:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
}
    2784:	1f 91       	pop	r17
    2786:	0f 91       	pop	r16
    2788:	08 95       	ret

0000278a <writeQ>:
setLine(0,1,0,0,0);
setLine(0,0,0,0,0);
}

void writeQ()
{
    278a:	0f 93       	push	r16
    278c:	1f 93       	push	r17
setLine(0,1,1,1,0);
    278e:	80 e0       	ldi	r24, 0x00	; 0
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	61 e0       	ldi	r22, 0x01	; 1
    2794:	70 e0       	ldi	r23, 0x00	; 0
    2796:	41 e0       	ldi	r20, 0x01	; 1
    2798:	50 e0       	ldi	r21, 0x00	; 0
    279a:	21 e0       	ldi	r18, 0x01	; 1
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	00 e0       	ldi	r16, 0x00	; 0
    27a0:	10 e0       	ldi	r17, 0x00	; 0
    27a2:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,0,0,0,1);
    27a6:	81 e0       	ldi	r24, 0x01	; 1
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	60 e0       	ldi	r22, 0x00	; 0
    27ac:	70 e0       	ldi	r23, 0x00	; 0
    27ae:	40 e0       	ldi	r20, 0x00	; 0
    27b0:	50 e0       	ldi	r21, 0x00	; 0
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	01 e0       	ldi	r16, 0x01	; 1
    27b8:	10 e0       	ldi	r17, 0x00	; 0
    27ba:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,0,0,1,1);
    27be:	81 e0       	ldi	r24, 0x01	; 1
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	60 e0       	ldi	r22, 0x00	; 0
    27c4:	70 e0       	ldi	r23, 0x00	; 0
    27c6:	40 e0       	ldi	r20, 0x00	; 0
    27c8:	50 e0       	ldi	r21, 0x00	; 0
    27ca:	21 e0       	ldi	r18, 0x01	; 1
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,1,1,1,0);
    27d2:	80 e0       	ldi	r24, 0x00	; 0
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	61 e0       	ldi	r22, 0x01	; 1
    27d8:	70 e0       	ldi	r23, 0x00	; 0
    27da:	41 e0       	ldi	r20, 0x01	; 1
    27dc:	50 e0       	ldi	r21, 0x00	; 0
    27de:	21 e0       	ldi	r18, 0x01	; 1
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	00 e0       	ldi	r16, 0x00	; 0
    27e4:	10 e0       	ldi	r17, 0x00	; 0
    27e6:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,0,0);
    27ea:	80 e0       	ldi	r24, 0x00	; 0
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	60 e0       	ldi	r22, 0x00	; 0
    27f0:	70 e0       	ldi	r23, 0x00	; 0
    27f2:	40 e0       	ldi	r20, 0x00	; 0
    27f4:	50 e0       	ldi	r21, 0x00	; 0
    27f6:	20 e0       	ldi	r18, 0x00	; 0
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
}
    27fe:	1f 91       	pop	r17
    2800:	0f 91       	pop	r16
    2802:	08 95       	ret

00002804 <writeP>:
setLine(0,1,1,1,0);
setLine(0,0,0,0,0);
}

void writeP()
{
    2804:	0f 93       	push	r16
    2806:	1f 93       	push	r17

setLine(1,1,1,1,1);
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	61 e0       	ldi	r22, 0x01	; 1
    280e:	70 e0       	ldi	r23, 0x00	; 0
    2810:	41 e0       	ldi	r20, 0x01	; 1
    2812:	50 e0       	ldi	r21, 0x00	; 0
    2814:	21 e0       	ldi	r18, 0x01	; 1
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	01 e0       	ldi	r16, 0x01	; 1
    281a:	10 e0       	ldi	r17, 0x00	; 0
    281c:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,0,1,0,0);
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	60 e0       	ldi	r22, 0x00	; 0
    2826:	70 e0       	ldi	r23, 0x00	; 0
    2828:	41 e0       	ldi	r20, 0x01	; 1
    282a:	50 e0       	ldi	r21, 0x00	; 0
    282c:	20 e0       	ldi	r18, 0x00	; 0
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	00 e0       	ldi	r16, 0x00	; 0
    2832:	10 e0       	ldi	r17, 0x00	; 0
    2834:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,0,1,0,0);
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	60 e0       	ldi	r22, 0x00	; 0
    283e:	70 e0       	ldi	r23, 0x00	; 0
    2840:	41 e0       	ldi	r20, 0x01	; 1
    2842:	50 e0       	ldi	r21, 0x00	; 0
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,1,0,0,0);
    284c:	80 e0       	ldi	r24, 0x00	; 0
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	61 e0       	ldi	r22, 0x01	; 1
    2852:	70 e0       	ldi	r23, 0x00	; 0
    2854:	40 e0       	ldi	r20, 0x00	; 0
    2856:	50 e0       	ldi	r21, 0x00	; 0
    2858:	20 e0       	ldi	r18, 0x00	; 0
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,0,0);
    2860:	80 e0       	ldi	r24, 0x00	; 0
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	60 e0       	ldi	r22, 0x00	; 0
    2866:	70 e0       	ldi	r23, 0x00	; 0
    2868:	40 e0       	ldi	r20, 0x00	; 0
    286a:	50 e0       	ldi	r21, 0x00	; 0
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
}
    2874:	1f 91       	pop	r17
    2876:	0f 91       	pop	r16
    2878:	08 95       	ret

0000287a <writeO>:
setLine(1,1,1,1,1);
setLine(0,0,0,0,0);
}

void writeO()
{
    287a:	0f 93       	push	r16
    287c:	1f 93       	push	r17
setLine(0,1,1,1,0);
    287e:	80 e0       	ldi	r24, 0x00	; 0
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	61 e0       	ldi	r22, 0x01	; 1
    2884:	70 e0       	ldi	r23, 0x00	; 0
    2886:	41 e0       	ldi	r20, 0x01	; 1
    2888:	50 e0       	ldi	r21, 0x00	; 0
    288a:	21 e0       	ldi	r18, 0x01	; 1
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	00 e0       	ldi	r16, 0x00	; 0
    2890:	10 e0       	ldi	r17, 0x00	; 0
    2892:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,0,0,0,1);
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	60 e0       	ldi	r22, 0x00	; 0
    289c:	70 e0       	ldi	r23, 0x00	; 0
    289e:	40 e0       	ldi	r20, 0x00	; 0
    28a0:	50 e0       	ldi	r21, 0x00	; 0
    28a2:	20 e0       	ldi	r18, 0x00	; 0
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	01 e0       	ldi	r16, 0x01	; 1
    28a8:	10 e0       	ldi	r17, 0x00	; 0
    28aa:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,0,0,0,1);
    28ae:	81 e0       	ldi	r24, 0x01	; 1
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	60 e0       	ldi	r22, 0x00	; 0
    28b4:	70 e0       	ldi	r23, 0x00	; 0
    28b6:	40 e0       	ldi	r20, 0x00	; 0
    28b8:	50 e0       	ldi	r21, 0x00	; 0
    28ba:	20 e0       	ldi	r18, 0x00	; 0
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,1,1,1,0);
    28c2:	80 e0       	ldi	r24, 0x00	; 0
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	61 e0       	ldi	r22, 0x01	; 1
    28c8:	70 e0       	ldi	r23, 0x00	; 0
    28ca:	41 e0       	ldi	r20, 0x01	; 1
    28cc:	50 e0       	ldi	r21, 0x00	; 0
    28ce:	21 e0       	ldi	r18, 0x01	; 1
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	00 e0       	ldi	r16, 0x00	; 0
    28d4:	10 e0       	ldi	r17, 0x00	; 0
    28d6:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,0,0);
    28da:	80 e0       	ldi	r24, 0x00	; 0
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	60 e0       	ldi	r22, 0x00	; 0
    28e0:	70 e0       	ldi	r23, 0x00	; 0
    28e2:	40 e0       	ldi	r20, 0x00	; 0
    28e4:	50 e0       	ldi	r21, 0x00	; 0
    28e6:	20 e0       	ldi	r18, 0x00	; 0
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
}
    28ee:	1f 91       	pop	r17
    28f0:	0f 91       	pop	r16
    28f2:	08 95       	ret

000028f4 <writeN>:
setLine(0,0,0,0,0);
}


void writeN()
{
    28f4:	0f 93       	push	r16
    28f6:	1f 93       	push	r17
setLine(1,1,1,1,1);
    28f8:	81 e0       	ldi	r24, 0x01	; 1
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	61 e0       	ldi	r22, 0x01	; 1
    28fe:	70 e0       	ldi	r23, 0x00	; 0
    2900:	41 e0       	ldi	r20, 0x01	; 1
    2902:	50 e0       	ldi	r21, 0x00	; 0
    2904:	21 e0       	ldi	r18, 0x01	; 1
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	01 e0       	ldi	r16, 0x01	; 1
    290a:	10 e0       	ldi	r17, 0x00	; 0
    290c:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,1,0,0,0);
    2910:	80 e0       	ldi	r24, 0x00	; 0
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	61 e0       	ldi	r22, 0x01	; 1
    2916:	70 e0       	ldi	r23, 0x00	; 0
    2918:	40 e0       	ldi	r20, 0x00	; 0
    291a:	50 e0       	ldi	r21, 0x00	; 0
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	00 e0       	ldi	r16, 0x00	; 0
    2922:	10 e0       	ldi	r17, 0x00	; 0
    2924:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,1,0,0);
    2928:	80 e0       	ldi	r24, 0x00	; 0
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	60 e0       	ldi	r22, 0x00	; 0
    292e:	70 e0       	ldi	r23, 0x00	; 0
    2930:	41 e0       	ldi	r20, 0x01	; 1
    2932:	50 e0       	ldi	r21, 0x00	; 0
    2934:	20 e0       	ldi	r18, 0x00	; 0
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,1,0);
    293c:	80 e0       	ldi	r24, 0x00	; 0
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	60 e0       	ldi	r22, 0x00	; 0
    2942:	70 e0       	ldi	r23, 0x00	; 0
    2944:	40 e0       	ldi	r20, 0x00	; 0
    2946:	50 e0       	ldi	r21, 0x00	; 0
    2948:	21 e0       	ldi	r18, 0x01	; 1
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,1,1,1,1);
    2950:	81 e0       	ldi	r24, 0x01	; 1
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	61 e0       	ldi	r22, 0x01	; 1
    2956:	70 e0       	ldi	r23, 0x00	; 0
    2958:	41 e0       	ldi	r20, 0x01	; 1
    295a:	50 e0       	ldi	r21, 0x00	; 0
    295c:	21 e0       	ldi	r18, 0x01	; 1
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	01 e0       	ldi	r16, 0x01	; 1
    2962:	10 e0       	ldi	r17, 0x00	; 0
    2964:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,0,0);
    2968:	80 e0       	ldi	r24, 0x00	; 0
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	60 e0       	ldi	r22, 0x00	; 0
    296e:	70 e0       	ldi	r23, 0x00	; 0
    2970:	40 e0       	ldi	r20, 0x00	; 0
    2972:	50 e0       	ldi	r21, 0x00	; 0
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	00 e0       	ldi	r16, 0x00	; 0
    297a:	10 e0       	ldi	r17, 0x00	; 0
    297c:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
}
    2980:	1f 91       	pop	r17
    2982:	0f 91       	pop	r16
    2984:	08 95       	ret

00002986 <writeM>:
setLine(0,0,0,0,1);
setLine(0,0,0,0,0);
}

void writeM()
{
    2986:	0f 93       	push	r16
    2988:	1f 93       	push	r17
setLine(1,1,1,1,1);
    298a:	81 e0       	ldi	r24, 0x01	; 1
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	61 e0       	ldi	r22, 0x01	; 1
    2990:	70 e0       	ldi	r23, 0x00	; 0
    2992:	41 e0       	ldi	r20, 0x01	; 1
    2994:	50 e0       	ldi	r21, 0x00	; 0
    2996:	21 e0       	ldi	r18, 0x01	; 1
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	01 e0       	ldi	r16, 0x01	; 1
    299c:	10 e0       	ldi	r17, 0x00	; 0
    299e:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,1,0,0,0);
    29a2:	80 e0       	ldi	r24, 0x00	; 0
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	61 e0       	ldi	r22, 0x01	; 1
    29a8:	70 e0       	ldi	r23, 0x00	; 0
    29aa:	40 e0       	ldi	r20, 0x00	; 0
    29ac:	50 e0       	ldi	r21, 0x00	; 0
    29ae:	20 e0       	ldi	r18, 0x00	; 0
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	00 e0       	ldi	r16, 0x00	; 0
    29b4:	10 e0       	ldi	r17, 0x00	; 0
    29b6:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,1,0,0);
    29ba:	80 e0       	ldi	r24, 0x00	; 0
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	60 e0       	ldi	r22, 0x00	; 0
    29c0:	70 e0       	ldi	r23, 0x00	; 0
    29c2:	41 e0       	ldi	r20, 0x01	; 1
    29c4:	50 e0       	ldi	r21, 0x00	; 0
    29c6:	20 e0       	ldi	r18, 0x00	; 0
    29c8:	30 e0       	ldi	r19, 0x00	; 0
    29ca:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,1,0,0,0);
    29ce:	80 e0       	ldi	r24, 0x00	; 0
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	61 e0       	ldi	r22, 0x01	; 1
    29d4:	70 e0       	ldi	r23, 0x00	; 0
    29d6:	40 e0       	ldi	r20, 0x00	; 0
    29d8:	50 e0       	ldi	r21, 0x00	; 0
    29da:	20 e0       	ldi	r18, 0x00	; 0
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,1,1,1,1);
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	61 e0       	ldi	r22, 0x01	; 1
    29e8:	70 e0       	ldi	r23, 0x00	; 0
    29ea:	41 e0       	ldi	r20, 0x01	; 1
    29ec:	50 e0       	ldi	r21, 0x00	; 0
    29ee:	21 e0       	ldi	r18, 0x01	; 1
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	01 e0       	ldi	r16, 0x01	; 1
    29f4:	10 e0       	ldi	r17, 0x00	; 0
    29f6:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,0,0);
    29fa:	80 e0       	ldi	r24, 0x00	; 0
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	60 e0       	ldi	r22, 0x00	; 0
    2a00:	70 e0       	ldi	r23, 0x00	; 0
    2a02:	40 e0       	ldi	r20, 0x00	; 0
    2a04:	50 e0       	ldi	r21, 0x00	; 0
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	00 e0       	ldi	r16, 0x00	; 0
    2a0c:	10 e0       	ldi	r17, 0x00	; 0
    2a0e:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
}
    2a12:	1f 91       	pop	r17
    2a14:	0f 91       	pop	r16
    2a16:	08 95       	ret

00002a18 <writeL>:
setLine(0,0,0,0,0);

}

void writeL()
{
    2a18:	0f 93       	push	r16
    2a1a:	1f 93       	push	r17
setLine(1,1,1,1,1);
    2a1c:	81 e0       	ldi	r24, 0x01	; 1
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	61 e0       	ldi	r22, 0x01	; 1
    2a22:	70 e0       	ldi	r23, 0x00	; 0
    2a24:	41 e0       	ldi	r20, 0x01	; 1
    2a26:	50 e0       	ldi	r21, 0x00	; 0
    2a28:	21 e0       	ldi	r18, 0x01	; 1
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	01 e0       	ldi	r16, 0x01	; 1
    2a2e:	10 e0       	ldi	r17, 0x00	; 0
    2a30:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,0,1);
    2a34:	80 e0       	ldi	r24, 0x00	; 0
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	60 e0       	ldi	r22, 0x00	; 0
    2a3a:	70 e0       	ldi	r23, 0x00	; 0
    2a3c:	40 e0       	ldi	r20, 0x00	; 0
    2a3e:	50 e0       	ldi	r21, 0x00	; 0
    2a40:	20 e0       	ldi	r18, 0x00	; 0
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,0,1);
    2a48:	80 e0       	ldi	r24, 0x00	; 0
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	60 e0       	ldi	r22, 0x00	; 0
    2a4e:	70 e0       	ldi	r23, 0x00	; 0
    2a50:	40 e0       	ldi	r20, 0x00	; 0
    2a52:	50 e0       	ldi	r21, 0x00	; 0
    2a54:	20 e0       	ldi	r18, 0x00	; 0
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,0,1);
    2a5c:	80 e0       	ldi	r24, 0x00	; 0
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	60 e0       	ldi	r22, 0x00	; 0
    2a62:	70 e0       	ldi	r23, 0x00	; 0
    2a64:	40 e0       	ldi	r20, 0x00	; 0
    2a66:	50 e0       	ldi	r21, 0x00	; 0
    2a68:	20 e0       	ldi	r18, 0x00	; 0
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,0,0);
    2a70:	80 e0       	ldi	r24, 0x00	; 0
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	60 e0       	ldi	r22, 0x00	; 0
    2a76:	70 e0       	ldi	r23, 0x00	; 0
    2a78:	40 e0       	ldi	r20, 0x00	; 0
    2a7a:	50 e0       	ldi	r21, 0x00	; 0
    2a7c:	20 e0       	ldi	r18, 0x00	; 0
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	00 e0       	ldi	r16, 0x00	; 0
    2a82:	10 e0       	ldi	r17, 0x00	; 0
    2a84:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
}
    2a88:	1f 91       	pop	r17
    2a8a:	0f 91       	pop	r16
    2a8c:	08 95       	ret

00002a8e <writeK>:
setLine(0,0,0,0,0);

}

void writeK()
{
    2a8e:	0f 93       	push	r16
    2a90:	1f 93       	push	r17
setLine(1,1,1,1,1);
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	61 e0       	ldi	r22, 0x01	; 1
    2a98:	70 e0       	ldi	r23, 0x00	; 0
    2a9a:	41 e0       	ldi	r20, 0x01	; 1
    2a9c:	50 e0       	ldi	r21, 0x00	; 0
    2a9e:	21 e0       	ldi	r18, 0x01	; 1
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	01 e0       	ldi	r16, 0x01	; 1
    2aa4:	10 e0       	ldi	r17, 0x00	; 0
    2aa6:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,1,0,0);
    2aaa:	80 e0       	ldi	r24, 0x00	; 0
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	60 e0       	ldi	r22, 0x00	; 0
    2ab0:	70 e0       	ldi	r23, 0x00	; 0
    2ab2:	41 e0       	ldi	r20, 0x01	; 1
    2ab4:	50 e0       	ldi	r21, 0x00	; 0
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	00 e0       	ldi	r16, 0x00	; 0
    2abc:	10 e0       	ldi	r17, 0x00	; 0
    2abe:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,1,0,1,0);
    2ac2:	80 e0       	ldi	r24, 0x00	; 0
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	61 e0       	ldi	r22, 0x01	; 1
    2ac8:	70 e0       	ldi	r23, 0x00	; 0
    2aca:	40 e0       	ldi	r20, 0x00	; 0
    2acc:	50 e0       	ldi	r21, 0x00	; 0
    2ace:	21 e0       	ldi	r18, 0x01	; 1
    2ad0:	30 e0       	ldi	r19, 0x00	; 0
    2ad2:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,0,0,0,1);
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	60 e0       	ldi	r22, 0x00	; 0
    2adc:	70 e0       	ldi	r23, 0x00	; 0
    2ade:	40 e0       	ldi	r20, 0x00	; 0
    2ae0:	50 e0       	ldi	r21, 0x00	; 0
    2ae2:	20 e0       	ldi	r18, 0x00	; 0
    2ae4:	30 e0       	ldi	r19, 0x00	; 0
    2ae6:	01 e0       	ldi	r16, 0x01	; 1
    2ae8:	10 e0       	ldi	r17, 0x00	; 0
    2aea:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,0,0);
    2aee:	80 e0       	ldi	r24, 0x00	; 0
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	60 e0       	ldi	r22, 0x00	; 0
    2af4:	70 e0       	ldi	r23, 0x00	; 0
    2af6:	40 e0       	ldi	r20, 0x00	; 0
    2af8:	50 e0       	ldi	r21, 0x00	; 0
    2afa:	20 e0       	ldi	r18, 0x00	; 0
    2afc:	30 e0       	ldi	r19, 0x00	; 0
    2afe:	00 e0       	ldi	r16, 0x00	; 0
    2b00:	10 e0       	ldi	r17, 0x00	; 0
    2b02:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>

}
    2b06:	1f 91       	pop	r17
    2b08:	0f 91       	pop	r16
    2b0a:	08 95       	ret

00002b0c <writeJ>:
setLine(1,1,1,1,1);
setLine(1,0,0,0,1);
}

void writeJ()
{
    2b0c:	0f 93       	push	r16
    2b0e:	1f 93       	push	r17
setLine(1,0,0,1,0);
    2b10:	81 e0       	ldi	r24, 0x01	; 1
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	60 e0       	ldi	r22, 0x00	; 0
    2b16:	70 e0       	ldi	r23, 0x00	; 0
    2b18:	40 e0       	ldi	r20, 0x00	; 0
    2b1a:	50 e0       	ldi	r21, 0x00	; 0
    2b1c:	21 e0       	ldi	r18, 0x01	; 1
    2b1e:	30 e0       	ldi	r19, 0x00	; 0
    2b20:	00 e0       	ldi	r16, 0x00	; 0
    2b22:	10 e0       	ldi	r17, 0x00	; 0
    2b24:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,0,0,0,1);
    2b28:	81 e0       	ldi	r24, 0x01	; 1
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	60 e0       	ldi	r22, 0x00	; 0
    2b2e:	70 e0       	ldi	r23, 0x00	; 0
    2b30:	40 e0       	ldi	r20, 0x00	; 0
    2b32:	50 e0       	ldi	r21, 0x00	; 0
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	01 e0       	ldi	r16, 0x01	; 1
    2b3a:	10 e0       	ldi	r17, 0x00	; 0
    2b3c:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,0,0,0,1);
    2b40:	81 e0       	ldi	r24, 0x01	; 1
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	60 e0       	ldi	r22, 0x00	; 0
    2b46:	70 e0       	ldi	r23, 0x00	; 0
    2b48:	40 e0       	ldi	r20, 0x00	; 0
    2b4a:	50 e0       	ldi	r21, 0x00	; 0
    2b4c:	20 e0       	ldi	r18, 0x00	; 0
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,1,1,1,0);
    2b54:	81 e0       	ldi	r24, 0x01	; 1
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	61 e0       	ldi	r22, 0x01	; 1
    2b5a:	70 e0       	ldi	r23, 0x00	; 0
    2b5c:	41 e0       	ldi	r20, 0x01	; 1
    2b5e:	50 e0       	ldi	r21, 0x00	; 0
    2b60:	21 e0       	ldi	r18, 0x01	; 1
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	00 e0       	ldi	r16, 0x00	; 0
    2b66:	10 e0       	ldi	r17, 0x00	; 0
    2b68:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,0,0);
    2b6c:	80 e0       	ldi	r24, 0x00	; 0
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	60 e0       	ldi	r22, 0x00	; 0
    2b72:	70 e0       	ldi	r23, 0x00	; 0
    2b74:	40 e0       	ldi	r20, 0x00	; 0
    2b76:	50 e0       	ldi	r21, 0x00	; 0
    2b78:	20 e0       	ldi	r18, 0x00	; 0
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>

}
    2b80:	1f 91       	pop	r17
    2b82:	0f 91       	pop	r16
    2b84:	08 95       	ret

00002b86 <writeI>:
setLine(0,0,0,0,0);

}

void writeI()
{
    2b86:	0f 93       	push	r16
    2b88:	1f 93       	push	r17
setLine(1,0,0,0,1);
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	60 e0       	ldi	r22, 0x00	; 0
    2b90:	70 e0       	ldi	r23, 0x00	; 0
    2b92:	40 e0       	ldi	r20, 0x00	; 0
    2b94:	50 e0       	ldi	r21, 0x00	; 0
    2b96:	20 e0       	ldi	r18, 0x00	; 0
    2b98:	30 e0       	ldi	r19, 0x00	; 0
    2b9a:	01 e0       	ldi	r16, 0x01	; 1
    2b9c:	10 e0       	ldi	r17, 0x00	; 0
    2b9e:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,1,1,1,1);
    2ba2:	81 e0       	ldi	r24, 0x01	; 1
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	61 e0       	ldi	r22, 0x01	; 1
    2ba8:	70 e0       	ldi	r23, 0x00	; 0
    2baa:	41 e0       	ldi	r20, 0x01	; 1
    2bac:	50 e0       	ldi	r21, 0x00	; 0
    2bae:	21 e0       	ldi	r18, 0x01	; 1
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,0,0,0,1);
    2bb6:	81 e0       	ldi	r24, 0x01	; 1
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	60 e0       	ldi	r22, 0x00	; 0
    2bbc:	70 e0       	ldi	r23, 0x00	; 0
    2bbe:	40 e0       	ldi	r20, 0x00	; 0
    2bc0:	50 e0       	ldi	r21, 0x00	; 0
    2bc2:	20 e0       	ldi	r18, 0x00	; 0
    2bc4:	30 e0       	ldi	r19, 0x00	; 0
    2bc6:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
}
    2bca:	1f 91       	pop	r17
    2bcc:	0f 91       	pop	r16
    2bce:	08 95       	ret

00002bd0 <writeH>:
setLine(0,0,0,0,0);

}

void writeH()
{
    2bd0:	0f 93       	push	r16
    2bd2:	1f 93       	push	r17
setLine(1,1,1,1,1);
    2bd4:	81 e0       	ldi	r24, 0x01	; 1
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	61 e0       	ldi	r22, 0x01	; 1
    2bda:	70 e0       	ldi	r23, 0x00	; 0
    2bdc:	41 e0       	ldi	r20, 0x01	; 1
    2bde:	50 e0       	ldi	r21, 0x00	; 0
    2be0:	21 e0       	ldi	r18, 0x01	; 1
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	01 e0       	ldi	r16, 0x01	; 1
    2be6:	10 e0       	ldi	r17, 0x00	; 0
    2be8:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,1,0,0);
    2bec:	80 e0       	ldi	r24, 0x00	; 0
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	60 e0       	ldi	r22, 0x00	; 0
    2bf2:	70 e0       	ldi	r23, 0x00	; 0
    2bf4:	41 e0       	ldi	r20, 0x01	; 1
    2bf6:	50 e0       	ldi	r21, 0x00	; 0
    2bf8:	20 e0       	ldi	r18, 0x00	; 0
    2bfa:	30 e0       	ldi	r19, 0x00	; 0
    2bfc:	00 e0       	ldi	r16, 0x00	; 0
    2bfe:	10 e0       	ldi	r17, 0x00	; 0
    2c00:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,1,0,0);
    2c04:	80 e0       	ldi	r24, 0x00	; 0
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	60 e0       	ldi	r22, 0x00	; 0
    2c0a:	70 e0       	ldi	r23, 0x00	; 0
    2c0c:	41 e0       	ldi	r20, 0x01	; 1
    2c0e:	50 e0       	ldi	r21, 0x00	; 0
    2c10:	20 e0       	ldi	r18, 0x00	; 0
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,1,1,1,1);
    2c18:	81 e0       	ldi	r24, 0x01	; 1
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	61 e0       	ldi	r22, 0x01	; 1
    2c1e:	70 e0       	ldi	r23, 0x00	; 0
    2c20:	41 e0       	ldi	r20, 0x01	; 1
    2c22:	50 e0       	ldi	r21, 0x00	; 0
    2c24:	21 e0       	ldi	r18, 0x01	; 1
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	01 e0       	ldi	r16, 0x01	; 1
    2c2a:	10 e0       	ldi	r17, 0x00	; 0
    2c2c:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,0,0);
    2c30:	80 e0       	ldi	r24, 0x00	; 0
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	60 e0       	ldi	r22, 0x00	; 0
    2c36:	70 e0       	ldi	r23, 0x00	; 0
    2c38:	40 e0       	ldi	r20, 0x00	; 0
    2c3a:	50 e0       	ldi	r21, 0x00	; 0
    2c3c:	20 e0       	ldi	r18, 0x00	; 0
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	00 e0       	ldi	r16, 0x00	; 0
    2c42:	10 e0       	ldi	r17, 0x00	; 0
    2c44:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>

}
    2c48:	1f 91       	pop	r17
    2c4a:	0f 91       	pop	r16
    2c4c:	08 95       	ret

00002c4e <writeG>:
setLine(0,0,0,0,0);

}

void writeG()
{
    2c4e:	0f 93       	push	r16
    2c50:	1f 93       	push	r17
setLine(0,1,1,1,0);
    2c52:	80 e0       	ldi	r24, 0x00	; 0
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	61 e0       	ldi	r22, 0x01	; 1
    2c58:	70 e0       	ldi	r23, 0x00	; 0
    2c5a:	41 e0       	ldi	r20, 0x01	; 1
    2c5c:	50 e0       	ldi	r21, 0x00	; 0
    2c5e:	21 e0       	ldi	r18, 0x01	; 1
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	00 e0       	ldi	r16, 0x00	; 0
    2c64:	10 e0       	ldi	r17, 0x00	; 0
    2c66:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,0,0,0,1);
    2c6a:	81 e0       	ldi	r24, 0x01	; 1
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	60 e0       	ldi	r22, 0x00	; 0
    2c70:	70 e0       	ldi	r23, 0x00	; 0
    2c72:	40 e0       	ldi	r20, 0x00	; 0
    2c74:	50 e0       	ldi	r21, 0x00	; 0
    2c76:	20 e0       	ldi	r18, 0x00	; 0
    2c78:	30 e0       	ldi	r19, 0x00	; 0
    2c7a:	01 e0       	ldi	r16, 0x01	; 1
    2c7c:	10 e0       	ldi	r17, 0x00	; 0
    2c7e:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,0,0,0,1);
    2c82:	81 e0       	ldi	r24, 0x01	; 1
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	60 e0       	ldi	r22, 0x00	; 0
    2c88:	70 e0       	ldi	r23, 0x00	; 0
    2c8a:	40 e0       	ldi	r20, 0x00	; 0
    2c8c:	50 e0       	ldi	r21, 0x00	; 0
    2c8e:	20 e0       	ldi	r18, 0x00	; 0
    2c90:	30 e0       	ldi	r19, 0x00	; 0
    2c92:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,0,1,0,1);
    2c96:	81 e0       	ldi	r24, 0x01	; 1
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	60 e0       	ldi	r22, 0x00	; 0
    2c9c:	70 e0       	ldi	r23, 0x00	; 0
    2c9e:	41 e0       	ldi	r20, 0x01	; 1
    2ca0:	50 e0       	ldi	r21, 0x00	; 0
    2ca2:	20 e0       	ldi	r18, 0x00	; 0
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,0,1,1,0);
    2caa:	81 e0       	ldi	r24, 0x01	; 1
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	60 e0       	ldi	r22, 0x00	; 0
    2cb0:	70 e0       	ldi	r23, 0x00	; 0
    2cb2:	41 e0       	ldi	r20, 0x01	; 1
    2cb4:	50 e0       	ldi	r21, 0x00	; 0
    2cb6:	21 e0       	ldi	r18, 0x01	; 1
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	00 e0       	ldi	r16, 0x00	; 0
    2cbc:	10 e0       	ldi	r17, 0x00	; 0
    2cbe:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,0,0);
    2cc2:	80 e0       	ldi	r24, 0x00	; 0
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	60 e0       	ldi	r22, 0x00	; 0
    2cc8:	70 e0       	ldi	r23, 0x00	; 0
    2cca:	40 e0       	ldi	r20, 0x00	; 0
    2ccc:	50 e0       	ldi	r21, 0x00	; 0
    2cce:	20 e0       	ldi	r18, 0x00	; 0
    2cd0:	30 e0       	ldi	r19, 0x00	; 0
    2cd2:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>

}
    2cd6:	1f 91       	pop	r17
    2cd8:	0f 91       	pop	r16
    2cda:	08 95       	ret

00002cdc <writeF>:
setLine(0,0,0,0,0);

}

void writeF()
{
    2cdc:	0f 93       	push	r16
    2cde:	1f 93       	push	r17
setLine(1,1,1,1,1);
    2ce0:	81 e0       	ldi	r24, 0x01	; 1
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	61 e0       	ldi	r22, 0x01	; 1
    2ce6:	70 e0       	ldi	r23, 0x00	; 0
    2ce8:	41 e0       	ldi	r20, 0x01	; 1
    2cea:	50 e0       	ldi	r21, 0x00	; 0
    2cec:	21 e0       	ldi	r18, 0x01	; 1
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	01 e0       	ldi	r16, 0x01	; 1
    2cf2:	10 e0       	ldi	r17, 0x00	; 0
    2cf4:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,0,1,0,0);
    2cf8:	81 e0       	ldi	r24, 0x01	; 1
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	60 e0       	ldi	r22, 0x00	; 0
    2cfe:	70 e0       	ldi	r23, 0x00	; 0
    2d00:	41 e0       	ldi	r20, 0x01	; 1
    2d02:	50 e0       	ldi	r21, 0x00	; 0
    2d04:	20 e0       	ldi	r18, 0x00	; 0
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	00 e0       	ldi	r16, 0x00	; 0
    2d0a:	10 e0       	ldi	r17, 0x00	; 0
    2d0c:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,0,1,0,0);
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	60 e0       	ldi	r22, 0x00	; 0
    2d16:	70 e0       	ldi	r23, 0x00	; 0
    2d18:	41 e0       	ldi	r20, 0x01	; 1
    2d1a:	50 e0       	ldi	r21, 0x00	; 0
    2d1c:	20 e0       	ldi	r18, 0x00	; 0
    2d1e:	30 e0       	ldi	r19, 0x00	; 0
    2d20:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,0,0,0,0);
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	60 e0       	ldi	r22, 0x00	; 0
    2d2a:	70 e0       	ldi	r23, 0x00	; 0
    2d2c:	40 e0       	ldi	r20, 0x00	; 0
    2d2e:	50 e0       	ldi	r21, 0x00	; 0
    2d30:	20 e0       	ldi	r18, 0x00	; 0
    2d32:	30 e0       	ldi	r19, 0x00	; 0
    2d34:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,0,0);
    2d38:	80 e0       	ldi	r24, 0x00	; 0
    2d3a:	90 e0       	ldi	r25, 0x00	; 0
    2d3c:	60 e0       	ldi	r22, 0x00	; 0
    2d3e:	70 e0       	ldi	r23, 0x00	; 0
    2d40:	40 e0       	ldi	r20, 0x00	; 0
    2d42:	50 e0       	ldi	r21, 0x00	; 0
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>

}
    2d4c:	1f 91       	pop	r17
    2d4e:	0f 91       	pop	r16
    2d50:	08 95       	ret

00002d52 <writeE>:
setLine(0,0,0,0,0);

}

void writeE()
{
    2d52:	0f 93       	push	r16
    2d54:	1f 93       	push	r17
setLine(1,1,1,1,1);
    2d56:	81 e0       	ldi	r24, 0x01	; 1
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	61 e0       	ldi	r22, 0x01	; 1
    2d5c:	70 e0       	ldi	r23, 0x00	; 0
    2d5e:	41 e0       	ldi	r20, 0x01	; 1
    2d60:	50 e0       	ldi	r21, 0x00	; 0
    2d62:	21 e0       	ldi	r18, 0x01	; 1
    2d64:	30 e0       	ldi	r19, 0x00	; 0
    2d66:	01 e0       	ldi	r16, 0x01	; 1
    2d68:	10 e0       	ldi	r17, 0x00	; 0
    2d6a:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,0,1,0,1);
    2d6e:	81 e0       	ldi	r24, 0x01	; 1
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	60 e0       	ldi	r22, 0x00	; 0
    2d74:	70 e0       	ldi	r23, 0x00	; 0
    2d76:	41 e0       	ldi	r20, 0x01	; 1
    2d78:	50 e0       	ldi	r21, 0x00	; 0
    2d7a:	20 e0       	ldi	r18, 0x00	; 0
    2d7c:	30 e0       	ldi	r19, 0x00	; 0
    2d7e:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,0,1,0,1);
    2d82:	81 e0       	ldi	r24, 0x01	; 1
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	60 e0       	ldi	r22, 0x00	; 0
    2d88:	70 e0       	ldi	r23, 0x00	; 0
    2d8a:	41 e0       	ldi	r20, 0x01	; 1
    2d8c:	50 e0       	ldi	r21, 0x00	; 0
    2d8e:	20 e0       	ldi	r18, 0x00	; 0
    2d90:	30 e0       	ldi	r19, 0x00	; 0
    2d92:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,0,0,0,1);
    2d96:	81 e0       	ldi	r24, 0x01	; 1
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	60 e0       	ldi	r22, 0x00	; 0
    2d9c:	70 e0       	ldi	r23, 0x00	; 0
    2d9e:	40 e0       	ldi	r20, 0x00	; 0
    2da0:	50 e0       	ldi	r21, 0x00	; 0
    2da2:	20 e0       	ldi	r18, 0x00	; 0
    2da4:	30 e0       	ldi	r19, 0x00	; 0
    2da6:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,0,0);
    2daa:	80 e0       	ldi	r24, 0x00	; 0
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	60 e0       	ldi	r22, 0x00	; 0
    2db0:	70 e0       	ldi	r23, 0x00	; 0
    2db2:	40 e0       	ldi	r20, 0x00	; 0
    2db4:	50 e0       	ldi	r21, 0x00	; 0
    2db6:	20 e0       	ldi	r18, 0x00	; 0
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	00 e0       	ldi	r16, 0x00	; 0
    2dbc:	10 e0       	ldi	r17, 0x00	; 0
    2dbe:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>

}
    2dc2:	1f 91       	pop	r17
    2dc4:	0f 91       	pop	r16
    2dc6:	08 95       	ret

00002dc8 <writeD>:
setLine(0,0,0,0,0);

}

void writeD()
{
    2dc8:	0f 93       	push	r16
    2dca:	1f 93       	push	r17
setLine(1,1,1,1,1);
    2dcc:	81 e0       	ldi	r24, 0x01	; 1
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	61 e0       	ldi	r22, 0x01	; 1
    2dd2:	70 e0       	ldi	r23, 0x00	; 0
    2dd4:	41 e0       	ldi	r20, 0x01	; 1
    2dd6:	50 e0       	ldi	r21, 0x00	; 0
    2dd8:	21 e0       	ldi	r18, 0x01	; 1
    2dda:	30 e0       	ldi	r19, 0x00	; 0
    2ddc:	01 e0       	ldi	r16, 0x01	; 1
    2dde:	10 e0       	ldi	r17, 0x00	; 0
    2de0:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,0,0,0,1);
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	60 e0       	ldi	r22, 0x00	; 0
    2dea:	70 e0       	ldi	r23, 0x00	; 0
    2dec:	40 e0       	ldi	r20, 0x00	; 0
    2dee:	50 e0       	ldi	r21, 0x00	; 0
    2df0:	20 e0       	ldi	r18, 0x00	; 0
    2df2:	30 e0       	ldi	r19, 0x00	; 0
    2df4:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,0,0,0,1);
    2df8:	81 e0       	ldi	r24, 0x01	; 1
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	60 e0       	ldi	r22, 0x00	; 0
    2dfe:	70 e0       	ldi	r23, 0x00	; 0
    2e00:	40 e0       	ldi	r20, 0x00	; 0
    2e02:	50 e0       	ldi	r21, 0x00	; 0
    2e04:	20 e0       	ldi	r18, 0x00	; 0
    2e06:	30 e0       	ldi	r19, 0x00	; 0
    2e08:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,1,1,1,0);
    2e0c:	80 e0       	ldi	r24, 0x00	; 0
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	61 e0       	ldi	r22, 0x01	; 1
    2e12:	70 e0       	ldi	r23, 0x00	; 0
    2e14:	41 e0       	ldi	r20, 0x01	; 1
    2e16:	50 e0       	ldi	r21, 0x00	; 0
    2e18:	21 e0       	ldi	r18, 0x01	; 1
    2e1a:	30 e0       	ldi	r19, 0x00	; 0
    2e1c:	00 e0       	ldi	r16, 0x00	; 0
    2e1e:	10 e0       	ldi	r17, 0x00	; 0
    2e20:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,0,0);
    2e24:	80 e0       	ldi	r24, 0x00	; 0
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	60 e0       	ldi	r22, 0x00	; 0
    2e2a:	70 e0       	ldi	r23, 0x00	; 0
    2e2c:	40 e0       	ldi	r20, 0x00	; 0
    2e2e:	50 e0       	ldi	r21, 0x00	; 0
    2e30:	20 e0       	ldi	r18, 0x00	; 0
    2e32:	30 e0       	ldi	r19, 0x00	; 0
    2e34:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>

}
    2e38:	1f 91       	pop	r17
    2e3a:	0f 91       	pop	r16
    2e3c:	08 95       	ret

00002e3e <writeC>:
setLine(0,0,0,0,0);

}

void writeC()
{
    2e3e:	0f 93       	push	r16
    2e40:	1f 93       	push	r17
setLine(0,1,1,1,0);
    2e42:	80 e0       	ldi	r24, 0x00	; 0
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	61 e0       	ldi	r22, 0x01	; 1
    2e48:	70 e0       	ldi	r23, 0x00	; 0
    2e4a:	41 e0       	ldi	r20, 0x01	; 1
    2e4c:	50 e0       	ldi	r21, 0x00	; 0
    2e4e:	21 e0       	ldi	r18, 0x01	; 1
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	00 e0       	ldi	r16, 0x00	; 0
    2e54:	10 e0       	ldi	r17, 0x00	; 0
    2e56:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,0,0,0,1);
    2e5a:	81 e0       	ldi	r24, 0x01	; 1
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	60 e0       	ldi	r22, 0x00	; 0
    2e60:	70 e0       	ldi	r23, 0x00	; 0
    2e62:	40 e0       	ldi	r20, 0x00	; 0
    2e64:	50 e0       	ldi	r21, 0x00	; 0
    2e66:	20 e0       	ldi	r18, 0x00	; 0
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	01 e0       	ldi	r16, 0x01	; 1
    2e6c:	10 e0       	ldi	r17, 0x00	; 0
    2e6e:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,0,0,0,1);
    2e72:	81 e0       	ldi	r24, 0x01	; 1
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	60 e0       	ldi	r22, 0x00	; 0
    2e78:	70 e0       	ldi	r23, 0x00	; 0
    2e7a:	40 e0       	ldi	r20, 0x00	; 0
    2e7c:	50 e0       	ldi	r21, 0x00	; 0
    2e7e:	20 e0       	ldi	r18, 0x00	; 0
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,0,0,0,1);
    2e86:	81 e0       	ldi	r24, 0x01	; 1
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	60 e0       	ldi	r22, 0x00	; 0
    2e8c:	70 e0       	ldi	r23, 0x00	; 0
    2e8e:	40 e0       	ldi	r20, 0x00	; 0
    2e90:	50 e0       	ldi	r21, 0x00	; 0
    2e92:	20 e0       	ldi	r18, 0x00	; 0
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,0,0);
    2e9a:	80 e0       	ldi	r24, 0x00	; 0
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	60 e0       	ldi	r22, 0x00	; 0
    2ea0:	70 e0       	ldi	r23, 0x00	; 0
    2ea2:	40 e0       	ldi	r20, 0x00	; 0
    2ea4:	50 e0       	ldi	r21, 0x00	; 0
    2ea6:	20 e0       	ldi	r18, 0x00	; 0
    2ea8:	30 e0       	ldi	r19, 0x00	; 0
    2eaa:	00 e0       	ldi	r16, 0x00	; 0
    2eac:	10 e0       	ldi	r17, 0x00	; 0
    2eae:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>

}
    2eb2:	1f 91       	pop	r17
    2eb4:	0f 91       	pop	r16
    2eb6:	08 95       	ret

00002eb8 <writeB>:
 setLine(0,1,1,1,1);
 setLine(0,0,0,0,0);
}

void writeB()
{
    2eb8:	0f 93       	push	r16
    2eba:	1f 93       	push	r17
setLine(1,1,1,1,1);
    2ebc:	81 e0       	ldi	r24, 0x01	; 1
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	61 e0       	ldi	r22, 0x01	; 1
    2ec2:	70 e0       	ldi	r23, 0x00	; 0
    2ec4:	41 e0       	ldi	r20, 0x01	; 1
    2ec6:	50 e0       	ldi	r21, 0x00	; 0
    2ec8:	21 e0       	ldi	r18, 0x01	; 1
    2eca:	30 e0       	ldi	r19, 0x00	; 0
    2ecc:	01 e0       	ldi	r16, 0x01	; 1
    2ece:	10 e0       	ldi	r17, 0x00	; 0
    2ed0:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,0,1,0,1);
    2ed4:	81 e0       	ldi	r24, 0x01	; 1
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	60 e0       	ldi	r22, 0x00	; 0
    2eda:	70 e0       	ldi	r23, 0x00	; 0
    2edc:	41 e0       	ldi	r20, 0x01	; 1
    2ede:	50 e0       	ldi	r21, 0x00	; 0
    2ee0:	20 e0       	ldi	r18, 0x00	; 0
    2ee2:	30 e0       	ldi	r19, 0x00	; 0
    2ee4:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(1,0,1,0,1);
    2ee8:	81 e0       	ldi	r24, 0x01	; 1
    2eea:	90 e0       	ldi	r25, 0x00	; 0
    2eec:	60 e0       	ldi	r22, 0x00	; 0
    2eee:	70 e0       	ldi	r23, 0x00	; 0
    2ef0:	41 e0       	ldi	r20, 0x01	; 1
    2ef2:	50 e0       	ldi	r21, 0x00	; 0
    2ef4:	20 e0       	ldi	r18, 0x00	; 0
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,1,0,1,0);
    2efc:	80 e0       	ldi	r24, 0x00	; 0
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	61 e0       	ldi	r22, 0x01	; 1
    2f02:	70 e0       	ldi	r23, 0x00	; 0
    2f04:	40 e0       	ldi	r20, 0x00	; 0
    2f06:	50 e0       	ldi	r21, 0x00	; 0
    2f08:	21 e0       	ldi	r18, 0x01	; 1
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	00 e0       	ldi	r16, 0x00	; 0
    2f0e:	10 e0       	ldi	r17, 0x00	; 0
    2f10:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
setLine(0,0,0,0,0);
    2f14:	80 e0       	ldi	r24, 0x00	; 0
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	60 e0       	ldi	r22, 0x00	; 0
    2f1a:	70 e0       	ldi	r23, 0x00	; 0
    2f1c:	40 e0       	ldi	r20, 0x00	; 0
    2f1e:	50 e0       	ldi	r21, 0x00	; 0
    2f20:	20 e0       	ldi	r18, 0x00	; 0
    2f22:	30 e0       	ldi	r19, 0x00	; 0
    2f24:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>

}
    2f28:	1f 91       	pop	r17
    2f2a:	0f 91       	pop	r16
    2f2c:	08 95       	ret

00002f2e <writeA>:
	shiftLeft();

}

void writeA()
{
    2f2e:	0f 93       	push	r16
    2f30:	1f 93       	push	r17
 setLine(0,1,1,1,1);
    2f32:	80 e0       	ldi	r24, 0x00	; 0
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	61 e0       	ldi	r22, 0x01	; 1
    2f38:	70 e0       	ldi	r23, 0x00	; 0
    2f3a:	41 e0       	ldi	r20, 0x01	; 1
    2f3c:	50 e0       	ldi	r21, 0x00	; 0
    2f3e:	21 e0       	ldi	r18, 0x01	; 1
    2f40:	30 e0       	ldi	r19, 0x00	; 0
    2f42:	01 e0       	ldi	r16, 0x01	; 1
    2f44:	10 e0       	ldi	r17, 0x00	; 0
    2f46:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
 setLine(1,0,1,0,0);
    2f4a:	81 e0       	ldi	r24, 0x01	; 1
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	60 e0       	ldi	r22, 0x00	; 0
    2f50:	70 e0       	ldi	r23, 0x00	; 0
    2f52:	41 e0       	ldi	r20, 0x01	; 1
    2f54:	50 e0       	ldi	r21, 0x00	; 0
    2f56:	20 e0       	ldi	r18, 0x00	; 0
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	00 e0       	ldi	r16, 0x00	; 0
    2f5c:	10 e0       	ldi	r17, 0x00	; 0
    2f5e:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
 setLine(1,0,1,0,0);
    2f62:	81 e0       	ldi	r24, 0x01	; 1
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	60 e0       	ldi	r22, 0x00	; 0
    2f68:	70 e0       	ldi	r23, 0x00	; 0
    2f6a:	41 e0       	ldi	r20, 0x01	; 1
    2f6c:	50 e0       	ldi	r21, 0x00	; 0
    2f6e:	20 e0       	ldi	r18, 0x00	; 0
    2f70:	30 e0       	ldi	r19, 0x00	; 0
    2f72:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
 setLine(0,1,1,1,1);
    2f76:	80 e0       	ldi	r24, 0x00	; 0
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	61 e0       	ldi	r22, 0x01	; 1
    2f7c:	70 e0       	ldi	r23, 0x00	; 0
    2f7e:	41 e0       	ldi	r20, 0x01	; 1
    2f80:	50 e0       	ldi	r21, 0x00	; 0
    2f82:	21 e0       	ldi	r18, 0x01	; 1
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	01 e0       	ldi	r16, 0x01	; 1
    2f88:	10 e0       	ldi	r17, 0x00	; 0
    2f8a:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
 setLine(0,0,0,0,0);
    2f8e:	80 e0       	ldi	r24, 0x00	; 0
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	60 e0       	ldi	r22, 0x00	; 0
    2f94:	70 e0       	ldi	r23, 0x00	; 0
    2f96:	40 e0       	ldi	r20, 0x00	; 0
    2f98:	50 e0       	ldi	r21, 0x00	; 0
    2f9a:	20 e0       	ldi	r18, 0x00	; 0
    2f9c:	30 e0       	ldi	r19, 0x00	; 0
    2f9e:	00 e0       	ldi	r16, 0x00	; 0
    2fa0:	10 e0       	ldi	r17, 0x00	; 0
    2fa2:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <setLine>
}
    2fa6:	1f 91       	pop	r17
    2fa8:	0f 91       	pop	r16
    2faa:	08 95       	ret

00002fac <writer>:
setLine(0,0,0,0,0);
}


void writer(char word[],int size)
{
    2fac:	cf 92       	push	r12
    2fae:	df 92       	push	r13
    2fb0:	ef 92       	push	r14
    2fb2:	ff 92       	push	r15
    2fb4:	0f 93       	push	r16
    2fb6:	1f 93       	push	r17
    2fb8:	cf 93       	push	r28
    2fba:	df 93       	push	r29
    2fbc:	6c 01       	movw	r12, r24
    2fbe:	8b 01       	movw	r16, r22
fill(0x00);
    2fc0:	80 e0       	ldi	r24, 0x00	; 0
    2fc2:	0e 94 bc 05 	call	0xb78	; 0xb78 <fill>
    2fc6:	c0 e0       	ldi	r28, 0x00	; 0
    2fc8:	d0 e0       	ldi	r29, 0x00	; 0
	for (unsigned int i = 0; i < (size+3); i++)
    2fca:	63 e0       	ldi	r22, 0x03	; 3
    2fcc:	e6 2e       	mov	r14, r22
    2fce:	f1 2c       	mov	r15, r1
    2fd0:	e0 0e       	add	r14, r16
    2fd2:	f1 1e       	adc	r15, r17
    2fd4:	80 c0       	rjmp	.+256    	; 0x30d6 <writer+0x12a>
{	
	char current = word[i];
    2fd6:	f6 01       	movw	r30, r12
    2fd8:	ec 0f       	add	r30, r28
    2fda:	fd 1f       	adc	r31, r29
    2fdc:	80 81       	ld	r24, Z
	if (i >= size) current = ' ';
    2fde:	c0 17       	cp	r28, r16
    2fe0:	d1 07       	cpc	r29, r17
    2fe2:	08 f0       	brcs	.+2      	; 0x2fe6 <writer+0x3a>
    2fe4:	75 c0       	rjmp	.+234    	; 0x30d0 <writer+0x124>
	switch(current)
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	fc 01       	movw	r30, r24
    2fea:	b1 97       	sbiw	r30, 0x21	; 33
    2fec:	ea 33       	cpi	r30, 0x3A	; 58
    2fee:	f1 05       	cpc	r31, r1
    2ff0:	08 f0       	brcs	.+2      	; 0x2ff4 <writer+0x48>
    2ff2:	6e c0       	rjmp	.+220    	; 0x30d0 <writer+0x124>
    2ff4:	e6 5d       	subi	r30, 0xD6	; 214
    2ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff8:	ee 0f       	add	r30, r30
    2ffa:	ff 1f       	adc	r31, r31
    2ffc:	05 90       	lpm	r0, Z+
    2ffe:	f4 91       	lpm	r31, Z+
    3000:	e0 2d       	mov	r30, r0
    3002:	09 94       	ijmp
	{case 'A':
	writeA();
    3004:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <writeA>
    3008:	65 c0       	rjmp	.+202    	; 0x30d4 <writer+0x128>
	break;
	case 'B':
	writeB();
    300a:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <writeB>
    300e:	62 c0       	rjmp	.+196    	; 0x30d4 <writer+0x128>
	break;
	case 'C':
	writeC();
    3010:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <writeC>
    3014:	5f c0       	rjmp	.+190    	; 0x30d4 <writer+0x128>
	break;
	case 'D':
	writeD();
    3016:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <writeD>
    301a:	5c c0       	rjmp	.+184    	; 0x30d4 <writer+0x128>
	break;
	case 'E':
	writeE();
    301c:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <writeE>
    3020:	59 c0       	rjmp	.+178    	; 0x30d4 <writer+0x128>
	break;
	case 'F':
	writeF();
    3022:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <writeF>
    3026:	56 c0       	rjmp	.+172    	; 0x30d4 <writer+0x128>
	break;
	case 'G':
	writeG();
    3028:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <writeG>
    302c:	53 c0       	rjmp	.+166    	; 0x30d4 <writer+0x128>
	break;
	case 'H':
	writeH();
    302e:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <writeH>
    3032:	50 c0       	rjmp	.+160    	; 0x30d4 <writer+0x128>
	break;
	case 'I':
	writeI();
    3034:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <writeI>
    3038:	4d c0       	rjmp	.+154    	; 0x30d4 <writer+0x128>
break;
	case 'J':
	writeJ();
    303a:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <writeJ>
    303e:	4a c0       	rjmp	.+148    	; 0x30d4 <writer+0x128>
break;
	case 'K':
	writeK();
    3040:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <writeK>
    3044:	47 c0       	rjmp	.+142    	; 0x30d4 <writer+0x128>
break;
	case 'L':
	writeL();
    3046:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <writeL>
    304a:	44 c0       	rjmp	.+136    	; 0x30d4 <writer+0x128>
break;
	case 'M':
	writeM();
    304c:	0e 94 c3 14 	call	0x2986	; 0x2986 <writeM>
    3050:	41 c0       	rjmp	.+130    	; 0x30d4 <writer+0x128>
break;
	case 'N':
	writeN();
    3052:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <writeN>
    3056:	3e c0       	rjmp	.+124    	; 0x30d4 <writer+0x128>
break;
	case 'O':
	writeO();
    3058:	0e 94 3d 14 	call	0x287a	; 0x287a <writeO>
    305c:	3b c0       	rjmp	.+118    	; 0x30d4 <writer+0x128>
break;
	case 'P':
	writeP();
    305e:	0e 94 02 14 	call	0x2804	; 0x2804 <writeP>
    3062:	38 c0       	rjmp	.+112    	; 0x30d4 <writer+0x128>
break;
	case 'Q':
	writeQ();
    3064:	0e 94 c5 13 	call	0x278a	; 0x278a <writeQ>
    3068:	35 c0       	rjmp	.+106    	; 0x30d4 <writer+0x128>
break;
	case 'R':
	writeR();
    306a:	0e 94 86 13 	call	0x270c	; 0x270c <writeR>
    306e:	32 c0       	rjmp	.+100    	; 0x30d4 <writer+0x128>
break;
	case 'S':
	writeS();
    3070:	0e 94 4b 13 	call	0x2696	; 0x2696 <writeS>
    3074:	2f c0       	rjmp	.+94     	; 0x30d4 <writer+0x128>
break;
	case 'T':
	writeT();
    3076:	0e 94 04 13 	call	0x2608	; 0x2608 <writeT>
    307a:	2c c0       	rjmp	.+88     	; 0x30d4 <writer+0x128>
break;
	case 'U':
	writeU();
    307c:	0e 94 c7 12 	call	0x258e	; 0x258e <writeU>
    3080:	29 c0       	rjmp	.+82     	; 0x30d4 <writer+0x128>
	break;
	case 'V':
	writeV();
    3082:	0e 94 80 12 	call	0x2500	; 0x2500 <writeV>
    3086:	26 c0       	rjmp	.+76     	; 0x30d4 <writer+0x128>
	break;
	case 'W':
	writeW();
    3088:	0e 94 37 12 	call	0x246e	; 0x246e <writeW>
    308c:	23 c0       	rjmp	.+70     	; 0x30d4 <writer+0x128>
	break;
	case 'X':
	writeX();
    308e:	0e 94 ee 11 	call	0x23dc	; 0x23dc <writeX>
    3092:	20 c0       	rjmp	.+64     	; 0x30d4 <writer+0x128>
	break;
	case 'Y':
	writeY();
    3094:	0e 94 a7 11 	call	0x234e	; 0x234e <writeY>
    3098:	1d c0       	rjmp	.+58     	; 0x30d4 <writer+0x128>
	break;
	case 'Z':
	writeZ();
    309a:	0e 94 62 11 	call	0x22c4	; 0x22c4 <writeZ>
    309e:	1a c0       	rjmp	.+52     	; 0x30d4 <writer+0x128>
	break;
	case '?':
	writeQM();
    30a0:	0e 94 1b 11 	call	0x2236	; 0x2236 <writeQM>
    30a4:	17 c0       	rjmp	.+46     	; 0x30d4 <writer+0x128>
	break;
	case '\'':
	writeAPO();
    30a6:	0e 94 00 11 	call	0x2200	; 0x2200 <writeAPO>
    30aa:	14 c0       	rjmp	.+40     	; 0x30d4 <writer+0x128>
	break;
	case '!':
	writeEM();
    30ac:	0e 94 b4 10 	call	0x2168	; 0x2168 <writeEM>
    30b0:	11 c0       	rjmp	.+34     	; 0x30d4 <writer+0x128>
	break;
	case '(':
	writeBRKO();
    30b2:	0e 94 22 10 	call	0x2044	; 0x2044 <writeBRKO>
    30b6:	0e c0       	rjmp	.+28     	; 0x30d4 <writer+0x128>
	break;
	case ')':
	writeBRKC();
    30b8:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <writeBRKC>
    30bc:	0b c0       	rjmp	.+22     	; 0x30d4 <writer+0x128>
	break;
	case '=':
	writeEQL();
    30be:	0e 94 4b 10 	call	0x2096	; 0x2096 <writeEQL>
    30c2:	08 c0       	rjmp	.+16     	; 0x30d4 <writer+0x128>
	break;
	case '.':
	writeDOT();
    30c4:	0e 94 97 10 	call	0x212e	; 0x212e <writeDOT>
    30c8:	05 c0       	rjmp	.+10     	; 0x30d4 <writer+0x128>
	break;
	case ',':
	writeCOM();
    30ca:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <writeCOM>
    30ce:	02 c0       	rjmp	.+4      	; 0x30d4 <writer+0x128>
	break;
	default:
	writeEMP();
    30d0:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <writeEMP>


void writer(char word[],int size)
{
fill(0x00);
	for (unsigned int i = 0; i < (size+3); i++)
    30d4:	21 96       	adiw	r28, 0x01	; 1
    30d6:	ce 15       	cp	r28, r14
    30d8:	df 05       	cpc	r29, r15
    30da:	08 f4       	brcc	.+2      	; 0x30de <writer+0x132>
    30dc:	7c cf       	rjmp	.-264    	; 0x2fd6 <writer+0x2a>
	default:
	writeEMP();
	break;
	} 
}
    30de:	df 91       	pop	r29
    30e0:	cf 91       	pop	r28
    30e2:	1f 91       	pop	r17
    30e4:	0f 91       	pop	r16
    30e6:	ff 90       	pop	r15
    30e8:	ef 90       	pop	r14
    30ea:	df 90       	pop	r13
    30ec:	cf 90       	pop	r12
    30ee:	08 95       	ret

000030f0 <shiftBack>:
	}
}


void shiftBack()
{
    30f0:	cf 92       	push	r12
    30f2:	df 92       	push	r13
    30f4:	ef 92       	push	r14
    30f6:	ff 92       	push	r15
    30f8:	0f 93       	push	r16
    30fa:	1f 93       	push	r17
    30fc:	cf 93       	push	r28
    30fe:	df 93       	push	r29
    3100:	74 e0       	ldi	r23, 0x04	; 4
    3102:	e7 2e       	mov	r14, r23
    3104:	f1 2c       	mov	r15, r1
    3106:	24 c0       	rjmp	.+72     	; 0x3150 <shiftBack+0x60>
       {
       for (j=0;j<5;j++)
       {
       for (k=0;k<5;k++)
               {
                       if(getLED(i-1,j,k)){
    3108:	c6 01       	movw	r24, r12
    310a:	b8 01       	movw	r22, r16
    310c:	ae 01       	movw	r20, r28
    310e:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <getLED>
    3112:	88 23       	and	r24, r24
    3114:	31 f0       	breq	.+12     	; 0x3122 <shiftBack+0x32>
                               setLED(i,j,k);
    3116:	c7 01       	movw	r24, r14
    3118:	b8 01       	movw	r22, r16
    311a:	ae 01       	movw	r20, r28
    311c:	0e 94 23 02 	call	0x446	; 0x446 <setLED>
    3120:	05 c0       	rjmp	.+10     	; 0x312c <shiftBack+0x3c>
							   //clrLED(i-1,j,k);
							   }
                       else
                               clrLED(i,j,k);
    3122:	c7 01       	movw	r24, r14
    3124:	b8 01       	movw	r22, r16
    3126:	ae 01       	movw	r20, r28
    3128:	0e 94 47 02 	call	0x48e	; 0x48e <clrLED>
int i,j,k;
       for (i=4;i>0;i--)
       {
       for (j=0;j<5;j++)
       {
       for (k=0;k<5;k++)
    312c:	21 96       	adiw	r28, 0x01	; 1
    312e:	c5 30       	cpi	r28, 0x05	; 5
    3130:	d1 05       	cpc	r29, r1
    3132:	51 f7       	brne	.-44     	; 0x3108 <shiftBack+0x18>
void shiftBack()
{
int i,j,k;
       for (i=4;i>0;i--)
       {
       for (j=0;j<5;j++)
    3134:	0f 5f       	subi	r16, 0xFF	; 255
    3136:	1f 4f       	sbci	r17, 0xFF	; 255
    3138:	05 30       	cpi	r16, 0x05	; 5
    313a:	11 05       	cpc	r17, r1
    313c:	19 f0       	breq	.+6      	; 0x3144 <shiftBack+0x54>
    313e:	c0 e0       	ldi	r28, 0x00	; 0
    3140:	d0 e0       	ldi	r29, 0x00	; 0
    3142:	e2 cf       	rjmp	.-60     	; 0x3108 <shiftBack+0x18>
    3144:	08 94       	sec
    3146:	e1 08       	sbc	r14, r1
    3148:	f1 08       	sbc	r15, r1


void shiftBack()
{
int i,j,k;
       for (i=4;i>0;i--)
    314a:	e1 14       	cp	r14, r1
    314c:	f1 04       	cpc	r15, r1
    314e:	39 f0       	breq	.+14     	; 0x315e <shiftBack+0x6e>
    3150:	00 e0       	ldi	r16, 0x00	; 0
    3152:	10 e0       	ldi	r17, 0x00	; 0
	}
}


void shiftBack()
{
    3154:	67 01       	movw	r12, r14
    3156:	08 94       	sec
    3158:	c1 08       	sbc	r12, r1
    315a:	d1 08       	sbc	r13, r1
    315c:	f0 cf       	rjmp	.-32     	; 0x313e <shiftBack+0x4e>
                       else
                               clrLED(i,j,k);
               }
       }
}
}
    315e:	df 91       	pop	r29
    3160:	cf 91       	pop	r28
    3162:	1f 91       	pop	r17
    3164:	0f 91       	pop	r16
    3166:	ff 90       	pop	r15
    3168:	ef 90       	pop	r14
    316a:	df 90       	pop	r13
    316c:	cf 90       	pop	r12
    316e:	08 95       	ret

00003170 <vfprintf>:
    3170:	ab e0       	ldi	r26, 0x0B	; 11
    3172:	b0 e0       	ldi	r27, 0x00	; 0
    3174:	ee eb       	ldi	r30, 0xBE	; 190
    3176:	f8 e1       	ldi	r31, 0x18	; 24
    3178:	0c 94 be 1c 	jmp	0x397c	; 0x397c <__prologue_saves__+0x8>
    317c:	5c 01       	movw	r10, r24
    317e:	4b 01       	movw	r8, r22
    3180:	7a 01       	movw	r14, r20
    3182:	fc 01       	movw	r30, r24
    3184:	17 82       	std	Z+7, r1	; 0x07
    3186:	16 82       	std	Z+6, r1	; 0x06
    3188:	83 81       	ldd	r24, Z+3	; 0x03
    318a:	81 fd       	sbrc	r24, 1
    318c:	08 c0       	rjmp	.+16     	; 0x319e <vfprintf+0x2e>
    318e:	6f ef       	ldi	r22, 0xFF	; 255
    3190:	7f ef       	ldi	r23, 0xFF	; 255
    3192:	08 c1       	rjmp	.+528    	; 0x33a4 <vfprintf+0x234>
    3194:	42 e0       	ldi	r20, 0x02	; 2
    3196:	50 e0       	ldi	r21, 0x00	; 0
    3198:	e4 0e       	add	r14, r20
    319a:	f5 1e       	adc	r15, r21
    319c:	04 c0       	rjmp	.+8      	; 0x31a6 <vfprintf+0x36>
    319e:	3e 01       	movw	r6, r28
    31a0:	08 94       	sec
    31a2:	61 1c       	adc	r6, r1
    31a4:	71 1c       	adc	r7, r1
    31a6:	f5 01       	movw	r30, r10
    31a8:	d3 80       	ldd	r13, Z+3	; 0x03
    31aa:	f4 01       	movw	r30, r8
    31ac:	d3 fc       	sbrc	r13, 3
    31ae:	85 91       	lpm	r24, Z+
    31b0:	d3 fe       	sbrs	r13, 3
    31b2:	81 91       	ld	r24, Z+
    31b4:	4f 01       	movw	r8, r30
    31b6:	88 23       	and	r24, r24
    31b8:	09 f4       	brne	.+2      	; 0x31bc <vfprintf+0x4c>
    31ba:	f1 c0       	rjmp	.+482    	; 0x339e <vfprintf+0x22e>
    31bc:	85 32       	cpi	r24, 0x25	; 37
    31be:	59 f4       	brne	.+22     	; 0x31d6 <vfprintf+0x66>
    31c0:	d3 fc       	sbrc	r13, 3
    31c2:	65 91       	lpm	r22, Z+
    31c4:	d3 fe       	sbrs	r13, 3
    31c6:	61 91       	ld	r22, Z+
    31c8:	4f 01       	movw	r8, r30
    31ca:	65 32       	cpi	r22, 0x25	; 37
    31cc:	19 f0       	breq	.+6      	; 0x31d4 <vfprintf+0x64>
    31ce:	06 2f       	mov	r16, r22
    31d0:	10 e0       	ldi	r17, 0x00	; 0
    31d2:	1b c0       	rjmp	.+54     	; 0x320a <vfprintf+0x9a>
    31d4:	85 e2       	ldi	r24, 0x25	; 37
    31d6:	90 e0       	ldi	r25, 0x00	; 0
    31d8:	2b c0       	rjmp	.+86     	; 0x3230 <vfprintf+0xc0>
    31da:	00 23       	and	r16, r16
    31dc:	09 f4       	brne	.+2      	; 0x31e0 <vfprintf+0x70>
    31de:	df c0       	rjmp	.+446    	; 0x339e <vfprintf+0x22e>
    31e0:	8d ee       	ldi	r24, 0xED	; 237
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	60 2f       	mov	r22, r16
    31e6:	70 e0       	ldi	r23, 0x00	; 0
    31e8:	0e 94 b6 1b 	call	0x376c	; 0x376c <strchr_P>
    31ec:	89 2b       	or	r24, r25
    31ee:	39 f4       	brne	.+14     	; 0x31fe <vfprintf+0x8e>
    31f0:	03 32       	cpi	r16, 0x23	; 35
    31f2:	11 f4       	brne	.+4      	; 0x31f8 <vfprintf+0x88>
    31f4:	10 61       	ori	r17, 0x10	; 16
    31f6:	03 c0       	rjmp	.+6      	; 0x31fe <vfprintf+0x8e>
    31f8:	0c 36       	cpi	r16, 0x6C	; 108
    31fa:	61 f4       	brne	.+24     	; 0x3214 <vfprintf+0xa4>
    31fc:	10 68       	ori	r17, 0x80	; 128
    31fe:	f4 01       	movw	r30, r8
    3200:	d3 fc       	sbrc	r13, 3
    3202:	05 91       	lpm	r16, Z+
    3204:	d3 fe       	sbrs	r13, 3
    3206:	01 91       	ld	r16, Z+
    3208:	4f 01       	movw	r8, r30
    320a:	17 ff       	sbrs	r17, 7
    320c:	e6 cf       	rjmp	.-52     	; 0x31da <vfprintf+0x6a>
    320e:	00 23       	and	r16, r16
    3210:	09 f4       	brne	.+2      	; 0x3214 <vfprintf+0xa4>
    3212:	c5 c0       	rjmp	.+394    	; 0x339e <vfprintf+0x22e>
    3214:	86 ee       	ldi	r24, 0xE6	; 230
    3216:	90 e0       	ldi	r25, 0x00	; 0
    3218:	60 2f       	mov	r22, r16
    321a:	70 e0       	ldi	r23, 0x00	; 0
    321c:	0e 94 b6 1b 	call	0x376c	; 0x376c <strchr_P>
    3220:	89 2b       	or	r24, r25
    3222:	51 f0       	breq	.+20     	; 0x3238 <vfprintf+0xc8>
    3224:	44 e0       	ldi	r20, 0x04	; 4
    3226:	50 e0       	ldi	r21, 0x00	; 0
    3228:	e4 0e       	add	r14, r20
    322a:	f5 1e       	adc	r15, r21
    322c:	8f e3       	ldi	r24, 0x3F	; 63
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	b5 01       	movw	r22, r10
    3232:	0e 94 03 1c 	call	0x3806	; 0x3806 <fputc>
    3236:	b7 cf       	rjmp	.-146    	; 0x31a6 <vfprintf+0x36>
    3238:	03 36       	cpi	r16, 0x63	; 99
    323a:	29 f0       	breq	.+10     	; 0x3246 <vfprintf+0xd6>
    323c:	03 37       	cpi	r16, 0x73	; 115
    323e:	79 f0       	breq	.+30     	; 0x325e <vfprintf+0xee>
    3240:	03 35       	cpi	r16, 0x53	; 83
    3242:	f1 f4       	brne	.+60     	; 0x3280 <vfprintf+0x110>
    3244:	0b c0       	rjmp	.+22     	; 0x325c <vfprintf+0xec>
    3246:	87 01       	movw	r16, r14
    3248:	0e 5f       	subi	r16, 0xFE	; 254
    324a:	1f 4f       	sbci	r17, 0xFF	; 255
    324c:	f7 01       	movw	r30, r14
    324e:	80 81       	ld	r24, Z
    3250:	91 81       	ldd	r25, Z+1	; 0x01
    3252:	b5 01       	movw	r22, r10
    3254:	0e 94 03 1c 	call	0x3806	; 0x3806 <fputc>
    3258:	78 01       	movw	r14, r16
    325a:	a5 cf       	rjmp	.-182    	; 0x31a6 <vfprintf+0x36>
    325c:	11 60       	ori	r17, 0x01	; 1
    325e:	f7 01       	movw	r30, r14
    3260:	c0 80       	ld	r12, Z
    3262:	d1 80       	ldd	r13, Z+1	; 0x01
    3264:	04 c0       	rjmp	.+8      	; 0x326e <vfprintf+0xfe>
    3266:	90 e0       	ldi	r25, 0x00	; 0
    3268:	b5 01       	movw	r22, r10
    326a:	0e 94 03 1c 	call	0x3806	; 0x3806 <fputc>
    326e:	f6 01       	movw	r30, r12
    3270:	10 fd       	sbrc	r17, 0
    3272:	85 91       	lpm	r24, Z+
    3274:	10 ff       	sbrs	r17, 0
    3276:	81 91       	ld	r24, Z+
    3278:	6f 01       	movw	r12, r30
    327a:	88 23       	and	r24, r24
    327c:	a1 f7       	brne	.-24     	; 0x3266 <vfprintf+0xf6>
    327e:	8a cf       	rjmp	.-236    	; 0x3194 <vfprintf+0x24>
    3280:	04 36       	cpi	r16, 0x64	; 100
    3282:	11 f0       	breq	.+4      	; 0x3288 <vfprintf+0x118>
    3284:	09 36       	cpi	r16, 0x69	; 105
    3286:	39 f5       	brne	.+78     	; 0x32d6 <vfprintf+0x166>
    3288:	17 ff       	sbrs	r17, 7
    328a:	08 c0       	rjmp	.+16     	; 0x329c <vfprintf+0x12c>
    328c:	f7 01       	movw	r30, r14
    328e:	20 81       	ld	r18, Z
    3290:	31 81       	ldd	r19, Z+1	; 0x01
    3292:	42 81       	ldd	r20, Z+2	; 0x02
    3294:	53 81       	ldd	r21, Z+3	; 0x03
    3296:	84 e0       	ldi	r24, 0x04	; 4
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	0a c0       	rjmp	.+20     	; 0x32b0 <vfprintf+0x140>
    329c:	f7 01       	movw	r30, r14
    329e:	80 81       	ld	r24, Z
    32a0:	91 81       	ldd	r25, Z+1	; 0x01
    32a2:	9c 01       	movw	r18, r24
    32a4:	44 27       	eor	r20, r20
    32a6:	37 fd       	sbrc	r19, 7
    32a8:	40 95       	com	r20
    32aa:	54 2f       	mov	r21, r20
    32ac:	82 e0       	ldi	r24, 0x02	; 2
    32ae:	90 e0       	ldi	r25, 0x00	; 0
    32b0:	e8 0e       	add	r14, r24
    32b2:	f9 1e       	adc	r15, r25
    32b4:	1f 7e       	andi	r17, 0xEF	; 239
    32b6:	57 ff       	sbrs	r21, 7
    32b8:	08 c0       	rjmp	.+16     	; 0x32ca <vfprintf+0x15a>
    32ba:	50 95       	com	r21
    32bc:	40 95       	com	r20
    32be:	30 95       	com	r19
    32c0:	21 95       	neg	r18
    32c2:	3f 4f       	sbci	r19, 0xFF	; 255
    32c4:	4f 4f       	sbci	r20, 0xFF	; 255
    32c6:	5f 4f       	sbci	r21, 0xFF	; 255
    32c8:	10 64       	ori	r17, 0x40	; 64
    32ca:	ca 01       	movw	r24, r20
    32cc:	b9 01       	movw	r22, r18
    32ce:	a3 01       	movw	r20, r6
    32d0:	2a e0       	ldi	r18, 0x0A	; 10
    32d2:	30 e0       	ldi	r19, 0x00	; 0
    32d4:	34 c0       	rjmp	.+104    	; 0x333e <vfprintf+0x1ce>
    32d6:	00 37       	cpi	r16, 0x70	; 112
    32d8:	a9 f0       	breq	.+42     	; 0x3304 <vfprintf+0x194>
    32da:	01 37       	cpi	r16, 0x71	; 113
    32dc:	30 f4       	brcc	.+12     	; 0x32ea <vfprintf+0x17a>
    32de:	08 35       	cpi	r16, 0x58	; 88
    32e0:	b1 f0       	breq	.+44     	; 0x330e <vfprintf+0x19e>
    32e2:	0f 36       	cpi	r16, 0x6F	; 111
    32e4:	09 f0       	breq	.+2      	; 0x32e8 <vfprintf+0x178>
    32e6:	5b c0       	rjmp	.+182    	; 0x339e <vfprintf+0x22e>
    32e8:	06 c0       	rjmp	.+12     	; 0x32f6 <vfprintf+0x186>
    32ea:	05 37       	cpi	r16, 0x75	; 117
    32ec:	39 f0       	breq	.+14     	; 0x32fc <vfprintf+0x18c>
    32ee:	08 37       	cpi	r16, 0x78	; 120
    32f0:	09 f0       	breq	.+2      	; 0x32f4 <vfprintf+0x184>
    32f2:	55 c0       	rjmp	.+170    	; 0x339e <vfprintf+0x22e>
    32f4:	08 c0       	rjmp	.+16     	; 0x3306 <vfprintf+0x196>
    32f6:	28 e0       	ldi	r18, 0x08	; 8
    32f8:	30 e0       	ldi	r19, 0x00	; 0
    32fa:	0c c0       	rjmp	.+24     	; 0x3314 <vfprintf+0x1a4>
    32fc:	1f 7e       	andi	r17, 0xEF	; 239
    32fe:	2a e0       	ldi	r18, 0x0A	; 10
    3300:	30 e0       	ldi	r19, 0x00	; 0
    3302:	08 c0       	rjmp	.+16     	; 0x3314 <vfprintf+0x1a4>
    3304:	10 61       	ori	r17, 0x10	; 16
    3306:	14 62       	ori	r17, 0x24	; 36
    3308:	20 e1       	ldi	r18, 0x10	; 16
    330a:	30 e0       	ldi	r19, 0x00	; 0
    330c:	03 c0       	rjmp	.+6      	; 0x3314 <vfprintf+0x1a4>
    330e:	14 60       	ori	r17, 0x04	; 4
    3310:	20 e1       	ldi	r18, 0x10	; 16
    3312:	32 e0       	ldi	r19, 0x02	; 2
    3314:	17 ff       	sbrs	r17, 7
    3316:	08 c0       	rjmp	.+16     	; 0x3328 <vfprintf+0x1b8>
    3318:	f7 01       	movw	r30, r14
    331a:	60 81       	ld	r22, Z
    331c:	71 81       	ldd	r23, Z+1	; 0x01
    331e:	82 81       	ldd	r24, Z+2	; 0x02
    3320:	93 81       	ldd	r25, Z+3	; 0x03
    3322:	44 e0       	ldi	r20, 0x04	; 4
    3324:	50 e0       	ldi	r21, 0x00	; 0
    3326:	08 c0       	rjmp	.+16     	; 0x3338 <vfprintf+0x1c8>
    3328:	f7 01       	movw	r30, r14
    332a:	80 81       	ld	r24, Z
    332c:	91 81       	ldd	r25, Z+1	; 0x01
    332e:	bc 01       	movw	r22, r24
    3330:	80 e0       	ldi	r24, 0x00	; 0
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	42 e0       	ldi	r20, 0x02	; 2
    3336:	50 e0       	ldi	r21, 0x00	; 0
    3338:	e4 0e       	add	r14, r20
    333a:	f5 1e       	adc	r15, r21
    333c:	a3 01       	movw	r20, r6
    333e:	0e 94 49 1c 	call	0x3892	; 0x3892 <__ultoa_invert>
    3342:	d8 2e       	mov	r13, r24
    3344:	d6 18       	sub	r13, r6
    3346:	01 2f       	mov	r16, r17
    3348:	10 e0       	ldi	r17, 0x00	; 0
    334a:	06 ff       	sbrs	r16, 6
    334c:	05 c0       	rjmp	.+10     	; 0x3358 <vfprintf+0x1e8>
    334e:	8d e2       	ldi	r24, 0x2D	; 45
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	b5 01       	movw	r22, r10
    3354:	0e 94 03 1c 	call	0x3806	; 0x3806 <fputc>
    3358:	04 ff       	sbrs	r16, 4
    335a:	15 c0       	rjmp	.+42     	; 0x3386 <vfprintf+0x216>
    335c:	fe 01       	movw	r30, r28
    335e:	ed 0d       	add	r30, r13
    3360:	f1 1d       	adc	r31, r1
    3362:	80 81       	ld	r24, Z
    3364:	80 33       	cpi	r24, 0x30	; 48
    3366:	79 f0       	breq	.+30     	; 0x3386 <vfprintf+0x216>
    3368:	80 e3       	ldi	r24, 0x30	; 48
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	b5 01       	movw	r22, r10
    336e:	0e 94 03 1c 	call	0x3806	; 0x3806 <fputc>
    3372:	02 ff       	sbrs	r16, 2
    3374:	08 c0       	rjmp	.+16     	; 0x3386 <vfprintf+0x216>
    3376:	00 72       	andi	r16, 0x20	; 32
    3378:	10 70       	andi	r17, 0x00	; 0
    337a:	c8 01       	movw	r24, r16
    337c:	88 5a       	subi	r24, 0xA8	; 168
    337e:	9f 4f       	sbci	r25, 0xFF	; 255
    3380:	b5 01       	movw	r22, r10
    3382:	0e 94 03 1c 	call	0x3806	; 0x3806 <fputc>
    3386:	da 94       	dec	r13
    3388:	f3 01       	movw	r30, r6
    338a:	ed 0d       	add	r30, r13
    338c:	f1 1d       	adc	r31, r1
    338e:	80 81       	ld	r24, Z
    3390:	90 e0       	ldi	r25, 0x00	; 0
    3392:	b5 01       	movw	r22, r10
    3394:	0e 94 03 1c 	call	0x3806	; 0x3806 <fputc>
    3398:	dd 20       	and	r13, r13
    339a:	a9 f7       	brne	.-22     	; 0x3386 <vfprintf+0x216>
    339c:	04 cf       	rjmp	.-504    	; 0x31a6 <vfprintf+0x36>
    339e:	f5 01       	movw	r30, r10
    33a0:	66 81       	ldd	r22, Z+6	; 0x06
    33a2:	77 81       	ldd	r23, Z+7	; 0x07
    33a4:	cb 01       	movw	r24, r22
    33a6:	2b 96       	adiw	r28, 0x0b	; 11
    33a8:	ee e0       	ldi	r30, 0x0E	; 14
    33aa:	0c 94 da 1c 	jmp	0x39b4	; 0x39b4 <__epilogue_restores__+0x8>

000033ae <putval>:
    33ae:	fc 01       	movw	r30, r24
    33b0:	20 fd       	sbrc	r18, 0
    33b2:	08 c0       	rjmp	.+16     	; 0x33c4 <putval+0x16>
    33b4:	23 fd       	sbrc	r18, 3
    33b6:	05 c0       	rjmp	.+10     	; 0x33c2 <putval+0x14>
    33b8:	22 ff       	sbrs	r18, 2
    33ba:	02 c0       	rjmp	.+4      	; 0x33c0 <putval+0x12>
    33bc:	73 83       	std	Z+3, r23	; 0x03
    33be:	62 83       	std	Z+2, r22	; 0x02
    33c0:	51 83       	std	Z+1, r21	; 0x01
    33c2:	40 83       	st	Z, r20
    33c4:	08 95       	ret

000033c6 <mulacc>:
    33c6:	ef 92       	push	r14
    33c8:	ff 92       	push	r15
    33ca:	0f 93       	push	r16
    33cc:	1f 93       	push	r17
    33ce:	44 ff       	sbrs	r20, 4
    33d0:	02 c0       	rjmp	.+4      	; 0x33d6 <mulacc+0x10>
    33d2:	33 e0       	ldi	r19, 0x03	; 3
    33d4:	11 c0       	rjmp	.+34     	; 0x33f8 <mulacc+0x32>
    33d6:	46 ff       	sbrs	r20, 6
    33d8:	02 c0       	rjmp	.+4      	; 0x33de <mulacc+0x18>
    33da:	34 e0       	ldi	r19, 0x04	; 4
    33dc:	0d c0       	rjmp	.+26     	; 0x33f8 <mulacc+0x32>
    33de:	db 01       	movw	r26, r22
    33e0:	fc 01       	movw	r30, r24
    33e2:	aa 0f       	add	r26, r26
    33e4:	bb 1f       	adc	r27, r27
    33e6:	ee 1f       	adc	r30, r30
    33e8:	ff 1f       	adc	r31, r31
    33ea:	10 94       	com	r1
    33ec:	d1 f7       	brne	.-12     	; 0x33e2 <mulacc+0x1c>
    33ee:	6a 0f       	add	r22, r26
    33f0:	7b 1f       	adc	r23, r27
    33f2:	8e 1f       	adc	r24, r30
    33f4:	9f 1f       	adc	r25, r31
    33f6:	31 e0       	ldi	r19, 0x01	; 1
    33f8:	66 0f       	add	r22, r22
    33fa:	77 1f       	adc	r23, r23
    33fc:	88 1f       	adc	r24, r24
    33fe:	99 1f       	adc	r25, r25
    3400:	31 50       	subi	r19, 0x01	; 1
    3402:	d1 f7       	brne	.-12     	; 0x33f8 <mulacc+0x32>
    3404:	7b 01       	movw	r14, r22
    3406:	8c 01       	movw	r16, r24
    3408:	e2 0e       	add	r14, r18
    340a:	f1 1c       	adc	r15, r1
    340c:	01 1d       	adc	r16, r1
    340e:	11 1d       	adc	r17, r1
    3410:	a8 01       	movw	r20, r16
    3412:	97 01       	movw	r18, r14
    3414:	b7 01       	movw	r22, r14
    3416:	ca 01       	movw	r24, r20
    3418:	1f 91       	pop	r17
    341a:	0f 91       	pop	r16
    341c:	ff 90       	pop	r15
    341e:	ef 90       	pop	r14
    3420:	08 95       	ret

00003422 <skip_spaces>:
    3422:	0f 93       	push	r16
    3424:	1f 93       	push	r17
    3426:	cf 93       	push	r28
    3428:	df 93       	push	r29
    342a:	8c 01       	movw	r16, r24
    342c:	c8 01       	movw	r24, r16
    342e:	0e 94 c1 1b 	call	0x3782	; 0x3782 <fgetc>
    3432:	ec 01       	movw	r28, r24
    3434:	97 fd       	sbrc	r25, 7
    3436:	08 c0       	rjmp	.+16     	; 0x3448 <skip_spaces+0x26>
    3438:	0e 94 05 1d 	call	0x3a0a	; 0x3a0a <isspace>
    343c:	89 2b       	or	r24, r25
    343e:	b1 f7       	brne	.-20     	; 0x342c <skip_spaces+0xa>
    3440:	ce 01       	movw	r24, r28
    3442:	b8 01       	movw	r22, r16
    3444:	0e 94 2f 1c 	call	0x385e	; 0x385e <ungetc>
    3448:	ce 01       	movw	r24, r28
    344a:	df 91       	pop	r29
    344c:	cf 91       	pop	r28
    344e:	1f 91       	pop	r17
    3450:	0f 91       	pop	r16
    3452:	08 95       	ret

00003454 <conv_int>:
    3454:	a0 e0       	ldi	r26, 0x00	; 0
    3456:	b0 e0       	ldi	r27, 0x00	; 0
    3458:	e0 e3       	ldi	r30, 0x30	; 48
    345a:	fa e1       	ldi	r31, 0x1A	; 26
    345c:	0c 94 c2 1c 	jmp	0x3984	; 0x3984 <__prologue_saves__+0x10>
    3460:	ec 01       	movw	r28, r24
    3462:	c6 2e       	mov	r12, r22
    3464:	5a 01       	movw	r10, r20
    3466:	12 2f       	mov	r17, r18
    3468:	0e 94 c1 1b 	call	0x3782	; 0x3782 <fgetc>
    346c:	ac 01       	movw	r20, r24
    346e:	8b 32       	cpi	r24, 0x2B	; 43
    3470:	19 f0       	breq	.+6      	; 0x3478 <conv_int+0x24>
    3472:	8d 32       	cpi	r24, 0x2D	; 45
    3474:	51 f4       	brne	.+20     	; 0x348a <conv_int+0x36>
    3476:	10 68       	ori	r17, 0x80	; 128
    3478:	ca 94       	dec	r12
    347a:	09 f4       	brne	.+2      	; 0x347e <conv_int+0x2a>
    347c:	6d c0       	rjmp	.+218    	; 0x3558 <conv_int+0x104>
    347e:	ce 01       	movw	r24, r28
    3480:	0e 94 c1 1b 	call	0x3782	; 0x3782 <fgetc>
    3484:	ac 01       	movw	r20, r24
    3486:	97 fd       	sbrc	r25, 7
    3488:	67 c0       	rjmp	.+206    	; 0x3558 <conv_int+0x104>
    348a:	6d ef       	ldi	r22, 0xFD	; 253
    348c:	d6 2e       	mov	r13, r22
    348e:	d1 22       	and	r13, r17
    3490:	8d 2d       	mov	r24, r13
    3492:	80 73       	andi	r24, 0x30	; 48
    3494:	01 f5       	brne	.+64     	; 0x34d6 <conv_int+0x82>
    3496:	40 33       	cpi	r20, 0x30	; 48
    3498:	f1 f4       	brne	.+60     	; 0x34d6 <conv_int+0x82>
    349a:	ca 94       	dec	r12
    349c:	09 f4       	brne	.+2      	; 0x34a0 <conv_int+0x4c>
    349e:	47 c0       	rjmp	.+142    	; 0x352e <conv_int+0xda>
    34a0:	ce 01       	movw	r24, r28
    34a2:	0e 94 c1 1b 	call	0x3782	; 0x3782 <fgetc>
    34a6:	ac 01       	movw	r20, r24
    34a8:	97 fd       	sbrc	r25, 7
    34aa:	41 c0       	rjmp	.+130    	; 0x352e <conv_int+0xda>
    34ac:	82 e0       	ldi	r24, 0x02	; 2
    34ae:	d8 2a       	or	r13, r24
    34b0:	48 37       	cpi	r20, 0x78	; 120
    34b2:	11 f0       	breq	.+4      	; 0x34b8 <conv_int+0x64>
    34b4:	48 35       	cpi	r20, 0x58	; 88
    34b6:	59 f4       	brne	.+22     	; 0x34ce <conv_int+0x7a>
    34b8:	80 e4       	ldi	r24, 0x40	; 64
    34ba:	d8 2a       	or	r13, r24
    34bc:	ca 94       	dec	r12
    34be:	b9 f1       	breq	.+110    	; 0x352e <conv_int+0xda>
    34c0:	ce 01       	movw	r24, r28
    34c2:	0e 94 c1 1b 	call	0x3782	; 0x3782 <fgetc>
    34c6:	ac 01       	movw	r20, r24
    34c8:	99 23       	and	r25, r25
    34ca:	2c f4       	brge	.+10     	; 0x34d6 <conv_int+0x82>
    34cc:	30 c0       	rjmp	.+96     	; 0x352e <conv_int+0xda>
    34ce:	d6 fc       	sbrc	r13, 6
    34d0:	02 c0       	rjmp	.+4      	; 0x34d6 <conv_int+0x82>
    34d2:	80 e1       	ldi	r24, 0x10	; 16
    34d4:	d8 2a       	or	r13, r24
    34d6:	ee 24       	eor	r14, r14
    34d8:	ff 24       	eor	r15, r15
    34da:	87 01       	movw	r16, r14
    34dc:	24 2f       	mov	r18, r20
    34de:	20 53       	subi	r18, 0x30	; 48
    34e0:	28 30       	cpi	r18, 0x08	; 8
    34e2:	88 f0       	brcs	.+34     	; 0x3506 <conv_int+0xb2>
    34e4:	d4 fc       	sbrc	r13, 4
    34e6:	09 c0       	rjmp	.+18     	; 0x34fa <conv_int+0xa6>
    34e8:	2a 30       	cpi	r18, 0x0A	; 10
    34ea:	68 f0       	brcs	.+26     	; 0x3506 <conv_int+0xb2>
    34ec:	d6 fe       	sbrs	r13, 6
    34ee:	05 c0       	rjmp	.+10     	; 0x34fa <conv_int+0xa6>
    34f0:	2f 7d       	andi	r18, 0xDF	; 223
    34f2:	82 2f       	mov	r24, r18
    34f4:	81 51       	subi	r24, 0x11	; 17
    34f6:	86 30       	cpi	r24, 0x06	; 6
    34f8:	28 f0       	brcs	.+10     	; 0x3504 <conv_int+0xb0>
    34fa:	ca 01       	movw	r24, r20
    34fc:	be 01       	movw	r22, r28
    34fe:	0e 94 2f 1c 	call	0x385e	; 0x385e <ungetc>
    3502:	12 c0       	rjmp	.+36     	; 0x3528 <conv_int+0xd4>
    3504:	27 50       	subi	r18, 0x07	; 7
    3506:	c8 01       	movw	r24, r16
    3508:	b7 01       	movw	r22, r14
    350a:	4d 2d       	mov	r20, r13
    350c:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <mulacc>
    3510:	7b 01       	movw	r14, r22
    3512:	8c 01       	movw	r16, r24
    3514:	82 e0       	ldi	r24, 0x02	; 2
    3516:	d8 2a       	or	r13, r24
    3518:	ca 94       	dec	r12
    351a:	61 f0       	breq	.+24     	; 0x3534 <conv_int+0xe0>
    351c:	ce 01       	movw	r24, r28
    351e:	0e 94 c1 1b 	call	0x3782	; 0x3782 <fgetc>
    3522:	ac 01       	movw	r20, r24
    3524:	97 ff       	sbrs	r25, 7
    3526:	da cf       	rjmp	.-76     	; 0x34dc <conv_int+0x88>
    3528:	d1 fc       	sbrc	r13, 1
    352a:	04 c0       	rjmp	.+8      	; 0x3534 <conv_int+0xe0>
    352c:	15 c0       	rjmp	.+42     	; 0x3558 <conv_int+0x104>
    352e:	ee 24       	eor	r14, r14
    3530:	ff 24       	eor	r15, r15
    3532:	87 01       	movw	r16, r14
    3534:	d7 fe       	sbrs	r13, 7
    3536:	08 c0       	rjmp	.+16     	; 0x3548 <conv_int+0xf4>
    3538:	10 95       	com	r17
    353a:	00 95       	com	r16
    353c:	f0 94       	com	r15
    353e:	e0 94       	com	r14
    3540:	e1 1c       	adc	r14, r1
    3542:	f1 1c       	adc	r15, r1
    3544:	01 1d       	adc	r16, r1
    3546:	11 1d       	adc	r17, r1
    3548:	c5 01       	movw	r24, r10
    354a:	b8 01       	movw	r22, r16
    354c:	a7 01       	movw	r20, r14
    354e:	2d 2d       	mov	r18, r13
    3550:	0e 94 d7 19 	call	0x33ae	; 0x33ae <putval>
    3554:	81 e0       	ldi	r24, 0x01	; 1
    3556:	01 c0       	rjmp	.+2      	; 0x355a <conv_int+0x106>
    3558:	80 e0       	ldi	r24, 0x00	; 0
    355a:	cd b7       	in	r28, 0x3d	; 61
    355c:	de b7       	in	r29, 0x3e	; 62
    355e:	ea e0       	ldi	r30, 0x0A	; 10
    3560:	0c 94 de 1c 	jmp	0x39bc	; 0x39bc <__epilogue_restores__+0x10>

00003564 <vfscanf>:
    3564:	a0 e0       	ldi	r26, 0x00	; 0
    3566:	b0 e0       	ldi	r27, 0x00	; 0
    3568:	e8 eb       	ldi	r30, 0xB8	; 184
    356a:	fa e1       	ldi	r31, 0x1A	; 26
    356c:	0c 94 be 1c 	jmp	0x397c	; 0x397c <__prologue_saves__+0x8>
    3570:	5c 01       	movw	r10, r24
    3572:	6b 01       	movw	r12, r22
    3574:	3a 01       	movw	r6, r20
    3576:	fc 01       	movw	r30, r24
    3578:	17 82       	std	Z+7, r1	; 0x07
    357a:	16 82       	std	Z+6, r1	; 0x06
    357c:	88 24       	eor	r8, r8
    357e:	dd c0       	rjmp	.+442    	; 0x373a <vfscanf+0x1d6>
    3580:	81 2f       	mov	r24, r17
    3582:	90 e0       	ldi	r25, 0x00	; 0
    3584:	0e 94 05 1d 	call	0x3a0a	; 0x3a0a <isspace>
    3588:	89 2b       	or	r24, r25
    358a:	21 f0       	breq	.+8      	; 0x3594 <vfscanf+0x30>
    358c:	c5 01       	movw	r24, r10
    358e:	0e 94 11 1a 	call	0x3422	; 0x3422 <skip_spaces>
    3592:	d3 c0       	rjmp	.+422    	; 0x373a <vfscanf+0x1d6>
    3594:	15 32       	cpi	r17, 0x25	; 37
    3596:	49 f4       	brne	.+18     	; 0x35aa <vfscanf+0x46>
    3598:	f6 01       	movw	r30, r12
    359a:	f3 fc       	sbrc	r15, 3
    359c:	65 91       	lpm	r22, Z+
    359e:	f3 fe       	sbrs	r15, 3
    35a0:	61 91       	ld	r22, Z+
    35a2:	6f 01       	movw	r12, r30
    35a4:	65 32       	cpi	r22, 0x25	; 37
    35a6:	69 f4       	brne	.+26     	; 0x35c2 <vfscanf+0x5e>
    35a8:	15 e2       	ldi	r17, 0x25	; 37
    35aa:	c5 01       	movw	r24, r10
    35ac:	0e 94 c1 1b 	call	0x3782	; 0x3782 <fgetc>
    35b0:	97 fd       	sbrc	r25, 7
    35b2:	cf c0       	rjmp	.+414    	; 0x3752 <vfscanf+0x1ee>
    35b4:	18 17       	cp	r17, r24
    35b6:	09 f4       	brne	.+2      	; 0x35ba <vfscanf+0x56>
    35b8:	c0 c0       	rjmp	.+384    	; 0x373a <vfscanf+0x1d6>
    35ba:	b5 01       	movw	r22, r10
    35bc:	0e 94 2f 1c 	call	0x385e	; 0x385e <ungetc>
    35c0:	cd c0       	rjmp	.+410    	; 0x375c <vfscanf+0x1f8>
    35c2:	6a 32       	cpi	r22, 0x2A	; 42
    35c4:	19 f0       	breq	.+6      	; 0x35cc <vfscanf+0x68>
    35c6:	16 2f       	mov	r17, r22
    35c8:	00 e0       	ldi	r16, 0x00	; 0
    35ca:	06 c0       	rjmp	.+12     	; 0x35d8 <vfscanf+0x74>
    35cc:	f3 fc       	sbrc	r15, 3
    35ce:	15 91       	lpm	r17, Z+
    35d0:	f3 fe       	sbrs	r15, 3
    35d2:	11 91       	ld	r17, Z+
    35d4:	6f 01       	movw	r12, r30
    35d6:	01 e0       	ldi	r16, 0x01	; 1
    35d8:	99 24       	eor	r9, r9
    35da:	0f c0       	rjmp	.+30     	; 0x35fa <vfscanf+0x96>
    35dc:	02 60       	ori	r16, 0x02	; 2
    35de:	69 2d       	mov	r22, r9
    35e0:	70 e0       	ldi	r23, 0x00	; 0
    35e2:	80 e0       	ldi	r24, 0x00	; 0
    35e4:	90 e0       	ldi	r25, 0x00	; 0
    35e6:	40 e2       	ldi	r20, 0x20	; 32
    35e8:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <mulacc>
    35ec:	96 2e       	mov	r9, r22
    35ee:	f6 01       	movw	r30, r12
    35f0:	f3 fc       	sbrc	r15, 3
    35f2:	15 91       	lpm	r17, Z+
    35f4:	f3 fe       	sbrs	r15, 3
    35f6:	11 91       	ld	r17, Z+
    35f8:	6f 01       	movw	r12, r30
    35fa:	21 2f       	mov	r18, r17
    35fc:	20 53       	subi	r18, 0x30	; 48
    35fe:	2a 30       	cpi	r18, 0x0A	; 10
    3600:	68 f3       	brcs	.-38     	; 0x35dc <vfscanf+0x78>
    3602:	01 fd       	sbrc	r16, 1
    3604:	03 c0       	rjmp	.+6      	; 0x360c <vfscanf+0xa8>
    3606:	99 24       	eor	r9, r9
    3608:	9a 94       	dec	r9
    360a:	03 c0       	rjmp	.+6      	; 0x3612 <vfscanf+0xae>
    360c:	99 20       	and	r9, r9
    360e:	09 f4       	brne	.+2      	; 0x3612 <vfscanf+0xae>
    3610:	a5 c0       	rjmp	.+330    	; 0x375c <vfscanf+0x1f8>
    3612:	18 36       	cpi	r17, 0x68	; 104
    3614:	21 f0       	breq	.+8      	; 0x361e <vfscanf+0xba>
    3616:	1c 36       	cpi	r17, 0x6C	; 108
    3618:	99 f4       	brne	.+38     	; 0x3640 <vfscanf+0xdc>
    361a:	f6 01       	movw	r30, r12
    361c:	0b c0       	rjmp	.+22     	; 0x3634 <vfscanf+0xd0>
    361e:	f6 01       	movw	r30, r12
    3620:	f3 fc       	sbrc	r15, 3
    3622:	65 91       	lpm	r22, Z+
    3624:	f3 fe       	sbrs	r15, 3
    3626:	61 91       	ld	r22, Z+
    3628:	68 36       	cpi	r22, 0x68	; 104
    362a:	19 f0       	breq	.+6      	; 0x3632 <vfscanf+0xce>
    362c:	6f 01       	movw	r12, r30
    362e:	16 2f       	mov	r17, r22
    3630:	07 c0       	rjmp	.+14     	; 0x3640 <vfscanf+0xdc>
    3632:	08 60       	ori	r16, 0x08	; 8
    3634:	04 60       	ori	r16, 0x04	; 4
    3636:	f3 fc       	sbrc	r15, 3
    3638:	15 91       	lpm	r17, Z+
    363a:	f3 fe       	sbrs	r15, 3
    363c:	11 91       	ld	r17, Z+
    363e:	6f 01       	movw	r12, r30
    3640:	11 23       	and	r17, r17
    3642:	09 f4       	brne	.+2      	; 0x3646 <vfscanf+0xe2>
    3644:	8b c0       	rjmp	.+278    	; 0x375c <vfscanf+0x1f8>
    3646:	8d ef       	ldi	r24, 0xFD	; 253
    3648:	90 e0       	ldi	r25, 0x00	; 0
    364a:	61 2f       	mov	r22, r17
    364c:	70 e0       	ldi	r23, 0x00	; 0
    364e:	0e 94 b6 1b 	call	0x376c	; 0x376c <strchr_P>
    3652:	89 2b       	or	r24, r25
    3654:	09 f4       	brne	.+2      	; 0x3658 <vfscanf+0xf4>
    3656:	82 c0       	rjmp	.+260    	; 0x375c <vfscanf+0x1f8>
    3658:	80 2f       	mov	r24, r16
    365a:	00 ff       	sbrs	r16, 0
    365c:	03 c0       	rjmp	.+6      	; 0x3664 <vfscanf+0x100>
    365e:	ee 24       	eor	r14, r14
    3660:	ff 24       	eor	r15, r15
    3662:	07 c0       	rjmp	.+14     	; 0x3672 <vfscanf+0x10e>
    3664:	f3 01       	movw	r30, r6
    3666:	e0 80       	ld	r14, Z
    3668:	f1 80       	ldd	r15, Z+1	; 0x01
    366a:	22 e0       	ldi	r18, 0x02	; 2
    366c:	30 e0       	ldi	r19, 0x00	; 0
    366e:	62 0e       	add	r6, r18
    3670:	73 1e       	adc	r7, r19
    3672:	1e 36       	cpi	r17, 0x6E	; 110
    3674:	51 f4       	brne	.+20     	; 0x368a <vfscanf+0x126>
    3676:	f5 01       	movw	r30, r10
    3678:	46 81       	ldd	r20, Z+6	; 0x06
    367a:	57 81       	ldd	r21, Z+7	; 0x07
    367c:	60 e0       	ldi	r22, 0x00	; 0
    367e:	70 e0       	ldi	r23, 0x00	; 0
    3680:	c7 01       	movw	r24, r14
    3682:	20 2f       	mov	r18, r16
    3684:	0e 94 d7 19 	call	0x33ae	; 0x33ae <putval>
    3688:	58 c0       	rjmp	.+176    	; 0x373a <vfscanf+0x1d6>
    368a:	13 36       	cpi	r17, 0x63	; 99
    368c:	91 f4       	brne	.+36     	; 0x36b2 <vfscanf+0x14e>
    368e:	81 fd       	sbrc	r24, 1
    3690:	02 c0       	rjmp	.+4      	; 0x3696 <vfscanf+0x132>
    3692:	99 24       	eor	r9, r9
    3694:	93 94       	inc	r9
    3696:	c5 01       	movw	r24, r10
    3698:	0e 94 c1 1b 	call	0x3782	; 0x3782 <fgetc>
    369c:	97 fd       	sbrc	r25, 7
    369e:	59 c0       	rjmp	.+178    	; 0x3752 <vfscanf+0x1ee>
    36a0:	e1 14       	cp	r14, r1
    36a2:	f1 04       	cpc	r15, r1
    36a4:	19 f0       	breq	.+6      	; 0x36ac <vfscanf+0x148>
    36a6:	f7 01       	movw	r30, r14
    36a8:	81 93       	st	Z+, r24
    36aa:	7f 01       	movw	r14, r30
    36ac:	9a 94       	dec	r9
    36ae:	99 f7       	brne	.-26     	; 0x3696 <vfscanf+0x132>
    36b0:	42 c0       	rjmp	.+132    	; 0x3736 <vfscanf+0x1d2>
    36b2:	c5 01       	movw	r24, r10
    36b4:	0e 94 11 1a 	call	0x3422	; 0x3422 <skip_spaces>
    36b8:	97 fd       	sbrc	r25, 7
    36ba:	4b c0       	rjmp	.+150    	; 0x3752 <vfscanf+0x1ee>
    36bc:	1f 36       	cpi	r17, 0x6F	; 111
    36be:	59 f1       	breq	.+86     	; 0x3716 <vfscanf+0x1b2>
    36c0:	10 37       	cpi	r17, 0x70	; 112
    36c2:	28 f4       	brcc	.+10     	; 0x36ce <vfscanf+0x16a>
    36c4:	14 36       	cpi	r17, 0x64	; 100
    36c6:	29 f1       	breq	.+74     	; 0x3712 <vfscanf+0x1ae>
    36c8:	19 36       	cpi	r17, 0x69	; 105
    36ca:	39 f5       	brne	.+78     	; 0x371a <vfscanf+0x1b6>
    36cc:	27 c0       	rjmp	.+78     	; 0x371c <vfscanf+0x1b8>
    36ce:	13 37       	cpi	r17, 0x73	; 115
    36d0:	19 f0       	breq	.+6      	; 0x36d8 <vfscanf+0x174>
    36d2:	15 37       	cpi	r17, 0x75	; 117
    36d4:	11 f5       	brne	.+68     	; 0x371a <vfscanf+0x1b6>
    36d6:	1d c0       	rjmp	.+58     	; 0x3712 <vfscanf+0x1ae>
    36d8:	c5 01       	movw	r24, r10
    36da:	0e 94 c1 1b 	call	0x3782	; 0x3782 <fgetc>
    36de:	ec 01       	movw	r28, r24
    36e0:	97 fd       	sbrc	r25, 7
    36e2:	11 c0       	rjmp	.+34     	; 0x3706 <vfscanf+0x1a2>
    36e4:	0e 94 05 1d 	call	0x3a0a	; 0x3a0a <isspace>
    36e8:	89 2b       	or	r24, r25
    36ea:	29 f0       	breq	.+10     	; 0x36f6 <vfscanf+0x192>
    36ec:	ce 01       	movw	r24, r28
    36ee:	b5 01       	movw	r22, r10
    36f0:	0e 94 2f 1c 	call	0x385e	; 0x385e <ungetc>
    36f4:	08 c0       	rjmp	.+16     	; 0x3706 <vfscanf+0x1a2>
    36f6:	e1 14       	cp	r14, r1
    36f8:	f1 04       	cpc	r15, r1
    36fa:	19 f0       	breq	.+6      	; 0x3702 <vfscanf+0x19e>
    36fc:	f7 01       	movw	r30, r14
    36fe:	c1 93       	st	Z+, r28
    3700:	7f 01       	movw	r14, r30
    3702:	9a 94       	dec	r9
    3704:	49 f7       	brne	.-46     	; 0x36d8 <vfscanf+0x174>
    3706:	e1 14       	cp	r14, r1
    3708:	f1 04       	cpc	r15, r1
    370a:	a9 f0       	breq	.+42     	; 0x3736 <vfscanf+0x1d2>
    370c:	f7 01       	movw	r30, r14
    370e:	10 82       	st	Z, r1
    3710:	12 c0       	rjmp	.+36     	; 0x3736 <vfscanf+0x1d2>
    3712:	00 62       	ori	r16, 0x20	; 32
    3714:	03 c0       	rjmp	.+6      	; 0x371c <vfscanf+0x1b8>
    3716:	00 61       	ori	r16, 0x10	; 16
    3718:	01 c0       	rjmp	.+2      	; 0x371c <vfscanf+0x1b8>
    371a:	00 64       	ori	r16, 0x40	; 64
    371c:	c5 01       	movw	r24, r10
    371e:	69 2d       	mov	r22, r9
    3720:	a7 01       	movw	r20, r14
    3722:	20 2f       	mov	r18, r16
    3724:	0e 94 2a 1a 	call	0x3454	; 0x3454 <conv_int>
    3728:	88 23       	and	r24, r24
    372a:	29 f4       	brne	.+10     	; 0x3736 <vfscanf+0x1d2>
    372c:	f5 01       	movw	r30, r10
    372e:	83 81       	ldd	r24, Z+3	; 0x03
    3730:	80 73       	andi	r24, 0x30	; 48
    3732:	79 f4       	brne	.+30     	; 0x3752 <vfscanf+0x1ee>
    3734:	13 c0       	rjmp	.+38     	; 0x375c <vfscanf+0x1f8>
    3736:	00 ff       	sbrs	r16, 0
    3738:	83 94       	inc	r8
    373a:	f5 01       	movw	r30, r10
    373c:	f3 80       	ldd	r15, Z+3	; 0x03
    373e:	f6 01       	movw	r30, r12
    3740:	f3 fc       	sbrc	r15, 3
    3742:	15 91       	lpm	r17, Z+
    3744:	f3 fe       	sbrs	r15, 3
    3746:	11 91       	ld	r17, Z+
    3748:	6f 01       	movw	r12, r30
    374a:	11 23       	and	r17, r17
    374c:	09 f0       	breq	.+2      	; 0x3750 <vfscanf+0x1ec>
    374e:	18 cf       	rjmp	.-464    	; 0x3580 <vfscanf+0x1c>
    3750:	05 c0       	rjmp	.+10     	; 0x375c <vfscanf+0x1f8>
    3752:	88 20       	and	r8, r8
    3754:	19 f4       	brne	.+6      	; 0x375c <vfscanf+0x1f8>
    3756:	2f ef       	ldi	r18, 0xFF	; 255
    3758:	3f ef       	ldi	r19, 0xFF	; 255
    375a:	02 c0       	rjmp	.+4      	; 0x3760 <vfscanf+0x1fc>
    375c:	28 2d       	mov	r18, r8
    375e:	30 e0       	ldi	r19, 0x00	; 0
    3760:	c9 01       	movw	r24, r18
    3762:	cd b7       	in	r28, 0x3d	; 61
    3764:	de b7       	in	r29, 0x3e	; 62
    3766:	ee e0       	ldi	r30, 0x0E	; 14
    3768:	0c 94 da 1c 	jmp	0x39b4	; 0x39b4 <__epilogue_restores__+0x8>

0000376c <strchr_P>:
    376c:	fc 01       	movw	r30, r24
    376e:	05 90       	lpm	r0, Z+
    3770:	06 16       	cp	r0, r22
    3772:	21 f0       	breq	.+8      	; 0x377c <strchr_P+0x10>
    3774:	00 20       	and	r0, r0
    3776:	d9 f7       	brne	.-10     	; 0x376e <strchr_P+0x2>
    3778:	c0 01       	movw	r24, r0
    377a:	08 95       	ret
    377c:	31 97       	sbiw	r30, 0x01	; 1
    377e:	cf 01       	movw	r24, r30
    3780:	08 95       	ret

00003782 <fgetc>:
    3782:	cf 93       	push	r28
    3784:	df 93       	push	r29
    3786:	ec 01       	movw	r28, r24
    3788:	4b 81       	ldd	r20, Y+3	; 0x03
    378a:	40 ff       	sbrs	r20, 0
    378c:	1a c0       	rjmp	.+52     	; 0x37c2 <fgetc+0x40>
    378e:	46 ff       	sbrs	r20, 6
    3790:	0a c0       	rjmp	.+20     	; 0x37a6 <fgetc+0x24>
    3792:	4f 7b       	andi	r20, 0xBF	; 191
    3794:	4b 83       	std	Y+3, r20	; 0x03
    3796:	8e 81       	ldd	r24, Y+6	; 0x06
    3798:	9f 81       	ldd	r25, Y+7	; 0x07
    379a:	01 96       	adiw	r24, 0x01	; 1
    379c:	9f 83       	std	Y+7, r25	; 0x07
    379e:	8e 83       	std	Y+6, r24	; 0x06
    37a0:	8a 81       	ldd	r24, Y+2	; 0x02
    37a2:	28 2f       	mov	r18, r24
    37a4:	2b c0       	rjmp	.+86     	; 0x37fc <fgetc+0x7a>
    37a6:	42 ff       	sbrs	r20, 2
    37a8:	13 c0       	rjmp	.+38     	; 0x37d0 <fgetc+0x4e>
    37aa:	e8 81       	ld	r30, Y
    37ac:	f9 81       	ldd	r31, Y+1	; 0x01
    37ae:	80 81       	ld	r24, Z
    37b0:	28 2f       	mov	r18, r24
    37b2:	33 27       	eor	r19, r19
    37b4:	27 fd       	sbrc	r18, 7
    37b6:	30 95       	com	r19
    37b8:	21 15       	cp	r18, r1
    37ba:	31 05       	cpc	r19, r1
    37bc:	29 f4       	brne	.+10     	; 0x37c8 <fgetc+0x46>
    37be:	40 62       	ori	r20, 0x20	; 32
    37c0:	4b 83       	std	Y+3, r20	; 0x03
    37c2:	2f ef       	ldi	r18, 0xFF	; 255
    37c4:	3f ef       	ldi	r19, 0xFF	; 255
    37c6:	1b c0       	rjmp	.+54     	; 0x37fe <fgetc+0x7c>
    37c8:	31 96       	adiw	r30, 0x01	; 1
    37ca:	f9 83       	std	Y+1, r31	; 0x01
    37cc:	e8 83       	st	Y, r30
    37ce:	11 c0       	rjmp	.+34     	; 0x37f2 <fgetc+0x70>
    37d0:	ea 85       	ldd	r30, Y+10	; 0x0a
    37d2:	fb 85       	ldd	r31, Y+11	; 0x0b
    37d4:	ce 01       	movw	r24, r28
    37d6:	09 95       	icall
    37d8:	9c 01       	movw	r18, r24
    37da:	97 ff       	sbrs	r25, 7
    37dc:	0a c0       	rjmp	.+20     	; 0x37f2 <fgetc+0x70>
    37de:	9b 81       	ldd	r25, Y+3	; 0x03
    37e0:	2f 5f       	subi	r18, 0xFF	; 255
    37e2:	3f 4f       	sbci	r19, 0xFF	; 255
    37e4:	11 f0       	breq	.+4      	; 0x37ea <fgetc+0x68>
    37e6:	80 e2       	ldi	r24, 0x20	; 32
    37e8:	01 c0       	rjmp	.+2      	; 0x37ec <fgetc+0x6a>
    37ea:	80 e1       	ldi	r24, 0x10	; 16
    37ec:	89 2b       	or	r24, r25
    37ee:	8b 83       	std	Y+3, r24	; 0x03
    37f0:	e8 cf       	rjmp	.-48     	; 0x37c2 <fgetc+0x40>
    37f2:	8e 81       	ldd	r24, Y+6	; 0x06
    37f4:	9f 81       	ldd	r25, Y+7	; 0x07
    37f6:	01 96       	adiw	r24, 0x01	; 1
    37f8:	9f 83       	std	Y+7, r25	; 0x07
    37fa:	8e 83       	std	Y+6, r24	; 0x06
    37fc:	30 e0       	ldi	r19, 0x00	; 0
    37fe:	c9 01       	movw	r24, r18
    3800:	df 91       	pop	r29
    3802:	cf 91       	pop	r28
    3804:	08 95       	ret

00003806 <fputc>:
    3806:	0f 93       	push	r16
    3808:	1f 93       	push	r17
    380a:	cf 93       	push	r28
    380c:	df 93       	push	r29
    380e:	8c 01       	movw	r16, r24
    3810:	eb 01       	movw	r28, r22
    3812:	8b 81       	ldd	r24, Y+3	; 0x03
    3814:	81 ff       	sbrs	r24, 1
    3816:	1b c0       	rjmp	.+54     	; 0x384e <fputc+0x48>
    3818:	82 ff       	sbrs	r24, 2
    381a:	0d c0       	rjmp	.+26     	; 0x3836 <fputc+0x30>
    381c:	2e 81       	ldd	r18, Y+6	; 0x06
    381e:	3f 81       	ldd	r19, Y+7	; 0x07
    3820:	8c 81       	ldd	r24, Y+4	; 0x04
    3822:	9d 81       	ldd	r25, Y+5	; 0x05
    3824:	28 17       	cp	r18, r24
    3826:	39 07       	cpc	r19, r25
    3828:	64 f4       	brge	.+24     	; 0x3842 <fputc+0x3c>
    382a:	e8 81       	ld	r30, Y
    382c:	f9 81       	ldd	r31, Y+1	; 0x01
    382e:	01 93       	st	Z+, r16
    3830:	f9 83       	std	Y+1, r31	; 0x01
    3832:	e8 83       	st	Y, r30
    3834:	06 c0       	rjmp	.+12     	; 0x3842 <fputc+0x3c>
    3836:	e8 85       	ldd	r30, Y+8	; 0x08
    3838:	f9 85       	ldd	r31, Y+9	; 0x09
    383a:	80 2f       	mov	r24, r16
    383c:	09 95       	icall
    383e:	89 2b       	or	r24, r25
    3840:	31 f4       	brne	.+12     	; 0x384e <fputc+0x48>
    3842:	8e 81       	ldd	r24, Y+6	; 0x06
    3844:	9f 81       	ldd	r25, Y+7	; 0x07
    3846:	01 96       	adiw	r24, 0x01	; 1
    3848:	9f 83       	std	Y+7, r25	; 0x07
    384a:	8e 83       	std	Y+6, r24	; 0x06
    384c:	02 c0       	rjmp	.+4      	; 0x3852 <fputc+0x4c>
    384e:	0f ef       	ldi	r16, 0xFF	; 255
    3850:	1f ef       	ldi	r17, 0xFF	; 255
    3852:	c8 01       	movw	r24, r16
    3854:	df 91       	pop	r29
    3856:	cf 91       	pop	r28
    3858:	1f 91       	pop	r17
    385a:	0f 91       	pop	r16
    385c:	08 95       	ret

0000385e <ungetc>:
    385e:	9c 01       	movw	r18, r24
    3860:	fb 01       	movw	r30, r22
    3862:	83 81       	ldd	r24, Z+3	; 0x03
    3864:	80 ff       	sbrs	r24, 0
    3866:	11 c0       	rjmp	.+34     	; 0x388a <ungetc+0x2c>
    3868:	86 fd       	sbrc	r24, 6
    386a:	0f c0       	rjmp	.+30     	; 0x388a <ungetc+0x2c>
    386c:	9f ef       	ldi	r25, 0xFF	; 255
    386e:	2f 3f       	cpi	r18, 0xFF	; 255
    3870:	39 07       	cpc	r19, r25
    3872:	59 f0       	breq	.+22     	; 0x388a <ungetc+0x2c>
    3874:	22 83       	std	Z+2, r18	; 0x02
    3876:	80 64       	ori	r24, 0x40	; 64
    3878:	8f 7d       	andi	r24, 0xDF	; 223
    387a:	83 83       	std	Z+3, r24	; 0x03
    387c:	86 81       	ldd	r24, Z+6	; 0x06
    387e:	97 81       	ldd	r25, Z+7	; 0x07
    3880:	01 97       	sbiw	r24, 0x01	; 1
    3882:	97 83       	std	Z+7, r25	; 0x07
    3884:	86 83       	std	Z+6, r24	; 0x06
    3886:	30 e0       	ldi	r19, 0x00	; 0
    3888:	02 c0       	rjmp	.+4      	; 0x388e <ungetc+0x30>
    388a:	2f ef       	ldi	r18, 0xFF	; 255
    388c:	3f ef       	ldi	r19, 0xFF	; 255
    388e:	c9 01       	movw	r24, r18
    3890:	08 95       	ret

00003892 <__ultoa_invert>:
    3892:	fa 01       	movw	r30, r20
    3894:	aa 27       	eor	r26, r26
    3896:	28 30       	cpi	r18, 0x08	; 8
    3898:	51 f1       	breq	.+84     	; 0x38ee <__ultoa_invert+0x5c>
    389a:	20 31       	cpi	r18, 0x10	; 16
    389c:	81 f1       	breq	.+96     	; 0x38fe <__ultoa_invert+0x6c>
    389e:	e8 94       	clt
    38a0:	6f 93       	push	r22
    38a2:	6e 7f       	andi	r22, 0xFE	; 254
    38a4:	6e 5f       	subi	r22, 0xFE	; 254
    38a6:	7f 4f       	sbci	r23, 0xFF	; 255
    38a8:	8f 4f       	sbci	r24, 0xFF	; 255
    38aa:	9f 4f       	sbci	r25, 0xFF	; 255
    38ac:	af 4f       	sbci	r26, 0xFF	; 255
    38ae:	b1 e0       	ldi	r27, 0x01	; 1
    38b0:	3e d0       	rcall	.+124    	; 0x392e <__ultoa_invert+0x9c>
    38b2:	b4 e0       	ldi	r27, 0x04	; 4
    38b4:	3c d0       	rcall	.+120    	; 0x392e <__ultoa_invert+0x9c>
    38b6:	67 0f       	add	r22, r23
    38b8:	78 1f       	adc	r23, r24
    38ba:	89 1f       	adc	r24, r25
    38bc:	9a 1f       	adc	r25, r26
    38be:	a1 1d       	adc	r26, r1
    38c0:	68 0f       	add	r22, r24
    38c2:	79 1f       	adc	r23, r25
    38c4:	8a 1f       	adc	r24, r26
    38c6:	91 1d       	adc	r25, r1
    38c8:	a1 1d       	adc	r26, r1
    38ca:	6a 0f       	add	r22, r26
    38cc:	71 1d       	adc	r23, r1
    38ce:	81 1d       	adc	r24, r1
    38d0:	91 1d       	adc	r25, r1
    38d2:	a1 1d       	adc	r26, r1
    38d4:	20 d0       	rcall	.+64     	; 0x3916 <__ultoa_invert+0x84>
    38d6:	09 f4       	brne	.+2      	; 0x38da <__ultoa_invert+0x48>
    38d8:	68 94       	set
    38da:	3f 91       	pop	r19
    38dc:	2a e0       	ldi	r18, 0x0A	; 10
    38de:	26 9f       	mul	r18, r22
    38e0:	11 24       	eor	r1, r1
    38e2:	30 19       	sub	r19, r0
    38e4:	30 5d       	subi	r19, 0xD0	; 208
    38e6:	31 93       	st	Z+, r19
    38e8:	de f6       	brtc	.-74     	; 0x38a0 <__ultoa_invert+0xe>
    38ea:	cf 01       	movw	r24, r30
    38ec:	08 95       	ret
    38ee:	46 2f       	mov	r20, r22
    38f0:	47 70       	andi	r20, 0x07	; 7
    38f2:	40 5d       	subi	r20, 0xD0	; 208
    38f4:	41 93       	st	Z+, r20
    38f6:	b3 e0       	ldi	r27, 0x03	; 3
    38f8:	0f d0       	rcall	.+30     	; 0x3918 <__ultoa_invert+0x86>
    38fa:	c9 f7       	brne	.-14     	; 0x38ee <__ultoa_invert+0x5c>
    38fc:	f6 cf       	rjmp	.-20     	; 0x38ea <__ultoa_invert+0x58>
    38fe:	46 2f       	mov	r20, r22
    3900:	4f 70       	andi	r20, 0x0F	; 15
    3902:	40 5d       	subi	r20, 0xD0	; 208
    3904:	4a 33       	cpi	r20, 0x3A	; 58
    3906:	18 f0       	brcs	.+6      	; 0x390e <__ultoa_invert+0x7c>
    3908:	49 5d       	subi	r20, 0xD9	; 217
    390a:	31 fd       	sbrc	r19, 1
    390c:	40 52       	subi	r20, 0x20	; 32
    390e:	41 93       	st	Z+, r20
    3910:	02 d0       	rcall	.+4      	; 0x3916 <__ultoa_invert+0x84>
    3912:	a9 f7       	brne	.-22     	; 0x38fe <__ultoa_invert+0x6c>
    3914:	ea cf       	rjmp	.-44     	; 0x38ea <__ultoa_invert+0x58>
    3916:	b4 e0       	ldi	r27, 0x04	; 4
    3918:	a6 95       	lsr	r26
    391a:	97 95       	ror	r25
    391c:	87 95       	ror	r24
    391e:	77 95       	ror	r23
    3920:	67 95       	ror	r22
    3922:	ba 95       	dec	r27
    3924:	c9 f7       	brne	.-14     	; 0x3918 <__ultoa_invert+0x86>
    3926:	00 97       	sbiw	r24, 0x00	; 0
    3928:	61 05       	cpc	r22, r1
    392a:	71 05       	cpc	r23, r1
    392c:	08 95       	ret
    392e:	9b 01       	movw	r18, r22
    3930:	ac 01       	movw	r20, r24
    3932:	0a 2e       	mov	r0, r26
    3934:	06 94       	lsr	r0
    3936:	57 95       	ror	r21
    3938:	47 95       	ror	r20
    393a:	37 95       	ror	r19
    393c:	27 95       	ror	r18
    393e:	ba 95       	dec	r27
    3940:	c9 f7       	brne	.-14     	; 0x3934 <__ultoa_invert+0xa2>
    3942:	62 0f       	add	r22, r18
    3944:	73 1f       	adc	r23, r19
    3946:	84 1f       	adc	r24, r20
    3948:	95 1f       	adc	r25, r21
    394a:	a0 1d       	adc	r26, r0
    394c:	08 95       	ret

0000394e <__divmodhi4>:
    394e:	97 fb       	bst	r25, 7
    3950:	09 2e       	mov	r0, r25
    3952:	07 26       	eor	r0, r23
    3954:	0a d0       	rcall	.+20     	; 0x396a <__divmodhi4_neg1>
    3956:	77 fd       	sbrc	r23, 7
    3958:	04 d0       	rcall	.+8      	; 0x3962 <__divmodhi4_neg2>
    395a:	43 d0       	rcall	.+134    	; 0x39e2 <__udivmodhi4>
    395c:	06 d0       	rcall	.+12     	; 0x396a <__divmodhi4_neg1>
    395e:	00 20       	and	r0, r0
    3960:	1a f4       	brpl	.+6      	; 0x3968 <__divmodhi4_exit>

00003962 <__divmodhi4_neg2>:
    3962:	70 95       	com	r23
    3964:	61 95       	neg	r22
    3966:	7f 4f       	sbci	r23, 0xFF	; 255

00003968 <__divmodhi4_exit>:
    3968:	08 95       	ret

0000396a <__divmodhi4_neg1>:
    396a:	f6 f7       	brtc	.-4      	; 0x3968 <__divmodhi4_exit>
    396c:	90 95       	com	r25
    396e:	81 95       	neg	r24
    3970:	9f 4f       	sbci	r25, 0xFF	; 255
    3972:	08 95       	ret

00003974 <__prologue_saves__>:
    3974:	2f 92       	push	r2
    3976:	3f 92       	push	r3
    3978:	4f 92       	push	r4
    397a:	5f 92       	push	r5
    397c:	6f 92       	push	r6
    397e:	7f 92       	push	r7
    3980:	8f 92       	push	r8
    3982:	9f 92       	push	r9
    3984:	af 92       	push	r10
    3986:	bf 92       	push	r11
    3988:	cf 92       	push	r12
    398a:	df 92       	push	r13
    398c:	ef 92       	push	r14
    398e:	ff 92       	push	r15
    3990:	0f 93       	push	r16
    3992:	1f 93       	push	r17
    3994:	cf 93       	push	r28
    3996:	df 93       	push	r29
    3998:	cd b7       	in	r28, 0x3d	; 61
    399a:	de b7       	in	r29, 0x3e	; 62
    399c:	ca 1b       	sub	r28, r26
    399e:	db 0b       	sbc	r29, r27
    39a0:	0f b6       	in	r0, 0x3f	; 63
    39a2:	f8 94       	cli
    39a4:	de bf       	out	0x3e, r29	; 62
    39a6:	0f be       	out	0x3f, r0	; 63
    39a8:	cd bf       	out	0x3d, r28	; 61
    39aa:	09 94       	ijmp

000039ac <__epilogue_restores__>:
    39ac:	2a 88       	ldd	r2, Y+18	; 0x12
    39ae:	39 88       	ldd	r3, Y+17	; 0x11
    39b0:	48 88       	ldd	r4, Y+16	; 0x10
    39b2:	5f 84       	ldd	r5, Y+15	; 0x0f
    39b4:	6e 84       	ldd	r6, Y+14	; 0x0e
    39b6:	7d 84       	ldd	r7, Y+13	; 0x0d
    39b8:	8c 84       	ldd	r8, Y+12	; 0x0c
    39ba:	9b 84       	ldd	r9, Y+11	; 0x0b
    39bc:	aa 84       	ldd	r10, Y+10	; 0x0a
    39be:	b9 84       	ldd	r11, Y+9	; 0x09
    39c0:	c8 84       	ldd	r12, Y+8	; 0x08
    39c2:	df 80       	ldd	r13, Y+7	; 0x07
    39c4:	ee 80       	ldd	r14, Y+6	; 0x06
    39c6:	fd 80       	ldd	r15, Y+5	; 0x05
    39c8:	0c 81       	ldd	r16, Y+4	; 0x04
    39ca:	1b 81       	ldd	r17, Y+3	; 0x03
    39cc:	aa 81       	ldd	r26, Y+2	; 0x02
    39ce:	b9 81       	ldd	r27, Y+1	; 0x01
    39d0:	ce 0f       	add	r28, r30
    39d2:	d1 1d       	adc	r29, r1
    39d4:	0f b6       	in	r0, 0x3f	; 63
    39d6:	f8 94       	cli
    39d8:	de bf       	out	0x3e, r29	; 62
    39da:	0f be       	out	0x3f, r0	; 63
    39dc:	cd bf       	out	0x3d, r28	; 61
    39de:	ed 01       	movw	r28, r26
    39e0:	08 95       	ret

000039e2 <__udivmodhi4>:
    39e2:	aa 1b       	sub	r26, r26
    39e4:	bb 1b       	sub	r27, r27
    39e6:	51 e1       	ldi	r21, 0x11	; 17
    39e8:	07 c0       	rjmp	.+14     	; 0x39f8 <__udivmodhi4_ep>

000039ea <__udivmodhi4_loop>:
    39ea:	aa 1f       	adc	r26, r26
    39ec:	bb 1f       	adc	r27, r27
    39ee:	a6 17       	cp	r26, r22
    39f0:	b7 07       	cpc	r27, r23
    39f2:	10 f0       	brcs	.+4      	; 0x39f8 <__udivmodhi4_ep>
    39f4:	a6 1b       	sub	r26, r22
    39f6:	b7 0b       	sbc	r27, r23

000039f8 <__udivmodhi4_ep>:
    39f8:	88 1f       	adc	r24, r24
    39fa:	99 1f       	adc	r25, r25
    39fc:	5a 95       	dec	r21
    39fe:	a9 f7       	brne	.-22     	; 0x39ea <__udivmodhi4_loop>
    3a00:	80 95       	com	r24
    3a02:	90 95       	com	r25
    3a04:	bc 01       	movw	r22, r24
    3a06:	cd 01       	movw	r24, r26
    3a08:	08 95       	ret

00003a0a <isspace>:
    3a0a:	91 11       	cpse	r25, r1
    3a0c:	06 c0       	rjmp	.+12     	; 0x3a1a <__ctype_isfalse>
    3a0e:	80 32       	cpi	r24, 0x20	; 32
    3a10:	19 f0       	breq	.+6      	; 0x3a18 <isspace+0xe>
    3a12:	89 50       	subi	r24, 0x09	; 9
    3a14:	85 50       	subi	r24, 0x05	; 5
    3a16:	d0 f7       	brcc	.-12     	; 0x3a0c <isspace+0x2>
    3a18:	08 95       	ret

00003a1a <__ctype_isfalse>:
    3a1a:	99 27       	eor	r25, r25
    3a1c:	88 27       	eor	r24, r24

00003a1e <__ctype_istrue>:
    3a1e:	08 95       	ret

00003a20 <_exit>:
    3a20:	f8 94       	cli

00003a22 <__stop_program>:
    3a22:	ff cf       	rjmp	.-2      	; 0x3a22 <__stop_program>
