
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e4e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00002e4e  00002ee2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000118  00800064  00800064  00002ee6  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00002ee6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000694  00000000  00000000  00002f66  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002e9f  00000000  00000000  000035fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000070a  00000000  00000000  00006499  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001f5c  00000000  00000000  00006ba3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000520  00000000  00000000  00008b00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000049a  00000000  00000000  00009020  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001580  00000000  00000000  000094ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  0000aa3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__ctors_end>
       4:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
       8:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
       c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__vector_3>
      10:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      14:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      18:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      1c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      20:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      24:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_10>
      2c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      30:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      34:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      38:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      3c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      40:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      44:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      48:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      4c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      50:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      54:	9d 08       	sbc	r9, r13
      56:	b8 08       	sbc	r11, r8
      58:	d6 08       	sbc	r13, r6
      5a:	f5 08       	sbc	r15, r5
      5c:	0e 09       	sbc	r16, r14
      5e:	2b 09       	sbc	r18, r11
      60:	4a 09       	sbc	r20, r10
      62:	69 09       	sbc	r22, r9
      64:	85 09       	sbc	r24, r5
      66:	a0 09       	sbc	r26, r0
      68:	c0 09       	sbc	r28, r0
      6a:	dd 09       	sbc	r29, r13
      6c:	f6 09       	sbc	r31, r6
      6e:	13 0a       	sbc	r1, r19
      70:	32 0a       	sbc	r3, r18
      72:	4f 0a       	sbc	r4, r31
      74:	6d 0a       	sbc	r6, r29
      76:	8d 0a       	sbc	r8, r29
      78:	ad 0a       	sbc	r10, r29
      7a:	ce 0a       	sbc	r12, r30
      7c:	ed 0a       	sbc	r14, r29
      7e:	0b 0b       	sbc	r16, r27
      80:	2a 0b       	sbc	r18, r26
      82:	4a 0b       	sbc	r20, r26
      84:	6a 0b       	sbc	r22, r26
      86:	8a 0b       	sbc	r24, r26

00000088 <spinning_line>:
      88:	10 08 04 02 01 00 18 04 03 00 00 03 04 18 00 01     ................
      98:	02 04 08 10 02 02 04 08 08 08 08 04 02 02           ..............

000000a6 <__c.1764>:
      a6:	45 46 47 65 66 67 00                                EFGefg.

000000ad <__c.1758>:
      ad:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

000000bd <__c.1918>:
      bd:	63 64 69 6e 6f 70 73 75 78 58 00                    cdinopsuxX.

000000c8 <__ctors_end>:
      c8:	11 24       	eor	r1, r1
      ca:	1f be       	out	0x3f, r1	; 63
      cc:	cf e5       	ldi	r28, 0x5F	; 95
      ce:	d8 e0       	ldi	r29, 0x08	; 8
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
      d4:	10 e0       	ldi	r17, 0x00	; 0
      d6:	a0 e6       	ldi	r26, 0x60	; 96
      d8:	b0 e0       	ldi	r27, 0x00	; 0
      da:	ee e4       	ldi	r30, 0x4E	; 78
      dc:	fe e2       	ldi	r31, 0x2E	; 46
      de:	02 c0       	rjmp	.+4      	; 0xe4 <.do_copy_data_start>

000000e0 <.do_copy_data_loop>:
      e0:	05 90       	lpm	r0, Z+
      e2:	0d 92       	st	X+, r0

000000e4 <.do_copy_data_start>:
      e4:	a4 36       	cpi	r26, 0x64	; 100
      e6:	b1 07       	cpc	r27, r17
      e8:	d9 f7       	brne	.-10     	; 0xe0 <.do_copy_data_loop>

000000ea <__do_clear_bss>:
      ea:	11 e0       	ldi	r17, 0x01	; 1
      ec:	a4 e6       	ldi	r26, 0x64	; 100
      ee:	b0 e0       	ldi	r27, 0x00	; 0
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
      f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
      f4:	ac 37       	cpi	r26, 0x7C	; 124
      f6:	b1 07       	cpc	r27, r17
      f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>
      fa:	0e 94 74 01 	call	0x2e8	; 0x2e8 <main>
      fe:	0c 94 25 17 	jmp	0x2e4a	; 0x2e4a <_exit>

00000102 <__bad_interrupt>:
     102:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000106 <delay_ms>:
		launch_effect(current_effect);
    }
}

void delay_ms(int delay)
{
     106:	20 e0       	ldi	r18, 0x00	; 0
     108:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     10a:	40 ea       	ldi	r20, 0xA0	; 160
     10c:	5f e0       	ldi	r21, 0x0F	; 15
     10e:	05 c0       	rjmp	.+10     	; 0x11a <delay_ms+0x14>
     110:	fa 01       	movw	r30, r20
     112:	31 97       	sbiw	r30, 0x01	; 1
     114:	f1 f7       	brne	.-4      	; 0x112 <delay_ms+0xc>
	int i;
	for(i = 0 ; i < delay ; i++) _delay_ms(1);
     116:	2f 5f       	subi	r18, 0xFF	; 255
     118:	3f 4f       	sbci	r19, 0xFF	; 255
     11a:	28 17       	cp	r18, r24
     11c:	39 07       	cpc	r19, r25
     11e:	c4 f3       	brlt	.-16     	; 0x110 <delay_ms+0xa>
}
     120:	08 95       	ret

00000122 <cube_ini>:
{
	
	//set Input and Output for data direction
	//output = 1
	//input = 0
	DDRA = 0xff; //set X_PORT for output 00011111
     122:	8f ef       	ldi	r24, 0xFF	; 255
     124:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0x00; //set BUTTON_PORT for input and ISP
     126:	17 ba       	out	0x17, r1	; 23
	DDRC = 0xff; //set Y_PORT for output 00011111
     128:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xff; //set Z/EN_PORT for output 11111100 and RXD/TXD for serial in (needs to enable with USRB)
     12a:	81 bb       	out	0x11, r24	; 17
	
	X_PORT = 0x00;
     12c:	1b ba       	out	0x1b, r1	; 27
	Y_PORT = 0x00;
     12e:	15 ba       	out	0x15, r1	; 21
	Z_PORT = 0x00;
     130:	12 ba       	out	0x12, r1	; 18
	//set the intern pull ups where needed
	BUTTON_PORT |= (1 << BUTTON);
     132:	c2 9a       	sbi	0x18, 2	; 24
	
	// enable LED drivers
	EN_PORT &= ~(1 << EN);
     134:	97 98       	cbi	0x12, 7	; 18

	// define Mask for output register in ISR
	_X_[0] = 0x01;
     136:	41 e0       	ldi	r20, 0x01	; 1
     138:	40 93 7f 00 	sts	0x007F, r20
	_X_[1] = 0x02;
     13c:	32 e0       	ldi	r19, 0x02	; 2
     13e:	30 93 80 00 	sts	0x0080, r19
	_X_[2] = 0x04;
     142:	24 e0       	ldi	r18, 0x04	; 4
     144:	20 93 81 00 	sts	0x0081, r18
	_X_[3] = 0x08;
     148:	98 e0       	ldi	r25, 0x08	; 8
     14a:	90 93 82 00 	sts	0x0082, r25
	_X_[4] = 0x10;
     14e:	80 e1       	ldi	r24, 0x10	; 16
     150:	80 93 83 00 	sts	0x0083, r24

	_Y_[0] = 0x10;
     154:	80 93 9f 00 	sts	0x009F, r24
	_Y_[1] = 0x08;
     158:	90 93 a0 00 	sts	0x00A0, r25
	_Y_[2] = 0x04;
     15c:	20 93 a1 00 	sts	0x00A1, r18
	_Y_[3] = 0x02;
     160:	30 93 a2 00 	sts	0x00A2, r19
	_Y_[4] = 0x01;
     164:	40 93 a3 00 	sts	0x00A3, r20

	_Z_[0] = 0x04;
     168:	20 93 a5 00 	sts	0x00A5, r18
	_Z_[1] = 0x08;
     16c:	90 93 a6 00 	sts	0x00A6, r25
	_Z_[2] = 0x10;
     170:	80 93 a7 00 	sts	0x00A7, r24
	_Z_[3] = 0x20;
     174:	80 e2       	ldi	r24, 0x20	; 32
     176:	80 93 a8 00 	sts	0x00A8, r24
	_Z_[4] = 0x40;
     17a:	80 e4       	ldi	r24, 0x40	; 64
     17c:	80 93 a9 00 	sts	0x00A9, r24

	// ##########Initiate timers and external interrupt############

	
	//Frame buffer interrupt Timer Counter Control Register in CTC mode enabled in Timer Interrupt Mask Register
	TCNT0 = 0x00; //initial counter value = 0
     180:	12 be       	out	0x32, r1	; 50
	TIMSK |= (1 << OCIE0);  //Enable CTC interrupt
     182:	89 b7       	in	r24, 0x39	; 57
     184:	82 60       	ori	r24, 0x02	; 2
     186:	89 bf       	out	0x39, r24	; 57
	// and the interrupt routine is executed.
	// 16000000/256/10 = 6250 times per second
	// There are 5 rows per layer to update..
	// 16000000/256/10/5/5 = 250 FPS
	
	OCR0 = 10; //Interrupt at counter = 10
     188:	8a e0       	ldi	r24, 0x0A	; 10
     18a:	8c bf       	out	0x3c, r24	; 60
	TCCR0 |= (1 << CS02); //prescaler = 256
     18c:	83 b7       	in	r24, 0x33	; 51
     18e:	84 60       	ori	r24, 0x04	; 4
     190:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << WGM01); // Clear Timer on Compare Match (CTC) mode
     192:	83 b7       	in	r24, 0x33	; 51
     194:	88 60       	ori	r24, 0x08	; 8
     196:	83 bf       	out	0x33, r24	; 51

	//Ext. interrupt on interrupt pin INT2 (PB2) for effect switching
	GICR |= (1 << INT2); // INT2 enable im General Interrupt Control Register
     198:	8b b7       	in	r24, 0x3b	; 59
     19a:	80 62       	ori	r24, 0x20	; 32
     19c:	8b bf       	out	0x3b, r24	; 59
	MCUCSR &= ~(1 << ISC2); //Execute interrupt with falling edge
     19e:	84 b7       	in	r24, 0x34	; 52
     1a0:	8f 7b       	andi	r24, 0xBF	; 191
     1a2:	84 bf       	out	0x34, r24	; 52

	//Activate global interrupts
	sei();
     1a4:	78 94       	sei
}
     1a6:	08 95       	ret

000001a8 <__vector_10>:

//Interrupt Service Routine for Frame Buffer
ISR(TIMER0_COMP_vect)
{
     1a8:	1f 92       	push	r1
     1aa:	0f 92       	push	r0
     1ac:	0f b6       	in	r0, 0x3f	; 63
     1ae:	0f 92       	push	r0
     1b0:	11 24       	eor	r1, r1
     1b2:	2f 93       	push	r18
     1b4:	8f 93       	push	r24
     1b6:	9f 93       	push	r25
     1b8:	ef 93       	push	r30
     1ba:	ff 93       	push	r31
	

	//Enable the layer
	Z_PORT = _Z_[current_layer];
     1bc:	e0 91 a4 00 	lds	r30, 0x00A4
     1c0:	f0 e0       	ldi	r31, 0x00	; 0
     1c2:	eb 55       	subi	r30, 0x5B	; 91
     1c4:	ff 4f       	sbci	r31, 0xFF	; 255
     1c6:	80 81       	ld	r24, Z
     1c8:	82 bb       	out	0x12, r24	; 18
	
		for(current_Yrow = 0 ; current_Yrow < 5 ; current_Yrow++){	
     1ca:	10 92 64 00 	sts	0x0064, r1
     1ce:	1e c0       	rjmp	.+60     	; 0x20c <__vector_10+0x64>
			X_PORT = cube[current_layer][current_Yrow];
     1d0:	80 91 a4 00 	lds	r24, 0x00A4
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	20 91 64 00 	lds	r18, 0x0064
     1da:	fc 01       	movw	r30, r24
     1dc:	ee 0f       	add	r30, r30
     1de:	ff 1f       	adc	r31, r31
     1e0:	ee 0f       	add	r30, r30
     1e2:	ff 1f       	adc	r31, r31
     1e4:	e8 0f       	add	r30, r24
     1e6:	f9 1f       	adc	r31, r25
     1e8:	e2 0f       	add	r30, r18
     1ea:	f1 1d       	adc	r31, r1
     1ec:	ec 57       	subi	r30, 0x7C	; 124
     1ee:	ff 4f       	sbci	r31, 0xFF	; 255
     1f0:	80 81       	ld	r24, Z
     1f2:	8b bb       	out	0x1b, r24	; 27
			Y_PORT = _Y_[current_Yrow];
     1f4:	e0 91 64 00 	lds	r30, 0x0064
     1f8:	f0 e0       	ldi	r31, 0x00	; 0
     1fa:	e1 56       	subi	r30, 0x61	; 97
     1fc:	ff 4f       	sbci	r31, 0xFF	; 255
     1fe:	80 81       	ld	r24, Z
     200:	85 bb       	out	0x15, r24	; 21
	

	//Enable the layer
	Z_PORT = _Z_[current_layer];
	
		for(current_Yrow = 0 ; current_Yrow < 5 ; current_Yrow++){	
     202:	80 91 64 00 	lds	r24, 0x0064
     206:	8f 5f       	subi	r24, 0xFF	; 255
     208:	80 93 64 00 	sts	0x0064, r24
     20c:	80 91 64 00 	lds	r24, 0x0064
     210:	85 30       	cpi	r24, 0x05	; 5
     212:	f0 f2       	brcs	.-68     	; 0x1d0 <__vector_10+0x28>
		}
 
	
	//Running through 1 layer wins vs. updating all layers during an interrupt.
	//Because the ISR comes faster to an end and the cube has a faster update cycle to the buffer.
	if(current_layer++ == 4) current_layer = 0;
     214:	80 91 a4 00 	lds	r24, 0x00A4
     218:	8f 5f       	subi	r24, 0xFF	; 255
     21a:	80 93 a4 00 	sts	0x00A4, r24
     21e:	81 50       	subi	r24, 0x01	; 1
     220:	84 30       	cpi	r24, 0x04	; 4
     222:	11 f4       	brne	.+4      	; 0x228 <__vector_10+0x80>
     224:	10 92 a4 00 	sts	0x00A4, r1
}
     228:	ff 91       	pop	r31
     22a:	ef 91       	pop	r30
     22c:	9f 91       	pop	r25
     22e:	8f 91       	pop	r24
     230:	2f 91       	pop	r18
     232:	0f 90       	pop	r0
     234:	0f be       	out	0x3f, r0	; 63
     236:	0f 90       	pop	r0
     238:	1f 90       	pop	r1
     23a:	18 95       	reti

0000023c <__vector_3>:

//Interrupt Service Routine for effect switching
ISR(INT2_vect)
{
     23c:	1f 92       	push	r1
     23e:	0f 92       	push	r0
     240:	0f b6       	in	r0, 0x3f	; 63
     242:	0f 92       	push	r0
     244:	11 24       	eor	r1, r1
     246:	8f 93       	push	r24
     248:	9f 93       	push	r25
	direction++;
     24a:	80 91 9d 00 	lds	r24, 0x009D
     24e:	90 91 9e 00 	lds	r25, 0x009E
     252:	01 96       	adiw	r24, 0x01	; 1
     254:	90 93 9e 00 	sts	0x009E, r25
     258:	80 93 9d 00 	sts	0x009D, r24
	if(direction == 3) direction = 0;
     25c:	80 91 9d 00 	lds	r24, 0x009D
     260:	90 91 9e 00 	lds	r25, 0x009E
     264:	03 97       	sbiw	r24, 0x03	; 3
     266:	21 f4       	brne	.+8      	; 0x270 <__vector_3+0x34>
     268:	10 92 9e 00 	sts	0x009E, r1
     26c:	10 92 9d 00 	sts	0x009D, r1
	
}
     270:	9f 91       	pop	r25
     272:	8f 91       	pop	r24
     274:	0f 90       	pop	r0
     276:	0f be       	out	0x3f, r0	; 63
     278:	0f 90       	pop	r0
     27a:	1f 90       	pop	r1
     27c:	18 95       	reti

0000027e <launch_effect>:

////		break;
		//
		//// etc.
		//case 3:
		start();	
     27e:	0e 94 64 11 	call	0x22c8	; 0x22c8 <start>

}
     282:	08 95       	ret

00000284 <boot_check>:
	if(direction == 3) direction = 0;
	
}

void boot_check(int delay)
{
     284:	ef 92       	push	r14
     286:	ff 92       	push	r15
     288:	0f 93       	push	r16
     28a:	1f 93       	push	r17
     28c:	cf 93       	push	r28
     28e:	df 93       	push	r29
     290:	8c 01       	movw	r16, r24
     292:	c0 e0       	ldi	r28, 0x00	; 0
     294:	d0 e0       	ldi	r29, 0x00	; 0
     296:	80 ea       	ldi	r24, 0xA0	; 160
     298:	e8 2e       	mov	r14, r24
     29a:	8f e0       	ldi	r24, 0x0F	; 15
     29c:	f8 2e       	mov	r15, r24
	//earn some blink blink for that ;)
	int i;
	
	for(i = 0 ; i < 4 ; i++)
	{
		fill(0x1f);
     29e:	8f e1       	ldi	r24, 0x1F	; 31
     2a0:	0e 94 21 05 	call	0xa42	; 0xa42 <fill>
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	04 c0       	rjmp	.+8      	; 0x2b2 <boot_check+0x2e>
     2aa:	f7 01       	movw	r30, r14
     2ac:	31 97       	sbiw	r30, 0x01	; 1
     2ae:	f1 f7       	brne	.-4      	; 0x2ac <boot_check+0x28>
}

void delay_ms(int delay)
{
	int i;
	for(i = 0 ; i < delay ; i++) _delay_ms(1);
     2b0:	01 96       	adiw	r24, 0x01	; 1
     2b2:	80 17       	cp	r24, r16
     2b4:	91 07       	cpc	r25, r17
     2b6:	cc f3       	brlt	.-14     	; 0x2aa <boot_check+0x26>
	
	for(i = 0 ; i < 4 ; i++)
	{
		fill(0x1f);
		delay_ms(delay);
		fill(0x00);
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	0e 94 21 05 	call	0xa42	; 0xa42 <fill>
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	04 c0       	rjmp	.+8      	; 0x2cc <boot_check+0x48>
     2c4:	f7 01       	movw	r30, r14
     2c6:	31 97       	sbiw	r30, 0x01	; 1
     2c8:	f1 f7       	brne	.-4      	; 0x2c6 <boot_check+0x42>
}

void delay_ms(int delay)
{
	int i;
	for(i = 0 ; i < delay ; i++) _delay_ms(1);
     2ca:	01 96       	adiw	r24, 0x01	; 1
     2cc:	80 17       	cp	r24, r16
     2ce:	91 07       	cpc	r25, r17
     2d0:	cc f3       	brlt	.-14     	; 0x2c4 <boot_check+0x40>
{
	//shows that the cube was successfully initiated
	//earn some blink blink for that ;)
	int i;
	
	for(i = 0 ; i < 4 ; i++)
     2d2:	21 96       	adiw	r28, 0x01	; 1
     2d4:	c4 30       	cpi	r28, 0x04	; 4
     2d6:	d1 05       	cpc	r29, r1
     2d8:	11 f7       	brne	.-60     	; 0x29e <boot_check+0x1a>
		delay_ms(delay);
		fill(0x00);
		delay_ms(delay);
	}

}
     2da:	df 91       	pop	r29
     2dc:	cf 91       	pop	r28
     2de:	1f 91       	pop	r17
     2e0:	0f 91       	pop	r16
     2e2:	ff 90       	pop	r15
     2e4:	ef 90       	pop	r14
     2e6:	08 95       	ret

000002e8 <main>:

int main(void)
{

	//Set the layer and Y row to start drawing at
	current_layer = 0x00;
     2e8:	10 92 a4 00 	sts	0x00A4, r1
	current_Yrow = 0x00;
     2ec:	10 92 64 00 	sts	0x0064, r1
	//Set effect to start with
	current_effect = 3;
     2f0:	83 e0       	ldi	r24, 0x03	; 3
     2f2:	80 93 7e 00 	sts	0x007E, r24
 	
	cube_ini();
     2f6:	0e 94 91 00 	call	0x122	; 0x122 <cube_ini>
	direction = 0;
     2fa:	10 92 9e 00 	sts	0x009E, r1
     2fe:	10 92 9d 00 	sts	0x009D, r1
	boot_check(500);
     302:	84 ef       	ldi	r24, 0xF4	; 244
     304:	91 e0       	ldi	r25, 0x01	; 1
     306:	0e 94 42 01 	call	0x284	; 0x284 <boot_check>

////		break;
		//
		//// etc.
		//case 3:
		start();	
     30a:	0e 94 64 11 	call	0x22c8	; 0x22c8 <start>
     30e:	fd cf       	rjmp	.-6      	; 0x30a <main+0x22>

00000310 <setLED>:
// Voxel comes from volumetric and pixel. It describes a data point of 3D grid graphic
// Voxel == 1 LED in the 3D cube grid
// Set a voxel (LED) in the cube buffer

void setLED(int x, int y, int z)
{ 
     310:	dc 01       	movw	r26, r24
}

// This function validates that we are drawing inside the cube.
unsigned char inrange(int x, int y, int z)
{
	if (x >= 0 && x < 5 && y >= 0 && y < 5 && z >= 0 && z < 5){
     312:	85 30       	cpi	r24, 0x05	; 5
     314:	91 05       	cpc	r25, r1
     316:	f8 f4       	brcc	.+62     	; 0x356 <setLED+0x46>
     318:	77 fd       	sbrc	r23, 7
     31a:	1d c0       	rjmp	.+58     	; 0x356 <setLED+0x46>
     31c:	65 30       	cpi	r22, 0x05	; 5
     31e:	71 05       	cpc	r23, r1
     320:	d4 f4       	brge	.+52     	; 0x356 <setLED+0x46>
     322:	57 fd       	sbrc	r21, 7
     324:	18 c0       	rjmp	.+48     	; 0x356 <setLED+0x46>
     326:	45 30       	cpi	r20, 0x05	; 5
     328:	51 05       	cpc	r21, r1
     32a:	ac f4       	brge	.+42     	; 0x356 <setLED+0x46>
// Voxel == 1 LED in the 3D cube grid
// Set a voxel (LED) in the cube buffer

void setLED(int x, int y, int z)
{ 
	if (inrange(x, y, z)) cube[z][y] |= (1 << x);
     32c:	fa 01       	movw	r30, r20
     32e:	ee 0f       	add	r30, r30
     330:	ff 1f       	adc	r31, r31
     332:	ee 0f       	add	r30, r30
     334:	ff 1f       	adc	r31, r31
     336:	e4 0f       	add	r30, r20
     338:	f5 1f       	adc	r31, r21
     33a:	e6 0f       	add	r30, r22
     33c:	f7 1f       	adc	r31, r23
     33e:	ec 57       	subi	r30, 0x7C	; 124
     340:	ff 4f       	sbci	r31, 0xFF	; 255
     342:	20 81       	ld	r18, Z
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	02 c0       	rjmp	.+4      	; 0x34e <setLED+0x3e>
     34a:	88 0f       	add	r24, r24
     34c:	99 1f       	adc	r25, r25
     34e:	aa 95       	dec	r26
     350:	e2 f7       	brpl	.-8      	; 0x34a <setLED+0x3a>
     352:	28 2b       	or	r18, r24
     354:	20 83       	st	Z, r18
     356:	08 95       	ret

00000358 <clrLED>:
}

// Clear a voxel (LED) in the cube buffer
void clrLED(int x, int y, int z)
{
     358:	dc 01       	movw	r26, r24
}

// This function validates that we are drawing inside the cube.
unsigned char inrange(int x, int y, int z)
{
	if (x >= 0 && x < 5 && y >= 0 && y < 5 && z >= 0 && z < 5){
     35a:	85 30       	cpi	r24, 0x05	; 5
     35c:	91 05       	cpc	r25, r1
     35e:	00 f5       	brcc	.+64     	; 0x3a0 <clrLED+0x48>
     360:	77 fd       	sbrc	r23, 7
     362:	1e c0       	rjmp	.+60     	; 0x3a0 <clrLED+0x48>
     364:	65 30       	cpi	r22, 0x05	; 5
     366:	71 05       	cpc	r23, r1
     368:	dc f4       	brge	.+54     	; 0x3a0 <clrLED+0x48>
     36a:	57 fd       	sbrc	r21, 7
     36c:	19 c0       	rjmp	.+50     	; 0x3a0 <clrLED+0x48>
     36e:	45 30       	cpi	r20, 0x05	; 5
     370:	51 05       	cpc	r21, r1
     372:	b4 f4       	brge	.+44     	; 0x3a0 <clrLED+0x48>
}

// Clear a voxel (LED) in the cube buffer
void clrLED(int x, int y, int z)
{
	if (inrange(x, y, z)) cube[z][y] &= ~(1 << x);
     374:	fa 01       	movw	r30, r20
     376:	ee 0f       	add	r30, r30
     378:	ff 1f       	adc	r31, r31
     37a:	ee 0f       	add	r30, r30
     37c:	ff 1f       	adc	r31, r31
     37e:	e4 0f       	add	r30, r20
     380:	f5 1f       	adc	r31, r21
     382:	e6 0f       	add	r30, r22
     384:	f7 1f       	adc	r31, r23
     386:	ec 57       	subi	r30, 0x7C	; 124
     388:	ff 4f       	sbci	r31, 0xFF	; 255
     38a:	20 81       	ld	r18, Z
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	02 c0       	rjmp	.+4      	; 0x396 <clrLED+0x3e>
     392:	88 0f       	add	r24, r24
     394:	99 1f       	adc	r25, r25
     396:	aa 95       	dec	r26
     398:	e2 f7       	brpl	.-8      	; 0x392 <clrLED+0x3a>
     39a:	80 95       	com	r24
     39c:	82 23       	and	r24, r18
     39e:	80 83       	st	Z, r24
     3a0:	08 95       	ret

000003a2 <getLED>:
}

// Get the current status of a LED
unsigned char getLED(int x, int y, int z)
{
     3a2:	9c 01       	movw	r18, r24
}

// This function validates that we are drawing inside the cube.
unsigned char inrange(int x, int y, int z)
{
	if (x >= 0 && x < 5 && y >= 0 && y < 5 && z >= 0 && z < 5){
     3a4:	85 30       	cpi	r24, 0x05	; 5
     3a6:	91 05       	cpc	r25, r1
     3a8:	f0 f4       	brcc	.+60     	; 0x3e6 <getLED+0x44>
     3aa:	77 fd       	sbrc	r23, 7
     3ac:	1c c0       	rjmp	.+56     	; 0x3e6 <getLED+0x44>
     3ae:	65 30       	cpi	r22, 0x05	; 5
     3b0:	71 05       	cpc	r23, r1
     3b2:	cc f4       	brge	.+50     	; 0x3e6 <getLED+0x44>
     3b4:	57 fd       	sbrc	r21, 7
     3b6:	17 c0       	rjmp	.+46     	; 0x3e6 <getLED+0x44>
     3b8:	45 30       	cpi	r20, 0x05	; 5
     3ba:	51 05       	cpc	r21, r1
     3bc:	a4 f4       	brge	.+40     	; 0x3e6 <getLED+0x44>

// Get the current status of a LED
unsigned char getLED(int x, int y, int z)
{
	if (inrange(x, y, z)){
		if (cube[z][y] & (1 << x)){
     3be:	fa 01       	movw	r30, r20
     3c0:	ee 0f       	add	r30, r30
     3c2:	ff 1f       	adc	r31, r31
     3c4:	ee 0f       	add	r30, r30
     3c6:	ff 1f       	adc	r31, r31
     3c8:	e4 0f       	add	r30, r20
     3ca:	f5 1f       	adc	r31, r21
     3cc:	e6 0f       	add	r30, r22
     3ce:	f7 1f       	adc	r31, r23
     3d0:	ec 57       	subi	r30, 0x7C	; 124
     3d2:	ff 4f       	sbci	r31, 0xFF	; 255
     3d4:	80 81       	ld	r24, Z
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	02 c0       	rjmp	.+4      	; 0x3de <getLED+0x3c>
     3da:	95 95       	asr	r25
     3dc:	87 95       	ror	r24
     3de:	2a 95       	dec	r18
     3e0:	e2 f7       	brpl	.-8      	; 0x3da <getLED+0x38>
     3e2:	81 70       	andi	r24, 0x01	; 1
     3e4:	08 95       	ret
     3e6:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	else{
		return 0x00;
	}
}
     3e8:	08 95       	ret

000003ea <inrange>:

// This function validates that we are drawing inside the cube.
unsigned char inrange(int x, int y, int z)
{
	if (x >= 0 && x < 5 && y >= 0 && y < 5 && z >= 0 && z < 5){
     3ea:	05 97       	sbiw	r24, 0x05	; 5
     3ec:	78 f4       	brcc	.+30     	; 0x40c <inrange+0x22>
     3ee:	77 fd       	sbrc	r23, 7
     3f0:	0d c0       	rjmp	.+26     	; 0x40c <inrange+0x22>
     3f2:	65 30       	cpi	r22, 0x05	; 5
     3f4:	71 05       	cpc	r23, r1
     3f6:	54 f4       	brge	.+20     	; 0x40c <inrange+0x22>
     3f8:	57 fd       	sbrc	r21, 7
     3fa:	08 c0       	rjmp	.+16     	; 0x40c <inrange+0x22>
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	45 30       	cpi	r20, 0x05	; 5
     400:	51 05       	cpc	r21, r1
     402:	0c f0       	brlt	.+2      	; 0x406 <inrange+0x1c>
     404:	91 e0       	ldi	r25, 0x01	; 1
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	98 27       	eor	r25, r24
     40a:	01 c0       	rjmp	.+2      	; 0x40e <inrange+0x24>
     40c:	90 e0       	ldi	r25, 0x00	; 0
	} 
	else{
		// One of the coordinates was outside the cube.
		return 0x00;
	}
}
     40e:	89 2f       	mov	r24, r25
     410:	08 95       	ret

00000412 <alterLED>:

// Alter the state of  a voxel in the cube buffer
// This function was made in order to make set and clr versions
// of other functions without writing two almost identical functions
void alterLED(int x, int y, int z, int state)
{
     412:	dc 01       	movw	r26, r24
	if (state == 1){
     414:	21 30       	cpi	r18, 0x01	; 1
     416:	31 05       	cpc	r19, r1
     418:	09 f5       	brne	.+66     	; 0x45c <alterLED+0x4a>
}

// This function validates that we are drawing inside the cube.
unsigned char inrange(int x, int y, int z)
{
	if (x >= 0 && x < 5 && y >= 0 && y < 5 && z >= 0 && z < 5){
     41a:	85 30       	cpi	r24, 0x05	; 5
     41c:	91 05       	cpc	r25, r1
     41e:	00 f5       	brcc	.+64     	; 0x460 <alterLED+0x4e>
     420:	77 fd       	sbrc	r23, 7
     422:	1e c0       	rjmp	.+60     	; 0x460 <alterLED+0x4e>
     424:	65 30       	cpi	r22, 0x05	; 5
     426:	71 05       	cpc	r23, r1
     428:	dc f4       	brge	.+54     	; 0x460 <alterLED+0x4e>
     42a:	57 fd       	sbrc	r21, 7
     42c:	19 c0       	rjmp	.+50     	; 0x460 <alterLED+0x4e>
     42e:	45 30       	cpi	r20, 0x05	; 5
     430:	51 05       	cpc	r21, r1
     432:	b4 f4       	brge	.+44     	; 0x460 <alterLED+0x4e>
// Voxel == 1 LED in the 3D cube grid
// Set a voxel (LED) in the cube buffer

void setLED(int x, int y, int z)
{ 
	if (inrange(x, y, z)) cube[z][y] |= (1 << x);
     434:	fa 01       	movw	r30, r20
     436:	ee 0f       	add	r30, r30
     438:	ff 1f       	adc	r31, r31
     43a:	ee 0f       	add	r30, r30
     43c:	ff 1f       	adc	r31, r31
     43e:	e4 0f       	add	r30, r20
     440:	f5 1f       	adc	r31, r21
     442:	e6 0f       	add	r30, r22
     444:	f7 1f       	adc	r31, r23
     446:	ec 57       	subi	r30, 0x7C	; 124
     448:	ff 4f       	sbci	r31, 0xFF	; 255
     44a:	80 81       	ld	r24, Z
     44c:	02 c0       	rjmp	.+4      	; 0x452 <alterLED+0x40>
     44e:	22 0f       	add	r18, r18
     450:	33 1f       	adc	r19, r19
     452:	aa 95       	dec	r26
     454:	e2 f7       	brpl	.-8      	; 0x44e <alterLED+0x3c>
     456:	82 2b       	or	r24, r18
     458:	80 83       	st	Z, r24
     45a:	08 95       	ret
{
	if (state == 1){
		setLED(x,y,z);
	} 
	else{
		clrLED(x,y,z);
     45c:	0e 94 ac 01 	call	0x358	; 0x358 <clrLED>
     460:	08 95       	ret

00000462 <flpLED>:
}

// Flip the state of a LED.
// If the voxel in the buffer is 1, its turned into a 0, and vice versa.
void flpLED(int x, int y, int z)
{
     462:	dc 01       	movw	r26, r24
}

// This function validates that we are drawing inside the cube.
unsigned char inrange(int x, int y, int z)
{
	if (x >= 0 && x < 5 && y >= 0 && y < 5 && z >= 0 && z < 5){
     464:	85 30       	cpi	r24, 0x05	; 5
     466:	91 05       	cpc	r25, r1
     468:	f8 f4       	brcc	.+62     	; 0x4a8 <flpLED+0x46>
     46a:	77 fd       	sbrc	r23, 7
     46c:	1d c0       	rjmp	.+58     	; 0x4a8 <flpLED+0x46>
     46e:	65 30       	cpi	r22, 0x05	; 5
     470:	71 05       	cpc	r23, r1
     472:	d4 f4       	brge	.+52     	; 0x4a8 <flpLED+0x46>
     474:	57 fd       	sbrc	r21, 7
     476:	18 c0       	rjmp	.+48     	; 0x4a8 <flpLED+0x46>
     478:	45 30       	cpi	r20, 0x05	; 5
     47a:	51 05       	cpc	r21, r1
     47c:	ac f4       	brge	.+42     	; 0x4a8 <flpLED+0x46>

// Flip the state of a LED.
// If the voxel in the buffer is 1, its turned into a 0, and vice versa.
void flpLED(int x, int y, int z)
{
	if (inrange(x, y, z)) cube[z][y] ^= (1 << x);
     47e:	fa 01       	movw	r30, r20
     480:	ee 0f       	add	r30, r30
     482:	ff 1f       	adc	r31, r31
     484:	ee 0f       	add	r30, r30
     486:	ff 1f       	adc	r31, r31
     488:	e4 0f       	add	r30, r20
     48a:	f5 1f       	adc	r31, r21
     48c:	e6 0f       	add	r30, r22
     48e:	f7 1f       	adc	r31, r23
     490:	ec 57       	subi	r30, 0x7C	; 124
     492:	ff 4f       	sbci	r31, 0xFF	; 255
     494:	20 81       	ld	r18, Z
     496:	81 e0       	ldi	r24, 0x01	; 1
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	02 c0       	rjmp	.+4      	; 0x4a0 <flpLED+0x3e>
     49c:	88 0f       	add	r24, r24
     49e:	99 1f       	adc	r25, r25
     4a0:	aa 95       	dec	r26
     4a2:	e2 f7       	brpl	.-8      	; 0x49c <flpLED+0x3a>
     4a4:	28 27       	eor	r18, r24
     4a6:	20 83       	st	Z, r18
     4a8:	08 95       	ret

000004aa <setplane_z>:
// i.e. draws a horizonal plane on a given level (z)
void setplane_z (int z)
{
	int y;
	// Loop the 5 rows on the given level and write 1 to the bits.
	for(y = 0 ; y < 5 ; y++) cube[z][y] = 0x1f;
     4aa:	fc 01       	movw	r30, r24
     4ac:	ee 0f       	add	r30, r30
     4ae:	ff 1f       	adc	r31, r31
     4b0:	ee 0f       	add	r30, r30
     4b2:	ff 1f       	adc	r31, r31
     4b4:	e8 0f       	add	r30, r24
     4b6:	f9 1f       	adc	r31, r25
     4b8:	ec 57       	subi	r30, 0x7C	; 124
     4ba:	ff 4f       	sbci	r31, 0xFF	; 255
     4bc:	8f e1       	ldi	r24, 0x1F	; 31
     4be:	80 83       	st	Z, r24
     4c0:	81 83       	std	Z+1, r24	; 0x01
     4c2:	82 83       	std	Z+2, r24	; 0x02
     4c4:	83 83       	std	Z+3, r24	; 0x03
     4c6:	84 83       	std	Z+4, r24	; 0x04
}
     4c8:	08 95       	ret

000004ca <clrplane_z>:

// Clears all the leds on X and Y for a given Z
void clrplane_z (int z)
{
	int y;
	for(y = 0 ; y < 5 ; y++) cube[z][y] = 0x00;
     4ca:	fc 01       	movw	r30, r24
     4cc:	ee 0f       	add	r30, r30
     4ce:	ff 1f       	adc	r31, r31
     4d0:	ee 0f       	add	r30, r30
     4d2:	ff 1f       	adc	r31, r31
     4d4:	e8 0f       	add	r30, r24
     4d6:	f9 1f       	adc	r31, r25
     4d8:	ec 57       	subi	r30, 0x7C	; 124
     4da:	ff 4f       	sbci	r31, 0xFF	; 255
     4dc:	10 82       	st	Z, r1
     4de:	11 82       	std	Z+1, r1	; 0x01
     4e0:	12 82       	std	Z+2, r1	; 0x02
     4e2:	13 82       	std	Z+3, r1	; 0x03
     4e4:	14 82       	std	Z+4, r1	; 0x04
}
     4e6:	08 95       	ret

000004e8 <setplane_x>:
	// the actual bits in each row of each layer
	// We loop them all, and set the apropriate bit.
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
			// Set a bit, and shift it inwards to the right X
			cube[z][y] |= (1 << x);
     4e8:	21 e0       	ldi	r18, 0x01	; 1
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <setplane_x+0xa>
     4ee:	22 0f       	add	r18, r18
     4f0:	33 1f       	adc	r19, r19
     4f2:	8a 95       	dec	r24
     4f4:	e2 f7       	brpl	.-8      	; 0x4ee <setplane_x+0x6>
     4f6:	60 e0       	ldi	r22, 0x00	; 0
     4f8:	70 e0       	ldi	r23, 0x00	; 0
     4fa:	12 c0       	rjmp	.+36     	; 0x520 <setplane_x+0x38>
     4fc:	fd 01       	movw	r30, r26
     4fe:	e4 0f       	add	r30, r20
     500:	f5 1f       	adc	r31, r21
     502:	ec 57       	subi	r30, 0x7C	; 124
     504:	ff 4f       	sbci	r31, 0xFF	; 255
     506:	80 81       	ld	r24, Z
     508:	82 2b       	or	r24, r18
     50a:	80 83       	st	Z, r24
	int y;
	// Since coordinates along the X axis are
	// the actual bits in each row of each layer
	// We loop them all, and set the apropriate bit.
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
     50c:	4f 5f       	subi	r20, 0xFF	; 255
     50e:	5f 4f       	sbci	r21, 0xFF	; 255
     510:	45 30       	cpi	r20, 0x05	; 5
     512:	51 05       	cpc	r21, r1
     514:	99 f7       	brne	.-26     	; 0x4fc <setplane_x+0x14>
	int z;
	int y;
	// Since coordinates along the X axis are
	// the actual bits in each row of each layer
	// We loop them all, and set the apropriate bit.
	for(z = 0 ; z < 5 ; z++){
     516:	6f 5f       	subi	r22, 0xFF	; 255
     518:	7f 4f       	sbci	r23, 0xFF	; 255
     51a:	65 30       	cpi	r22, 0x05	; 5
     51c:	71 05       	cpc	r23, r1
     51e:	51 f0       	breq	.+20     	; 0x534 <setplane_x+0x4c>
     520:	40 e0       	ldi	r20, 0x00	; 0
     522:	50 e0       	ldi	r21, 0x00	; 0
		for(y = 0 ; y < 5 ; y++){
			// Set a bit, and shift it inwards to the right X
			cube[z][y] |= (1 << x);
     524:	db 01       	movw	r26, r22
     526:	aa 0f       	add	r26, r26
     528:	bb 1f       	adc	r27, r27
     52a:	aa 0f       	add	r26, r26
     52c:	bb 1f       	adc	r27, r27
     52e:	a6 0f       	add	r26, r22
     530:	b7 1f       	adc	r27, r23
     532:	e4 cf       	rjmp	.-56     	; 0x4fc <setplane_x+0x14>
     534:	08 95       	ret

00000536 <clrplane_x>:
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
			cube[z][y] &= ~(1 << x);
     536:	21 e0       	ldi	r18, 0x01	; 1
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	02 c0       	rjmp	.+4      	; 0x540 <clrplane_x+0xa>
     53c:	22 0f       	add	r18, r18
     53e:	33 1f       	adc	r19, r19
     540:	8a 95       	dec	r24
     542:	e2 f7       	brpl	.-8      	; 0x53c <clrplane_x+0x6>
     544:	20 95       	com	r18
     546:	60 e0       	ldi	r22, 0x00	; 0
     548:	70 e0       	ldi	r23, 0x00	; 0
     54a:	12 c0       	rjmp	.+36     	; 0x570 <clrplane_x+0x3a>
     54c:	fd 01       	movw	r30, r26
     54e:	e4 0f       	add	r30, r20
     550:	f5 1f       	adc	r31, r21
     552:	ec 57       	subi	r30, 0x7C	; 124
     554:	ff 4f       	sbci	r31, 0xFF	; 255
     556:	80 81       	ld	r24, Z
     558:	82 23       	and	r24, r18
     55a:	80 83       	st	Z, r24
void clrplane_x (int x)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
     55c:	4f 5f       	subi	r20, 0xFF	; 255
     55e:	5f 4f       	sbci	r21, 0xFF	; 255
     560:	45 30       	cpi	r20, 0x05	; 5
     562:	51 05       	cpc	r21, r1
     564:	99 f7       	brne	.-26     	; 0x54c <clrplane_x+0x16>
// Clear all the leds on Y and Z for a given X
void clrplane_x (int x)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
     566:	6f 5f       	subi	r22, 0xFF	; 255
     568:	7f 4f       	sbci	r23, 0xFF	; 255
     56a:	65 30       	cpi	r22, 0x05	; 5
     56c:	71 05       	cpc	r23, r1
     56e:	51 f0       	breq	.+20     	; 0x584 <clrplane_x+0x4e>
     570:	40 e0       	ldi	r20, 0x00	; 0
     572:	50 e0       	ldi	r21, 0x00	; 0
		for(y = 0 ; y < 5 ; y++){
			cube[z][y] &= ~(1 << x);
     574:	db 01       	movw	r26, r22
     576:	aa 0f       	add	r26, r26
     578:	bb 1f       	adc	r27, r27
     57a:	aa 0f       	add	r26, r26
     57c:	bb 1f       	adc	r27, r27
     57e:	a6 0f       	add	r26, r22
     580:	b7 1f       	adc	r27, r23
     582:	e4 cf       	rjmp	.-56     	; 0x54c <clrplane_x+0x16>
     584:	08 95       	ret

00000586 <setplane_y>:

// Sets all the leds on X and Z for a given Y
void setplane_y (int y)
{
	int z;
	for (z = 0 ; z < 5 ; z++) cube[z][y] = 0x1f; 
     586:	fc 01       	movw	r30, r24
     588:	ec 57       	subi	r30, 0x7C	; 124
     58a:	ff 4f       	sbci	r31, 0xFF	; 255
     58c:	8f e1       	ldi	r24, 0x1F	; 31
     58e:	80 83       	st	Z, r24
     590:	85 83       	std	Z+5, r24	; 0x05
     592:	82 87       	std	Z+10, r24	; 0x0a
     594:	87 87       	std	Z+15, r24	; 0x0f
     596:	84 8b       	std	Z+20, r24	; 0x14
}
     598:	08 95       	ret

0000059a <clrplane_y>:

// Sets all the leds on X and Z for a given Y
void clrplane_y (int y)
{
	int z;
	for(z = 0 ; z < 5 ; z++) cube[z][y] = 0x00; 
     59a:	fc 01       	movw	r30, r24
     59c:	ec 57       	subi	r30, 0x7C	; 124
     59e:	ff 4f       	sbci	r31, 0xFF	; 255
     5a0:	10 82       	st	Z, r1
     5a2:	15 82       	std	Z+5, r1	; 0x05
     5a4:	12 86       	std	Z+10, r1	; 0x0a
     5a6:	17 86       	std	Z+15, r1	; 0x0f
     5a8:	14 8a       	std	Z+20, r1	; 0x14
}
     5aa:	08 95       	ret

000005ac <setplane>:

// Set a plane using the functions above
void setplane(unsigned char plane, int i, int state)
{
	if (plane == 'x'){
     5ac:	88 37       	cpi	r24, 0x78	; 120
     5ae:	09 f0       	breq	.+2      	; 0x5b2 <setplane+0x6>
     5b0:	53 c0       	rjmp	.+166    	; 0x658 <setplane+0xac>
		if (state > 0){
     5b2:	14 16       	cp	r1, r20
     5b4:	15 06       	cpc	r1, r21
     5b6:	64 f0       	brlt	.+24     	; 0x5d0 <setplane+0x24>
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
			cube[z][y] &= ~(1 << x);
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <setplane+0x16>
     5be:	88 0f       	add	r24, r24
     5c0:	99 1f       	adc	r25, r25
     5c2:	6a 95       	dec	r22
     5c4:	e2 f7       	brpl	.-8      	; 0x5be <setplane+0x12>
     5c6:	98 2f       	mov	r25, r24
     5c8:	90 95       	com	r25
     5ca:	40 e0       	ldi	r20, 0x00	; 0
     5cc:	50 e0       	ldi	r21, 0x00	; 0
     5ce:	3a c0       	rjmp	.+116    	; 0x644 <setplane+0x98>
	// the actual bits in each row of each layer
	// We loop them all, and set the apropriate bit.
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
			// Set a bit, and shift it inwards to the right X
			cube[z][y] |= (1 << x);
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	02 c0       	rjmp	.+4      	; 0x5da <setplane+0x2e>
     5d6:	88 0f       	add	r24, r24
     5d8:	99 1f       	adc	r25, r25
     5da:	6a 95       	dec	r22
     5dc:	e2 f7       	brpl	.-8      	; 0x5d6 <setplane+0x2a>
     5de:	98 2f       	mov	r25, r24
     5e0:	40 e0       	ldi	r20, 0x00	; 0
     5e2:	50 e0       	ldi	r21, 0x00	; 0
     5e4:	13 c0       	rjmp	.+38     	; 0x60c <setplane+0x60>
     5e6:	fb 01       	movw	r30, r22
     5e8:	e2 0f       	add	r30, r18
     5ea:	f3 1f       	adc	r31, r19
     5ec:	ec 57       	subi	r30, 0x7C	; 124
     5ee:	ff 4f       	sbci	r31, 0xFF	; 255
     5f0:	80 81       	ld	r24, Z
     5f2:	89 2b       	or	r24, r25
     5f4:	80 83       	st	Z, r24
	int y;
	// Since coordinates along the X axis are
	// the actual bits in each row of each layer
	// We loop them all, and set the apropriate bit.
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
     5f6:	2f 5f       	subi	r18, 0xFF	; 255
     5f8:	3f 4f       	sbci	r19, 0xFF	; 255
     5fa:	25 30       	cpi	r18, 0x05	; 5
     5fc:	31 05       	cpc	r19, r1
     5fe:	99 f7       	brne	.-26     	; 0x5e6 <setplane+0x3a>
	int z;
	int y;
	// Since coordinates along the X axis are
	// the actual bits in each row of each layer
	// We loop them all, and set the apropriate bit.
	for(z = 0 ; z < 5 ; z++){
     600:	4f 5f       	subi	r20, 0xFF	; 255
     602:	5f 4f       	sbci	r21, 0xFF	; 255
     604:	45 30       	cpi	r20, 0x05	; 5
     606:	51 05       	cpc	r21, r1
     608:	09 f4       	brne	.+2      	; 0x60c <setplane+0x60>
     60a:	59 c0       	rjmp	.+178    	; 0x6be <setplane+0x112>
     60c:	20 e0       	ldi	r18, 0x00	; 0
     60e:	30 e0       	ldi	r19, 0x00	; 0
		for(y = 0 ; y < 5 ; y++){
			// Set a bit, and shift it inwards to the right X
			cube[z][y] |= (1 << x);
     610:	ba 01       	movw	r22, r20
     612:	66 0f       	add	r22, r22
     614:	77 1f       	adc	r23, r23
     616:	66 0f       	add	r22, r22
     618:	77 1f       	adc	r23, r23
     61a:	64 0f       	add	r22, r20
     61c:	75 1f       	adc	r23, r21
     61e:	e3 cf       	rjmp	.-58     	; 0x5e6 <setplane+0x3a>
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
			cube[z][y] &= ~(1 << x);
     620:	fb 01       	movw	r30, r22
     622:	e2 0f       	add	r30, r18
     624:	f3 1f       	adc	r31, r19
     626:	ec 57       	subi	r30, 0x7C	; 124
     628:	ff 4f       	sbci	r31, 0xFF	; 255
     62a:	80 81       	ld	r24, Z
     62c:	89 23       	and	r24, r25
     62e:	80 83       	st	Z, r24
void clrplane_x (int x)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
     630:	2f 5f       	subi	r18, 0xFF	; 255
     632:	3f 4f       	sbci	r19, 0xFF	; 255
     634:	25 30       	cpi	r18, 0x05	; 5
     636:	31 05       	cpc	r19, r1
     638:	99 f7       	brne	.-26     	; 0x620 <setplane+0x74>
// Clear all the leds on Y and Z for a given X
void clrplane_x (int x)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
     63a:	4f 5f       	subi	r20, 0xFF	; 255
     63c:	5f 4f       	sbci	r21, 0xFF	; 255
     63e:	45 30       	cpi	r20, 0x05	; 5
     640:	51 05       	cpc	r21, r1
     642:	e9 f1       	breq	.+122    	; 0x6be <setplane+0x112>
     644:	20 e0       	ldi	r18, 0x00	; 0
     646:	30 e0       	ldi	r19, 0x00	; 0
		for(y = 0 ; y < 5 ; y++){
			cube[z][y] &= ~(1 << x);
     648:	ba 01       	movw	r22, r20
     64a:	66 0f       	add	r22, r22
     64c:	77 1f       	adc	r23, r23
     64e:	66 0f       	add	r22, r22
     650:	77 1f       	adc	r23, r23
     652:	64 0f       	add	r22, r20
     654:	75 1f       	adc	r23, r21
     656:	e4 cf       	rjmp	.-56     	; 0x620 <setplane+0x74>
		else{
			clrplane_x(i);
		}
	}
	
	if (plane == 'y'){
     658:	89 37       	cpi	r24, 0x79	; 121
     65a:	99 f4       	brne	.+38     	; 0x682 <setplane+0xd6>
     65c:	fb 01       	movw	r30, r22
     65e:	ec 57       	subi	r30, 0x7C	; 124
     660:	ff 4f       	sbci	r31, 0xFF	; 255
		if (state > 0){
     662:	14 16       	cp	r1, r20
     664:	15 06       	cpc	r1, r21
     666:	3c f4       	brge	.+14     	; 0x676 <setplane+0xca>

// Sets all the leds on X and Z for a given Y
void setplane_y (int y)
{
	int z;
	for (z = 0 ; z < 5 ; z++) cube[z][y] = 0x1f; 
     668:	8f e1       	ldi	r24, 0x1F	; 31
     66a:	80 83       	st	Z, r24
     66c:	85 83       	std	Z+5, r24	; 0x05
     66e:	82 87       	std	Z+10, r24	; 0x0a
     670:	87 87       	std	Z+15, r24	; 0x0f
     672:	84 8b       	std	Z+20, r24	; 0x14
     674:	08 95       	ret

// Sets all the leds on X and Z for a given Y
void clrplane_y (int y)
{
	int z;
	for(z = 0 ; z < 5 ; z++) cube[z][y] = 0x00; 
     676:	10 82       	st	Z, r1
     678:	15 82       	std	Z+5, r1	; 0x05
     67a:	12 86       	std	Z+10, r1	; 0x0a
     67c:	17 86       	std	Z+15, r1	; 0x0f
     67e:	14 8a       	std	Z+20, r1	; 0x14
     680:	08 95       	ret
		else{
			clrplane_y(i);
		}
	}
	
	if (plane == 'z'){
     682:	8a 37       	cpi	r24, 0x7A	; 122
     684:	e1 f4       	brne	.+56     	; 0x6be <setplane+0x112>
     686:	fb 01       	movw	r30, r22
     688:	ee 0f       	add	r30, r30
     68a:	ff 1f       	adc	r31, r31
     68c:	ee 0f       	add	r30, r30
     68e:	ff 1f       	adc	r31, r31
		if (state > 0){
     690:	14 16       	cp	r1, r20
     692:	15 06       	cpc	r1, r21
     694:	5c f4       	brge	.+22     	; 0x6ac <setplane+0x100>
// i.e. draws a horizonal plane on a given level (z)
void setplane_z (int z)
{
	int y;
	// Loop the 5 rows on the given level and write 1 to the bits.
	for(y = 0 ; y < 5 ; y++) cube[z][y] = 0x1f;
     696:	e6 0f       	add	r30, r22
     698:	f7 1f       	adc	r31, r23
     69a:	ec 57       	subi	r30, 0x7C	; 124
     69c:	ff 4f       	sbci	r31, 0xFF	; 255
     69e:	8f e1       	ldi	r24, 0x1F	; 31
     6a0:	80 83       	st	Z, r24
     6a2:	81 83       	std	Z+1, r24	; 0x01
     6a4:	82 83       	std	Z+2, r24	; 0x02
     6a6:	83 83       	std	Z+3, r24	; 0x03
     6a8:	84 83       	std	Z+4, r24	; 0x04
     6aa:	08 95       	ret

// Clears all the leds on X and Y for a given Z
void clrplane_z (int z)
{
	int y;
	for(y = 0 ; y < 5 ; y++) cube[z][y] = 0x00;
     6ac:	e6 0f       	add	r30, r22
     6ae:	f7 1f       	adc	r31, r23
     6b0:	ec 57       	subi	r30, 0x7C	; 124
     6b2:	ff 4f       	sbci	r31, 0xFF	; 255
     6b4:	10 82       	st	Z, r1
     6b6:	11 82       	std	Z+1, r1	; 0x01
     6b8:	12 82       	std	Z+2, r1	; 0x02
     6ba:	13 82       	std	Z+3, r1	; 0x03
     6bc:	14 82       	std	Z+4, r1	; 0x04
     6be:	08 95       	ret

000006c0 <line_z>:

// Draw a line along the Z axis
// state=0 clears a line of voxels,
// state=1 sets a line of voxels.
void line_z(int x, int y, int z1, int z2, int state)
{
     6c0:	af 92       	push	r10
     6c2:	bf 92       	push	r11
     6c4:	cf 92       	push	r12
     6c6:	df 92       	push	r13
     6c8:	ef 92       	push	r14
     6ca:	ff 92       	push	r15
     6cc:	0f 93       	push	r16
     6ce:	1f 93       	push	r17
     6d0:	cf 93       	push	r28
     6d2:	df 93       	push	r29
     6d4:	5c 01       	movw	r10, r24
     6d6:	6b 01       	movw	r12, r22
     6d8:	79 01       	movw	r14, r18
	
	if (z1>z2){
     6da:	24 17       	cp	r18, r20
     6dc:	35 07       	cpc	r19, r21
     6de:	14 f4       	brge	.+4      	; 0x6e4 <line_z+0x24>
     6e0:	7a 01       	movw	r14, r20
     6e2:	a9 01       	movw	r20, r18
     6e4:	ea 01       	movw	r28, r20
     6e6:	07 c0       	rjmp	.+14     	; 0x6f6 <line_z+0x36>
		z1= z2;
		z2 = tmp;
	}
	int i;
	for (i=z1;i<=z2;i++){
		alterLED(x,y,i,state);
     6e8:	c5 01       	movw	r24, r10
     6ea:	b6 01       	movw	r22, r12
     6ec:	ae 01       	movw	r20, r28
     6ee:	98 01       	movw	r18, r16
     6f0:	0e 94 09 02 	call	0x412	; 0x412 <alterLED>
		tmp = z1;
		z1= z2;
		z2 = tmp;
	}
	int i;
	for (i=z1;i<=z2;i++){
     6f4:	21 96       	adiw	r28, 0x01	; 1
     6f6:	ec 16       	cp	r14, r28
     6f8:	fd 06       	cpc	r15, r29
     6fa:	b4 f7       	brge	.-20     	; 0x6e8 <line_z+0x28>
		alterLED(x,y,i,state);
	}
}
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	1f 91       	pop	r17
     702:	0f 91       	pop	r16
     704:	ff 90       	pop	r15
     706:	ef 90       	pop	r14
     708:	df 90       	pop	r13
     70a:	cf 90       	pop	r12
     70c:	bf 90       	pop	r11
     70e:	af 90       	pop	r10
     710:	08 95       	ret

00000712 <line_x>:

// Draw a line along the X axis
void line_x(int z, int y, int x1, int x2, int state)
{
     712:	af 92       	push	r10
     714:	bf 92       	push	r11
     716:	cf 92       	push	r12
     718:	df 92       	push	r13
     71a:	ef 92       	push	r14
     71c:	ff 92       	push	r15
     71e:	0f 93       	push	r16
     720:	1f 93       	push	r17
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	5c 01       	movw	r10, r24
     728:	6b 01       	movw	r12, r22
     72a:	79 01       	movw	r14, r18
	if (x1>x2){
     72c:	24 17       	cp	r18, r20
     72e:	35 07       	cpc	r19, r21
     730:	14 f4       	brge	.+4      	; 0x736 <line_x+0x24>
     732:	7a 01       	movw	r14, r20
     734:	a9 01       	movw	r20, r18
     736:	ea 01       	movw	r28, r20
     738:	07 c0       	rjmp	.+14     	; 0x748 <line_x+0x36>
		x1= x2;
		x2 = tmp;
	}
	int i;
	for (i=x1;i<=x2;i++){
		alterLED(i,y,z,state);
     73a:	ce 01       	movw	r24, r28
     73c:	b6 01       	movw	r22, r12
     73e:	a5 01       	movw	r20, r10
     740:	98 01       	movw	r18, r16
     742:	0e 94 09 02 	call	0x412	; 0x412 <alterLED>
		tmp = x1;
		x1= x2;
		x2 = tmp;
	}
	int i;
	for (i=x1;i<=x2;i++){
     746:	21 96       	adiw	r28, 0x01	; 1
     748:	ec 16       	cp	r14, r28
     74a:	fd 06       	cpc	r15, r29
     74c:	b4 f7       	brge	.-20     	; 0x73a <line_x+0x28>
		alterLED(i,y,z,state);
	}
}
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	1f 91       	pop	r17
     754:	0f 91       	pop	r16
     756:	ff 90       	pop	r15
     758:	ef 90       	pop	r14
     75a:	df 90       	pop	r13
     75c:	cf 90       	pop	r12
     75e:	bf 90       	pop	r11
     760:	af 90       	pop	r10
     762:	08 95       	ret

00000764 <line_y>:

// Draw a line along the Y axis.
void line_y(int z, int x, int y1, int y2, int state)
{
     764:	af 92       	push	r10
     766:	bf 92       	push	r11
     768:	cf 92       	push	r12
     76a:	df 92       	push	r13
     76c:	ef 92       	push	r14
     76e:	ff 92       	push	r15
     770:	0f 93       	push	r16
     772:	1f 93       	push	r17
     774:	cf 93       	push	r28
     776:	df 93       	push	r29
     778:	5c 01       	movw	r10, r24
     77a:	6b 01       	movw	r12, r22
     77c:	79 01       	movw	r14, r18
	if (y1>y2){
     77e:	24 17       	cp	r18, r20
     780:	35 07       	cpc	r19, r21
     782:	14 f4       	brge	.+4      	; 0x788 <line_y+0x24>
     784:	7a 01       	movw	r14, r20
     786:	a9 01       	movw	r20, r18
     788:	ea 01       	movw	r28, r20
     78a:	07 c0       	rjmp	.+14     	; 0x79a <line_y+0x36>
		y1= y2;
		y2 = tmp;
	}
	int i;
	for (i=y1;i<=y2;i++){
			alterLED(x,i,z,state);
     78c:	c6 01       	movw	r24, r12
     78e:	be 01       	movw	r22, r28
     790:	a5 01       	movw	r20, r10
     792:	98 01       	movw	r18, r16
     794:	0e 94 09 02 	call	0x412	; 0x412 <alterLED>
		tmp = y1;
		y1= y2;
		y2 = tmp;
	}
	int i;
	for (i=y1;i<=y2;i++){
     798:	21 96       	adiw	r28, 0x01	; 1
     79a:	ec 16       	cp	r14, r28
     79c:	fd 06       	cpc	r15, r29
     79e:	b4 f7       	brge	.-20     	; 0x78c <line_y+0x28>
			alterLED(x,i,z,state);
	}
}
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	1f 91       	pop	r17
     7a6:	0f 91       	pop	r16
     7a8:	ff 90       	pop	r15
     7aa:	ef 90       	pop	r14
     7ac:	df 90       	pop	r13
     7ae:	cf 90       	pop	r12
     7b0:	bf 90       	pop	r11
     7b2:	af 90       	pop	r10
     7b4:	08 95       	ret

000007b6 <drawline_plane>:

// Draws a plane on any diagonal angle
// unsigned char anchor is the plane that is constant. ("x","y", or "z")
void drawline_plane(int x2, int y2, int x1, int y1,unsigned char anchor){
     7b6:	2f 92       	push	r2
     7b8:	3f 92       	push	r3
     7ba:	5f 92       	push	r5
     7bc:	6f 92       	push	r6
     7be:	7f 92       	push	r7
     7c0:	8f 92       	push	r8
     7c2:	9f 92       	push	r9
     7c4:	af 92       	push	r10
     7c6:	bf 92       	push	r11
     7c8:	cf 92       	push	r12
     7ca:	df 92       	push	r13
     7cc:	ef 92       	push	r14
     7ce:	ff 92       	push	r15
     7d0:	0f 93       	push	r16
     7d2:	1f 93       	push	r17
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
     7d8:	fc 01       	movw	r30, r24
     7da:	50 2e       	mov	r5, r16
	int deltax = abs(x2 - x1);        // The difference between the x's
     7dc:	84 1b       	sub	r24, r20
     7de:	95 0b       	sbc	r25, r21
     7e0:	97 ff       	sbrs	r25, 7
     7e2:	03 c0       	rjmp	.+6      	; 0x7ea <drawline_plane+0x34>
     7e4:	90 95       	com	r25
     7e6:	81 95       	neg	r24
     7e8:	9f 4f       	sbci	r25, 0xFF	; 255
	int deltay = abs(y2 - y1);        // The difference between the y's
     7ea:	db 01       	movw	r26, r22
     7ec:	a2 1b       	sub	r26, r18
     7ee:	b3 0b       	sbc	r27, r19
     7f0:	b7 ff       	sbrs	r27, 7
     7f2:	03 c0       	rjmp	.+6      	; 0x7fa <drawline_plane+0x44>
     7f4:	b0 95       	com	r27
     7f6:	a1 95       	neg	r26
     7f8:	bf 4f       	sbci	r27, 0xFF	; 255
	int den;
	int num;
	int numadd;
	int numpixels;
	
	if (x2 >= x1){                 // The x-values are increasing
     7fa:	e4 17       	cp	r30, r20
     7fc:	f5 07       	cpc	r31, r21
     7fe:	3c f4       	brge	.+14     	; 0x80e <drawline_plane+0x58>
     800:	66 24       	eor	r6, r6
     802:	6a 94       	dec	r6
     804:	76 2c       	mov	r7, r6
     806:	88 24       	eor	r8, r8
     808:	8a 94       	dec	r8
     80a:	98 2c       	mov	r9, r8
     80c:	06 c0       	rjmp	.+12     	; 0x81a <drawline_plane+0x64>
     80e:	01 e0       	ldi	r16, 0x01	; 1
     810:	60 2e       	mov	r6, r16
     812:	71 2c       	mov	r7, r1
     814:	11 e0       	ldi	r17, 0x01	; 1
     816:	81 2e       	mov	r8, r17
     818:	91 2c       	mov	r9, r1
	else{                          // The x-values are decreasing
		xinc1 = -1;
		xinc2 = -1;
	}
	
	if (y2 >= y1){                 // The y-values are increasing
     81a:	62 17       	cp	r22, r18
     81c:	73 07       	cpc	r23, r19
     81e:	3c f4       	brge	.+14     	; 0x82e <drawline_plane+0x78>
     820:	aa 24       	eor	r10, r10
     822:	aa 94       	dec	r10
     824:	ba 2c       	mov	r11, r10
     826:	cc 24       	eor	r12, r12
     828:	ca 94       	dec	r12
     82a:	dc 2c       	mov	r13, r12
     82c:	06 c0       	rjmp	.+12     	; 0x83a <drawline_plane+0x84>
     82e:	f1 e0       	ldi	r31, 0x01	; 1
     830:	af 2e       	mov	r10, r31
     832:	b1 2c       	mov	r11, r1
     834:	e1 e0       	ldi	r30, 0x01	; 1
     836:	ce 2e       	mov	r12, r30
     838:	d1 2c       	mov	r13, r1
	else{                          // The y-values are decreasing
		yinc1 = -1;
		yinc2 = -1;
	}
	
	if (deltax >= deltay){         // There is at least one x-value for every y-value
     83a:	8a 17       	cp	r24, r26
     83c:	9b 07       	cpc	r25, r27
     83e:	5c f0       	brlt	.+22     	; 0x856 <drawline_plane+0xa0>
		xinc1 = 0;                  // Don't change the x when numerator >= denominator
		yinc2 = 0;                  // Don't change the y for every iteration
		den = deltax;
		num = deltax / 2;
     840:	ec 01       	movw	r28, r24
     842:	d5 95       	asr	r29
     844:	c7 95       	ror	r28
     846:	1d 01       	movw	r2, r26
     848:	dc 01       	movw	r26, r24
     84a:	7c 01       	movw	r14, r24
     84c:	66 24       	eor	r6, r6
     84e:	77 24       	eor	r7, r7
     850:	cc 24       	eor	r12, r12
     852:	dd 24       	eor	r13, r13
     854:	09 c0       	rjmp	.+18     	; 0x868 <__stack+0x9>
	}
	else{                          // There is at least one y-value for every x-value
		xinc2 = 0;                  // Don't change the x for every iteration
		yinc1 = 0;                  // Don't change the y when numerator >= denominator
		den = deltay;
		num = deltay / 2;
     856:	ed 01       	movw	r28, r26
     858:	d5 95       	asr	r29
     85a:	c7 95       	ror	r28
     85c:	1c 01       	movw	r2, r24
     85e:	7d 01       	movw	r14, r26
     860:	88 24       	eor	r8, r8
     862:	99 24       	eor	r9, r9
     864:	aa 24       	eor	r10, r10
     866:	bb 24       	eor	r11, r11
     868:	b9 01       	movw	r22, r18
     86a:	00 e0       	ldi	r16, 0x00	; 0
     86c:	10 e0       	ldi	r17, 0x00	; 0
		numadd = deltax;
		numpixels = deltay;         // There are more y-values than x-values
	}
	int curpixel;
	for(curpixel = 0 ; curpixel <= numpixels ; curpixel++){
		if (anchor == 'z')
     86e:	8a e7       	ldi	r24, 0x7A	; 122
     870:	58 16       	cp	r5, r24
     872:	11 f5       	brne	.+68     	; 0x8b8 <__stack+0x59>
}

// This function validates that we are drawing inside the cube.
unsigned char inrange(int x, int y, int z)
{
	if (x >= 0 && x < 5 && y >= 0 && y < 5 && z >= 0 && z < 5){
     874:	45 30       	cpi	r20, 0x05	; 5
     876:	51 05       	cpc	r21, r1
     878:	08 f0       	brcs	.+2      	; 0x87c <__stack+0x1d>
     87a:	72 c0       	rjmp	.+228    	; 0x960 <__stack+0x101>
     87c:	77 fd       	sbrc	r23, 7
     87e:	70 c0       	rjmp	.+224    	; 0x960 <__stack+0x101>
     880:	65 30       	cpi	r22, 0x05	; 5
     882:	71 05       	cpc	r23, r1
     884:	0c f0       	brlt	.+2      	; 0x888 <__stack+0x29>
     886:	6c c0       	rjmp	.+216    	; 0x960 <__stack+0x101>
// Voxel == 1 LED in the 3D cube grid
// Set a voxel (LED) in the cube buffer

void setLED(int x, int y, int z)
{ 
	if (inrange(x, y, z)) cube[z][y] |= (1 << x);
     888:	fb 01       	movw	r30, r22
     88a:	ec 57       	subi	r30, 0x7C	; 124
     88c:	ff 4f       	sbci	r31, 0xFF	; 255
     88e:	24 89       	ldd	r18, Z+20	; 0x14
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	04 2e       	mov	r0, r20
     896:	02 c0       	rjmp	.+4      	; 0x89c <__stack+0x3d>
     898:	88 0f       	add	r24, r24
     89a:	99 1f       	adc	r25, r25
     89c:	0a 94       	dec	r0
     89e:	e2 f7       	brpl	.-8      	; 0x898 <__stack+0x39>
     8a0:	28 2b       	or	r18, r24
     8a2:	24 8b       	std	Z+20, r18	; 0x14
			setLED(x, y, 2);
			setLED(x, y, 1);
			setLED(x, y, 0);
		}
		
		if (anchor == 'x')
     8a4:	27 85       	ldd	r18, Z+15	; 0x0f
     8a6:	28 2b       	or	r18, r24
     8a8:	27 87       	std	Z+15, r18	; 0x0f
     8aa:	22 85       	ldd	r18, Z+10	; 0x0a
     8ac:	28 2b       	or	r18, r24
     8ae:	22 87       	std	Z+10, r18	; 0x0a
     8b0:	25 81       	ldd	r18, Z+5	; 0x05
     8b2:	28 2b       	or	r18, r24
     8b4:	25 83       	std	Z+5, r18	; 0x05
     8b6:	2a c0       	rjmp	.+84     	; 0x90c <__stack+0xad>
     8b8:	88 e7       	ldi	r24, 0x78	; 120
     8ba:	58 16       	cp	r5, r24
     8bc:	51 f5       	brne	.+84     	; 0x912 <__stack+0xb3>
}

// This function validates that we are drawing inside the cube.
unsigned char inrange(int x, int y, int z)
{
	if (x >= 0 && x < 5 && y >= 0 && y < 5 && z >= 0 && z < 5){
     8be:	45 30       	cpi	r20, 0x05	; 5
     8c0:	51 05       	cpc	r21, r1
     8c2:	08 f0       	brcs	.+2      	; 0x8c6 <__stack+0x67>
     8c4:	4d c0       	rjmp	.+154    	; 0x960 <__stack+0x101>
     8c6:	77 fd       	sbrc	r23, 7
     8c8:	4b c0       	rjmp	.+150    	; 0x960 <__stack+0x101>
     8ca:	65 30       	cpi	r22, 0x05	; 5
     8cc:	71 05       	cpc	r23, r1
     8ce:	0c f0       	brlt	.+2      	; 0x8d2 <__stack+0x73>
     8d0:	47 c0       	rjmp	.+142    	; 0x960 <__stack+0x101>
// Voxel == 1 LED in the 3D cube grid
// Set a voxel (LED) in the cube buffer

void setLED(int x, int y, int z)
{ 
	if (inrange(x, y, z)) cube[z][y] |= (1 << x);
     8d2:	fb 01       	movw	r30, r22
     8d4:	ee 0f       	add	r30, r30
     8d6:	ff 1f       	adc	r31, r31
     8d8:	ee 0f       	add	r30, r30
     8da:	ff 1f       	adc	r31, r31
     8dc:	e6 0f       	add	r30, r22
     8de:	f7 1f       	adc	r31, r23
     8e0:	ec 57       	subi	r30, 0x7C	; 124
     8e2:	ff 4f       	sbci	r31, 0xFF	; 255
     8e4:	24 81       	ldd	r18, Z+4	; 0x04
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	04 2e       	mov	r0, r20
     8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <__stack+0x93>
     8ee:	88 0f       	add	r24, r24
     8f0:	99 1f       	adc	r25, r25
     8f2:	0a 94       	dec	r0
     8f4:	e2 f7       	brpl	.-8      	; 0x8ee <__stack+0x8f>
     8f6:	28 2b       	or	r18, r24
     8f8:	24 83       	std	Z+4, r18	; 0x04
			setLED(x, 2, y);
			setLED(x, 1, y);
			setLED(x, 0, y);
		}
		
		if (anchor == 'y')
     8fa:	23 81       	ldd	r18, Z+3	; 0x03
     8fc:	28 2b       	or	r18, r24
     8fe:	23 83       	std	Z+3, r18	; 0x03
     900:	22 81       	ldd	r18, Z+2	; 0x02
     902:	28 2b       	or	r18, r24
     904:	22 83       	std	Z+2, r18	; 0x02
     906:	21 81       	ldd	r18, Z+1	; 0x01
     908:	28 2b       	or	r18, r24
     90a:	21 83       	std	Z+1, r18	; 0x01
     90c:	20 81       	ld	r18, Z
     90e:	82 2b       	or	r24, r18
     910:	26 c0       	rjmp	.+76     	; 0x95e <__stack+0xff>
     912:	89 e7       	ldi	r24, 0x79	; 121
     914:	58 16       	cp	r5, r24
     916:	21 f5       	brne	.+72     	; 0x960 <__stack+0x101>
}

// This function validates that we are drawing inside the cube.
unsigned char inrange(int x, int y, int z)
{
	if (x >= 0 && x < 5 && y >= 0 && y < 5 && z >= 0 && z < 5){
     918:	77 fd       	sbrc	r23, 7
     91a:	22 c0       	rjmp	.+68     	; 0x960 <__stack+0x101>
     91c:	65 30       	cpi	r22, 0x05	; 5
     91e:	71 05       	cpc	r23, r1
     920:	fc f4       	brge	.+62     	; 0x960 <__stack+0x101>
     922:	57 fd       	sbrc	r21, 7
     924:	1d c0       	rjmp	.+58     	; 0x960 <__stack+0x101>
     926:	45 30       	cpi	r20, 0x05	; 5
     928:	51 05       	cpc	r21, r1
     92a:	d4 f4       	brge	.+52     	; 0x960 <__stack+0x101>
// Voxel == 1 LED in the 3D cube grid
// Set a voxel (LED) in the cube buffer

void setLED(int x, int y, int z)
{ 
	if (inrange(x, y, z)) cube[z][y] |= (1 << x);
     92c:	fa 01       	movw	r30, r20
     92e:	ee 0f       	add	r30, r30
     930:	ff 1f       	adc	r31, r31
     932:	ee 0f       	add	r30, r30
     934:	ff 1f       	adc	r31, r31
     936:	e4 0f       	add	r30, r20
     938:	f5 1f       	adc	r31, r21
     93a:	e6 0f       	add	r30, r22
     93c:	f7 1f       	adc	r31, r23
     93e:	ec 57       	subi	r30, 0x7C	; 124
     940:	ff 4f       	sbci	r31, 0xFF	; 255
     942:	80 81       	ld	r24, Z
     944:	80 61       	ori	r24, 0x10	; 16
     946:	80 83       	st	Z, r24
			setLED(2, y, x);
			setLED(1, y, x);
			setLED(0, y, x);
		}
		
		num += numadd;              // Increase the numerator by the top of the fraction
     948:	80 81       	ld	r24, Z
     94a:	88 60       	ori	r24, 0x08	; 8
     94c:	80 83       	st	Z, r24
     94e:	80 81       	ld	r24, Z
     950:	84 60       	ori	r24, 0x04	; 4
     952:	80 83       	st	Z, r24
     954:	80 81       	ld	r24, Z
     956:	82 60       	ori	r24, 0x02	; 2
     958:	80 83       	st	Z, r24
     95a:	80 81       	ld	r24, Z
     95c:	81 60       	ori	r24, 0x01	; 1
     95e:	80 83       	st	Z, r24
     960:	c2 0d       	add	r28, r2
     962:	d3 1d       	adc	r29, r3
		if (num >= den){             // Check if numerator >= denominator
     964:	ce 15       	cp	r28, r14
     966:	df 05       	cpc	r29, r15
     968:	34 f0       	brlt	.+12     	; 0x976 <__stack+0x117>
			num -= den;               // Calculate the new numerator value
     96a:	ce 19       	sub	r28, r14
     96c:	df 09       	sbc	r29, r15
			x += xinc1;               // Change the x as appropriate
     96e:	46 0d       	add	r20, r6
     970:	57 1d       	adc	r21, r7
			y += yinc1;               // Change the y as appropriate
     972:	6a 0d       	add	r22, r10
     974:	7b 1d       	adc	r23, r11
		num = deltay / 2;
		numadd = deltax;
		numpixels = deltay;         // There are more y-values than x-values
	}
	int curpixel;
	for(curpixel = 0 ; curpixel <= numpixels ; curpixel++){
     976:	0f 5f       	subi	r16, 0xFF	; 255
     978:	1f 4f       	sbci	r17, 0xFF	; 255
     97a:	a0 17       	cp	r26, r16
     97c:	b1 07       	cpc	r27, r17
     97e:	2c f0       	brlt	.+10     	; 0x98a <__stack+0x12b>
		if (num >= den){             // Check if numerator >= denominator
			num -= den;               // Calculate the new numerator value
			x += xinc1;               // Change the x as appropriate
			y += yinc1;               // Change the y as appropriate
		}
		x += xinc2;                 // Change the x as appropriate
     980:	48 0d       	add	r20, r8
     982:	59 1d       	adc	r21, r9
		y += yinc2;                 // Change the y as appropriate
     984:	6c 0d       	add	r22, r12
     986:	7d 1d       	adc	r23, r13
     988:	72 cf       	rjmp	.-284    	; 0x86e <__stack+0xf>
	}
}
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	1f 91       	pop	r17
     990:	0f 91       	pop	r16
     992:	ff 90       	pop	r15
     994:	ef 90       	pop	r14
     996:	df 90       	pop	r13
     998:	cf 90       	pop	r12
     99a:	bf 90       	pop	r11
     99c:	af 90       	pop	r10
     99e:	9f 90       	pop	r9
     9a0:	8f 90       	pop	r8
     9a2:	7f 90       	pop	r7
     9a4:	6f 90       	pop	r6
     9a6:	5f 90       	pop	r5
     9a8:	3f 90       	pop	r3
     9aa:	2f 90       	pop	r2
     9ac:	08 95       	ret

000009ae <tmp2cube>:

// Copy the temp cube onto the real cube
void tmp2cube(void)
{
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
	int y, z;
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
			cube[z][y] = tmpcube[z][y];
     9b2:	f9 01       	movw	r30, r18
     9b4:	ee 0f       	add	r30, r30
     9b6:	ff 1f       	adc	r31, r31
     9b8:	ee 0f       	add	r30, r30
     9ba:	ff 1f       	adc	r31, r31
     9bc:	e2 0f       	add	r30, r18
     9be:	f3 1f       	adc	r31, r19
     9c0:	df 01       	movw	r26, r30
     9c2:	ab 59       	subi	r26, 0x9B	; 155
     9c4:	bf 4f       	sbci	r27, 0xFF	; 255
     9c6:	8c 91       	ld	r24, X
     9c8:	ec 57       	subi	r30, 0x7C	; 124
     9ca:	ff 4f       	sbci	r31, 0xFF	; 255
     9cc:	80 83       	st	Z, r24
     9ce:	11 96       	adiw	r26, 0x01	; 1
     9d0:	8c 91       	ld	r24, X
     9d2:	11 97       	sbiw	r26, 0x01	; 1
     9d4:	81 83       	std	Z+1, r24	; 0x01
     9d6:	12 96       	adiw	r26, 0x02	; 2
     9d8:	8c 91       	ld	r24, X
     9da:	12 97       	sbiw	r26, 0x02	; 2
     9dc:	82 83       	std	Z+2, r24	; 0x02
     9de:	13 96       	adiw	r26, 0x03	; 3
     9e0:	8c 91       	ld	r24, X
     9e2:	13 97       	sbiw	r26, 0x03	; 3
     9e4:	83 83       	std	Z+3, r24	; 0x03
     9e6:	14 96       	adiw	r26, 0x04	; 4
     9e8:	8c 91       	ld	r24, X
     9ea:	84 83       	std	Z+4, r24	; 0x04

// Copy the temp cube onto the real cube
void tmp2cube(void)
{
	int y, z;
	for(z = 0 ; z < 5 ; z++){
     9ec:	2f 5f       	subi	r18, 0xFF	; 255
     9ee:	3f 4f       	sbci	r19, 0xFF	; 255
     9f0:	25 30       	cpi	r18, 0x05	; 5
     9f2:	31 05       	cpc	r19, r1
     9f4:	f1 f6       	brne	.-68     	; 0x9b2 <tmp2cube+0x4>
		for(y = 0 ; y < 5 ; y++){
			cube[z][y] = tmpcube[z][y];
		}
	}
}
     9f6:	08 95       	ret

000009f8 <cube2tmp>:

// Copy the cube into the temp buffer
void cube2tmp(void)
{
     9f8:	20 e0       	ldi	r18, 0x00	; 0
     9fa:	30 e0       	ldi	r19, 0x00	; 0
	int y, z;
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
			tmpcube[z][y] = cube[z][y];
     9fc:	f9 01       	movw	r30, r18
     9fe:	ee 0f       	add	r30, r30
     a00:	ff 1f       	adc	r31, r31
     a02:	ee 0f       	add	r30, r30
     a04:	ff 1f       	adc	r31, r31
     a06:	e2 0f       	add	r30, r18
     a08:	f3 1f       	adc	r31, r19
     a0a:	df 01       	movw	r26, r30
     a0c:	ac 57       	subi	r26, 0x7C	; 124
     a0e:	bf 4f       	sbci	r27, 0xFF	; 255
     a10:	8c 91       	ld	r24, X
     a12:	eb 59       	subi	r30, 0x9B	; 155
     a14:	ff 4f       	sbci	r31, 0xFF	; 255
     a16:	80 83       	st	Z, r24
     a18:	11 96       	adiw	r26, 0x01	; 1
     a1a:	8c 91       	ld	r24, X
     a1c:	11 97       	sbiw	r26, 0x01	; 1
     a1e:	81 83       	std	Z+1, r24	; 0x01
     a20:	12 96       	adiw	r26, 0x02	; 2
     a22:	8c 91       	ld	r24, X
     a24:	12 97       	sbiw	r26, 0x02	; 2
     a26:	82 83       	std	Z+2, r24	; 0x02
     a28:	13 96       	adiw	r26, 0x03	; 3
     a2a:	8c 91       	ld	r24, X
     a2c:	13 97       	sbiw	r26, 0x03	; 3
     a2e:	83 83       	std	Z+3, r24	; 0x03
     a30:	14 96       	adiw	r26, 0x04	; 4
     a32:	8c 91       	ld	r24, X
     a34:	84 83       	std	Z+4, r24	; 0x04

// Copy the cube into the temp buffer
void cube2tmp(void)
{
	int y, z;
	for(z = 0 ; z < 5 ; z++){
     a36:	2f 5f       	subi	r18, 0xFF	; 255
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	25 30       	cpi	r18, 0x05	; 5
     a3c:	31 05       	cpc	r19, r1
     a3e:	f1 f6       	brne	.-68     	; 0x9fc <cube2tmp+0x4>
		for(y = 0 ; y < 5 ; y++){
			tmpcube[z][y] = cube[z][y];
		}
	}
}
     a40:	08 95       	ret

00000a42 <fill>:

// Fill the cube with a given pattern.
// fill(0x00); clears the cube
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
     a42:	20 e0       	ldi	r18, 0x00	; 0
     a44:	30 e0       	ldi	r19, 0x00	; 0
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
     a46:	f9 01       	movw	r30, r18
     a48:	ee 0f       	add	r30, r30
     a4a:	ff 1f       	adc	r31, r31
     a4c:	ee 0f       	add	r30, r30
     a4e:	ff 1f       	adc	r31, r31
     a50:	e2 0f       	add	r30, r18
     a52:	f3 1f       	adc	r31, r19
     a54:	ec 57       	subi	r30, 0x7C	; 124
     a56:	ff 4f       	sbci	r31, 0xFF	; 255
     a58:	80 83       	st	Z, r24
     a5a:	81 83       	std	Z+1, r24	; 0x01
     a5c:	82 83       	std	Z+2, r24	; 0x02
     a5e:	83 83       	std	Z+3, r24	; 0x03
     a60:	84 83       	std	Z+4, r24	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
     a62:	2f 5f       	subi	r18, 0xFF	; 255
     a64:	3f 4f       	sbci	r19, 0xFF	; 255
     a66:	25 30       	cpi	r18, 0x05	; 5
     a68:	31 05       	cpc	r19, r1
     a6a:	69 f7       	brne	.-38     	; 0xa46 <fill+0x4>
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
		}
	}
}
     a6c:	08 95       	ret

00000a6e <writeA>:

// write E

void writeA(int l)
{
     a6e:	20 e0       	ldi	r18, 0x00	; 0
     a70:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
     a72:	f9 01       	movw	r30, r18
     a74:	ee 0f       	add	r30, r30
     a76:	ff 1f       	adc	r31, r31
     a78:	ee 0f       	add	r30, r30
     a7a:	ff 1f       	adc	r31, r31
     a7c:	e2 0f       	add	r30, r18
     a7e:	f3 1f       	adc	r31, r19
     a80:	ec 57       	subi	r30, 0x7C	; 124
     a82:	ff 4f       	sbci	r31, 0xFF	; 255
     a84:	10 82       	st	Z, r1
     a86:	11 82       	std	Z+1, r1	; 0x01
     a88:	12 82       	std	Z+2, r1	; 0x02
     a8a:	13 82       	std	Z+3, r1	; 0x03
     a8c:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
     a8e:	2f 5f       	subi	r18, 0xFF	; 255
     a90:	3f 4f       	sbci	r19, 0xFF	; 255
     a92:	25 30       	cpi	r18, 0x05	; 5
     a94:	31 05       	cpc	r19, r1
     a96:	69 f7       	brne	.-38     	; 0xa72 <writeA+0x4>
// write E

void writeA(int l)
{
		fill(0x00);
	cube[4][l] = 0x0E;
     a98:	fc 01       	movw	r30, r24
     a9a:	ec 57       	subi	r30, 0x7C	; 124
     a9c:	ff 4f       	sbci	r31, 0xFF	; 255
     a9e:	8e e0       	ldi	r24, 0x0E	; 14
     aa0:	84 8b       	std	Z+20, r24	; 0x14
	cube[3][l] = 0x11;
     aa2:	91 e1       	ldi	r25, 0x11	; 17
     aa4:	97 87       	std	Z+15, r25	; 0x0f
	cube[2][l] = 0x1F;
     aa6:	8f e1       	ldi	r24, 0x1F	; 31
     aa8:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x11;
     aaa:	95 83       	std	Z+5, r25	; 0x05
	cube[0][l] = 0x11;
     aac:	90 83       	st	Z, r25
}
     aae:	08 95       	ret

00000ab0 <writeB>:
void writeB(int l)
{
     ab0:	20 e0       	ldi	r18, 0x00	; 0
     ab2:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
     ab4:	f9 01       	movw	r30, r18
     ab6:	ee 0f       	add	r30, r30
     ab8:	ff 1f       	adc	r31, r31
     aba:	ee 0f       	add	r30, r30
     abc:	ff 1f       	adc	r31, r31
     abe:	e2 0f       	add	r30, r18
     ac0:	f3 1f       	adc	r31, r19
     ac2:	ec 57       	subi	r30, 0x7C	; 124
     ac4:	ff 4f       	sbci	r31, 0xFF	; 255
     ac6:	10 82       	st	Z, r1
     ac8:	11 82       	std	Z+1, r1	; 0x01
     aca:	12 82       	std	Z+2, r1	; 0x02
     acc:	13 82       	std	Z+3, r1	; 0x03
     ace:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
     ad0:	2f 5f       	subi	r18, 0xFF	; 255
     ad2:	3f 4f       	sbci	r19, 0xFF	; 255
     ad4:	25 30       	cpi	r18, 0x05	; 5
     ad6:	31 05       	cpc	r19, r1
     ad8:	69 f7       	brne	.-38     	; 0xab4 <writeB+0x4>
	cube[0][l] = 0x11;
}
void writeB(int l)
{
		fill(0x00);
	cube[4][l] = 0x0F;
     ada:	fc 01       	movw	r30, r24
     adc:	ec 57       	subi	r30, 0x7C	; 124
     ade:	ff 4f       	sbci	r31, 0xFF	; 255
     ae0:	8f e0       	ldi	r24, 0x0F	; 15
     ae2:	84 8b       	std	Z+20, r24	; 0x14
	cube[3][l] = 0x11;
     ae4:	91 e1       	ldi	r25, 0x11	; 17
     ae6:	97 87       	std	Z+15, r25	; 0x0f
	cube[2][l] = 0x0F;
     ae8:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x11;
     aea:	95 83       	std	Z+5, r25	; 0x05
	cube[0][l] = 0x0F;
     aec:	80 83       	st	Z, r24
}
     aee:	08 95       	ret

00000af0 <writeC>:


void writeC (int l)
{
     af0:	20 e0       	ldi	r18, 0x00	; 0
     af2:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
     af4:	f9 01       	movw	r30, r18
     af6:	ee 0f       	add	r30, r30
     af8:	ff 1f       	adc	r31, r31
     afa:	ee 0f       	add	r30, r30
     afc:	ff 1f       	adc	r31, r31
     afe:	e2 0f       	add	r30, r18
     b00:	f3 1f       	adc	r31, r19
     b02:	ec 57       	subi	r30, 0x7C	; 124
     b04:	ff 4f       	sbci	r31, 0xFF	; 255
     b06:	10 82       	st	Z, r1
     b08:	11 82       	std	Z+1, r1	; 0x01
     b0a:	12 82       	std	Z+2, r1	; 0x02
     b0c:	13 82       	std	Z+3, r1	; 0x03
     b0e:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
     b10:	2f 5f       	subi	r18, 0xFF	; 255
     b12:	3f 4f       	sbci	r19, 0xFF	; 255
     b14:	25 30       	cpi	r18, 0x05	; 5
     b16:	31 05       	cpc	r19, r1
     b18:	69 f7       	brne	.-38     	; 0xaf4 <writeC+0x4>


void writeC (int l)
{
	fill(0x00);
	cube[0][l] = 0x1E;
     b1a:	fc 01       	movw	r30, r24
     b1c:	ec 57       	subi	r30, 0x7C	; 124
     b1e:	ff 4f       	sbci	r31, 0xFF	; 255
     b20:	8e e1       	ldi	r24, 0x1E	; 30
     b22:	80 83       	st	Z, r24
	cube[4][l] = 0x1E;
     b24:	84 8b       	std	Z+20, r24	; 0x14
	cube[3][l] = 0x01;
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x01;
     b2a:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x01;
     b2c:	85 83       	std	Z+5, r24	; 0x05

}
     b2e:	08 95       	ret

00000b30 <writeD>:
void writeD(int l)
{
     b30:	20 e0       	ldi	r18, 0x00	; 0
     b32:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
     b34:	f9 01       	movw	r30, r18
     b36:	ee 0f       	add	r30, r30
     b38:	ff 1f       	adc	r31, r31
     b3a:	ee 0f       	add	r30, r30
     b3c:	ff 1f       	adc	r31, r31
     b3e:	e2 0f       	add	r30, r18
     b40:	f3 1f       	adc	r31, r19
     b42:	ec 57       	subi	r30, 0x7C	; 124
     b44:	ff 4f       	sbci	r31, 0xFF	; 255
     b46:	10 82       	st	Z, r1
     b48:	11 82       	std	Z+1, r1	; 0x01
     b4a:	12 82       	std	Z+2, r1	; 0x02
     b4c:	13 82       	std	Z+3, r1	; 0x03
     b4e:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
     b50:	2f 5f       	subi	r18, 0xFF	; 255
     b52:	3f 4f       	sbci	r19, 0xFF	; 255
     b54:	25 30       	cpi	r18, 0x05	; 5
     b56:	31 05       	cpc	r19, r1
     b58:	69 f7       	brne	.-38     	; 0xb34 <writeD+0x4>

}
void writeD(int l)
{
		fill(0x00);
	cube[4][l] = 0x0F;
     b5a:	fc 01       	movw	r30, r24
     b5c:	ec 57       	subi	r30, 0x7C	; 124
     b5e:	ff 4f       	sbci	r31, 0xFF	; 255
     b60:	9f e0       	ldi	r25, 0x0F	; 15
     b62:	94 8b       	std	Z+20, r25	; 0x14
	cube[3][l] = 0x11;
     b64:	81 e1       	ldi	r24, 0x11	; 17
     b66:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x11;
     b68:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x11;
     b6a:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x0F;
     b6c:	90 83       	st	Z, r25
}
     b6e:	08 95       	ret

00000b70 <writeE>:
	

void writeE (int l)
{
     b70:	20 e0       	ldi	r18, 0x00	; 0
     b72:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
     b74:	f9 01       	movw	r30, r18
     b76:	ee 0f       	add	r30, r30
     b78:	ff 1f       	adc	r31, r31
     b7a:	ee 0f       	add	r30, r30
     b7c:	ff 1f       	adc	r31, r31
     b7e:	e2 0f       	add	r30, r18
     b80:	f3 1f       	adc	r31, r19
     b82:	ec 57       	subi	r30, 0x7C	; 124
     b84:	ff 4f       	sbci	r31, 0xFF	; 255
     b86:	10 82       	st	Z, r1
     b88:	11 82       	std	Z+1, r1	; 0x01
     b8a:	12 82       	std	Z+2, r1	; 0x02
     b8c:	13 82       	std	Z+3, r1	; 0x03
     b8e:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
     b90:	2f 5f       	subi	r18, 0xFF	; 255
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	25 30       	cpi	r18, 0x05	; 5
     b96:	31 05       	cpc	r19, r1
     b98:	69 f7       	brne	.-38     	; 0xb74 <writeE+0x4>
	

void writeE (int l)
{
	fill(0x00);
	cube[4][l] = 0x1F;
     b9a:	fc 01       	movw	r30, r24
     b9c:	ec 57       	subi	r30, 0x7C	; 124
     b9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ba0:	2f e1       	ldi	r18, 0x1F	; 31
     ba2:	24 8b       	std	Z+20, r18	; 0x14
	cube[3][l] = 0x01;
     ba4:	91 e0       	ldi	r25, 0x01	; 1
     ba6:	97 87       	std	Z+15, r25	; 0x0f
	cube[2][l] = 0x07;
     ba8:	87 e0       	ldi	r24, 0x07	; 7
     baa:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x01;
     bac:	95 83       	std	Z+5, r25	; 0x05
	cube[0][l] = 0x1F;
     bae:	20 83       	st	Z, r18
}
     bb0:	08 95       	ret

00000bb2 <writeF>:
void writeF(int l)
{
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
     bb6:	f9 01       	movw	r30, r18
     bb8:	ee 0f       	add	r30, r30
     bba:	ff 1f       	adc	r31, r31
     bbc:	ee 0f       	add	r30, r30
     bbe:	ff 1f       	adc	r31, r31
     bc0:	e2 0f       	add	r30, r18
     bc2:	f3 1f       	adc	r31, r19
     bc4:	ec 57       	subi	r30, 0x7C	; 124
     bc6:	ff 4f       	sbci	r31, 0xFF	; 255
     bc8:	10 82       	st	Z, r1
     bca:	11 82       	std	Z+1, r1	; 0x01
     bcc:	12 82       	std	Z+2, r1	; 0x02
     bce:	13 82       	std	Z+3, r1	; 0x03
     bd0:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
     bd2:	2f 5f       	subi	r18, 0xFF	; 255
     bd4:	3f 4f       	sbci	r19, 0xFF	; 255
     bd6:	25 30       	cpi	r18, 0x05	; 5
     bd8:	31 05       	cpc	r19, r1
     bda:	69 f7       	brne	.-38     	; 0xbb6 <writeF+0x4>
	cube[0][l] = 0x1F;
}
void writeF(int l)
{
		fill(0x00);
	cube[4][l] = 0x1F;
     bdc:	fc 01       	movw	r30, r24
     bde:	ec 57       	subi	r30, 0x7C	; 124
     be0:	ff 4f       	sbci	r31, 0xFF	; 255
     be2:	8f e1       	ldi	r24, 0x1F	; 31
     be4:	84 8b       	std	Z+20, r24	; 0x14
	cube[3][l] = 0x01;
     be6:	91 e0       	ldi	r25, 0x01	; 1
     be8:	97 87       	std	Z+15, r25	; 0x0f
	cube[2][l] = 0x07;
     bea:	87 e0       	ldi	r24, 0x07	; 7
     bec:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x01;
     bee:	95 83       	std	Z+5, r25	; 0x05
	cube[0][l] = 0x01;
     bf0:	90 83       	st	Z, r25
}
     bf2:	08 95       	ret

00000bf4 <writeG>:
void writeG(int l)
{
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
     bf8:	f9 01       	movw	r30, r18
     bfa:	ee 0f       	add	r30, r30
     bfc:	ff 1f       	adc	r31, r31
     bfe:	ee 0f       	add	r30, r30
     c00:	ff 1f       	adc	r31, r31
     c02:	e2 0f       	add	r30, r18
     c04:	f3 1f       	adc	r31, r19
     c06:	ec 57       	subi	r30, 0x7C	; 124
     c08:	ff 4f       	sbci	r31, 0xFF	; 255
     c0a:	10 82       	st	Z, r1
     c0c:	11 82       	std	Z+1, r1	; 0x01
     c0e:	12 82       	std	Z+2, r1	; 0x02
     c10:	13 82       	std	Z+3, r1	; 0x03
     c12:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
     c14:	2f 5f       	subi	r18, 0xFF	; 255
     c16:	3f 4f       	sbci	r19, 0xFF	; 255
     c18:	25 30       	cpi	r18, 0x05	; 5
     c1a:	31 05       	cpc	r19, r1
     c1c:	69 f7       	brne	.-38     	; 0xbf8 <writeG+0x4>
	cube[0][l] = 0x01;
}
void writeG(int l)
{
		fill(0x00);
	cube[4][l] = 0x0E;
     c1e:	fc 01       	movw	r30, r24
     c20:	ec 57       	subi	r30, 0x7C	; 124
     c22:	ff 4f       	sbci	r31, 0xFF	; 255
     c24:	9e e0       	ldi	r25, 0x0E	; 14
     c26:	94 8b       	std	Z+20, r25	; 0x14
	cube[3][l] = 0x01;
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x1D;
     c2c:	8d e1       	ldi	r24, 0x1D	; 29
     c2e:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x11;
     c30:	81 e1       	ldi	r24, 0x11	; 17
     c32:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x0E;
     c34:	90 83       	st	Z, r25
}
     c36:	08 95       	ret

00000c38 <writeH>:
void writeH(int l)
{
     c38:	20 e0       	ldi	r18, 0x00	; 0
     c3a:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
     c3c:	f9 01       	movw	r30, r18
     c3e:	ee 0f       	add	r30, r30
     c40:	ff 1f       	adc	r31, r31
     c42:	ee 0f       	add	r30, r30
     c44:	ff 1f       	adc	r31, r31
     c46:	e2 0f       	add	r30, r18
     c48:	f3 1f       	adc	r31, r19
     c4a:	ec 57       	subi	r30, 0x7C	; 124
     c4c:	ff 4f       	sbci	r31, 0xFF	; 255
     c4e:	10 82       	st	Z, r1
     c50:	11 82       	std	Z+1, r1	; 0x01
     c52:	12 82       	std	Z+2, r1	; 0x02
     c54:	13 82       	std	Z+3, r1	; 0x03
     c56:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
     c58:	2f 5f       	subi	r18, 0xFF	; 255
     c5a:	3f 4f       	sbci	r19, 0xFF	; 255
     c5c:	25 30       	cpi	r18, 0x05	; 5
     c5e:	31 05       	cpc	r19, r1
     c60:	69 f7       	brne	.-38     	; 0xc3c <writeH+0x4>
	cube[0][l] = 0x0E;
}
void writeH(int l)
{
		fill(0x00);
	cube[4][l] = 0x11;
     c62:	fc 01       	movw	r30, r24
     c64:	ec 57       	subi	r30, 0x7C	; 124
     c66:	ff 4f       	sbci	r31, 0xFF	; 255
     c68:	91 e1       	ldi	r25, 0x11	; 17
     c6a:	94 8b       	std	Z+20, r25	; 0x14
	cube[3][l] = 0x11;
     c6c:	97 87       	std	Z+15, r25	; 0x0f
	cube[2][l] = 0x1F;
     c6e:	8f e1       	ldi	r24, 0x1F	; 31
     c70:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x11;
     c72:	95 83       	std	Z+5, r25	; 0x05
	cube[0][l] = 0x11;
     c74:	90 83       	st	Z, r25
}
     c76:	08 95       	ret

00000c78 <writeI>:
void writeI(int l)
{
     c78:	20 e0       	ldi	r18, 0x00	; 0
     c7a:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
     c7c:	f9 01       	movw	r30, r18
     c7e:	ee 0f       	add	r30, r30
     c80:	ff 1f       	adc	r31, r31
     c82:	ee 0f       	add	r30, r30
     c84:	ff 1f       	adc	r31, r31
     c86:	e2 0f       	add	r30, r18
     c88:	f3 1f       	adc	r31, r19
     c8a:	ec 57       	subi	r30, 0x7C	; 124
     c8c:	ff 4f       	sbci	r31, 0xFF	; 255
     c8e:	10 82       	st	Z, r1
     c90:	11 82       	std	Z+1, r1	; 0x01
     c92:	12 82       	std	Z+2, r1	; 0x02
     c94:	13 82       	std	Z+3, r1	; 0x03
     c96:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
     c98:	2f 5f       	subi	r18, 0xFF	; 255
     c9a:	3f 4f       	sbci	r19, 0xFF	; 255
     c9c:	25 30       	cpi	r18, 0x05	; 5
     c9e:	31 05       	cpc	r19, r1
     ca0:	69 f7       	brne	.-38     	; 0xc7c <writeI+0x4>
	cube[0][l] = 0x11;
}
void writeI(int l)
{
		fill(0x00);
	cube[4][l] = 0x1F;
     ca2:	fc 01       	movw	r30, r24
     ca4:	ec 57       	subi	r30, 0x7C	; 124
     ca6:	ff 4f       	sbci	r31, 0xFF	; 255
     ca8:	9f e1       	ldi	r25, 0x1F	; 31
     caa:	94 8b       	std	Z+20, r25	; 0x14
	cube[3][l] = 0x04;
     cac:	84 e0       	ldi	r24, 0x04	; 4
     cae:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x04;
     cb0:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x04; 
     cb2:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x1F;
     cb4:	90 83       	st	Z, r25
}
     cb6:	08 95       	ret

00000cb8 <writeJ>:
void writeJ(int l)
{
     cb8:	20 e0       	ldi	r18, 0x00	; 0
     cba:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
     cbc:	f9 01       	movw	r30, r18
     cbe:	ee 0f       	add	r30, r30
     cc0:	ff 1f       	adc	r31, r31
     cc2:	ee 0f       	add	r30, r30
     cc4:	ff 1f       	adc	r31, r31
     cc6:	e2 0f       	add	r30, r18
     cc8:	f3 1f       	adc	r31, r19
     cca:	ec 57       	subi	r30, 0x7C	; 124
     ccc:	ff 4f       	sbci	r31, 0xFF	; 255
     cce:	10 82       	st	Z, r1
     cd0:	11 82       	std	Z+1, r1	; 0x01
     cd2:	12 82       	std	Z+2, r1	; 0x02
     cd4:	13 82       	std	Z+3, r1	; 0x03
     cd6:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
     cd8:	2f 5f       	subi	r18, 0xFF	; 255
     cda:	3f 4f       	sbci	r19, 0xFF	; 255
     cdc:	25 30       	cpi	r18, 0x05	; 5
     cde:	31 05       	cpc	r19, r1
     ce0:	69 f7       	brne	.-38     	; 0xcbc <writeJ+0x4>
	cube[0][l] = 0x1F;
}
void writeJ(int l)
{
		fill(0x00);
	cube[4][l] = 0x1F;
     ce2:	fc 01       	movw	r30, r24
     ce4:	ec 57       	subi	r30, 0x7C	; 124
     ce6:	ff 4f       	sbci	r31, 0xFF	; 255
     ce8:	8f e1       	ldi	r24, 0x1F	; 31
     cea:	84 8b       	std	Z+20, r24	; 0x14
	cube[3][l] = 0x10;
     cec:	80 e1       	ldi	r24, 0x10	; 16
     cee:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x10;
     cf0:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x11;
     cf2:	81 e1       	ldi	r24, 0x11	; 17
     cf4:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x0E;
     cf6:	8e e0       	ldi	r24, 0x0E	; 14
     cf8:	80 83       	st	Z, r24
}
     cfa:	08 95       	ret

00000cfc <writeK>:
void writeK(int l)
{
     cfc:	20 e0       	ldi	r18, 0x00	; 0
     cfe:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
     d00:	f9 01       	movw	r30, r18
     d02:	ee 0f       	add	r30, r30
     d04:	ff 1f       	adc	r31, r31
     d06:	ee 0f       	add	r30, r30
     d08:	ff 1f       	adc	r31, r31
     d0a:	e2 0f       	add	r30, r18
     d0c:	f3 1f       	adc	r31, r19
     d0e:	ec 57       	subi	r30, 0x7C	; 124
     d10:	ff 4f       	sbci	r31, 0xFF	; 255
     d12:	10 82       	st	Z, r1
     d14:	11 82       	std	Z+1, r1	; 0x01
     d16:	12 82       	std	Z+2, r1	; 0x02
     d18:	13 82       	std	Z+3, r1	; 0x03
     d1a:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
     d1c:	2f 5f       	subi	r18, 0xFF	; 255
     d1e:	3f 4f       	sbci	r19, 0xFF	; 255
     d20:	25 30       	cpi	r18, 0x05	; 5
     d22:	31 05       	cpc	r19, r1
     d24:	69 f7       	brne	.-38     	; 0xd00 <writeK+0x4>
	cube[0][l] = 0x0E;
}
void writeK(int l)
{
		fill(0x00);
	cube[4][l] = 0x09;
     d26:	fc 01       	movw	r30, r24
     d28:	ec 57       	subi	r30, 0x7C	; 124
     d2a:	ff 4f       	sbci	r31, 0xFF	; 255
     d2c:	29 e0       	ldi	r18, 0x09	; 9
     d2e:	24 8b       	std	Z+20, r18	; 0x14
	cube[3][l] = 0x05;
     d30:	95 e0       	ldi	r25, 0x05	; 5
     d32:	97 87       	std	Z+15, r25	; 0x0f
	cube[2][l] = 0x03;
     d34:	83 e0       	ldi	r24, 0x03	; 3
     d36:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x05;
     d38:	95 83       	std	Z+5, r25	; 0x05
	cube[0][l] = 0x09;
     d3a:	20 83       	st	Z, r18
}
     d3c:	08 95       	ret

00000d3e <writeL>:
void writeL(int l)
{
     d3e:	20 e0       	ldi	r18, 0x00	; 0
     d40:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
     d42:	f9 01       	movw	r30, r18
     d44:	ee 0f       	add	r30, r30
     d46:	ff 1f       	adc	r31, r31
     d48:	ee 0f       	add	r30, r30
     d4a:	ff 1f       	adc	r31, r31
     d4c:	e2 0f       	add	r30, r18
     d4e:	f3 1f       	adc	r31, r19
     d50:	ec 57       	subi	r30, 0x7C	; 124
     d52:	ff 4f       	sbci	r31, 0xFF	; 255
     d54:	10 82       	st	Z, r1
     d56:	11 82       	std	Z+1, r1	; 0x01
     d58:	12 82       	std	Z+2, r1	; 0x02
     d5a:	13 82       	std	Z+3, r1	; 0x03
     d5c:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
     d5e:	2f 5f       	subi	r18, 0xFF	; 255
     d60:	3f 4f       	sbci	r19, 0xFF	; 255
     d62:	25 30       	cpi	r18, 0x05	; 5
     d64:	31 05       	cpc	r19, r1
     d66:	69 f7       	brne	.-38     	; 0xd42 <writeL+0x4>
	cube[0][l] = 0x09;
}
void writeL(int l)
{
		fill(0x00);
	cube[4][l] = 0x01;
     d68:	fc 01       	movw	r30, r24
     d6a:	ec 57       	subi	r30, 0x7C	; 124
     d6c:	ff 4f       	sbci	r31, 0xFF	; 255
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	84 8b       	std	Z+20, r24	; 0x14
	cube[3][l] = 0x01;
     d72:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x01;
     d74:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x01;
     d76:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x1F;
     d78:	8f e1       	ldi	r24, 0x1F	; 31
     d7a:	80 83       	st	Z, r24
}
     d7c:	08 95       	ret

00000d7e <writeM>:
void writeM(int l)
{
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
     d82:	f9 01       	movw	r30, r18
     d84:	ee 0f       	add	r30, r30
     d86:	ff 1f       	adc	r31, r31
     d88:	ee 0f       	add	r30, r30
     d8a:	ff 1f       	adc	r31, r31
     d8c:	e2 0f       	add	r30, r18
     d8e:	f3 1f       	adc	r31, r19
     d90:	ec 57       	subi	r30, 0x7C	; 124
     d92:	ff 4f       	sbci	r31, 0xFF	; 255
     d94:	10 82       	st	Z, r1
     d96:	11 82       	std	Z+1, r1	; 0x01
     d98:	12 82       	std	Z+2, r1	; 0x02
     d9a:	13 82       	std	Z+3, r1	; 0x03
     d9c:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
     d9e:	2f 5f       	subi	r18, 0xFF	; 255
     da0:	3f 4f       	sbci	r19, 0xFF	; 255
     da2:	25 30       	cpi	r18, 0x05	; 5
     da4:	31 05       	cpc	r19, r1
     da6:	69 f7       	brne	.-38     	; 0xd82 <writeM+0x4>
	cube[0][l] = 0x1F;
}
void writeM(int l)
{
		fill(0x00);
	cube[4][l] = 0x11;
     da8:	fc 01       	movw	r30, r24
     daa:	ec 57       	subi	r30, 0x7C	; 124
     dac:	ff 4f       	sbci	r31, 0xFF	; 255
     dae:	91 e1       	ldi	r25, 0x11	; 17
     db0:	94 8b       	std	Z+20, r25	; 0x14
	cube[3][l] = 0x1B;
     db2:	8b e1       	ldi	r24, 0x1B	; 27
     db4:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x15;
     db6:	85 e1       	ldi	r24, 0x15	; 21
     db8:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x11;
     dba:	95 83       	std	Z+5, r25	; 0x05
	cube[0][l] = 0x11;
     dbc:	90 83       	st	Z, r25
}
     dbe:	08 95       	ret

00000dc0 <writeN>:
void writeN(int l)
{
     dc0:	20 e0       	ldi	r18, 0x00	; 0
     dc2:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
     dc4:	f9 01       	movw	r30, r18
     dc6:	ee 0f       	add	r30, r30
     dc8:	ff 1f       	adc	r31, r31
     dca:	ee 0f       	add	r30, r30
     dcc:	ff 1f       	adc	r31, r31
     dce:	e2 0f       	add	r30, r18
     dd0:	f3 1f       	adc	r31, r19
     dd2:	ec 57       	subi	r30, 0x7C	; 124
     dd4:	ff 4f       	sbci	r31, 0xFF	; 255
     dd6:	10 82       	st	Z, r1
     dd8:	11 82       	std	Z+1, r1	; 0x01
     dda:	12 82       	std	Z+2, r1	; 0x02
     ddc:	13 82       	std	Z+3, r1	; 0x03
     dde:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
     de0:	2f 5f       	subi	r18, 0xFF	; 255
     de2:	3f 4f       	sbci	r19, 0xFF	; 255
     de4:	25 30       	cpi	r18, 0x05	; 5
     de6:	31 05       	cpc	r19, r1
     de8:	69 f7       	brne	.-38     	; 0xdc4 <writeN+0x4>
	cube[0][l] = 0x11;
}
void writeN(int l)
{
		fill(0x00);
	cube[4][l] = 0x11;
     dea:	fc 01       	movw	r30, r24
     dec:	ec 57       	subi	r30, 0x7C	; 124
     dee:	ff 4f       	sbci	r31, 0xFF	; 255
     df0:	91 e1       	ldi	r25, 0x11	; 17
     df2:	94 8b       	std	Z+20, r25	; 0x14
	cube[3][l] = 0x13;
     df4:	83 e1       	ldi	r24, 0x13	; 19
     df6:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x15;
     df8:	85 e1       	ldi	r24, 0x15	; 21
     dfa:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x19;
     dfc:	89 e1       	ldi	r24, 0x19	; 25
     dfe:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x11;
     e00:	90 83       	st	Z, r25
}
     e02:	08 95       	ret

00000e04 <writeO>:
void writeO(int l)
{
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
     e08:	f9 01       	movw	r30, r18
     e0a:	ee 0f       	add	r30, r30
     e0c:	ff 1f       	adc	r31, r31
     e0e:	ee 0f       	add	r30, r30
     e10:	ff 1f       	adc	r31, r31
     e12:	e2 0f       	add	r30, r18
     e14:	f3 1f       	adc	r31, r19
     e16:	ec 57       	subi	r30, 0x7C	; 124
     e18:	ff 4f       	sbci	r31, 0xFF	; 255
     e1a:	10 82       	st	Z, r1
     e1c:	11 82       	std	Z+1, r1	; 0x01
     e1e:	12 82       	std	Z+2, r1	; 0x02
     e20:	13 82       	std	Z+3, r1	; 0x03
     e22:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
     e24:	2f 5f       	subi	r18, 0xFF	; 255
     e26:	3f 4f       	sbci	r19, 0xFF	; 255
     e28:	25 30       	cpi	r18, 0x05	; 5
     e2a:	31 05       	cpc	r19, r1
     e2c:	69 f7       	brne	.-38     	; 0xe08 <writeO+0x4>
	cube[0][l] = 0x11;
}
void writeO(int l)
{
		fill(0x00);
	cube[4][l] = 0x0E;
     e2e:	fc 01       	movw	r30, r24
     e30:	ec 57       	subi	r30, 0x7C	; 124
     e32:	ff 4f       	sbci	r31, 0xFF	; 255
     e34:	9e e0       	ldi	r25, 0x0E	; 14
     e36:	94 8b       	std	Z+20, r25	; 0x14
	cube[3][l] = 0x11;
     e38:	81 e1       	ldi	r24, 0x11	; 17
     e3a:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x11;
     e3c:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x11;
     e3e:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x0E;
     e40:	90 83       	st	Z, r25
}
     e42:	08 95       	ret

00000e44 <writeP>:

void writeP(int l)
{
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
     e48:	f9 01       	movw	r30, r18
     e4a:	ee 0f       	add	r30, r30
     e4c:	ff 1f       	adc	r31, r31
     e4e:	ee 0f       	add	r30, r30
     e50:	ff 1f       	adc	r31, r31
     e52:	e2 0f       	add	r30, r18
     e54:	f3 1f       	adc	r31, r19
     e56:	ec 57       	subi	r30, 0x7C	; 124
     e58:	ff 4f       	sbci	r31, 0xFF	; 255
     e5a:	10 82       	st	Z, r1
     e5c:	11 82       	std	Z+1, r1	; 0x01
     e5e:	12 82       	std	Z+2, r1	; 0x02
     e60:	13 82       	std	Z+3, r1	; 0x03
     e62:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
     e64:	2f 5f       	subi	r18, 0xFF	; 255
     e66:	3f 4f       	sbci	r19, 0xFF	; 255
     e68:	25 30       	cpi	r18, 0x05	; 5
     e6a:	31 05       	cpc	r19, r1
     e6c:	69 f7       	brne	.-38     	; 0xe48 <writeP+0x4>
}

void writeP(int l)
{
		fill(0x00);
	cube[4][l] = 0x0F;
     e6e:	fc 01       	movw	r30, r24
     e70:	ec 57       	subi	r30, 0x7C	; 124
     e72:	ff 4f       	sbci	r31, 0xFF	; 255
     e74:	9f e0       	ldi	r25, 0x0F	; 15
     e76:	94 8b       	std	Z+20, r25	; 0x14
	cube[3][l] = 0x11;
     e78:	81 e1       	ldi	r24, 0x11	; 17
     e7a:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x0F;
     e7c:	92 87       	std	Z+10, r25	; 0x0a
	cube[1][l] = 0x01;
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x01;
     e82:	80 83       	st	Z, r24
}
     e84:	08 95       	ret

00000e86 <writeQ>:

void writeQ(int l)
{
     e86:	20 e0       	ldi	r18, 0x00	; 0
     e88:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
     e8a:	f9 01       	movw	r30, r18
     e8c:	ee 0f       	add	r30, r30
     e8e:	ff 1f       	adc	r31, r31
     e90:	ee 0f       	add	r30, r30
     e92:	ff 1f       	adc	r31, r31
     e94:	e2 0f       	add	r30, r18
     e96:	f3 1f       	adc	r31, r19
     e98:	ec 57       	subi	r30, 0x7C	; 124
     e9a:	ff 4f       	sbci	r31, 0xFF	; 255
     e9c:	10 82       	st	Z, r1
     e9e:	11 82       	std	Z+1, r1	; 0x01
     ea0:	12 82       	std	Z+2, r1	; 0x02
     ea2:	13 82       	std	Z+3, r1	; 0x03
     ea4:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
     ea6:	2f 5f       	subi	r18, 0xFF	; 255
     ea8:	3f 4f       	sbci	r19, 0xFF	; 255
     eaa:	25 30       	cpi	r18, 0x05	; 5
     eac:	31 05       	cpc	r19, r1
     eae:	69 f7       	brne	.-38     	; 0xe8a <writeQ+0x4>
}

void writeQ(int l)
{
		fill(0x00);
	cube[4][l] = 0x06;
     eb0:	fc 01       	movw	r30, r24
     eb2:	ec 57       	subi	r30, 0x7C	; 124
     eb4:	ff 4f       	sbci	r31, 0xFF	; 255
     eb6:	86 e0       	ldi	r24, 0x06	; 6
     eb8:	84 8b       	std	Z+20, r24	; 0x14
	cube[3][l] = 0x09;
     eba:	89 e0       	ldi	r24, 0x09	; 9
     ebc:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x09;
     ebe:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x0E;
     ec0:	8e e0       	ldi	r24, 0x0E	; 14
     ec2:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x10;
     ec4:	80 e1       	ldi	r24, 0x10	; 16
     ec6:	80 83       	st	Z, r24
}
     ec8:	08 95       	ret

00000eca <writeR>:
void writeR(int l)
{
     eca:	20 e0       	ldi	r18, 0x00	; 0
     ecc:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
     ece:	f9 01       	movw	r30, r18
     ed0:	ee 0f       	add	r30, r30
     ed2:	ff 1f       	adc	r31, r31
     ed4:	ee 0f       	add	r30, r30
     ed6:	ff 1f       	adc	r31, r31
     ed8:	e2 0f       	add	r30, r18
     eda:	f3 1f       	adc	r31, r19
     edc:	ec 57       	subi	r30, 0x7C	; 124
     ede:	ff 4f       	sbci	r31, 0xFF	; 255
     ee0:	10 82       	st	Z, r1
     ee2:	11 82       	std	Z+1, r1	; 0x01
     ee4:	12 82       	std	Z+2, r1	; 0x02
     ee6:	13 82       	std	Z+3, r1	; 0x03
     ee8:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
     eea:	2f 5f       	subi	r18, 0xFF	; 255
     eec:	3f 4f       	sbci	r19, 0xFF	; 255
     eee:	25 30       	cpi	r18, 0x05	; 5
     ef0:	31 05       	cpc	r19, r1
     ef2:	69 f7       	brne	.-38     	; 0xece <writeR+0x4>
	cube[0][l] = 0x10;
}
void writeR(int l)
{
		fill(0x00);
	cube[4][l] = 0x0F;
     ef4:	fc 01       	movw	r30, r24
     ef6:	ec 57       	subi	r30, 0x7C	; 124
     ef8:	ff 4f       	sbci	r31, 0xFF	; 255
     efa:	9f e0       	ldi	r25, 0x0F	; 15
     efc:	94 8b       	std	Z+20, r25	; 0x14
	cube[3][l] = 0x11;
     efe:	81 e1       	ldi	r24, 0x11	; 17
     f00:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x0F;
     f02:	92 87       	std	Z+10, r25	; 0x0a
	cube[1][l] = 0x05;
     f04:	85 e0       	ldi	r24, 0x05	; 5
     f06:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x09;
     f08:	89 e0       	ldi	r24, 0x09	; 9
     f0a:	80 83       	st	Z, r24
}
     f0c:	08 95       	ret

00000f0e <writeS>:

void writeS(int l)
{
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
     f12:	f9 01       	movw	r30, r18
     f14:	ee 0f       	add	r30, r30
     f16:	ff 1f       	adc	r31, r31
     f18:	ee 0f       	add	r30, r30
     f1a:	ff 1f       	adc	r31, r31
     f1c:	e2 0f       	add	r30, r18
     f1e:	f3 1f       	adc	r31, r19
     f20:	ec 57       	subi	r30, 0x7C	; 124
     f22:	ff 4f       	sbci	r31, 0xFF	; 255
     f24:	10 82       	st	Z, r1
     f26:	11 82       	std	Z+1, r1	; 0x01
     f28:	12 82       	std	Z+2, r1	; 0x02
     f2a:	13 82       	std	Z+3, r1	; 0x03
     f2c:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
     f2e:	2f 5f       	subi	r18, 0xFF	; 255
     f30:	3f 4f       	sbci	r19, 0xFF	; 255
     f32:	25 30       	cpi	r18, 0x05	; 5
     f34:	31 05       	cpc	r19, r1
     f36:	69 f7       	brne	.-38     	; 0xf12 <writeS+0x4>
}

void writeS(int l)
{
	fill(0x00);
	cube[4][l] = 0x1E;
     f38:	fc 01       	movw	r30, r24
     f3a:	ec 57       	subi	r30, 0x7C	; 124
     f3c:	ff 4f       	sbci	r31, 0xFF	; 255
     f3e:	8e e1       	ldi	r24, 0x1E	; 30
     f40:	84 8b       	std	Z+20, r24	; 0x14
	cube[3][l] = 0x01;
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x0E;
     f46:	8e e0       	ldi	r24, 0x0E	; 14
     f48:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x10;
     f4a:	80 e1       	ldi	r24, 0x10	; 16
     f4c:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x0F;
     f4e:	8f e0       	ldi	r24, 0x0F	; 15
     f50:	80 83       	st	Z, r24
}
     f52:	08 95       	ret

00000f54 <writeT>:

void writeT(int l)
{
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
     f58:	f9 01       	movw	r30, r18
     f5a:	ee 0f       	add	r30, r30
     f5c:	ff 1f       	adc	r31, r31
     f5e:	ee 0f       	add	r30, r30
     f60:	ff 1f       	adc	r31, r31
     f62:	e2 0f       	add	r30, r18
     f64:	f3 1f       	adc	r31, r19
     f66:	ec 57       	subi	r30, 0x7C	; 124
     f68:	ff 4f       	sbci	r31, 0xFF	; 255
     f6a:	10 82       	st	Z, r1
     f6c:	11 82       	std	Z+1, r1	; 0x01
     f6e:	12 82       	std	Z+2, r1	; 0x02
     f70:	13 82       	std	Z+3, r1	; 0x03
     f72:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
     f74:	2f 5f       	subi	r18, 0xFF	; 255
     f76:	3f 4f       	sbci	r19, 0xFF	; 255
     f78:	25 30       	cpi	r18, 0x05	; 5
     f7a:	31 05       	cpc	r19, r1
     f7c:	69 f7       	brne	.-38     	; 0xf58 <writeT+0x4>
}

void writeT(int l)
{
	fill(0x00);
	cube[0][l] = 0x04;
     f7e:	fc 01       	movw	r30, r24
     f80:	ec 57       	subi	r30, 0x7C	; 124
     f82:	ff 4f       	sbci	r31, 0xFF	; 255
     f84:	84 e0       	ldi	r24, 0x04	; 4
     f86:	80 83       	st	Z, r24
	cube[1][l] = 0x04;
     f88:	85 83       	std	Z+5, r24	; 0x05
	cube[2][l] = 0x04;
     f8a:	82 87       	std	Z+10, r24	; 0x0a
	cube[3][l] = 0x04;
     f8c:	87 87       	std	Z+15, r24	; 0x0f
	cube[4][l] = 0x1F;
     f8e:	8f e1       	ldi	r24, 0x1F	; 31
     f90:	84 8b       	std	Z+20, r24	; 0x14
}
     f92:	08 95       	ret

00000f94 <writeU>:

void writeU(int l)
{
     f94:	20 e0       	ldi	r18, 0x00	; 0
     f96:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
     f98:	f9 01       	movw	r30, r18
     f9a:	ee 0f       	add	r30, r30
     f9c:	ff 1f       	adc	r31, r31
     f9e:	ee 0f       	add	r30, r30
     fa0:	ff 1f       	adc	r31, r31
     fa2:	e2 0f       	add	r30, r18
     fa4:	f3 1f       	adc	r31, r19
     fa6:	ec 57       	subi	r30, 0x7C	; 124
     fa8:	ff 4f       	sbci	r31, 0xFF	; 255
     faa:	10 82       	st	Z, r1
     fac:	11 82       	std	Z+1, r1	; 0x01
     fae:	12 82       	std	Z+2, r1	; 0x02
     fb0:	13 82       	std	Z+3, r1	; 0x03
     fb2:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
     fb4:	2f 5f       	subi	r18, 0xFF	; 255
     fb6:	3f 4f       	sbci	r19, 0xFF	; 255
     fb8:	25 30       	cpi	r18, 0x05	; 5
     fba:	31 05       	cpc	r19, r1
     fbc:	69 f7       	brne	.-38     	; 0xf98 <writeU+0x4>
}

void writeU(int l)
{
		fill(0x00);
	cube[4][l] = 0x11;
     fbe:	fc 01       	movw	r30, r24
     fc0:	ec 57       	subi	r30, 0x7C	; 124
     fc2:	ff 4f       	sbci	r31, 0xFF	; 255
     fc4:	81 e1       	ldi	r24, 0x11	; 17
     fc6:	84 8b       	std	Z+20, r24	; 0x14
	cube[3][l] = 0x11;
     fc8:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x11;
     fca:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x11;
     fcc:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x1F;
     fce:	8f e1       	ldi	r24, 0x1F	; 31
     fd0:	80 83       	st	Z, r24
}
     fd2:	08 95       	ret

00000fd4 <writeW>:
void writeW(int l)
{
     fd4:	20 e0       	ldi	r18, 0x00	; 0
     fd6:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
     fd8:	f9 01       	movw	r30, r18
     fda:	ee 0f       	add	r30, r30
     fdc:	ff 1f       	adc	r31, r31
     fde:	ee 0f       	add	r30, r30
     fe0:	ff 1f       	adc	r31, r31
     fe2:	e2 0f       	add	r30, r18
     fe4:	f3 1f       	adc	r31, r19
     fe6:	ec 57       	subi	r30, 0x7C	; 124
     fe8:	ff 4f       	sbci	r31, 0xFF	; 255
     fea:	10 82       	st	Z, r1
     fec:	11 82       	std	Z+1, r1	; 0x01
     fee:	12 82       	std	Z+2, r1	; 0x02
     ff0:	13 82       	std	Z+3, r1	; 0x03
     ff2:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
     ff4:	2f 5f       	subi	r18, 0xFF	; 255
     ff6:	3f 4f       	sbci	r19, 0xFF	; 255
     ff8:	25 30       	cpi	r18, 0x05	; 5
     ffa:	31 05       	cpc	r19, r1
     ffc:	69 f7       	brne	.-38     	; 0xfd8 <writeW+0x4>
	cube[0][l] = 0x1F;
}
void writeW(int l)
{
		fill(0x00);
	cube[4][l] = 0x11;
     ffe:	fc 01       	movw	r30, r24
    1000:	ec 57       	subi	r30, 0x7C	; 124
    1002:	ff 4f       	sbci	r31, 0xFF	; 255
    1004:	91 e1       	ldi	r25, 0x11	; 17
    1006:	94 8b       	std	Z+20, r25	; 0x14
	cube[3][l] = 0x11;
    1008:	97 87       	std	Z+15, r25	; 0x0f
	cube[2][l] = 0x15;
    100a:	85 e1       	ldi	r24, 0x15	; 21
    100c:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x1B;
    100e:	8b e1       	ldi	r24, 0x1B	; 27
    1010:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x11;
    1012:	90 83       	st	Z, r25
}
    1014:	08 95       	ret

00001016 <writeV>:
void writeV(int l)
{
    1016:	20 e0       	ldi	r18, 0x00	; 0
    1018:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    101a:	f9 01       	movw	r30, r18
    101c:	ee 0f       	add	r30, r30
    101e:	ff 1f       	adc	r31, r31
    1020:	ee 0f       	add	r30, r30
    1022:	ff 1f       	adc	r31, r31
    1024:	e2 0f       	add	r30, r18
    1026:	f3 1f       	adc	r31, r19
    1028:	ec 57       	subi	r30, 0x7C	; 124
    102a:	ff 4f       	sbci	r31, 0xFF	; 255
    102c:	10 82       	st	Z, r1
    102e:	11 82       	std	Z+1, r1	; 0x01
    1030:	12 82       	std	Z+2, r1	; 0x02
    1032:	13 82       	std	Z+3, r1	; 0x03
    1034:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1036:	2f 5f       	subi	r18, 0xFF	; 255
    1038:	3f 4f       	sbci	r19, 0xFF	; 255
    103a:	25 30       	cpi	r18, 0x05	; 5
    103c:	31 05       	cpc	r19, r1
    103e:	69 f7       	brne	.-38     	; 0x101a <writeV+0x4>
	cube[0][l] = 0x11;
}
void writeV(int l)
{
		fill(0x00);
	cube[4][l] = 0x11;
    1040:	fc 01       	movw	r30, r24
    1042:	ec 57       	subi	r30, 0x7C	; 124
    1044:	ff 4f       	sbci	r31, 0xFF	; 255
    1046:	81 e1       	ldi	r24, 0x11	; 17
    1048:	84 8b       	std	Z+20, r24	; 0x14
	cube[3][l] = 0x11;
    104a:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x11;
    104c:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x0A;
    104e:	8a e0       	ldi	r24, 0x0A	; 10
    1050:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x04;
    1052:	84 e0       	ldi	r24, 0x04	; 4
    1054:	80 83       	st	Z, r24
}
    1056:	08 95       	ret

00001058 <writeX>:
void writeX(int l)
{
    1058:	20 e0       	ldi	r18, 0x00	; 0
    105a:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    105c:	f9 01       	movw	r30, r18
    105e:	ee 0f       	add	r30, r30
    1060:	ff 1f       	adc	r31, r31
    1062:	ee 0f       	add	r30, r30
    1064:	ff 1f       	adc	r31, r31
    1066:	e2 0f       	add	r30, r18
    1068:	f3 1f       	adc	r31, r19
    106a:	ec 57       	subi	r30, 0x7C	; 124
    106c:	ff 4f       	sbci	r31, 0xFF	; 255
    106e:	10 82       	st	Z, r1
    1070:	11 82       	std	Z+1, r1	; 0x01
    1072:	12 82       	std	Z+2, r1	; 0x02
    1074:	13 82       	std	Z+3, r1	; 0x03
    1076:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1078:	2f 5f       	subi	r18, 0xFF	; 255
    107a:	3f 4f       	sbci	r19, 0xFF	; 255
    107c:	25 30       	cpi	r18, 0x05	; 5
    107e:	31 05       	cpc	r19, r1
    1080:	69 f7       	brne	.-38     	; 0x105c <writeX+0x4>
	cube[0][l] = 0x04;
}
void writeX(int l)
{
		fill(0x00);
	cube[4][l] = 0x11;
    1082:	fc 01       	movw	r30, r24
    1084:	ec 57       	subi	r30, 0x7C	; 124
    1086:	ff 4f       	sbci	r31, 0xFF	; 255
    1088:	21 e1       	ldi	r18, 0x11	; 17
    108a:	24 8b       	std	Z+20, r18	; 0x14
	cube[3][l] = 0x0A;
    108c:	9a e0       	ldi	r25, 0x0A	; 10
    108e:	97 87       	std	Z+15, r25	; 0x0f
	cube[2][l] = 0x04;
    1090:	84 e0       	ldi	r24, 0x04	; 4
    1092:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x0A;
    1094:	95 83       	std	Z+5, r25	; 0x05
	cube[0][l] = 0x11;
    1096:	20 83       	st	Z, r18
}
    1098:	08 95       	ret

0000109a <writeY>:

void writeY(int l)
{
    109a:	20 e0       	ldi	r18, 0x00	; 0
    109c:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    109e:	f9 01       	movw	r30, r18
    10a0:	ee 0f       	add	r30, r30
    10a2:	ff 1f       	adc	r31, r31
    10a4:	ee 0f       	add	r30, r30
    10a6:	ff 1f       	adc	r31, r31
    10a8:	e2 0f       	add	r30, r18
    10aa:	f3 1f       	adc	r31, r19
    10ac:	ec 57       	subi	r30, 0x7C	; 124
    10ae:	ff 4f       	sbci	r31, 0xFF	; 255
    10b0:	10 82       	st	Z, r1
    10b2:	11 82       	std	Z+1, r1	; 0x01
    10b4:	12 82       	std	Z+2, r1	; 0x02
    10b6:	13 82       	std	Z+3, r1	; 0x03
    10b8:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    10ba:	2f 5f       	subi	r18, 0xFF	; 255
    10bc:	3f 4f       	sbci	r19, 0xFF	; 255
    10be:	25 30       	cpi	r18, 0x05	; 5
    10c0:	31 05       	cpc	r19, r1
    10c2:	69 f7       	brne	.-38     	; 0x109e <writeY+0x4>
}

void writeY(int l)
{
		fill(0x00);
	cube[4][l] = 0x11;
    10c4:	fc 01       	movw	r30, r24
    10c6:	ec 57       	subi	r30, 0x7C	; 124
    10c8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ca:	81 e1       	ldi	r24, 0x11	; 17
    10cc:	84 8b       	std	Z+20, r24	; 0x14
	cube[3][l] = 0x0A;
    10ce:	8a e0       	ldi	r24, 0x0A	; 10
    10d0:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x04;
    10d2:	84 e0       	ldi	r24, 0x04	; 4
    10d4:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x04;
    10d6:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x04;
    10d8:	80 83       	st	Z, r24
}
    10da:	08 95       	ret

000010dc <writeZ>:
void writeZ(int l)
{
    10dc:	20 e0       	ldi	r18, 0x00	; 0
    10de:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    10e0:	f9 01       	movw	r30, r18
    10e2:	ee 0f       	add	r30, r30
    10e4:	ff 1f       	adc	r31, r31
    10e6:	ee 0f       	add	r30, r30
    10e8:	ff 1f       	adc	r31, r31
    10ea:	e2 0f       	add	r30, r18
    10ec:	f3 1f       	adc	r31, r19
    10ee:	ec 57       	subi	r30, 0x7C	; 124
    10f0:	ff 4f       	sbci	r31, 0xFF	; 255
    10f2:	10 82       	st	Z, r1
    10f4:	11 82       	std	Z+1, r1	; 0x01
    10f6:	12 82       	std	Z+2, r1	; 0x02
    10f8:	13 82       	std	Z+3, r1	; 0x03
    10fa:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    10fc:	2f 5f       	subi	r18, 0xFF	; 255
    10fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1100:	25 30       	cpi	r18, 0x05	; 5
    1102:	31 05       	cpc	r19, r1
    1104:	69 f7       	brne	.-38     	; 0x10e0 <writeZ+0x4>
	cube[0][l] = 0x04;
}
void writeZ(int l)
{
		fill(0x00);
	cube[4][l] = 0x1F;
    1106:	fc 01       	movw	r30, r24
    1108:	ec 57       	subi	r30, 0x7C	; 124
    110a:	ff 4f       	sbci	r31, 0xFF	; 255
    110c:	9f e1       	ldi	r25, 0x1F	; 31
    110e:	94 8b       	std	Z+20, r25	; 0x14
	cube[3][l] = 0x08;
    1110:	88 e0       	ldi	r24, 0x08	; 8
    1112:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x04;
    1114:	84 e0       	ldi	r24, 0x04	; 4
    1116:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x02;
    1118:	82 e0       	ldi	r24, 0x02	; 2
    111a:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x1F;
    111c:	90 83       	st	Z, r25
}
    111e:	08 95       	ret

00001120 <getLetter>:


void getLetter(int letter, int l)
{
	
	switch(letter)
    1120:	fc 01       	movw	r30, r24
    1122:	8a 31       	cpi	r24, 0x1A	; 26
    1124:	91 05       	cpc	r25, r1
    1126:	08 f0       	brcs	.+2      	; 0x112a <getLetter+0xa>
    1128:	15 c3       	rjmp	.+1578   	; 0x1754 <getLetter+0x634>
    112a:	e6 5d       	subi	r30, 0xD6	; 214
    112c:	ff 4f       	sbci	r31, 0xFF	; 255
    112e:	ee 0f       	add	r30, r30
    1130:	ff 1f       	adc	r31, r31
    1132:	05 90       	lpm	r0, Z+
    1134:	f4 91       	lpm	r31, Z+
    1136:	e0 2d       	mov	r30, r0
    1138:	09 94       	ijmp
    113a:	80 e0       	ldi	r24, 0x00	; 0
    113c:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    113e:	fc 01       	movw	r30, r24
    1140:	ee 0f       	add	r30, r30
    1142:	ff 1f       	adc	r31, r31
    1144:	ee 0f       	add	r30, r30
    1146:	ff 1f       	adc	r31, r31
    1148:	e8 0f       	add	r30, r24
    114a:	f9 1f       	adc	r31, r25
    114c:	ec 57       	subi	r30, 0x7C	; 124
    114e:	ff 4f       	sbci	r31, 0xFF	; 255
    1150:	10 82       	st	Z, r1
    1152:	11 82       	std	Z+1, r1	; 0x01
    1154:	12 82       	std	Z+2, r1	; 0x02
    1156:	13 82       	std	Z+3, r1	; 0x03
    1158:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    115a:	01 96       	adiw	r24, 0x01	; 1
    115c:	85 30       	cpi	r24, 0x05	; 5
    115e:	91 05       	cpc	r25, r1
    1160:	71 f7       	brne	.-36     	; 0x113e <getLetter+0x1e>
// write E

void writeA(int l)
{
		fill(0x00);
	cube[4][l] = 0x0E;
    1162:	fb 01       	movw	r30, r22
    1164:	ec 57       	subi	r30, 0x7C	; 124
    1166:	ff 4f       	sbci	r31, 0xFF	; 255
    1168:	8e e0       	ldi	r24, 0x0E	; 14
    116a:	84 8b       	std	Z+20, r24	; 0x14
	cube[3][l] = 0x11;
    116c:	91 e1       	ldi	r25, 0x11	; 17
    116e:	ca c0       	rjmp	.+404    	; 0x1304 <getLetter+0x1e4>
void getLetter(int letter, int l)
{
	
	switch(letter)
	{
		case 0: writeA(l);break;
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1174:	fc 01       	movw	r30, r24
    1176:	ee 0f       	add	r30, r30
    1178:	ff 1f       	adc	r31, r31
    117a:	ee 0f       	add	r30, r30
    117c:	ff 1f       	adc	r31, r31
    117e:	e8 0f       	add	r30, r24
    1180:	f9 1f       	adc	r31, r25
    1182:	ec 57       	subi	r30, 0x7C	; 124
    1184:	ff 4f       	sbci	r31, 0xFF	; 255
    1186:	10 82       	st	Z, r1
    1188:	11 82       	std	Z+1, r1	; 0x01
    118a:	12 82       	std	Z+2, r1	; 0x02
    118c:	13 82       	std	Z+3, r1	; 0x03
    118e:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1190:	01 96       	adiw	r24, 0x01	; 1
    1192:	85 30       	cpi	r24, 0x05	; 5
    1194:	91 05       	cpc	r25, r1
    1196:	71 f7       	brne	.-36     	; 0x1174 <getLetter+0x54>
	cube[0][l] = 0x11;
}
void writeB(int l)
{
		fill(0x00);
	cube[4][l] = 0x0F;
    1198:	fb 01       	movw	r30, r22
    119a:	ec 57       	subi	r30, 0x7C	; 124
    119c:	ff 4f       	sbci	r31, 0xFF	; 255
    119e:	8f e0       	ldi	r24, 0x0F	; 15
    11a0:	84 8b       	std	Z+20, r24	; 0x14
	cube[3][l] = 0x11;
    11a2:	91 e1       	ldi	r25, 0x11	; 17
    11a4:	97 87       	std	Z+15, r25	; 0x0f
	cube[2][l] = 0x0F;
    11a6:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x11;
    11a8:	95 83       	std	Z+5, r25	; 0x05
    11aa:	b2 c2       	rjmp	.+1380   	; 0x1710 <getLetter+0x5f0>
{
	
	switch(letter)
	{
		case 0: writeA(l);break;
		case 1: writeB(l);break;
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    11b0:	fc 01       	movw	r30, r24
    11b2:	ee 0f       	add	r30, r30
    11b4:	ff 1f       	adc	r31, r31
    11b6:	ee 0f       	add	r30, r30
    11b8:	ff 1f       	adc	r31, r31
    11ba:	e8 0f       	add	r30, r24
    11bc:	f9 1f       	adc	r31, r25
    11be:	ec 57       	subi	r30, 0x7C	; 124
    11c0:	ff 4f       	sbci	r31, 0xFF	; 255
    11c2:	10 82       	st	Z, r1
    11c4:	11 82       	std	Z+1, r1	; 0x01
    11c6:	12 82       	std	Z+2, r1	; 0x02
    11c8:	13 82       	std	Z+3, r1	; 0x03
    11ca:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    11cc:	01 96       	adiw	r24, 0x01	; 1
    11ce:	85 30       	cpi	r24, 0x05	; 5
    11d0:	91 05       	cpc	r25, r1
    11d2:	71 f7       	brne	.-36     	; 0x11b0 <getLetter+0x90>


void writeC (int l)
{
	fill(0x00);
	cube[0][l] = 0x1E;
    11d4:	fb 01       	movw	r30, r22
    11d6:	ec 57       	subi	r30, 0x7C	; 124
    11d8:	ff 4f       	sbci	r31, 0xFF	; 255
    11da:	8e e1       	ldi	r24, 0x1E	; 30
    11dc:	80 83       	st	Z, r24
	cube[4][l] = 0x1E;
    11de:	84 8b       	std	Z+20, r24	; 0x14
	cube[3][l] = 0x01;
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x01;
    11e4:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x01;
    11e6:	85 83       	std	Z+5, r24	; 0x05
    11e8:	08 95       	ret
	
	switch(letter)
	{
		case 0: writeA(l);break;
		case 1: writeB(l);break;
		case 2: writeC(l);break;
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    11ee:	fc 01       	movw	r30, r24
    11f0:	ee 0f       	add	r30, r30
    11f2:	ff 1f       	adc	r31, r31
    11f4:	ee 0f       	add	r30, r30
    11f6:	ff 1f       	adc	r31, r31
    11f8:	e8 0f       	add	r30, r24
    11fa:	f9 1f       	adc	r31, r25
    11fc:	ec 57       	subi	r30, 0x7C	; 124
    11fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1200:	10 82       	st	Z, r1
    1202:	11 82       	std	Z+1, r1	; 0x01
    1204:	12 82       	std	Z+2, r1	; 0x02
    1206:	13 82       	std	Z+3, r1	; 0x03
    1208:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    120a:	01 96       	adiw	r24, 0x01	; 1
    120c:	85 30       	cpi	r24, 0x05	; 5
    120e:	91 05       	cpc	r25, r1
    1210:	71 f7       	brne	.-36     	; 0x11ee <getLetter+0xce>

}
void writeD(int l)
{
		fill(0x00);
	cube[4][l] = 0x0F;
    1212:	fb 01       	movw	r30, r22
    1214:	ec 57       	subi	r30, 0x7C	; 124
    1216:	ff 4f       	sbci	r31, 0xFF	; 255
    1218:	9f e0       	ldi	r25, 0x0F	; 15
    121a:	3c c1       	rjmp	.+632    	; 0x1494 <getLetter+0x374>
	switch(letter)
	{
		case 0: writeA(l);break;
		case 1: writeB(l);break;
		case 2: writeC(l);break;
		case 3: writeD(l);break;
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1220:	fc 01       	movw	r30, r24
    1222:	ee 0f       	add	r30, r30
    1224:	ff 1f       	adc	r31, r31
    1226:	ee 0f       	add	r30, r30
    1228:	ff 1f       	adc	r31, r31
    122a:	e8 0f       	add	r30, r24
    122c:	f9 1f       	adc	r31, r25
    122e:	ec 57       	subi	r30, 0x7C	; 124
    1230:	ff 4f       	sbci	r31, 0xFF	; 255
    1232:	10 82       	st	Z, r1
    1234:	11 82       	std	Z+1, r1	; 0x01
    1236:	12 82       	std	Z+2, r1	; 0x02
    1238:	13 82       	std	Z+3, r1	; 0x03
    123a:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    123c:	01 96       	adiw	r24, 0x01	; 1
    123e:	85 30       	cpi	r24, 0x05	; 5
    1240:	91 05       	cpc	r25, r1
    1242:	71 f7       	brne	.-36     	; 0x1220 <getLetter+0x100>
	

void writeE (int l)
{
	fill(0x00);
	cube[4][l] = 0x1F;
    1244:	fb 01       	movw	r30, r22
    1246:	ec 57       	subi	r30, 0x7C	; 124
    1248:	ff 4f       	sbci	r31, 0xFF	; 255
    124a:	2f e1       	ldi	r18, 0x1F	; 31
    124c:	24 8b       	std	Z+20, r18	; 0x14
	cube[3][l] = 0x01;
    124e:	91 e0       	ldi	r25, 0x01	; 1
    1250:	97 87       	std	Z+15, r25	; 0x0f
	cube[2][l] = 0x07;
    1252:	87 e0       	ldi	r24, 0x07	; 7
    1254:	3b c2       	rjmp	.+1142   	; 0x16cc <getLetter+0x5ac>
	{
		case 0: writeA(l);break;
		case 1: writeB(l);break;
		case 2: writeC(l);break;
		case 3: writeD(l);break;
		case 4: writeE(l);break;
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    125a:	fc 01       	movw	r30, r24
    125c:	ee 0f       	add	r30, r30
    125e:	ff 1f       	adc	r31, r31
    1260:	ee 0f       	add	r30, r30
    1262:	ff 1f       	adc	r31, r31
    1264:	e8 0f       	add	r30, r24
    1266:	f9 1f       	adc	r31, r25
    1268:	ec 57       	subi	r30, 0x7C	; 124
    126a:	ff 4f       	sbci	r31, 0xFF	; 255
    126c:	10 82       	st	Z, r1
    126e:	11 82       	std	Z+1, r1	; 0x01
    1270:	12 82       	std	Z+2, r1	; 0x02
    1272:	13 82       	std	Z+3, r1	; 0x03
    1274:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1276:	01 96       	adiw	r24, 0x01	; 1
    1278:	85 30       	cpi	r24, 0x05	; 5
    127a:	91 05       	cpc	r25, r1
    127c:	71 f7       	brne	.-36     	; 0x125a <getLetter+0x13a>
	cube[0][l] = 0x1F;
}
void writeF(int l)
{
		fill(0x00);
	cube[4][l] = 0x1F;
    127e:	fb 01       	movw	r30, r22
    1280:	ec 57       	subi	r30, 0x7C	; 124
    1282:	ff 4f       	sbci	r31, 0xFF	; 255
    1284:	8f e1       	ldi	r24, 0x1F	; 31
    1286:	84 8b       	std	Z+20, r24	; 0x14
	cube[3][l] = 0x01;
    1288:	91 e0       	ldi	r25, 0x01	; 1
    128a:	97 87       	std	Z+15, r25	; 0x0f
	cube[2][l] = 0x07;
    128c:	87 e0       	ldi	r24, 0x07	; 7
    128e:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x01;
    1290:	95 83       	std	Z+5, r25	; 0x05
    1292:	fe c1       	rjmp	.+1020   	; 0x1690 <getLetter+0x570>
		case 0: writeA(l);break;
		case 1: writeB(l);break;
		case 2: writeC(l);break;
		case 3: writeD(l);break;
		case 4: writeE(l);break;
		case 5: writeF(l);break;
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1298:	fc 01       	movw	r30, r24
    129a:	ee 0f       	add	r30, r30
    129c:	ff 1f       	adc	r31, r31
    129e:	ee 0f       	add	r30, r30
    12a0:	ff 1f       	adc	r31, r31
    12a2:	e8 0f       	add	r30, r24
    12a4:	f9 1f       	adc	r31, r25
    12a6:	ec 57       	subi	r30, 0x7C	; 124
    12a8:	ff 4f       	sbci	r31, 0xFF	; 255
    12aa:	10 82       	st	Z, r1
    12ac:	11 82       	std	Z+1, r1	; 0x01
    12ae:	12 82       	std	Z+2, r1	; 0x02
    12b0:	13 82       	std	Z+3, r1	; 0x03
    12b2:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    12b4:	01 96       	adiw	r24, 0x01	; 1
    12b6:	85 30       	cpi	r24, 0x05	; 5
    12b8:	91 05       	cpc	r25, r1
    12ba:	71 f7       	brne	.-36     	; 0x1298 <getLetter+0x178>
	cube[0][l] = 0x01;
}
void writeG(int l)
{
		fill(0x00);
	cube[4][l] = 0x0E;
    12bc:	fb 01       	movw	r30, r22
    12be:	ec 57       	subi	r30, 0x7C	; 124
    12c0:	ff 4f       	sbci	r31, 0xFF	; 255
    12c2:	9e e0       	ldi	r25, 0x0E	; 14
    12c4:	94 8b       	std	Z+20, r25	; 0x14
	cube[3][l] = 0x01;
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x1D;
    12ca:	8d e1       	ldi	r24, 0x1D	; 29
    12cc:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x11;
    12ce:	81 e1       	ldi	r24, 0x11	; 17
    12d0:	de c1       	rjmp	.+956    	; 0x168e <getLetter+0x56e>
		case 1: writeB(l);break;
		case 2: writeC(l);break;
		case 3: writeD(l);break;
		case 4: writeE(l);break;
		case 5: writeF(l);break;
		case 6: writeG(l);break;
    12d2:	80 e0       	ldi	r24, 0x00	; 0
    12d4:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    12d6:	fc 01       	movw	r30, r24
    12d8:	ee 0f       	add	r30, r30
    12da:	ff 1f       	adc	r31, r31
    12dc:	ee 0f       	add	r30, r30
    12de:	ff 1f       	adc	r31, r31
    12e0:	e8 0f       	add	r30, r24
    12e2:	f9 1f       	adc	r31, r25
    12e4:	ec 57       	subi	r30, 0x7C	; 124
    12e6:	ff 4f       	sbci	r31, 0xFF	; 255
    12e8:	10 82       	st	Z, r1
    12ea:	11 82       	std	Z+1, r1	; 0x01
    12ec:	12 82       	std	Z+2, r1	; 0x02
    12ee:	13 82       	std	Z+3, r1	; 0x03
    12f0:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    12f2:	01 96       	adiw	r24, 0x01	; 1
    12f4:	85 30       	cpi	r24, 0x05	; 5
    12f6:	91 05       	cpc	r25, r1
    12f8:	71 f7       	brne	.-36     	; 0x12d6 <getLetter+0x1b6>
	cube[0][l] = 0x0E;
}
void writeH(int l)
{
		fill(0x00);
	cube[4][l] = 0x11;
    12fa:	fb 01       	movw	r30, r22
    12fc:	ec 57       	subi	r30, 0x7C	; 124
    12fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1300:	91 e1       	ldi	r25, 0x11	; 17
    1302:	94 8b       	std	Z+20, r25	; 0x14
	cube[3][l] = 0x11;
    1304:	97 87       	std	Z+15, r25	; 0x0f
	cube[2][l] = 0x1F;
    1306:	8f e1       	ldi	r24, 0x1F	; 31
    1308:	c2 cf       	rjmp	.-124    	; 0x128e <getLetter+0x16e>
		case 2: writeC(l);break;
		case 3: writeD(l);break;
		case 4: writeE(l);break;
		case 5: writeF(l);break;
		case 6: writeG(l);break;
		case 7: writeH(l);break;
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    130e:	fc 01       	movw	r30, r24
    1310:	ee 0f       	add	r30, r30
    1312:	ff 1f       	adc	r31, r31
    1314:	ee 0f       	add	r30, r30
    1316:	ff 1f       	adc	r31, r31
    1318:	e8 0f       	add	r30, r24
    131a:	f9 1f       	adc	r31, r25
    131c:	ec 57       	subi	r30, 0x7C	; 124
    131e:	ff 4f       	sbci	r31, 0xFF	; 255
    1320:	10 82       	st	Z, r1
    1322:	11 82       	std	Z+1, r1	; 0x01
    1324:	12 82       	std	Z+2, r1	; 0x02
    1326:	13 82       	std	Z+3, r1	; 0x03
    1328:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    132a:	01 96       	adiw	r24, 0x01	; 1
    132c:	85 30       	cpi	r24, 0x05	; 5
    132e:	91 05       	cpc	r25, r1
    1330:	71 f7       	brne	.-36     	; 0x130e <getLetter+0x1ee>
	cube[0][l] = 0x11;
}
void writeI(int l)
{
		fill(0x00);
	cube[4][l] = 0x1F;
    1332:	fb 01       	movw	r30, r22
    1334:	ec 57       	subi	r30, 0x7C	; 124
    1336:	ff 4f       	sbci	r31, 0xFF	; 255
    1338:	9f e1       	ldi	r25, 0x1F	; 31
    133a:	94 8b       	std	Z+20, r25	; 0x14
	cube[3][l] = 0x04;
    133c:	84 e0       	ldi	r24, 0x04	; 4
    133e:	ac c0       	rjmp	.+344    	; 0x1498 <getLetter+0x378>
		case 3: writeD(l);break;
		case 4: writeE(l);break;
		case 5: writeF(l);break;
		case 6: writeG(l);break;
		case 7: writeH(l);break;
		case 8: writeI(l);break;
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1344:	fc 01       	movw	r30, r24
    1346:	ee 0f       	add	r30, r30
    1348:	ff 1f       	adc	r31, r31
    134a:	ee 0f       	add	r30, r30
    134c:	ff 1f       	adc	r31, r31
    134e:	e8 0f       	add	r30, r24
    1350:	f9 1f       	adc	r31, r25
    1352:	ec 57       	subi	r30, 0x7C	; 124
    1354:	ff 4f       	sbci	r31, 0xFF	; 255
    1356:	10 82       	st	Z, r1
    1358:	11 82       	std	Z+1, r1	; 0x01
    135a:	12 82       	std	Z+2, r1	; 0x02
    135c:	13 82       	std	Z+3, r1	; 0x03
    135e:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1360:	01 96       	adiw	r24, 0x01	; 1
    1362:	85 30       	cpi	r24, 0x05	; 5
    1364:	91 05       	cpc	r25, r1
    1366:	71 f7       	brne	.-36     	; 0x1344 <getLetter+0x224>
	cube[0][l] = 0x1F;
}
void writeJ(int l)
{
		fill(0x00);
	cube[4][l] = 0x1F;
    1368:	fb 01       	movw	r30, r22
    136a:	ec 57       	subi	r30, 0x7C	; 124
    136c:	ff 4f       	sbci	r31, 0xFF	; 255
    136e:	8f e1       	ldi	r24, 0x1F	; 31
    1370:	84 8b       	std	Z+20, r24	; 0x14
	cube[3][l] = 0x10;
    1372:	80 e1       	ldi	r24, 0x10	; 16
    1374:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x10;
    1376:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x11;
    1378:	81 e1       	ldi	r24, 0x11	; 17
    137a:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x0E;
    137c:	8e e0       	ldi	r24, 0x0E	; 14
    137e:	c8 c1       	rjmp	.+912    	; 0x1710 <getLetter+0x5f0>
		case 4: writeE(l);break;
		case 5: writeF(l);break;
		case 6: writeG(l);break;
		case 7: writeH(l);break;
		case 8: writeI(l);break;
		case 9: writeJ(l);break;
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1384:	fc 01       	movw	r30, r24
    1386:	ee 0f       	add	r30, r30
    1388:	ff 1f       	adc	r31, r31
    138a:	ee 0f       	add	r30, r30
    138c:	ff 1f       	adc	r31, r31
    138e:	e8 0f       	add	r30, r24
    1390:	f9 1f       	adc	r31, r25
    1392:	ec 57       	subi	r30, 0x7C	; 124
    1394:	ff 4f       	sbci	r31, 0xFF	; 255
    1396:	10 82       	st	Z, r1
    1398:	11 82       	std	Z+1, r1	; 0x01
    139a:	12 82       	std	Z+2, r1	; 0x02
    139c:	13 82       	std	Z+3, r1	; 0x03
    139e:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    13a0:	01 96       	adiw	r24, 0x01	; 1
    13a2:	85 30       	cpi	r24, 0x05	; 5
    13a4:	91 05       	cpc	r25, r1
    13a6:	71 f7       	brne	.-36     	; 0x1384 <getLetter+0x264>
	cube[0][l] = 0x0E;
}
void writeK(int l)
{
		fill(0x00);
	cube[4][l] = 0x09;
    13a8:	fb 01       	movw	r30, r22
    13aa:	ec 57       	subi	r30, 0x7C	; 124
    13ac:	ff 4f       	sbci	r31, 0xFF	; 255
    13ae:	29 e0       	ldi	r18, 0x09	; 9
    13b0:	24 8b       	std	Z+20, r18	; 0x14
	cube[3][l] = 0x05;
    13b2:	95 e0       	ldi	r25, 0x05	; 5
    13b4:	97 87       	std	Z+15, r25	; 0x0f
	cube[2][l] = 0x03;
    13b6:	83 e0       	ldi	r24, 0x03	; 3
    13b8:	89 c1       	rjmp	.+786    	; 0x16cc <getLetter+0x5ac>
		case 5: writeF(l);break;
		case 6: writeG(l);break;
		case 7: writeH(l);break;
		case 8: writeI(l);break;
		case 9: writeJ(l);break;
		case 10: writeK(l);break;
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    13be:	fc 01       	movw	r30, r24
    13c0:	ee 0f       	add	r30, r30
    13c2:	ff 1f       	adc	r31, r31
    13c4:	ee 0f       	add	r30, r30
    13c6:	ff 1f       	adc	r31, r31
    13c8:	e8 0f       	add	r30, r24
    13ca:	f9 1f       	adc	r31, r25
    13cc:	ec 57       	subi	r30, 0x7C	; 124
    13ce:	ff 4f       	sbci	r31, 0xFF	; 255
    13d0:	10 82       	st	Z, r1
    13d2:	11 82       	std	Z+1, r1	; 0x01
    13d4:	12 82       	std	Z+2, r1	; 0x02
    13d6:	13 82       	std	Z+3, r1	; 0x03
    13d8:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    13da:	01 96       	adiw	r24, 0x01	; 1
    13dc:	85 30       	cpi	r24, 0x05	; 5
    13de:	91 05       	cpc	r25, r1
    13e0:	71 f7       	brne	.-36     	; 0x13be <getLetter+0x29e>
	cube[0][l] = 0x09;
}
void writeL(int l)
{
		fill(0x00);
	cube[4][l] = 0x01;
    13e2:	fb 01       	movw	r30, r22
    13e4:	ec 57       	subi	r30, 0x7C	; 124
    13e6:	ff 4f       	sbci	r31, 0xFF	; 255
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	0f c1       	rjmp	.+542    	; 0x160a <getLetter+0x4ea>
		case 6: writeG(l);break;
		case 7: writeH(l);break;
		case 8: writeI(l);break;
		case 9: writeJ(l);break;
		case 10: writeK(l);break;
		case 11: writeL(l);break;
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    13f0:	fc 01       	movw	r30, r24
    13f2:	ee 0f       	add	r30, r30
    13f4:	ff 1f       	adc	r31, r31
    13f6:	ee 0f       	add	r30, r30
    13f8:	ff 1f       	adc	r31, r31
    13fa:	e8 0f       	add	r30, r24
    13fc:	f9 1f       	adc	r31, r25
    13fe:	ec 57       	subi	r30, 0x7C	; 124
    1400:	ff 4f       	sbci	r31, 0xFF	; 255
    1402:	10 82       	st	Z, r1
    1404:	11 82       	std	Z+1, r1	; 0x01
    1406:	12 82       	std	Z+2, r1	; 0x02
    1408:	13 82       	std	Z+3, r1	; 0x03
    140a:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    140c:	01 96       	adiw	r24, 0x01	; 1
    140e:	85 30       	cpi	r24, 0x05	; 5
    1410:	91 05       	cpc	r25, r1
    1412:	71 f7       	brne	.-36     	; 0x13f0 <getLetter+0x2d0>
	cube[0][l] = 0x1F;
}
void writeM(int l)
{
		fill(0x00);
	cube[4][l] = 0x11;
    1414:	fb 01       	movw	r30, r22
    1416:	ec 57       	subi	r30, 0x7C	; 124
    1418:	ff 4f       	sbci	r31, 0xFF	; 255
    141a:	91 e1       	ldi	r25, 0x11	; 17
    141c:	94 8b       	std	Z+20, r25	; 0x14
	cube[3][l] = 0x1B;
    141e:	8b e1       	ldi	r24, 0x1B	; 27
    1420:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x15;
    1422:	85 e1       	ldi	r24, 0x15	; 21
    1424:	34 cf       	rjmp	.-408    	; 0x128e <getLetter+0x16e>
		case 7: writeH(l);break;
		case 8: writeI(l);break;
		case 9: writeJ(l);break;
		case 10: writeK(l);break;
		case 11: writeL(l);break;
		case 12: writeM(l);break;
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    142a:	fc 01       	movw	r30, r24
    142c:	ee 0f       	add	r30, r30
    142e:	ff 1f       	adc	r31, r31
    1430:	ee 0f       	add	r30, r30
    1432:	ff 1f       	adc	r31, r31
    1434:	e8 0f       	add	r30, r24
    1436:	f9 1f       	adc	r31, r25
    1438:	ec 57       	subi	r30, 0x7C	; 124
    143a:	ff 4f       	sbci	r31, 0xFF	; 255
    143c:	10 82       	st	Z, r1
    143e:	11 82       	std	Z+1, r1	; 0x01
    1440:	12 82       	std	Z+2, r1	; 0x02
    1442:	13 82       	std	Z+3, r1	; 0x03
    1444:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1446:	01 96       	adiw	r24, 0x01	; 1
    1448:	85 30       	cpi	r24, 0x05	; 5
    144a:	91 05       	cpc	r25, r1
    144c:	71 f7       	brne	.-36     	; 0x142a <getLetter+0x30a>
	cube[0][l] = 0x11;
}
void writeN(int l)
{
		fill(0x00);
	cube[4][l] = 0x11;
    144e:	fb 01       	movw	r30, r22
    1450:	ec 57       	subi	r30, 0x7C	; 124
    1452:	ff 4f       	sbci	r31, 0xFF	; 255
    1454:	91 e1       	ldi	r25, 0x11	; 17
    1456:	94 8b       	std	Z+20, r25	; 0x14
	cube[3][l] = 0x13;
    1458:	83 e1       	ldi	r24, 0x13	; 19
    145a:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x15;
    145c:	85 e1       	ldi	r24, 0x15	; 21
    145e:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x19;
    1460:	89 e1       	ldi	r24, 0x19	; 25
    1462:	15 c1       	rjmp	.+554    	; 0x168e <getLetter+0x56e>
		case 8: writeI(l);break;
		case 9: writeJ(l);break;
		case 10: writeK(l);break;
		case 11: writeL(l);break;
		case 12: writeM(l);break;
		case 13: writeN(l);break;
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1468:	fc 01       	movw	r30, r24
    146a:	ee 0f       	add	r30, r30
    146c:	ff 1f       	adc	r31, r31
    146e:	ee 0f       	add	r30, r30
    1470:	ff 1f       	adc	r31, r31
    1472:	e8 0f       	add	r30, r24
    1474:	f9 1f       	adc	r31, r25
    1476:	ec 57       	subi	r30, 0x7C	; 124
    1478:	ff 4f       	sbci	r31, 0xFF	; 255
    147a:	10 82       	st	Z, r1
    147c:	11 82       	std	Z+1, r1	; 0x01
    147e:	12 82       	std	Z+2, r1	; 0x02
    1480:	13 82       	std	Z+3, r1	; 0x03
    1482:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1484:	01 96       	adiw	r24, 0x01	; 1
    1486:	85 30       	cpi	r24, 0x05	; 5
    1488:	91 05       	cpc	r25, r1
    148a:	71 f7       	brne	.-36     	; 0x1468 <getLetter+0x348>
	cube[0][l] = 0x11;
}
void writeO(int l)
{
		fill(0x00);
	cube[4][l] = 0x0E;
    148c:	fb 01       	movw	r30, r22
    148e:	ec 57       	subi	r30, 0x7C	; 124
    1490:	ff 4f       	sbci	r31, 0xFF	; 255
    1492:	9e e0       	ldi	r25, 0x0E	; 14
    1494:	94 8b       	std	Z+20, r25	; 0x14
	cube[3][l] = 0x11;
    1496:	81 e1       	ldi	r24, 0x11	; 17
    1498:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x11;
    149a:	82 87       	std	Z+10, r24	; 0x0a
    149c:	f8 c0       	rjmp	.+496    	; 0x168e <getLetter+0x56e>
		case 9: writeJ(l);break;
		case 10: writeK(l);break;
		case 11: writeL(l);break;
		case 12: writeM(l);break;
		case 13: writeN(l);break;
		case 14: writeO(l);break;
    149e:	80 e0       	ldi	r24, 0x00	; 0
    14a0:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    14a2:	fc 01       	movw	r30, r24
    14a4:	ee 0f       	add	r30, r30
    14a6:	ff 1f       	adc	r31, r31
    14a8:	ee 0f       	add	r30, r30
    14aa:	ff 1f       	adc	r31, r31
    14ac:	e8 0f       	add	r30, r24
    14ae:	f9 1f       	adc	r31, r25
    14b0:	ec 57       	subi	r30, 0x7C	; 124
    14b2:	ff 4f       	sbci	r31, 0xFF	; 255
    14b4:	10 82       	st	Z, r1
    14b6:	11 82       	std	Z+1, r1	; 0x01
    14b8:	12 82       	std	Z+2, r1	; 0x02
    14ba:	13 82       	std	Z+3, r1	; 0x03
    14bc:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    14be:	01 96       	adiw	r24, 0x01	; 1
    14c0:	85 30       	cpi	r24, 0x05	; 5
    14c2:	91 05       	cpc	r25, r1
    14c4:	71 f7       	brne	.-36     	; 0x14a2 <getLetter+0x382>
}

void writeP(int l)
{
		fill(0x00);
	cube[4][l] = 0x0F;
    14c6:	fb 01       	movw	r30, r22
    14c8:	ec 57       	subi	r30, 0x7C	; 124
    14ca:	ff 4f       	sbci	r31, 0xFF	; 255
    14cc:	9f e0       	ldi	r25, 0x0F	; 15
    14ce:	94 8b       	std	Z+20, r25	; 0x14
	cube[3][l] = 0x11;
    14d0:	81 e1       	ldi	r24, 0x11	; 17
    14d2:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x0F;
    14d4:	92 87       	std	Z+10, r25	; 0x0a
	cube[1][l] = 0x01;
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	1a c1       	rjmp	.+564    	; 0x170e <getLetter+0x5ee>
		case 10: writeK(l);break;
		case 11: writeL(l);break;
		case 12: writeM(l);break;
		case 13: writeN(l);break;
		case 14: writeO(l);break;
		case 15: writeP(l);break;
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    14de:	fc 01       	movw	r30, r24
    14e0:	ee 0f       	add	r30, r30
    14e2:	ff 1f       	adc	r31, r31
    14e4:	ee 0f       	add	r30, r30
    14e6:	ff 1f       	adc	r31, r31
    14e8:	e8 0f       	add	r30, r24
    14ea:	f9 1f       	adc	r31, r25
    14ec:	ec 57       	subi	r30, 0x7C	; 124
    14ee:	ff 4f       	sbci	r31, 0xFF	; 255
    14f0:	10 82       	st	Z, r1
    14f2:	11 82       	std	Z+1, r1	; 0x01
    14f4:	12 82       	std	Z+2, r1	; 0x02
    14f6:	13 82       	std	Z+3, r1	; 0x03
    14f8:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    14fa:	01 96       	adiw	r24, 0x01	; 1
    14fc:	85 30       	cpi	r24, 0x05	; 5
    14fe:	91 05       	cpc	r25, r1
    1500:	71 f7       	brne	.-36     	; 0x14de <getLetter+0x3be>
}

void writeQ(int l)
{
		fill(0x00);
	cube[4][l] = 0x06;
    1502:	fb 01       	movw	r30, r22
    1504:	ec 57       	subi	r30, 0x7C	; 124
    1506:	ff 4f       	sbci	r31, 0xFF	; 255
    1508:	86 e0       	ldi	r24, 0x06	; 6
    150a:	84 8b       	std	Z+20, r24	; 0x14
	cube[3][l] = 0x09;
    150c:	89 e0       	ldi	r24, 0x09	; 9
    150e:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x09;
    1510:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x0E;
    1512:	8e e0       	ldi	r24, 0x0E	; 14
    1514:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x10;
    1516:	80 e1       	ldi	r24, 0x10	; 16
    1518:	fb c0       	rjmp	.+502    	; 0x1710 <getLetter+0x5f0>
		case 11: writeL(l);break;
		case 12: writeM(l);break;
		case 13: writeN(l);break;
		case 14: writeO(l);break;
		case 15: writeP(l);break;
		case 16: writeQ(l);break;
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    151e:	fc 01       	movw	r30, r24
    1520:	ee 0f       	add	r30, r30
    1522:	ff 1f       	adc	r31, r31
    1524:	ee 0f       	add	r30, r30
    1526:	ff 1f       	adc	r31, r31
    1528:	e8 0f       	add	r30, r24
    152a:	f9 1f       	adc	r31, r25
    152c:	ec 57       	subi	r30, 0x7C	; 124
    152e:	ff 4f       	sbci	r31, 0xFF	; 255
    1530:	10 82       	st	Z, r1
    1532:	11 82       	std	Z+1, r1	; 0x01
    1534:	12 82       	std	Z+2, r1	; 0x02
    1536:	13 82       	std	Z+3, r1	; 0x03
    1538:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    153a:	01 96       	adiw	r24, 0x01	; 1
    153c:	85 30       	cpi	r24, 0x05	; 5
    153e:	91 05       	cpc	r25, r1
    1540:	71 f7       	brne	.-36     	; 0x151e <getLetter+0x3fe>
	cube[0][l] = 0x10;
}
void writeR(int l)
{
		fill(0x00);
	cube[4][l] = 0x0F;
    1542:	fb 01       	movw	r30, r22
    1544:	ec 57       	subi	r30, 0x7C	; 124
    1546:	ff 4f       	sbci	r31, 0xFF	; 255
    1548:	9f e0       	ldi	r25, 0x0F	; 15
    154a:	94 8b       	std	Z+20, r25	; 0x14
	cube[3][l] = 0x11;
    154c:	81 e1       	ldi	r24, 0x11	; 17
    154e:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x0F;
    1550:	92 87       	std	Z+10, r25	; 0x0a
	cube[1][l] = 0x05;
    1552:	85 e0       	ldi	r24, 0x05	; 5
    1554:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x09;
    1556:	89 e0       	ldi	r24, 0x09	; 9
    1558:	db c0       	rjmp	.+438    	; 0x1710 <getLetter+0x5f0>
		case 12: writeM(l);break;
		case 13: writeN(l);break;
		case 14: writeO(l);break;
		case 15: writeP(l);break;
		case 16: writeQ(l);break;
		case 17: writeR(l);break;
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    155e:	fc 01       	movw	r30, r24
    1560:	ee 0f       	add	r30, r30
    1562:	ff 1f       	adc	r31, r31
    1564:	ee 0f       	add	r30, r30
    1566:	ff 1f       	adc	r31, r31
    1568:	e8 0f       	add	r30, r24
    156a:	f9 1f       	adc	r31, r25
    156c:	ec 57       	subi	r30, 0x7C	; 124
    156e:	ff 4f       	sbci	r31, 0xFF	; 255
    1570:	10 82       	st	Z, r1
    1572:	11 82       	std	Z+1, r1	; 0x01
    1574:	12 82       	std	Z+2, r1	; 0x02
    1576:	13 82       	std	Z+3, r1	; 0x03
    1578:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    157a:	01 96       	adiw	r24, 0x01	; 1
    157c:	85 30       	cpi	r24, 0x05	; 5
    157e:	91 05       	cpc	r25, r1
    1580:	71 f7       	brne	.-36     	; 0x155e <getLetter+0x43e>
}

void writeS(int l)
{
	fill(0x00);
	cube[4][l] = 0x1E;
    1582:	fb 01       	movw	r30, r22
    1584:	ec 57       	subi	r30, 0x7C	; 124
    1586:	ff 4f       	sbci	r31, 0xFF	; 255
    1588:	8e e1       	ldi	r24, 0x1E	; 30
    158a:	84 8b       	std	Z+20, r24	; 0x14
	cube[3][l] = 0x01;
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x0E;
    1590:	8e e0       	ldi	r24, 0x0E	; 14
    1592:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x10;
    1594:	80 e1       	ldi	r24, 0x10	; 16
    1596:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x0F;
    1598:	8f e0       	ldi	r24, 0x0F	; 15
    159a:	ba c0       	rjmp	.+372    	; 0x1710 <getLetter+0x5f0>
		case 13: writeN(l);break;
		case 14: writeO(l);break;
		case 15: writeP(l);break;
		case 16: writeQ(l);break;
		case 17: writeR(l);break;
		case 18: writeS(l);break;
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    15a0:	fc 01       	movw	r30, r24
    15a2:	ee 0f       	add	r30, r30
    15a4:	ff 1f       	adc	r31, r31
    15a6:	ee 0f       	add	r30, r30
    15a8:	ff 1f       	adc	r31, r31
    15aa:	e8 0f       	add	r30, r24
    15ac:	f9 1f       	adc	r31, r25
    15ae:	ec 57       	subi	r30, 0x7C	; 124
    15b0:	ff 4f       	sbci	r31, 0xFF	; 255
    15b2:	10 82       	st	Z, r1
    15b4:	11 82       	std	Z+1, r1	; 0x01
    15b6:	12 82       	std	Z+2, r1	; 0x02
    15b8:	13 82       	std	Z+3, r1	; 0x03
    15ba:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    15bc:	01 96       	adiw	r24, 0x01	; 1
    15be:	85 30       	cpi	r24, 0x05	; 5
    15c0:	91 05       	cpc	r25, r1
    15c2:	71 f7       	brne	.-36     	; 0x15a0 <getLetter+0x480>
}

void writeT(int l)
{
	fill(0x00);
	cube[0][l] = 0x04;
    15c4:	fb 01       	movw	r30, r22
    15c6:	ec 57       	subi	r30, 0x7C	; 124
    15c8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ca:	84 e0       	ldi	r24, 0x04	; 4
    15cc:	80 83       	st	Z, r24
	cube[1][l] = 0x04;
    15ce:	85 83       	std	Z+5, r24	; 0x05
	cube[2][l] = 0x04;
    15d0:	82 87       	std	Z+10, r24	; 0x0a
	cube[3][l] = 0x04;
    15d2:	87 87       	std	Z+15, r24	; 0x0f
	cube[4][l] = 0x1F;
    15d4:	8f e1       	ldi	r24, 0x1F	; 31
    15d6:	84 8b       	std	Z+20, r24	; 0x14
    15d8:	08 95       	ret
		case 14: writeO(l);break;
		case 15: writeP(l);break;
		case 16: writeQ(l);break;
		case 17: writeR(l);break;
		case 18: writeS(l);break;
		case 19: writeT(l);break;
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    15de:	fc 01       	movw	r30, r24
    15e0:	ee 0f       	add	r30, r30
    15e2:	ff 1f       	adc	r31, r31
    15e4:	ee 0f       	add	r30, r30
    15e6:	ff 1f       	adc	r31, r31
    15e8:	e8 0f       	add	r30, r24
    15ea:	f9 1f       	adc	r31, r25
    15ec:	ec 57       	subi	r30, 0x7C	; 124
    15ee:	ff 4f       	sbci	r31, 0xFF	; 255
    15f0:	10 82       	st	Z, r1
    15f2:	11 82       	std	Z+1, r1	; 0x01
    15f4:	12 82       	std	Z+2, r1	; 0x02
    15f6:	13 82       	std	Z+3, r1	; 0x03
    15f8:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    15fa:	01 96       	adiw	r24, 0x01	; 1
    15fc:	85 30       	cpi	r24, 0x05	; 5
    15fe:	91 05       	cpc	r25, r1
    1600:	71 f7       	brne	.-36     	; 0x15de <getLetter+0x4be>
}

void writeU(int l)
{
		fill(0x00);
	cube[4][l] = 0x11;
    1602:	fb 01       	movw	r30, r22
    1604:	ec 57       	subi	r30, 0x7C	; 124
    1606:	ff 4f       	sbci	r31, 0xFF	; 255
    1608:	81 e1       	ldi	r24, 0x11	; 17
    160a:	84 8b       	std	Z+20, r24	; 0x14
	cube[3][l] = 0x11;
    160c:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x11;
    160e:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x11;
    1610:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x1F;
    1612:	8f e1       	ldi	r24, 0x1F	; 31
    1614:	7d c0       	rjmp	.+250    	; 0x1710 <getLetter+0x5f0>
		case 15: writeP(l);break;
		case 16: writeQ(l);break;
		case 17: writeR(l);break;
		case 18: writeS(l);break;
		case 19: writeT(l);break;
		case 20: writeU(l);break;
    1616:	80 e0       	ldi	r24, 0x00	; 0
    1618:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    161a:	fc 01       	movw	r30, r24
    161c:	ee 0f       	add	r30, r30
    161e:	ff 1f       	adc	r31, r31
    1620:	ee 0f       	add	r30, r30
    1622:	ff 1f       	adc	r31, r31
    1624:	e8 0f       	add	r30, r24
    1626:	f9 1f       	adc	r31, r25
    1628:	ec 57       	subi	r30, 0x7C	; 124
    162a:	ff 4f       	sbci	r31, 0xFF	; 255
    162c:	10 82       	st	Z, r1
    162e:	11 82       	std	Z+1, r1	; 0x01
    1630:	12 82       	std	Z+2, r1	; 0x02
    1632:	13 82       	std	Z+3, r1	; 0x03
    1634:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1636:	01 96       	adiw	r24, 0x01	; 1
    1638:	85 30       	cpi	r24, 0x05	; 5
    163a:	91 05       	cpc	r25, r1
    163c:	71 f7       	brne	.-36     	; 0x161a <getLetter+0x4fa>
	cube[0][l] = 0x11;
}
void writeV(int l)
{
		fill(0x00);
	cube[4][l] = 0x11;
    163e:	fb 01       	movw	r30, r22
    1640:	ec 57       	subi	r30, 0x7C	; 124
    1642:	ff 4f       	sbci	r31, 0xFF	; 255
    1644:	81 e1       	ldi	r24, 0x11	; 17
    1646:	84 8b       	std	Z+20, r24	; 0x14
	cube[3][l] = 0x11;
    1648:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x11;
    164a:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x0A;
    164c:	8a e0       	ldi	r24, 0x0A	; 10
    164e:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x04;
    1650:	84 e0       	ldi	r24, 0x04	; 4
    1652:	5e c0       	rjmp	.+188    	; 0x1710 <getLetter+0x5f0>
		case 16: writeQ(l);break;
		case 17: writeR(l);break;
		case 18: writeS(l);break;
		case 19: writeT(l);break;
		case 20: writeU(l);break;
		case 21: writeV(l);break;
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1658:	fc 01       	movw	r30, r24
    165a:	ee 0f       	add	r30, r30
    165c:	ff 1f       	adc	r31, r31
    165e:	ee 0f       	add	r30, r30
    1660:	ff 1f       	adc	r31, r31
    1662:	e8 0f       	add	r30, r24
    1664:	f9 1f       	adc	r31, r25
    1666:	ec 57       	subi	r30, 0x7C	; 124
    1668:	ff 4f       	sbci	r31, 0xFF	; 255
    166a:	10 82       	st	Z, r1
    166c:	11 82       	std	Z+1, r1	; 0x01
    166e:	12 82       	std	Z+2, r1	; 0x02
    1670:	13 82       	std	Z+3, r1	; 0x03
    1672:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1674:	01 96       	adiw	r24, 0x01	; 1
    1676:	85 30       	cpi	r24, 0x05	; 5
    1678:	91 05       	cpc	r25, r1
    167a:	71 f7       	brne	.-36     	; 0x1658 <getLetter+0x538>
	cube[0][l] = 0x1F;
}
void writeW(int l)
{
		fill(0x00);
	cube[4][l] = 0x11;
    167c:	fb 01       	movw	r30, r22
    167e:	ec 57       	subi	r30, 0x7C	; 124
    1680:	ff 4f       	sbci	r31, 0xFF	; 255
    1682:	91 e1       	ldi	r25, 0x11	; 17
    1684:	94 8b       	std	Z+20, r25	; 0x14
	cube[3][l] = 0x11;
    1686:	97 87       	std	Z+15, r25	; 0x0f
	cube[2][l] = 0x15;
    1688:	85 e1       	ldi	r24, 0x15	; 21
    168a:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x1B;
    168c:	8b e1       	ldi	r24, 0x1B	; 27
    168e:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x11;
    1690:	90 83       	st	Z, r25
    1692:	08 95       	ret
		case 17: writeR(l);break;
		case 18: writeS(l);break;
		case 19: writeT(l);break;
		case 20: writeU(l);break;
		case 21: writeV(l);break;
		case 22: writeW(l);break;
    1694:	80 e0       	ldi	r24, 0x00	; 0
    1696:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1698:	fc 01       	movw	r30, r24
    169a:	ee 0f       	add	r30, r30
    169c:	ff 1f       	adc	r31, r31
    169e:	ee 0f       	add	r30, r30
    16a0:	ff 1f       	adc	r31, r31
    16a2:	e8 0f       	add	r30, r24
    16a4:	f9 1f       	adc	r31, r25
    16a6:	ec 57       	subi	r30, 0x7C	; 124
    16a8:	ff 4f       	sbci	r31, 0xFF	; 255
    16aa:	10 82       	st	Z, r1
    16ac:	11 82       	std	Z+1, r1	; 0x01
    16ae:	12 82       	std	Z+2, r1	; 0x02
    16b0:	13 82       	std	Z+3, r1	; 0x03
    16b2:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    16b4:	01 96       	adiw	r24, 0x01	; 1
    16b6:	85 30       	cpi	r24, 0x05	; 5
    16b8:	91 05       	cpc	r25, r1
    16ba:	71 f7       	brne	.-36     	; 0x1698 <getLetter+0x578>
	cube[0][l] = 0x04;
}
void writeX(int l)
{
		fill(0x00);
	cube[4][l] = 0x11;
    16bc:	fb 01       	movw	r30, r22
    16be:	ec 57       	subi	r30, 0x7C	; 124
    16c0:	ff 4f       	sbci	r31, 0xFF	; 255
    16c2:	21 e1       	ldi	r18, 0x11	; 17
    16c4:	24 8b       	std	Z+20, r18	; 0x14
	cube[3][l] = 0x0A;
    16c6:	9a e0       	ldi	r25, 0x0A	; 10
    16c8:	97 87       	std	Z+15, r25	; 0x0f
	cube[2][l] = 0x04;
    16ca:	84 e0       	ldi	r24, 0x04	; 4
    16cc:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x0A;
    16ce:	95 83       	std	Z+5, r25	; 0x05
	cube[0][l] = 0x11;
    16d0:	20 83       	st	Z, r18
    16d2:	08 95       	ret
		case 18: writeS(l);break;
		case 19: writeT(l);break;
		case 20: writeU(l);break;
		case 21: writeV(l);break;
		case 22: writeW(l);break;
		case 23: writeX(l);break;
    16d4:	80 e0       	ldi	r24, 0x00	; 0
    16d6:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    16d8:	fc 01       	movw	r30, r24
    16da:	ee 0f       	add	r30, r30
    16dc:	ff 1f       	adc	r31, r31
    16de:	ee 0f       	add	r30, r30
    16e0:	ff 1f       	adc	r31, r31
    16e2:	e8 0f       	add	r30, r24
    16e4:	f9 1f       	adc	r31, r25
    16e6:	ec 57       	subi	r30, 0x7C	; 124
    16e8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ea:	10 82       	st	Z, r1
    16ec:	11 82       	std	Z+1, r1	; 0x01
    16ee:	12 82       	std	Z+2, r1	; 0x02
    16f0:	13 82       	std	Z+3, r1	; 0x03
    16f2:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    16f4:	01 96       	adiw	r24, 0x01	; 1
    16f6:	85 30       	cpi	r24, 0x05	; 5
    16f8:	91 05       	cpc	r25, r1
    16fa:	71 f7       	brne	.-36     	; 0x16d8 <getLetter+0x5b8>
}

void writeY(int l)
{
		fill(0x00);
	cube[4][l] = 0x11;
    16fc:	fb 01       	movw	r30, r22
    16fe:	ec 57       	subi	r30, 0x7C	; 124
    1700:	ff 4f       	sbci	r31, 0xFF	; 255
    1702:	81 e1       	ldi	r24, 0x11	; 17
    1704:	84 8b       	std	Z+20, r24	; 0x14
	cube[3][l] = 0x0A;
    1706:	8a e0       	ldi	r24, 0x0A	; 10
    1708:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x04;
    170a:	84 e0       	ldi	r24, 0x04	; 4
    170c:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x04;
    170e:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x04;
    1710:	80 83       	st	Z, r24
    1712:	08 95       	ret
		case 19: writeT(l);break;
		case 20: writeU(l);break;
		case 21: writeV(l);break;
		case 22: writeW(l);break;
		case 23: writeX(l);break;
		case 24: writeY(l);break;
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1718:	fc 01       	movw	r30, r24
    171a:	ee 0f       	add	r30, r30
    171c:	ff 1f       	adc	r31, r31
    171e:	ee 0f       	add	r30, r30
    1720:	ff 1f       	adc	r31, r31
    1722:	e8 0f       	add	r30, r24
    1724:	f9 1f       	adc	r31, r25
    1726:	ec 57       	subi	r30, 0x7C	; 124
    1728:	ff 4f       	sbci	r31, 0xFF	; 255
    172a:	10 82       	st	Z, r1
    172c:	11 82       	std	Z+1, r1	; 0x01
    172e:	12 82       	std	Z+2, r1	; 0x02
    1730:	13 82       	std	Z+3, r1	; 0x03
    1732:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1734:	01 96       	adiw	r24, 0x01	; 1
    1736:	85 30       	cpi	r24, 0x05	; 5
    1738:	91 05       	cpc	r25, r1
    173a:	71 f7       	brne	.-36     	; 0x1718 <getLetter+0x5f8>
	cube[0][l] = 0x04;
}
void writeZ(int l)
{
		fill(0x00);
	cube[4][l] = 0x1F;
    173c:	fb 01       	movw	r30, r22
    173e:	ec 57       	subi	r30, 0x7C	; 124
    1740:	ff 4f       	sbci	r31, 0xFF	; 255
    1742:	9f e1       	ldi	r25, 0x1F	; 31
    1744:	94 8b       	std	Z+20, r25	; 0x14
	cube[3][l] = 0x08;
    1746:	88 e0       	ldi	r24, 0x08	; 8
    1748:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x04;
    174a:	84 e0       	ldi	r24, 0x04	; 4
    174c:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x02;
    174e:	82 e0       	ldi	r24, 0x02	; 2
    1750:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x1F;
    1752:	90 83       	st	Z, r25
    1754:	08 95       	ret

00001756 <letterToInt>:
		case 25: writeZ(l);break;
	}
}

int letterToInt(char letter)
{
    1756:	28 2f       	mov	r18, r24
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	21 54       	subi	r18, 0x41	; 65
    175c:	30 40       	sbci	r19, 0x00	; 0
int i = letter - 'A';
return i;
    175e:	c9 01       	movw	r24, r18
    1760:	08 95       	ret

00001762 <moveDot>:
	int z = 4;
	setLED(x,y,z);
}

void moveDot()
{
    1762:	ef 92       	push	r14
    1764:	ff 92       	push	r15
    1766:	0f 93       	push	r16
    1768:	1f 93       	push	r17
    176a:	cf 93       	push	r28
    176c:	df 93       	push	r29
    176e:	ee 24       	eor	r14, r14
    1770:	ff 24       	eor	r15, r15
    1772:	2f c0       	rjmp	.+94     	; 0x17d2 <moveDot+0x70>
	{
		for(int y=0;y<5;y++)
		{
		for(int z=0;z<5;z++)
			{	
				if(getLED(x,y,z) != 0x00)
    1774:	c7 01       	movw	r24, r14
    1776:	b8 01       	movw	r22, r16
    1778:	ae 01       	movw	r20, r28
    177a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <getLED>
    177e:	88 23       	and	r24, r24
    1780:	a9 f0       	breq	.+42     	; 0x17ac <moveDot+0x4a>
				{
					if(z==0)
    1782:	20 97       	sbiw	r28, 0x00	; 0
    1784:	39 f4       	brne	.+14     	; 0x1794 <moveDot+0x32>
					{
						clrLED(x,y,z);
    1786:	c7 01       	movw	r24, r14
    1788:	b8 01       	movw	r22, r16
    178a:	40 e0       	ldi	r20, 0x00	; 0
    178c:	50 e0       	ldi	r21, 0x00	; 0
    178e:	0e 94 ac 01 	call	0x358	; 0x358 <clrLED>
    1792:	0c c0       	rjmp	.+24     	; 0x17ac <moveDot+0x4a>
					}
					else
					{
						clrLED(x,y,z);
    1794:	c7 01       	movw	r24, r14
    1796:	b8 01       	movw	r22, r16
    1798:	ae 01       	movw	r20, r28
    179a:	0e 94 ac 01 	call	0x358	; 0x358 <clrLED>
						setLED(x,y,z-1);
    179e:	ae 01       	movw	r20, r28
    17a0:	41 50       	subi	r20, 0x01	; 1
    17a2:	50 40       	sbci	r21, 0x00	; 0
    17a4:	c7 01       	movw	r24, r14
    17a6:	b8 01       	movw	r22, r16
    17a8:	0e 94 88 01 	call	0x310	; 0x310 <setLED>
{
	for(int x=0;x<5;x++)
	{
		for(int y=0;y<5;y++)
		{
		for(int z=0;z<5;z++)
    17ac:	21 96       	adiw	r28, 0x01	; 1
    17ae:	c5 30       	cpi	r28, 0x05	; 5
    17b0:	d1 05       	cpc	r29, r1
    17b2:	01 f7       	brne	.-64     	; 0x1774 <moveDot+0x12>

void moveDot()
{
	for(int x=0;x<5;x++)
	{
		for(int y=0;y<5;y++)
    17b4:	0f 5f       	subi	r16, 0xFF	; 255
    17b6:	1f 4f       	sbci	r17, 0xFF	; 255
    17b8:	05 30       	cpi	r16, 0x05	; 5
    17ba:	11 05       	cpc	r17, r1
    17bc:	19 f0       	breq	.+6      	; 0x17c4 <moveDot+0x62>
    17be:	c0 e0       	ldi	r28, 0x00	; 0
    17c0:	d0 e0       	ldi	r29, 0x00	; 0
    17c2:	d8 cf       	rjmp	.-80     	; 0x1774 <moveDot+0x12>
	setLED(x,y,z);
}

void moveDot()
{
	for(int x=0;x<5;x++)
    17c4:	08 94       	sec
    17c6:	e1 1c       	adc	r14, r1
    17c8:	f1 1c       	adc	r15, r1
    17ca:	85 e0       	ldi	r24, 0x05	; 5
    17cc:	e8 16       	cp	r14, r24
    17ce:	f1 04       	cpc	r15, r1
    17d0:	19 f0       	breq	.+6      	; 0x17d8 <moveDot+0x76>
    17d2:	00 e0       	ldi	r16, 0x00	; 0
    17d4:	10 e0       	ldi	r17, 0x00	; 0
    17d6:	f3 cf       	rjmp	.-26     	; 0x17be <moveDot+0x5c>
				
			}
		}
		
	}
    17d8:	df 91       	pop	r29
    17da:	cf 91       	pop	r28
    17dc:	1f 91       	pop	r17
    17de:	0f 91       	pop	r16
    17e0:	ff 90       	pop	r15
    17e2:	ef 90       	pop	r14
    17e4:	08 95       	ret

000017e6 <generateDot>:
		delay_ms(9000);
	}*/
}

void generateDot()
{
    17e6:	0f 93       	push	r16
    17e8:	1f 93       	push	r17
	//unsigned int iseed = (unsigned int)time(NULL);
	//srand (iseed);
	int x = rand() % 5;
    17ea:	0e 94 5f 15 	call	0x2abe	; 0x2abe <rand>
    17ee:	8c 01       	movw	r16, r24
	int y = rand() % 5;
    17f0:	0e 94 5f 15 	call	0x2abe	; 0x2abe <rand>
    17f4:	9c 01       	movw	r18, r24
	int z = 4;
	setLED(x,y,z);
    17f6:	c8 01       	movw	r24, r16
    17f8:	65 e0       	ldi	r22, 0x05	; 5
    17fa:	70 e0       	ldi	r23, 0x00	; 0
    17fc:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <__divmodhi4>
    1800:	fc 01       	movw	r30, r24
    1802:	c9 01       	movw	r24, r18
    1804:	65 e0       	ldi	r22, 0x05	; 5
    1806:	70 e0       	ldi	r23, 0x00	; 0
    1808:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <__divmodhi4>
    180c:	bc 01       	movw	r22, r24
    180e:	cf 01       	movw	r24, r30
    1810:	44 e0       	ldi	r20, 0x04	; 4
    1812:	50 e0       	ldi	r21, 0x00	; 0
    1814:	0e 94 88 01 	call	0x310	; 0x310 <setLED>
}
    1818:	1f 91       	pop	r17
    181a:	0f 91       	pop	r16
    181c:	08 95       	ret

0000181e <matrix>:
}


void matrix()
{
		fill(0x00);
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	0e 94 21 05 	call	0xa42	; 0xa42 <fill>
		while(1)
	{

		generateDot();
    1824:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <generateDot>

		delay_ms(90);
    1828:	8a e5       	ldi	r24, 0x5A	; 90
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	0e 94 83 00 	call	0x106	; 0x106 <delay_ms>
		moveDot();
    1830:	0e 94 b1 0b 	call	0x1762	; 0x1762 <moveDot>
    1834:	f7 cf       	rjmp	.-18     	; 0x1824 <matrix+0x6>

00001836 <writeBlank>:
	
}

void writeBlank()
{
		fill(0x00);
    1836:	80 e0       	ldi	r24, 0x00	; 0
    1838:	0e 94 21 05 	call	0xa42	; 0xa42 <fill>
		delay_ms(900);
    183c:	84 e8       	ldi	r24, 0x84	; 132
    183e:	93 e0       	ldi	r25, 0x03	; 3
    1840:	0e 94 83 00 	call	0x106	; 0x106 <delay_ms>

}
    1844:	08 95       	ret

00001846 <animateE>:


// animate E

void animateE ()
{
    1846:	ff 92       	push	r15
    1848:	0f 93       	push	r16
    184a:	1f 93       	push	r17
    184c:	cf 93       	push	r28
    184e:	df 93       	push	r29
    1850:	c0 e0       	ldi	r28, 0x00	; 0
    1852:	d0 e0       	ldi	r29, 0x00	; 0
	for(int z = 0;z<5;z++)
	{
		
			fill(0x00);
			cube[0][z] = 0x1F;
    1854:	0f e1       	ldi	r16, 0x1F	; 31
			cube[1][z] = 0x01;
    1856:	11 e0       	ldi	r17, 0x01	; 1
			cube[2][z] = 0x07;
    1858:	87 e0       	ldi	r24, 0x07	; 7
    185a:	f8 2e       	mov	r15, r24
void animateE ()
{
	for(int z = 0;z<5;z++)
	{
		
			fill(0x00);
    185c:	80 e0       	ldi	r24, 0x00	; 0
    185e:	0e 94 21 05 	call	0xa42	; 0xa42 <fill>
			cube[0][z] = 0x1F;
    1862:	fe 01       	movw	r30, r28
    1864:	ec 57       	subi	r30, 0x7C	; 124
    1866:	ff 4f       	sbci	r31, 0xFF	; 255
    1868:	00 83       	st	Z, r16
			cube[1][z] = 0x01;
    186a:	15 83       	std	Z+5, r17	; 0x05
			cube[2][z] = 0x07;
    186c:	f2 86       	std	Z+10, r15	; 0x0a
			cube[3][z] = 0x01;
    186e:	17 87       	std	Z+15, r17	; 0x0f
			cube[4][z] = 0x1F;
    1870:	04 8b       	std	Z+20, r16	; 0x14
			//	{
			//		cube[z][y] = cube[z][y-1];
			//	}
			//}
		
		delay_ms(500); 
    1872:	84 ef       	ldi	r24, 0xF4	; 244
    1874:	91 e0       	ldi	r25, 0x01	; 1
    1876:	0e 94 83 00 	call	0x106	; 0x106 <delay_ms>

// animate E

void animateE ()
{
	for(int z = 0;z<5;z++)
    187a:	21 96       	adiw	r28, 0x01	; 1
    187c:	c5 30       	cpi	r28, 0x05	; 5
    187e:	d1 05       	cpc	r29, r1
    1880:	69 f7       	brne	.-38     	; 0x185c <animateE+0x16>
			//	}
			//}
		
		delay_ms(500); 
	}
}
    1882:	df 91       	pop	r29
    1884:	cf 91       	pop	r28
    1886:	1f 91       	pop	r17
    1888:	0f 91       	pop	r16
    188a:	ff 90       	pop	r15
    188c:	08 95       	ret

0000188e <effect_spinning_plane>:
	}
}

// Shows an animation of a spinning plane.
void effect_spinning_plane(int direction, int iterations, int delay)
{
    188e:	cf 92       	push	r12
    1890:	df 92       	push	r13
    1892:	ef 92       	push	r14
    1894:	ff 92       	push	r15
    1896:	0f 93       	push	r16
    1898:	1f 93       	push	r17
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    189e:	6b 01       	movw	r12, r22
    18a0:	7a 01       	movw	r14, r20
    18a2:	c0 e0       	ldi	r28, 0x00	; 0
    18a4:	d0 e0       	ldi	r29, 0x00	; 0
    18a6:	16 c0       	rjmp	.+44     	; 0x18d4 <effect_spinning_plane+0x46>
	for (i=0;i<iterations;i++)
	{
		// Loop cube levels.
		for (z=0;z<5;z++)
		{
			cube[z][0] = pgm_read_byte(&spinning_line[(i)%6][0]);
    18a8:	fd 01       	movw	r30, r26
    18aa:	ee 0f       	add	r30, r30
    18ac:	ff 1f       	adc	r31, r31
    18ae:	ee 0f       	add	r30, r30
    18b0:	ff 1f       	adc	r31, r31
    18b2:	ea 0f       	add	r30, r26
    18b4:	fb 1f       	adc	r31, r27
    18b6:	ec 57       	subi	r30, 0x7C	; 124
    18b8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ba:	00 83       	st	Z, r16
			cube[z][1] = pgm_read_byte(&spinning_line[(i)%6][1]);
    18bc:	11 83       	std	Z+1, r17	; 0x01
			cube[z][2] = pgm_read_byte(&spinning_line[(i)%6][2]);
    18be:	22 83       	std	Z+2, r18	; 0x02
			cube[z][3] = pgm_read_byte(&spinning_line[(i)%6][3]);
    18c0:	93 83       	std	Z+3, r25	; 0x03
			cube[z][4] = pgm_read_byte(&spinning_line[(i)%6][4]);
    18c2:	84 83       	std	Z+4, r24	; 0x04
	int z;		// cube level

	for (i=0;i<iterations;i++)
	{
		// Loop cube levels.
		for (z=0;z<5;z++)
    18c4:	11 96       	adiw	r26, 0x01	; 1
    18c6:	a5 30       	cpi	r26, 0x05	; 5
    18c8:	b1 05       	cpc	r27, r1
    18ca:	71 f7       	brne	.-36     	; 0x18a8 <effect_spinning_plane+0x1a>
			cube[z][1] = pgm_read_byte(&spinning_line[(i)%6][1]);
			cube[z][2] = pgm_read_byte(&spinning_line[(i)%6][2]);
			cube[z][3] = pgm_read_byte(&spinning_line[(i)%6][3]);
			cube[z][4] = pgm_read_byte(&spinning_line[(i)%6][4]);
		}
		delay_ms(delay);
    18cc:	c7 01       	movw	r24, r14
    18ce:	0e 94 83 00 	call	0x106	; 0x106 <delay_ms>
void effect_spinning_plane(int direction, int iterations, int delay)
{
	int i;
	int z;		// cube level

	for (i=0;i<iterations;i++)
    18d2:	21 96       	adiw	r28, 0x01	; 1
    18d4:	cc 15       	cp	r28, r12
    18d6:	dd 05       	cpc	r29, r13
    18d8:	34 f5       	brge	.+76     	; 0x1926 <effect_spinning_plane+0x98>
	{
		// Loop cube levels.
		for (z=0;z<5;z++)
		{
			cube[z][0] = pgm_read_byte(&spinning_line[(i)%6][0]);
    18da:	ce 01       	movw	r24, r28
    18dc:	66 e0       	ldi	r22, 0x06	; 6
    18de:	70 e0       	ldi	r23, 0x00	; 0
    18e0:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <__divmodhi4>
    18e4:	fc 01       	movw	r30, r24
    18e6:	ee 0f       	add	r30, r30
    18e8:	ff 1f       	adc	r31, r31
    18ea:	ee 0f       	add	r30, r30
    18ec:	ff 1f       	adc	r31, r31
    18ee:	e8 0f       	add	r30, r24
    18f0:	f9 1f       	adc	r31, r25
			cube[z][1] = pgm_read_byte(&spinning_line[(i)%6][1]);
    18f2:	cf 01       	movw	r24, r30
    18f4:	87 57       	subi	r24, 0x77	; 119
    18f6:	9f 4f       	sbci	r25, 0xFF	; 255
			cube[z][2] = pgm_read_byte(&spinning_line[(i)%6][2]);
    18f8:	9f 01       	movw	r18, r30
    18fa:	26 57       	subi	r18, 0x76	; 118
    18fc:	3f 4f       	sbci	r19, 0xFF	; 255
			cube[z][3] = pgm_read_byte(&spinning_line[(i)%6][3]);
    18fe:	af 01       	movw	r20, r30
    1900:	45 57       	subi	r20, 0x75	; 117
    1902:	5f 4f       	sbci	r21, 0xFF	; 255
			cube[z][4] = pgm_read_byte(&spinning_line[(i)%6][4]);
    1904:	bf 01       	movw	r22, r30
    1906:	64 57       	subi	r22, 0x74	; 116
    1908:	7f 4f       	sbci	r23, 0xFF	; 255
    190a:	a0 e0       	ldi	r26, 0x00	; 0
    190c:	b0 e0       	ldi	r27, 0x00	; 0
	for (i=0;i<iterations;i++)
	{
		// Loop cube levels.
		for (z=0;z<5;z++)
		{
			cube[z][0] = pgm_read_byte(&spinning_line[(i)%6][0]);
    190e:	e8 57       	subi	r30, 0x78	; 120
    1910:	ff 4f       	sbci	r31, 0xFF	; 255
    1912:	04 91       	lpm	r16, Z+
			cube[z][1] = pgm_read_byte(&spinning_line[(i)%6][1]);
    1914:	fc 01       	movw	r30, r24
    1916:	14 91       	lpm	r17, Z+
			cube[z][2] = pgm_read_byte(&spinning_line[(i)%6][2]);
    1918:	f9 01       	movw	r30, r18
    191a:	24 91       	lpm	r18, Z+
			cube[z][3] = pgm_read_byte(&spinning_line[(i)%6][3]);
    191c:	fa 01       	movw	r30, r20
    191e:	94 91       	lpm	r25, Z+
			cube[z][4] = pgm_read_byte(&spinning_line[(i)%6][4]);
    1920:	fb 01       	movw	r30, r22
    1922:	84 91       	lpm	r24, Z+
    1924:	c1 cf       	rjmp	.-126    	; 0x18a8 <effect_spinning_plane+0x1a>
		}
		delay_ms(delay);
	}
}
    1926:	df 91       	pop	r29
    1928:	cf 91       	pop	r28
    192a:	1f 91       	pop	r17
    192c:	0f 91       	pop	r16
    192e:	ff 90       	pop	r15
    1930:	ef 90       	pop	r14
    1932:	df 90       	pop	r13
    1934:	cf 90       	pop	r12
    1936:	08 95       	ret

00001938 <effect_spiral>:
	{ 0x08, 0x08, 0x04, 0x02, 0x02 },
};

// Shows an animation of a spinning spiral
void effect_spiral(int direction, int iterations, int delay)
{
    1938:	cf 92       	push	r12
    193a:	df 92       	push	r13
    193c:	ef 92       	push	r14
    193e:	ff 92       	push	r15
    1940:	0f 93       	push	r16
    1942:	1f 93       	push	r17
    1944:	cf 93       	push	r28
    1946:	df 93       	push	r29
    1948:	6b 01       	movw	r12, r22
    194a:	7a 01       	movw	r14, r20
    194c:	00 e0       	ldi	r16, 0x00	; 0
    194e:	10 e0       	ldi	r17, 0x00	; 0
    1950:	43 c0       	rjmp	.+134    	; 0x19d8 <effect_spiral+0xa0>
	int i;
	int z;		// cube level

	for (i=0;i<iterations;i++)
    1952:	c0 e0       	ldi	r28, 0x00	; 0
    1954:	d0 e0       	ldi	r29, 0x00	; 0
		// Loop cube levels
		for (z=0;z<5;z++)
		{
			// Read the animation from program memory and put it in the cube buffer.
			// y=0 and y=2 is stored in the upper nibble of the byte, and must be bitshifted into place.
			cube[z][0] = pgm_read_byte(&spinning_line[(i+z)%6][0]);
    1956:	ce 01       	movw	r24, r28
    1958:	80 0f       	add	r24, r16
    195a:	91 1f       	adc	r25, r17
    195c:	66 e0       	ldi	r22, 0x06	; 6
    195e:	70 e0       	ldi	r23, 0x00	; 0
    1960:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <__divmodhi4>
    1964:	9c 01       	movw	r18, r24
    1966:	22 0f       	add	r18, r18
    1968:	33 1f       	adc	r19, r19
    196a:	22 0f       	add	r18, r18
    196c:	33 1f       	adc	r19, r19
    196e:	28 0f       	add	r18, r24
    1970:	39 1f       	adc	r19, r25
    1972:	f9 01       	movw	r30, r18
    1974:	e8 57       	subi	r30, 0x78	; 120
    1976:	ff 4f       	sbci	r31, 0xFF	; 255
    1978:	e4 91       	lpm	r30, Z+
    197a:	de 01       	movw	r26, r28
    197c:	aa 0f       	add	r26, r26
    197e:	bb 1f       	adc	r27, r27
    1980:	aa 0f       	add	r26, r26
    1982:	bb 1f       	adc	r27, r27
    1984:	ac 0f       	add	r26, r28
    1986:	bd 1f       	adc	r27, r29
    1988:	ac 57       	subi	r26, 0x7C	; 124
    198a:	bf 4f       	sbci	r27, 0xFF	; 255
    198c:	ec 93       	st	X, r30
			cube[z][1] = pgm_read_byte(&spinning_line[(i+z)%6][1]);
    198e:	f9 01       	movw	r30, r18
    1990:	e7 57       	subi	r30, 0x77	; 119
    1992:	ff 4f       	sbci	r31, 0xFF	; 255
    1994:	e4 91       	lpm	r30, Z+
    1996:	11 96       	adiw	r26, 0x01	; 1
    1998:	ec 93       	st	X, r30
    199a:	11 97       	sbiw	r26, 0x01	; 1
			cube[z][2] = pgm_read_byte(&spinning_line[(i+z)%6][2]);
    199c:	f9 01       	movw	r30, r18
    199e:	e6 57       	subi	r30, 0x76	; 118
    19a0:	ff 4f       	sbci	r31, 0xFF	; 255
    19a2:	e4 91       	lpm	r30, Z+
    19a4:	12 96       	adiw	r26, 0x02	; 2
    19a6:	ec 93       	st	X, r30
    19a8:	12 97       	sbiw	r26, 0x02	; 2
			cube[z][3] = pgm_read_byte(&spinning_line[(i+z)%6][3]);
    19aa:	f9 01       	movw	r30, r18
    19ac:	e5 57       	subi	r30, 0x75	; 117
    19ae:	ff 4f       	sbci	r31, 0xFF	; 255
    19b0:	e4 91       	lpm	r30, Z+
    19b2:	13 96       	adiw	r26, 0x03	; 3
    19b4:	ec 93       	st	X, r30
    19b6:	13 97       	sbiw	r26, 0x03	; 3
			cube[z][4] = pgm_read_byte(&spinning_line[(i+z)%6][4]);
    19b8:	24 57       	subi	r18, 0x74	; 116
    19ba:	3f 4f       	sbci	r19, 0xFF	; 255
    19bc:	f9 01       	movw	r30, r18
    19be:	84 91       	lpm	r24, Z+
    19c0:	14 96       	adiw	r26, 0x04	; 4
    19c2:	8c 93       	st	X, r24
	int z;		// cube level

	for (i=0;i<iterations;i++)
	{
		// Loop cube levels
		for (z=0;z<5;z++)
    19c4:	21 96       	adiw	r28, 0x01	; 1
    19c6:	c5 30       	cpi	r28, 0x05	; 5
    19c8:	d1 05       	cpc	r29, r1
    19ca:	09 f0       	breq	.+2      	; 0x19ce <effect_spiral+0x96>
    19cc:	c4 cf       	rjmp	.-120    	; 0x1956 <effect_spiral+0x1e>
			cube[z][3] = pgm_read_byte(&spinning_line[(i+z)%6][3]);
			cube[z][4] = pgm_read_byte(&spinning_line[(i+z)%6][4]);
			// the +z makes the animation iterate one step for each plane
			// making it into a spiral
		}
		delay_ms(delay);
    19ce:	c7 01       	movw	r24, r14
    19d0:	0e 94 83 00 	call	0x106	; 0x106 <delay_ms>
void effect_spiral(int direction, int iterations, int delay)
{
	int i;
	int z;		// cube level

	for (i=0;i<iterations;i++)
    19d4:	0f 5f       	subi	r16, 0xFF	; 255
    19d6:	1f 4f       	sbci	r17, 0xFF	; 255
    19d8:	0c 15       	cp	r16, r12
    19da:	1d 05       	cpc	r17, r13
    19dc:	0c f4       	brge	.+2      	; 0x19e0 <effect_spiral+0xa8>
    19de:	b9 cf       	rjmp	.-142    	; 0x1952 <effect_spiral+0x1a>
			// the +z makes the animation iterate one step for each plane
			// making it into a spiral
		}
		delay_ms(delay);
	}
}
    19e0:	df 91       	pop	r29
    19e2:	cf 91       	pop	r28
    19e4:	1f 91       	pop	r17
    19e6:	0f 91       	pop	r16
    19e8:	ff 90       	pop	r15
    19ea:	ef 90       	pop	r14
    19ec:	df 90       	pop	r13
    19ee:	cf 90       	pop	r12
    19f0:	08 95       	ret

000019f2 <animateCharacter>:
	
	
}

void animateCharacter(char charletter)
{
    19f2:	0f 93       	push	r16
    19f4:	1f 93       	push	r17
    19f6:	cf 93       	push	r28
    19f8:	df 93       	push	r29
	int letter = letterToInt(charletter);
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	0e 94 ab 0b 	call	0x1756	; 0x1756 <letterToInt>
    1a00:	8c 01       	movw	r16, r24
    1a02:	c0 e0       	ldi	r28, 0x00	; 0
    1a04:	d0 e0       	ldi	r29, 0x00	; 0
	int l=0;
	for(l=0;l<4;l++)
	{
		getLetter(letter,l);
    1a06:	c8 01       	movw	r24, r16
    1a08:	be 01       	movw	r22, r28
    1a0a:	0e 94 90 08 	call	0x1120	; 0x1120 <getLetter>
		delay_ms(80);
    1a0e:	80 e5       	ldi	r24, 0x50	; 80
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	0e 94 83 00 	call	0x106	; 0x106 <delay_ms>

void animateCharacter(char charletter)
{
	int letter = letterToInt(charletter);
	int l=0;
	for(l=0;l<4;l++)
    1a16:	21 96       	adiw	r28, 0x01	; 1
    1a18:	c4 30       	cpi	r28, 0x04	; 4
    1a1a:	d1 05       	cpc	r29, r1
    1a1c:	a1 f7       	brne	.-24     	; 0x1a06 <animateCharacter+0x14>
	{
		getLetter(letter,l);
		delay_ms(80);
	}
		getLetter(letter,l);
    1a1e:	c8 01       	movw	r24, r16
    1a20:	64 e0       	ldi	r22, 0x04	; 4
    1a22:	70 e0       	ldi	r23, 0x00	; 0
    1a24:	0e 94 90 08 	call	0x1120	; 0x1120 <getLetter>
		delay_ms(500);
    1a28:	84 ef       	ldi	r24, 0xF4	; 244
    1a2a:	91 e0       	ldi	r25, 0x01	; 1
    1a2c:	0e 94 83 00 	call	0x106	; 0x106 <delay_ms>

	
	
}
    1a30:	df 91       	pop	r29
    1a32:	cf 91       	pop	r28
    1a34:	1f 91       	pop	r17
    1a36:	0f 91       	pop	r16
    1a38:	08 95       	ret

00001a3a <LCKrakow>:

}

void LCKrakow()
{
	animateCharacter('E');
    1a3a:	85 e4       	ldi	r24, 0x45	; 69
    1a3c:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <animateCharacter>
	animateCharacter('E');
    1a40:	85 e4       	ldi	r24, 0x45	; 69
    1a42:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <animateCharacter>
	animateCharacter('S');
    1a46:	83 e5       	ldi	r24, 0x53	; 83
    1a48:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <animateCharacter>
	animateCharacter('T');
    1a4c:	84 e5       	ldi	r24, 0x54	; 84
    1a4e:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <animateCharacter>
	animateCharacter('E');
    1a52:	85 e4       	ldi	r24, 0x45	; 69
    1a54:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <animateCharacter>
	animateCharacter('C');
    1a58:	83 e4       	ldi	r24, 0x43	; 67
    1a5a:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <animateCharacter>
	writeBlank();
    1a5e:	0e 94 1b 0c 	call	0x1836	; 0x1836 <writeBlank>
	animateCharacter('L');
    1a62:	8c e4       	ldi	r24, 0x4C	; 76
    1a64:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <animateCharacter>
	animateCharacter('C');
    1a68:	83 e4       	ldi	r24, 0x43	; 67
    1a6a:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <animateCharacter>
	writeBlank();
    1a6e:	0e 94 1b 0c 	call	0x1836	; 0x1836 <writeBlank>
	animateCharacter('K');
    1a72:	8b e4       	ldi	r24, 0x4B	; 75
    1a74:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <animateCharacter>
	animateCharacter('R');
    1a78:	82 e5       	ldi	r24, 0x52	; 82
    1a7a:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <animateCharacter>
	animateCharacter('A');
    1a7e:	81 e4       	ldi	r24, 0x41	; 65
    1a80:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <animateCharacter>
	animateCharacter('K');
    1a84:	8b e4       	ldi	r24, 0x4B	; 75
    1a86:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <animateCharacter>
	animateCharacter('O');
    1a8a:	8f e4       	ldi	r24, 0x4F	; 79
    1a8c:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <animateCharacter>
	animateCharacter('W');
    1a90:	87 e5       	ldi	r24, 0x57	; 87
    1a92:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <animateCharacter>
}
    1a96:	08 95       	ret

00001a98 <writeFilRos>:
	animateCharacter('C');
}

void writeFilRos()
{
	animateCharacter('F');
    1a98:	86 e4       	ldi	r24, 0x46	; 70
    1a9a:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <animateCharacter>
	animateCharacter('I');
    1a9e:	89 e4       	ldi	r24, 0x49	; 73
    1aa0:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <animateCharacter>
	animateCharacter('L');
    1aa4:	8c e4       	ldi	r24, 0x4C	; 76
    1aa6:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <animateCharacter>
	animateCharacter('R');
    1aaa:	82 e5       	ldi	r24, 0x52	; 82
    1aac:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <animateCharacter>
	animateCharacter('O');
    1ab0:	8f e4       	ldi	r24, 0x4F	; 79
    1ab2:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <animateCharacter>
	animateCharacter('S');
    1ab6:	83 e5       	ldi	r24, 0x53	; 83
    1ab8:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <animateCharacter>
	writeBlank();
    1abc:	0e 94 1b 0c 	call	0x1836	; 0x1836 <writeBlank>
	animateCharacter('R');
    1ac0:	82 e5       	ldi	r24, 0x52	; 82
    1ac2:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <animateCharacter>
	animateCharacter('U');
    1ac6:	85 e5       	ldi	r24, 0x55	; 85
    1ac8:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <animateCharacter>
	animateCharacter('L');
    1acc:	8c e4       	ldi	r24, 0x4C	; 76
    1ace:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <animateCharacter>
	animateCharacter('Z');
    1ad2:	8a e5       	ldi	r24, 0x5A	; 90
    1ad4:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <animateCharacter>


}
    1ad8:	08 95       	ret

00001ada <writeEestec>:
}


void writeEestec()
{
	animateCharacter('E');
    1ada:	85 e4       	ldi	r24, 0x45	; 69
    1adc:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <animateCharacter>
	animateCharacter('E');
    1ae0:	85 e4       	ldi	r24, 0x45	; 69
    1ae2:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <animateCharacter>
	animateCharacter('S');
    1ae6:	83 e5       	ldi	r24, 0x53	; 83
    1ae8:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <animateCharacter>
	animateCharacter('T');
    1aec:	84 e5       	ldi	r24, 0x54	; 84
    1aee:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <animateCharacter>
	animateCharacter('E');
    1af2:	85 e4       	ldi	r24, 0x45	; 69
    1af4:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <animateCharacter>
	animateCharacter('C');
    1af8:	83 e4       	ldi	r24, 0x43	; 67
    1afa:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <animateCharacter>
}
    1afe:	08 95       	ret

00001b00 <animateLetter>:
	}

}

void animateLetter(int letter)
{
    1b00:	0f 93       	push	r16
    1b02:	1f 93       	push	r17
    1b04:	cf 93       	push	r28
    1b06:	df 93       	push	r29
    1b08:	8c 01       	movw	r16, r24
    1b0a:	c0 e0       	ldi	r28, 0x00	; 0
    1b0c:	d0 e0       	ldi	r29, 0x00	; 0
	int l=0;
	for(l=0;l<4;l++)
	{
		getLetter(letter,l);
    1b0e:	c8 01       	movw	r24, r16
    1b10:	be 01       	movw	r22, r28
    1b12:	0e 94 90 08 	call	0x1120	; 0x1120 <getLetter>
		delay_ms(80);
    1b16:	80 e5       	ldi	r24, 0x50	; 80
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	0e 94 83 00 	call	0x106	; 0x106 <delay_ms>
}

void animateLetter(int letter)
{
	int l=0;
	for(l=0;l<4;l++)
    1b1e:	21 96       	adiw	r28, 0x01	; 1
    1b20:	c4 30       	cpi	r28, 0x04	; 4
    1b22:	d1 05       	cpc	r29, r1
    1b24:	a1 f7       	brne	.-24     	; 0x1b0e <animateLetter+0xe>
	{
		getLetter(letter,l);
		delay_ms(80);
	}
		getLetter(letter,l);
    1b26:	c8 01       	movw	r24, r16
    1b28:	64 e0       	ldi	r22, 0x04	; 4
    1b2a:	70 e0       	ldi	r23, 0x00	; 0
    1b2c:	0e 94 90 08 	call	0x1120	; 0x1120 <getLetter>
		delay_ms(500);
    1b30:	84 ef       	ldi	r24, 0xF4	; 244
    1b32:	91 e0       	ldi	r25, 0x01	; 1
    1b34:	0e 94 83 00 	call	0x106	; 0x106 <delay_ms>

	
	
}
    1b38:	df 91       	pop	r29
    1b3a:	cf 91       	pop	r28
    1b3c:	1f 91       	pop	r17
    1b3e:	0f 91       	pop	r16
    1b40:	08 95       	ret

00001b42 <alphabet>:
	}
}


void alphabet()
{
    1b42:	cf 93       	push	r28
    1b44:	df 93       	push	r29
    1b46:	c0 e0       	ldi	r28, 0x00	; 0
    1b48:	d0 e0       	ldi	r29, 0x00	; 0
	int letter=0, l = 4;
	for(letter=0;letter<24;letter++)
	{
		getLetter(letter,l);
    1b4a:	ce 01       	movw	r24, r28
    1b4c:	64 e0       	ldi	r22, 0x04	; 4
    1b4e:	70 e0       	ldi	r23, 0x00	; 0
    1b50:	0e 94 90 08 	call	0x1120	; 0x1120 <getLetter>
		delay_ms(700); 
    1b54:	8c eb       	ldi	r24, 0xBC	; 188
    1b56:	92 e0       	ldi	r25, 0x02	; 2
    1b58:	0e 94 83 00 	call	0x106	; 0x106 <delay_ms>


void alphabet()
{
	int letter=0, l = 4;
	for(letter=0;letter<24;letter++)
    1b5c:	21 96       	adiw	r28, 0x01	; 1
    1b5e:	c8 31       	cpi	r28, 0x18	; 24
    1b60:	d1 05       	cpc	r29, r1
    1b62:	99 f7       	brne	.-26     	; 0x1b4a <alphabet+0x8>
	{
		getLetter(letter,l);
		delay_ms(700); 
	}

}
    1b64:	df 91       	pop	r29
    1b66:	cf 91       	pop	r28
    1b68:	08 95       	ret

00001b6a <eestecAnimation>:
		delay_ms(500); 
	}
}

void eestecAnimation ()
{
    1b6a:	0f 93       	push	r16
    1b6c:	1f 93       	push	r17
    1b6e:	cf 93       	push	r28
    1b70:	df 93       	push	r29
    1b72:	c0 e0       	ldi	r28, 0x00	; 0
    1b74:	d0 e0       	ldi	r29, 0x00	; 0
    1b76:	00 e0       	ldi	r16, 0x00	; 0
    1b78:	10 e0       	ldi	r17, 0x00	; 0
int letter=0,l=0;
	while(1)
	{
		if(l==5)
    1b7a:	05 30       	cpi	r16, 0x05	; 5
    1b7c:	11 05       	cpc	r17, r1
    1b7e:	11 f4       	brne	.+4      	; 0x1b84 <eestecAnimation+0x1a>
    1b80:	00 e0       	ldi	r16, 0x00	; 0
    1b82:	10 e0       	ldi	r17, 0x00	; 0
		{
			l=0;
		}
		if(letter == 6)
    1b84:	c6 30       	cpi	r28, 0x06	; 6
    1b86:	d1 05       	cpc	r29, r1
    1b88:	19 f4       	brne	.+6      	; 0x1b90 <eestecAnimation+0x26>
    1b8a:	c0 e0       	ldi	r28, 0x00	; 0
    1b8c:	d0 e0       	ldi	r29, 0x00	; 0
    1b8e:	1e c0       	rjmp	.+60     	; 0x1bcc <eestecAnimation+0x62>
		{
			letter = 0;
		}
		
		switch(letter)
    1b90:	c2 30       	cpi	r28, 0x02	; 2
    1b92:	d1 05       	cpc	r29, r1
    1b94:	99 f0       	breq	.+38     	; 0x1bbc <eestecAnimation+0x52>
    1b96:	c3 30       	cpi	r28, 0x03	; 3
    1b98:	d1 05       	cpc	r29, r1
    1b9a:	34 f4       	brge	.+12     	; 0x1ba8 <eestecAnimation+0x3e>
    1b9c:	20 97       	sbiw	r28, 0x00	; 0
    1b9e:	b1 f0       	breq	.+44     	; 0x1bcc <eestecAnimation+0x62>
    1ba0:	c1 30       	cpi	r28, 0x01	; 1
    1ba2:	d1 05       	cpc	r29, r1
    1ba4:	d1 f4       	brne	.+52     	; 0x1bda <eestecAnimation+0x70>
    1ba6:	12 c0       	rjmp	.+36     	; 0x1bcc <eestecAnimation+0x62>
    1ba8:	c4 30       	cpi	r28, 0x04	; 4
    1baa:	d1 05       	cpc	r29, r1
    1bac:	79 f0       	breq	.+30     	; 0x1bcc <eestecAnimation+0x62>
    1bae:	c4 30       	cpi	r28, 0x04	; 4
    1bb0:	d1 05       	cpc	r29, r1
    1bb2:	44 f0       	brlt	.+16     	; 0x1bc4 <eestecAnimation+0x5a>
    1bb4:	c5 30       	cpi	r28, 0x05	; 5
    1bb6:	d1 05       	cpc	r29, r1
    1bb8:	81 f4       	brne	.+32     	; 0x1bda <eestecAnimation+0x70>
    1bba:	0c c0       	rjmp	.+24     	; 0x1bd4 <eestecAnimation+0x6a>
		case 1:
			writeE(l);
			break;
			
		case 2:
			writeS(l);
    1bbc:	c8 01       	movw	r24, r16
    1bbe:	0e 94 87 07 	call	0xf0e	; 0xf0e <writeS>
    1bc2:	0b c0       	rjmp	.+22     	; 0x1bda <eestecAnimation+0x70>
			break;
			
		case 3:
			writeT(l);
    1bc4:	c8 01       	movw	r24, r16
    1bc6:	0e 94 aa 07 	call	0xf54	; 0xf54 <writeT>
    1bca:	07 c0       	rjmp	.+14     	; 0x1bda <eestecAnimation+0x70>
			break;
			
		case 4:
			writeE(l);
    1bcc:	c8 01       	movw	r24, r16
    1bce:	0e 94 b8 05 	call	0xb70	; 0xb70 <writeE>
    1bd2:	03 c0       	rjmp	.+6      	; 0x1bda <eestecAnimation+0x70>
			break;
			
		case 5:
			writeC(l);
    1bd4:	c8 01       	movw	r24, r16
    1bd6:	0e 94 78 05 	call	0xaf0	; 0xaf0 <writeC>
			break;
		}
		
		letter++;
    1bda:	21 96       	adiw	r28, 0x01	; 1
		l++;
    1bdc:	0f 5f       	subi	r16, 0xFF	; 255
    1bde:	1f 4f       	sbci	r17, 0xFF	; 255
		delay_ms(500); 
    1be0:	84 ef       	ldi	r24, 0xF4	; 244
    1be2:	91 e0       	ldi	r25, 0x01	; 1
    1be4:	0e 94 83 00 	call	0x106	; 0x106 <delay_ms>
    1be8:	c8 cf       	rjmp	.-112    	; 0x1b7a <eestecAnimation+0x10>

00001bea <fillSnake>:
int *fruitz;

volatile int snake[30][3];

void fillSnake()
{
    1bea:	80 e0       	ldi	r24, 0x00	; 0
    1bec:	90 e0       	ldi	r25, 0x00	; 0
	for(int a=0;a<30;a++)
	{
		for(int b=0;b<3;b++)
		{
		 snake[a][b]=-1;
    1bee:	2f ef       	ldi	r18, 0xFF	; 255
    1bf0:	3f ef       	ldi	r19, 0xFF	; 255
    1bf2:	fc 01       	movw	r30, r24
    1bf4:	ee 0f       	add	r30, r30
    1bf6:	ff 1f       	adc	r31, r31
    1bf8:	e8 0f       	add	r30, r24
    1bfa:	f9 1f       	adc	r31, r25
    1bfc:	ee 0f       	add	r30, r30
    1bfe:	ff 1f       	adc	r31, r31
    1c00:	df 01       	movw	r26, r30
    1c02:	a6 55       	subi	r26, 0x56	; 86
    1c04:	bf 4f       	sbci	r27, 0xFF	; 255
    1c06:	11 96       	adiw	r26, 0x01	; 1
    1c08:	3c 93       	st	X, r19
    1c0a:	2e 93       	st	-X, r18
    1c0c:	e4 55       	subi	r30, 0x54	; 84
    1c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c10:	31 83       	std	Z+1, r19	; 0x01
    1c12:	20 83       	st	Z, r18
    1c14:	15 96       	adiw	r26, 0x05	; 5
    1c16:	3c 93       	st	X, r19
    1c18:	2e 93       	st	-X, r18
    1c1a:	14 97       	sbiw	r26, 0x04	; 4

volatile int snake[30][3];

void fillSnake()
{
	for(int a=0;a<30;a++)
    1c1c:	01 96       	adiw	r24, 0x01	; 1
    1c1e:	8e 31       	cpi	r24, 0x1E	; 30
    1c20:	91 05       	cpc	r25, r1
    1c22:	39 f7       	brne	.-50     	; 0x1bf2 <fillSnake+0x8>
		for(int b=0;b<3;b++)
		{
		 snake[a][b]=-1;
		}
	}
}
    1c24:	08 95       	ret

00001c26 <snakeMove>:
		 break;
	}
}

void snakeMove()
{
    1c26:	8f 92       	push	r8
    1c28:	9f 92       	push	r9
    1c2a:	af 92       	push	r10
    1c2c:	bf 92       	push	r11
    1c2e:	cf 92       	push	r12
    1c30:	df 92       	push	r13
    1c32:	ef 92       	push	r14
    1c34:	ff 92       	push	r15
    1c36:	0f 93       	push	r16
    1c38:	1f 93       	push	r17
    1c3a:	df 93       	push	r29
    1c3c:	cf 93       	push	r28
    1c3e:	00 d0       	rcall	.+0      	; 0x1c40 <snakeMove+0x1a>
    1c40:	00 d0       	rcall	.+0      	; 0x1c42 <snakeMove+0x1c>
    1c42:	00 d0       	rcall	.+0      	; 0x1c44 <snakeMove+0x1e>
    1c44:	cd b7       	in	r28, 0x3d	; 61
    1c46:	de b7       	in	r29, 0x3e	; 62
	int a,b;
	int tmp[3];
	if(snake[1][0]!=-1)
    1c48:	80 91 b0 00 	lds	r24, 0x00B0
    1c4c:	90 91 b1 00 	lds	r25, 0x00B1
    1c50:	8f 5f       	subi	r24, 0xFF	; 255
    1c52:	9f 4f       	sbci	r25, 0xFF	; 255
    1c54:	09 f4       	brne	.+2      	; 0x1c58 <snakeMove+0x32>
    1c56:	7b c1       	rjmp	.+758    	; 0x1f4e <snakeMove+0x328>
	{
		for(b=0;b<3;b++)
		{
			tmp[b] = snake[1][b];
    1c58:	80 91 b0 00 	lds	r24, 0x00B0
    1c5c:	90 91 b1 00 	lds	r25, 0x00B1
    1c60:	9a 83       	std	Y+2, r25	; 0x02
    1c62:	89 83       	std	Y+1, r24	; 0x01
			snake[1][b] = snake[2][b];
    1c64:	80 91 b6 00 	lds	r24, 0x00B6
    1c68:	90 91 b7 00 	lds	r25, 0x00B7
    1c6c:	90 93 b1 00 	sts	0x00B1, r25
    1c70:	80 93 b0 00 	sts	0x00B0, r24
	int tmp[3];
	if(snake[1][0]!=-1)
	{
		for(b=0;b<3;b++)
		{
			tmp[b] = snake[1][b];
    1c74:	80 91 b2 00 	lds	r24, 0x00B2
    1c78:	90 91 b3 00 	lds	r25, 0x00B3
    1c7c:	9c 83       	std	Y+4, r25	; 0x04
    1c7e:	8b 83       	std	Y+3, r24	; 0x03
			snake[1][b] = snake[2][b];
    1c80:	80 91 b8 00 	lds	r24, 0x00B8
    1c84:	90 91 b9 00 	lds	r25, 0x00B9
    1c88:	90 93 b3 00 	sts	0x00B3, r25
    1c8c:	80 93 b2 00 	sts	0x00B2, r24
	int tmp[3];
	if(snake[1][0]!=-1)
	{
		for(b=0;b<3;b++)
		{
			tmp[b] = snake[1][b];
    1c90:	80 91 b4 00 	lds	r24, 0x00B4
    1c94:	90 91 b5 00 	lds	r25, 0x00B5
    1c98:	9e 83       	std	Y+6, r25	; 0x06
    1c9a:	8d 83       	std	Y+5, r24	; 0x05
			snake[1][b] = snake[2][b];
    1c9c:	80 91 ba 00 	lds	r24, 0x00BA
    1ca0:	90 91 bb 00 	lds	r25, 0x00BB
    1ca4:	90 93 b5 00 	sts	0x00B5, r25
    1ca8:	80 93 b4 00 	sts	0x00B4, r24
    1cac:	82 e0       	ldi	r24, 0x02	; 2
    1cae:	90 e0       	ldi	r25, 0x00	; 0
		}
		for(a=2;a<30;a++)
    1cb0:	5e 01       	movw	r10, r28
    1cb2:	08 94       	sec
    1cb4:	a1 1c       	adc	r10, r1
    1cb6:	b1 1c       	adc	r11, r1
    1cb8:	42 c0       	rjmp	.+132    	; 0x1d3e <snakeMove+0x118>
		{
			for(b=0;b<3;b++)
			{
				if(snake[a+1][b]==-1)
    1cba:	d7 01       	movw	r26, r14
    1cbc:	a4 0f       	add	r26, r20
    1cbe:	b5 1f       	adc	r27, r21
    1cc0:	aa 0f       	add	r26, r26
    1cc2:	bb 1f       	adc	r27, r27
    1cc4:	a6 55       	subi	r26, 0x56	; 86
    1cc6:	bf 4f       	sbci	r27, 0xFF	; 255
    1cc8:	8d 91       	ld	r24, X+
    1cca:	9c 91       	ld	r25, X
    1ccc:	11 97       	sbiw	r26, 0x01	; 1
    1cce:	8f 5f       	subi	r24, 0xFF	; 255
    1cd0:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd2:	09 f1       	breq	.+66     	; 0x1d16 <snakeMove+0xf0>
					break;
				snake[a][b]=tmp[b];
    1cd4:	f6 01       	movw	r30, r12
    1cd6:	80 81       	ld	r24, Z
    1cd8:	91 81       	ldd	r25, Z+1	; 0x01
    1cda:	48 01       	movw	r8, r16
    1cdc:	84 0e       	add	r8, r20
    1cde:	95 1e       	adc	r9, r21
    1ce0:	88 0c       	add	r8, r8
    1ce2:	99 1c       	adc	r9, r9
    1ce4:	ea ea       	ldi	r30, 0xAA	; 170
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	8e 0e       	add	r8, r30
    1cea:	9f 1e       	adc	r9, r31
    1cec:	f4 01       	movw	r30, r8
    1cee:	91 83       	std	Z+1, r25	; 0x01
    1cf0:	80 83       	st	Z, r24
				tmp[b] = snake[a+1][b];
    1cf2:	8d 91       	ld	r24, X+
    1cf4:	9c 91       	ld	r25, X
    1cf6:	11 97       	sbiw	r26, 0x01	; 1
    1cf8:	f6 01       	movw	r30, r12
    1cfa:	81 93       	st	Z+, r24
    1cfc:	91 93       	st	Z+, r25
    1cfe:	6f 01       	movw	r12, r30
				snake[a+1][b] = snake[a][b];
    1d00:	f4 01       	movw	r30, r8
    1d02:	80 81       	ld	r24, Z
    1d04:	91 81       	ldd	r25, Z+1	; 0x01
    1d06:	11 96       	adiw	r26, 0x01	; 1
    1d08:	9c 93       	st	X, r25
    1d0a:	8e 93       	st	-X, r24
			tmp[b] = snake[1][b];
			snake[1][b] = snake[2][b];
		}
		for(a=2;a<30;a++)
		{
			for(b=0;b<3;b++)
    1d0c:	4f 5f       	subi	r20, 0xFF	; 255
    1d0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d10:	43 30       	cpi	r20, 0x03	; 3
    1d12:	51 05       	cpc	r21, r1
    1d14:	91 f6       	brne	.-92     	; 0x1cba <snakeMove+0x94>
					break;
				snake[a][b]=tmp[b];
				tmp[b] = snake[a+1][b];
				snake[a+1][b] = snake[a][b];
			}
			if(snake[a+1][b]==-1)
    1d16:	fb 01       	movw	r30, r22
    1d18:	ee 0f       	add	r30, r30
    1d1a:	ff 1f       	adc	r31, r31
    1d1c:	e6 0f       	add	r30, r22
    1d1e:	f7 1f       	adc	r31, r23
    1d20:	e4 0f       	add	r30, r20
    1d22:	f5 1f       	adc	r31, r21
    1d24:	ee 0f       	add	r30, r30
    1d26:	ff 1f       	adc	r31, r31
    1d28:	e6 55       	subi	r30, 0x56	; 86
    1d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2c:	80 81       	ld	r24, Z
    1d2e:	91 81       	ldd	r25, Z+1	; 0x01
    1d30:	8f 5f       	subi	r24, 0xFF	; 255
    1d32:	9f 4f       	sbci	r25, 0xFF	; 255
    1d34:	c1 f0       	breq	.+48     	; 0x1d66 <snakeMove+0x140>
		for(b=0;b<3;b++)
		{
			tmp[b] = snake[1][b];
			snake[1][b] = snake[2][b];
		}
		for(a=2;a<30;a++)
    1d36:	6e 31       	cpi	r22, 0x1E	; 30
    1d38:	71 05       	cpc	r23, r1
    1d3a:	99 f0       	breq	.+38     	; 0x1d62 <snakeMove+0x13c>
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	9c 01       	movw	r18, r24
    1d40:	65 01       	movw	r12, r10
    1d42:	40 e0       	ldi	r20, 0x00	; 0
    1d44:	50 e0       	ldi	r21, 0x00	; 0
		 break;
	}
}

void snakeMove()
{
    1d46:	bc 01       	movw	r22, r24
    1d48:	6f 5f       	subi	r22, 0xFF	; 255
    1d4a:	7f 4f       	sbci	r23, 0xFF	; 255
		}
		for(a=2;a<30;a++)
		{
			for(b=0;b<3;b++)
			{
				if(snake[a+1][b]==-1)
    1d4c:	7b 01       	movw	r14, r22
    1d4e:	ee 0c       	add	r14, r14
    1d50:	ff 1c       	adc	r15, r15
    1d52:	e6 0e       	add	r14, r22
    1d54:	f7 1e       	adc	r15, r23
					break;
				snake[a][b]=tmp[b];
    1d56:	8c 01       	movw	r16, r24
    1d58:	00 0f       	add	r16, r16
    1d5a:	11 1f       	adc	r17, r17
    1d5c:	08 0f       	add	r16, r24
    1d5e:	19 1f       	adc	r17, r25
    1d60:	ac cf       	rjmp	.-168    	; 0x1cba <snakeMove+0x94>
		for(b=0;b<3;b++)
		{
			tmp[b] = snake[1][b];
			snake[1][b] = snake[2][b];
		}
		for(a=2;a<30;a++)
    1d62:	2e e1       	ldi	r18, 0x1E	; 30
    1d64:	30 e0       	ldi	r19, 0x00	; 0
			}
			if(snake[a+1][b]==-1)
			break;
		}
		
			switch(direction)
    1d66:	80 91 9d 00 	lds	r24, 0x009D
    1d6a:	90 91 9e 00 	lds	r25, 0x009E
    1d6e:	81 30       	cpi	r24, 0x01	; 1
    1d70:	91 05       	cpc	r25, r1
    1d72:	89 f0       	breq	.+34     	; 0x1d96 <snakeMove+0x170>
    1d74:	82 30       	cpi	r24, 0x02	; 2
    1d76:	91 05       	cpc	r25, r1
    1d78:	09 f1       	breq	.+66     	; 0x1dbc <snakeMove+0x196>
    1d7a:	89 2b       	or	r24, r25
    1d7c:	89 f5       	brne	.+98     	; 0x1de0 <snakeMove+0x1ba>
		{
			case 0: // x+
				
				snake[a+1][0]=snake[a+1][0]++;
    1d7e:	c9 01       	movw	r24, r18
    1d80:	01 96       	adiw	r24, 0x01	; 1
    1d82:	fc 01       	movw	r30, r24
    1d84:	ee 0f       	add	r30, r30
    1d86:	ff 1f       	adc	r31, r31
    1d88:	e8 0f       	add	r30, r24
    1d8a:	f9 1f       	adc	r31, r25
    1d8c:	ee 0f       	add	r30, r30
    1d8e:	ff 1f       	adc	r31, r31
    1d90:	e6 55       	subi	r30, 0x56	; 86
    1d92:	ff 4f       	sbci	r31, 0xFF	; 255
    1d94:	0b c0       	rjmp	.+22     	; 0x1dac <snakeMove+0x186>
				break;
				

			case 1: // y+
				snake[a+1][1]=snake[a+1][1]++;
    1d96:	c9 01       	movw	r24, r18
    1d98:	01 96       	adiw	r24, 0x01	; 1
    1d9a:	fc 01       	movw	r30, r24
    1d9c:	ee 0f       	add	r30, r30
    1d9e:	ff 1f       	adc	r31, r31
    1da0:	e8 0f       	add	r30, r24
    1da2:	f9 1f       	adc	r31, r25
    1da4:	ee 0f       	add	r30, r30
    1da6:	ff 1f       	adc	r31, r31
    1da8:	e4 55       	subi	r30, 0x54	; 84
    1daa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dac:	80 81       	ld	r24, Z
    1dae:	91 81       	ldd	r25, Z+1	; 0x01
    1db0:	91 83       	std	Z+1, r25	; 0x01
    1db2:	80 83       	st	Z, r24
    1db4:	01 96       	adiw	r24, 0x01	; 1
    1db6:	91 83       	std	Z+1, r25	; 0x01
    1db8:	80 83       	st	Z, r24
    1dba:	12 c0       	rjmp	.+36     	; 0x1de0 <snakeMove+0x1ba>
				break;

			
			case 2: // z+
				snake[a+1][2]=snake[a+1][2]++;
    1dbc:	c9 01       	movw	r24, r18
    1dbe:	01 96       	adiw	r24, 0x01	; 1
    1dc0:	fc 01       	movw	r30, r24
    1dc2:	ee 0f       	add	r30, r30
    1dc4:	ff 1f       	adc	r31, r31
    1dc6:	e8 0f       	add	r30, r24
    1dc8:	f9 1f       	adc	r31, r25
    1dca:	ee 0f       	add	r30, r30
    1dcc:	ff 1f       	adc	r31, r31
    1dce:	e6 55       	subi	r30, 0x56	; 86
    1dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd2:	84 81       	ldd	r24, Z+4	; 0x04
    1dd4:	95 81       	ldd	r25, Z+5	; 0x05
    1dd6:	95 83       	std	Z+5, r25	; 0x05
    1dd8:	84 83       	std	Z+4, r24	; 0x04
    1dda:	01 96       	adiw	r24, 0x01	; 1
    1ddc:	95 83       	std	Z+5, r25	; 0x05
    1dde:	84 83       	std	Z+4, r24	; 0x04
				break;

		}

		if(snake[a+1][0]>4) snake[a][0] = 0;
    1de0:	a9 01       	movw	r20, r18
    1de2:	4f 5f       	subi	r20, 0xFF	; 255
    1de4:	5f 4f       	sbci	r21, 0xFF	; 255
    1de6:	fa 01       	movw	r30, r20
    1de8:	ee 0f       	add	r30, r30
    1dea:	ff 1f       	adc	r31, r31
    1dec:	e4 0f       	add	r30, r20
    1dee:	f5 1f       	adc	r31, r21
    1df0:	ee 0f       	add	r30, r30
    1df2:	ff 1f       	adc	r31, r31
    1df4:	e6 55       	subi	r30, 0x56	; 86
    1df6:	ff 4f       	sbci	r31, 0xFF	; 255
    1df8:	80 81       	ld	r24, Z
    1dfa:	91 81       	ldd	r25, Z+1	; 0x01
    1dfc:	05 97       	sbiw	r24, 0x05	; 5
    1dfe:	5c f0       	brlt	.+22     	; 0x1e16 <snakeMove+0x1f0>
    1e00:	f9 01       	movw	r30, r18
    1e02:	ee 0f       	add	r30, r30
    1e04:	ff 1f       	adc	r31, r31
    1e06:	e2 0f       	add	r30, r18
    1e08:	f3 1f       	adc	r31, r19
    1e0a:	ee 0f       	add	r30, r30
    1e0c:	ff 1f       	adc	r31, r31
    1e0e:	e6 55       	subi	r30, 0x56	; 86
    1e10:	ff 4f       	sbci	r31, 0xFF	; 255
    1e12:	11 82       	std	Z+1, r1	; 0x01
    1e14:	10 82       	st	Z, r1
		if(snake[a+1][1]>4) snake[a][1] = 0;
    1e16:	fa 01       	movw	r30, r20
    1e18:	ee 0f       	add	r30, r30
    1e1a:	ff 1f       	adc	r31, r31
    1e1c:	e4 0f       	add	r30, r20
    1e1e:	f5 1f       	adc	r31, r21
    1e20:	ee 0f       	add	r30, r30
    1e22:	ff 1f       	adc	r31, r31
    1e24:	e4 55       	subi	r30, 0x54	; 84
    1e26:	ff 4f       	sbci	r31, 0xFF	; 255
    1e28:	80 81       	ld	r24, Z
    1e2a:	91 81       	ldd	r25, Z+1	; 0x01
    1e2c:	05 97       	sbiw	r24, 0x05	; 5
    1e2e:	5c f0       	brlt	.+22     	; 0x1e46 <snakeMove+0x220>
    1e30:	f9 01       	movw	r30, r18
    1e32:	ee 0f       	add	r30, r30
    1e34:	ff 1f       	adc	r31, r31
    1e36:	e2 0f       	add	r30, r18
    1e38:	f3 1f       	adc	r31, r19
    1e3a:	ee 0f       	add	r30, r30
    1e3c:	ff 1f       	adc	r31, r31
    1e3e:	e4 55       	subi	r30, 0x54	; 84
    1e40:	ff 4f       	sbci	r31, 0xFF	; 255
    1e42:	11 82       	std	Z+1, r1	; 0x01
    1e44:	10 82       	st	Z, r1
		if(snake[a+1][2]>4) snake[a][2] = 0;
    1e46:	fa 01       	movw	r30, r20
    1e48:	ee 0f       	add	r30, r30
    1e4a:	ff 1f       	adc	r31, r31
    1e4c:	e4 0f       	add	r30, r20
    1e4e:	f5 1f       	adc	r31, r21
    1e50:	ee 0f       	add	r30, r30
    1e52:	ff 1f       	adc	r31, r31
    1e54:	e6 55       	subi	r30, 0x56	; 86
    1e56:	ff 4f       	sbci	r31, 0xFF	; 255
    1e58:	84 81       	ldd	r24, Z+4	; 0x04
    1e5a:	95 81       	ldd	r25, Z+5	; 0x05
    1e5c:	05 97       	sbiw	r24, 0x05	; 5
    1e5e:	5c f0       	brlt	.+22     	; 0x1e76 <snakeMove+0x250>
    1e60:	f9 01       	movw	r30, r18
    1e62:	ee 0f       	add	r30, r30
    1e64:	ff 1f       	adc	r31, r31
    1e66:	e2 0f       	add	r30, r18
    1e68:	f3 1f       	adc	r31, r19
    1e6a:	ee 0f       	add	r30, r30
    1e6c:	ff 1f       	adc	r31, r31
    1e6e:	e6 55       	subi	r30, 0x56	; 86
    1e70:	ff 4f       	sbci	r31, 0xFF	; 255
    1e72:	15 82       	std	Z+5, r1	; 0x05
    1e74:	14 82       	std	Z+4, r1	; 0x04
		if(snake[a+1][0]<0) snake[a][0] = 4;
    1e76:	fa 01       	movw	r30, r20
    1e78:	ee 0f       	add	r30, r30
    1e7a:	ff 1f       	adc	r31, r31
    1e7c:	e4 0f       	add	r30, r20
    1e7e:	f5 1f       	adc	r31, r21
    1e80:	ee 0f       	add	r30, r30
    1e82:	ff 1f       	adc	r31, r31
    1e84:	e6 55       	subi	r30, 0x56	; 86
    1e86:	ff 4f       	sbci	r31, 0xFF	; 255
    1e88:	80 81       	ld	r24, Z
    1e8a:	91 81       	ldd	r25, Z+1	; 0x01
    1e8c:	97 ff       	sbrs	r25, 7
    1e8e:	0d c0       	rjmp	.+26     	; 0x1eaa <snakeMove+0x284>
    1e90:	f9 01       	movw	r30, r18
    1e92:	ee 0f       	add	r30, r30
    1e94:	ff 1f       	adc	r31, r31
    1e96:	e2 0f       	add	r30, r18
    1e98:	f3 1f       	adc	r31, r19
    1e9a:	ee 0f       	add	r30, r30
    1e9c:	ff 1f       	adc	r31, r31
    1e9e:	e6 55       	subi	r30, 0x56	; 86
    1ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea2:	84 e0       	ldi	r24, 0x04	; 4
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	91 83       	std	Z+1, r25	; 0x01
    1ea8:	80 83       	st	Z, r24
		if(snake[a+1][1]<0) snake[a][1] = 4;
    1eaa:	fa 01       	movw	r30, r20
    1eac:	ee 0f       	add	r30, r30
    1eae:	ff 1f       	adc	r31, r31
    1eb0:	e4 0f       	add	r30, r20
    1eb2:	f5 1f       	adc	r31, r21
    1eb4:	ee 0f       	add	r30, r30
    1eb6:	ff 1f       	adc	r31, r31
    1eb8:	e4 55       	subi	r30, 0x54	; 84
    1eba:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebc:	80 81       	ld	r24, Z
    1ebe:	91 81       	ldd	r25, Z+1	; 0x01
    1ec0:	97 ff       	sbrs	r25, 7
    1ec2:	0d c0       	rjmp	.+26     	; 0x1ede <snakeMove+0x2b8>
    1ec4:	f9 01       	movw	r30, r18
    1ec6:	ee 0f       	add	r30, r30
    1ec8:	ff 1f       	adc	r31, r31
    1eca:	e2 0f       	add	r30, r18
    1ecc:	f3 1f       	adc	r31, r19
    1ece:	ee 0f       	add	r30, r30
    1ed0:	ff 1f       	adc	r31, r31
    1ed2:	e4 55       	subi	r30, 0x54	; 84
    1ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed6:	84 e0       	ldi	r24, 0x04	; 4
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	91 83       	std	Z+1, r25	; 0x01
    1edc:	80 83       	st	Z, r24
		if(snake[a+1][2]<0) snake[a][2] = 4;
    1ede:	fa 01       	movw	r30, r20
    1ee0:	ee 0f       	add	r30, r30
    1ee2:	ff 1f       	adc	r31, r31
    1ee4:	e4 0f       	add	r30, r20
    1ee6:	f5 1f       	adc	r31, r21
    1ee8:	ee 0f       	add	r30, r30
    1eea:	ff 1f       	adc	r31, r31
    1eec:	e6 55       	subi	r30, 0x56	; 86
    1eee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef0:	84 81       	ldd	r24, Z+4	; 0x04
    1ef2:	95 81       	ldd	r25, Z+5	; 0x05
    1ef4:	97 ff       	sbrs	r25, 7
    1ef6:	0d c0       	rjmp	.+26     	; 0x1f12 <snakeMove+0x2ec>
    1ef8:	f9 01       	movw	r30, r18
    1efa:	ee 0f       	add	r30, r30
    1efc:	ff 1f       	adc	r31, r31
    1efe:	e2 0f       	add	r30, r18
    1f00:	f3 1f       	adc	r31, r19
    1f02:	ee 0f       	add	r30, r30
    1f04:	ff 1f       	adc	r31, r31
    1f06:	e6 55       	subi	r30, 0x56	; 86
    1f08:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0a:	84 e0       	ldi	r24, 0x04	; 4
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	95 83       	std	Z+5, r25	; 0x05
    1f10:	84 83       	std	Z+4, r24	; 0x04
		
		head[0] = snake[a+1][0];
    1f12:	fa 01       	movw	r30, r20
    1f14:	ee 0f       	add	r30, r30
    1f16:	ff 1f       	adc	r31, r31
    1f18:	e4 0f       	add	r30, r20
    1f1a:	f5 1f       	adc	r31, r21
    1f1c:	ee 0f       	add	r30, r30
    1f1e:	ff 1f       	adc	r31, r31
    1f20:	df 01       	movw	r26, r30
    1f22:	a6 55       	subi	r26, 0x56	; 86
    1f24:	bf 4f       	sbci	r27, 0xFF	; 255
    1f26:	8d 91       	ld	r24, X+
    1f28:	9c 91       	ld	r25, X
    1f2a:	11 97       	sbiw	r26, 0x01	; 1
    1f2c:	90 93 71 01 	sts	0x0171, r25
    1f30:	80 93 70 01 	sts	0x0170, r24
		head[1] = snake[a+1][1];
    1f34:	e4 55       	subi	r30, 0x54	; 84
    1f36:	ff 4f       	sbci	r31, 0xFF	; 255
    1f38:	80 81       	ld	r24, Z
    1f3a:	91 81       	ldd	r25, Z+1	; 0x01
    1f3c:	90 93 73 01 	sts	0x0173, r25
    1f40:	80 93 72 01 	sts	0x0172, r24
		head[2] = snake[a+1][2];
    1f44:	14 96       	adiw	r26, 0x04	; 4
    1f46:	8d 91       	ld	r24, X+
    1f48:	9c 91       	ld	r25, X
    1f4a:	15 97       	sbiw	r26, 0x05	; 5
    1f4c:	95 c0       	rjmp	.+298    	; 0x2078 <snakeMove+0x452>
	}
	else
	{
		switch(direction)
    1f4e:	80 91 9d 00 	lds	r24, 0x009D
    1f52:	90 91 9e 00 	lds	r25, 0x009E
    1f56:	82 30       	cpi	r24, 0x02	; 2
    1f58:	91 05       	cpc	r25, r1
    1f5a:	b9 f1       	breq	.+110    	; 0x1fca <snakeMove+0x3a4>
    1f5c:	83 30       	cpi	r24, 0x03	; 3
    1f5e:	91 05       	cpc	r25, r1
    1f60:	34 f4       	brge	.+12     	; 0x1f6e <snakeMove+0x348>
    1f62:	00 97       	sbiw	r24, 0x00	; 0
    1f64:	71 f0       	breq	.+28     	; 0x1f82 <snakeMove+0x35c>
    1f66:	01 97       	sbiw	r24, 0x01	; 1
    1f68:	09 f0       	breq	.+2      	; 0x1f6c <snakeMove+0x346>
    1f6a:	74 c0       	rjmp	.+232    	; 0x2054 <snakeMove+0x42e>
    1f6c:	1a c0       	rjmp	.+52     	; 0x1fa2 <snakeMove+0x37c>
    1f6e:	84 30       	cpi	r24, 0x04	; 4
    1f70:	91 05       	cpc	r25, r1
    1f72:	f9 f0       	breq	.+62     	; 0x1fb2 <snakeMove+0x38c>
    1f74:	84 30       	cpi	r24, 0x04	; 4
    1f76:	91 05       	cpc	r25, r1
    1f78:	54 f0       	brlt	.+20     	; 0x1f8e <snakeMove+0x368>
    1f7a:	05 97       	sbiw	r24, 0x05	; 5
    1f7c:	09 f0       	breq	.+2      	; 0x1f80 <snakeMove+0x35a>
    1f7e:	6a c0       	rjmp	.+212    	; 0x2054 <snakeMove+0x42e>
    1f80:	2c c0       	rjmp	.+88     	; 0x1fda <snakeMove+0x3b4>
		{
			case 0: // x+
				
				snake[a][0]=snake[a][0]+1;
    1f82:	ea ea       	ldi	r30, 0xAA	; 170
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	80 81       	ld	r24, Z
    1f88:	91 81       	ldd	r25, Z+1	; 0x01
    1f8a:	01 96       	adiw	r24, 0x01	; 1
    1f8c:	07 c0       	rjmp	.+14     	; 0x1f9c <snakeMove+0x376>
				if(snake[a][1]<0) snake[a][1] = 4;
				if(snake[a][2]<0) snake[a][2] = 4;
				break;
				
			case 3: // x-
				snake[a][0]=snake[a][0]--;
    1f8e:	ea ea       	ldi	r30, 0xAA	; 170
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	80 81       	ld	r24, Z
    1f94:	91 81       	ldd	r25, Z+1	; 0x01
    1f96:	91 83       	std	Z+1, r25	; 0x01
    1f98:	80 83       	st	Z, r24
    1f9a:	01 97       	sbiw	r24, 0x01	; 1
    1f9c:	91 83       	std	Z+1, r25	; 0x01
    1f9e:	80 83       	st	Z, r24
    1fa0:	25 c0       	rjmp	.+74     	; 0x1fec <snakeMove+0x3c6>
				if(snake[a][1]<0) snake[a][1] = 4;
				if(snake[a][2]<0) snake[a][2] = 4;
				break;
			
			case 1: // y+
				snake[a][1]=snake[a][1]++;
    1fa2:	ec ea       	ldi	r30, 0xAC	; 172
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 81       	ld	r24, Z
    1fa8:	91 81       	ldd	r25, Z+1	; 0x01
    1faa:	91 83       	std	Z+1, r25	; 0x01
    1fac:	80 83       	st	Z, r24
    1fae:	01 96       	adiw	r24, 0x01	; 1
    1fb0:	07 c0       	rjmp	.+14     	; 0x1fc0 <snakeMove+0x39a>
				if(snake[a][1]<0) snake[a][1] = 4;
				if(snake[a][2]<0) snake[a][2] = 4;
				break;
				
			case 4: // y-
				snake[a][1]=snake[a][1]--;
    1fb2:	ec ea       	ldi	r30, 0xAC	; 172
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	80 81       	ld	r24, Z
    1fb8:	91 81       	ldd	r25, Z+1	; 0x01
    1fba:	91 83       	std	Z+1, r25	; 0x01
    1fbc:	80 83       	st	Z, r24
    1fbe:	01 97       	sbiw	r24, 0x01	; 1
    1fc0:	91 83       	std	Z+1, r25	; 0x01
    1fc2:	80 83       	st	Z, r24
				if(snake[a][0]>4) snake[a][0] = 0;
    1fc4:	ea ea       	ldi	r30, 0xAA	; 170
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	11 c0       	rjmp	.+34     	; 0x1fec <snakeMove+0x3c6>
				if(snake[a][1]<0) snake[a][1] = 4;
				if(snake[a][2]<0) snake[a][2] = 4;
				break;
			
			case 2: // z+
				snake[a][2]=snake[a][2]++;
    1fca:	ea ea       	ldi	r30, 0xAA	; 170
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	84 81       	ldd	r24, Z+4	; 0x04
    1fd0:	95 81       	ldd	r25, Z+5	; 0x05
    1fd2:	95 83       	std	Z+5, r25	; 0x05
    1fd4:	84 83       	std	Z+4, r24	; 0x04
    1fd6:	01 96       	adiw	r24, 0x01	; 1
    1fd8:	07 c0       	rjmp	.+14     	; 0x1fe8 <snakeMove+0x3c2>
				if(snake[a][1]<0) snake[a][1] = 4;
				if(snake[a][2]<0) snake[a][2] = 4;
				break;
				
			case 5: // z-
				snake[a][2]=snake[a][2]--;				
    1fda:	ea ea       	ldi	r30, 0xAA	; 170
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	84 81       	ldd	r24, Z+4	; 0x04
    1fe0:	95 81       	ldd	r25, Z+5	; 0x05
    1fe2:	95 83       	std	Z+5, r25	; 0x05
    1fe4:	84 83       	std	Z+4, r24	; 0x04
    1fe6:	01 97       	sbiw	r24, 0x01	; 1
    1fe8:	95 83       	std	Z+5, r25	; 0x05
    1fea:	84 83       	std	Z+4, r24	; 0x04
				if(snake[a][0]>4) snake[a][0] = 0;
    1fec:	80 81       	ld	r24, Z
    1fee:	91 81       	ldd	r25, Z+1	; 0x01
    1ff0:	05 97       	sbiw	r24, 0x05	; 5
    1ff2:	14 f0       	brlt	.+4      	; 0x1ff8 <snakeMove+0x3d2>
    1ff4:	11 82       	std	Z+1, r1	; 0x01
    1ff6:	10 82       	st	Z, r1
				if(snake[a][1]>4) snake[a][1] = 0;
    1ff8:	ec ea       	ldi	r30, 0xAC	; 172
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	80 81       	ld	r24, Z
    1ffe:	91 81       	ldd	r25, Z+1	; 0x01
    2000:	05 97       	sbiw	r24, 0x05	; 5
    2002:	14 f0       	brlt	.+4      	; 0x2008 <snakeMove+0x3e2>
    2004:	11 82       	std	Z+1, r1	; 0x01
    2006:	10 82       	st	Z, r1
				if(snake[a][2]>4) snake[a][2] = 0;
    2008:	ea ea       	ldi	r30, 0xAA	; 170
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	84 81       	ldd	r24, Z+4	; 0x04
    200e:	95 81       	ldd	r25, Z+5	; 0x05
    2010:	05 97       	sbiw	r24, 0x05	; 5
    2012:	14 f0       	brlt	.+4      	; 0x2018 <snakeMove+0x3f2>
    2014:	15 82       	std	Z+5, r1	; 0x05
    2016:	14 82       	std	Z+4, r1	; 0x04
				if(snake[a][0]<0) snake[a][0] = 4;
    2018:	ea ea       	ldi	r30, 0xAA	; 170
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	80 81       	ld	r24, Z
    201e:	91 81       	ldd	r25, Z+1	; 0x01
    2020:	97 ff       	sbrs	r25, 7
    2022:	04 c0       	rjmp	.+8      	; 0x202c <snakeMove+0x406>
    2024:	84 e0       	ldi	r24, 0x04	; 4
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	91 83       	std	Z+1, r25	; 0x01
    202a:	80 83       	st	Z, r24
				if(snake[a][1]<0) snake[a][1] = 4;
    202c:	ec ea       	ldi	r30, 0xAC	; 172
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	91 81       	ldd	r25, Z+1	; 0x01
    2034:	97 ff       	sbrs	r25, 7
    2036:	04 c0       	rjmp	.+8      	; 0x2040 <snakeMove+0x41a>
    2038:	84 e0       	ldi	r24, 0x04	; 4
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	91 83       	std	Z+1, r25	; 0x01
    203e:	80 83       	st	Z, r24
				if(snake[a][2]<0) snake[a][2] = 4;
    2040:	ea ea       	ldi	r30, 0xAA	; 170
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	84 81       	ldd	r24, Z+4	; 0x04
    2046:	95 81       	ldd	r25, Z+5	; 0x05
    2048:	97 ff       	sbrs	r25, 7
    204a:	04 c0       	rjmp	.+8      	; 0x2054 <snakeMove+0x42e>
    204c:	84 e0       	ldi	r24, 0x04	; 4
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	95 83       	std	Z+5, r25	; 0x05
    2052:	84 83       	std	Z+4, r24	; 0x04
				break;
			
		}
		head[0] = snake[a][0];
    2054:	ea ea       	ldi	r30, 0xAA	; 170
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	80 81       	ld	r24, Z
    205a:	91 81       	ldd	r25, Z+1	; 0x01
    205c:	90 93 71 01 	sts	0x0171, r25
    2060:	80 93 70 01 	sts	0x0170, r24
		head[1] = snake[a][1];
    2064:	80 91 ac 00 	lds	r24, 0x00AC
    2068:	90 91 ad 00 	lds	r25, 0x00AD
    206c:	90 93 73 01 	sts	0x0173, r25
    2070:	80 93 72 01 	sts	0x0172, r24
		head[2] = snake[a][2];
    2074:	84 81       	ldd	r24, Z+4	; 0x04
    2076:	95 81       	ldd	r25, Z+5	; 0x05
    2078:	90 93 75 01 	sts	0x0175, r25
    207c:	80 93 74 01 	sts	0x0174, r24
	}
}
    2080:	26 96       	adiw	r28, 0x06	; 6
    2082:	0f b6       	in	r0, 0x3f	; 63
    2084:	f8 94       	cli
    2086:	de bf       	out	0x3e, r29	; 62
    2088:	0f be       	out	0x3f, r0	; 63
    208a:	cd bf       	out	0x3d, r28	; 61
    208c:	cf 91       	pop	r28
    208e:	df 91       	pop	r29
    2090:	1f 91       	pop	r17
    2092:	0f 91       	pop	r16
    2094:	ff 90       	pop	r15
    2096:	ef 90       	pop	r14
    2098:	df 90       	pop	r13
    209a:	cf 90       	pop	r12
    209c:	bf 90       	pop	r11
    209e:	af 90       	pop	r10
    20a0:	9f 90       	pop	r9
    20a2:	8f 90       	pop	r8
    20a4:	08 95       	ret

000020a6 <directionHandler>:
void directionHandler()
{
	snakeMove();	
    20a6:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <snakeMove>

	
}
    20aa:	08 95       	ret

000020ac <enlarge>:
		enlarge(head);
	}
}

void enlarge(int* position)
{
    20ac:	cf 93       	push	r28
    20ae:	df 93       	push	r29
    20b0:	ec 01       	movw	r28, r24
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
	int a;
	for(a=0;a<30;a++)
	{
		if(snake[a][0]==-1)
    20b6:	f9 01       	movw	r30, r18
    20b8:	ee 0f       	add	r30, r30
    20ba:	ff 1f       	adc	r31, r31
    20bc:	e2 0f       	add	r30, r18
    20be:	f3 1f       	adc	r31, r19
    20c0:	ee 0f       	add	r30, r30
    20c2:	ff 1f       	adc	r31, r31
    20c4:	e6 55       	subi	r30, 0x56	; 86
    20c6:	ff 4f       	sbci	r31, 0xFF	; 255
    20c8:	80 81       	ld	r24, Z
    20ca:	91 81       	ldd	r25, Z+1	; 0x01
    20cc:	8f 5f       	subi	r24, 0xFF	; 255
    20ce:	9f 4f       	sbci	r25, 0xFF	; 255
    20d0:	29 f0       	breq	.+10     	; 0x20dc <enlarge+0x30>
}

void enlarge(int* position)
{
	int a;
	for(a=0;a<30;a++)
    20d2:	2f 5f       	subi	r18, 0xFF	; 255
    20d4:	3f 4f       	sbci	r19, 0xFF	; 255
    20d6:	2e 31       	cpi	r18, 0x1E	; 30
    20d8:	31 05       	cpc	r19, r1
    20da:	69 f7       	brne	.-38     	; 0x20b6 <enlarge+0xa>
	{
		if(snake[a][0]==-1)
			break;
	}
	snake[a][0] = position[0];
    20dc:	88 81       	ld	r24, Y
    20de:	99 81       	ldd	r25, Y+1	; 0x01
    20e0:	f9 01       	movw	r30, r18
    20e2:	ee 0f       	add	r30, r30
    20e4:	ff 1f       	adc	r31, r31
    20e6:	e2 0f       	add	r30, r18
    20e8:	f3 1f       	adc	r31, r19
    20ea:	ee 0f       	add	r30, r30
    20ec:	ff 1f       	adc	r31, r31
    20ee:	df 01       	movw	r26, r30
    20f0:	a6 55       	subi	r26, 0x56	; 86
    20f2:	bf 4f       	sbci	r27, 0xFF	; 255
    20f4:	11 96       	adiw	r26, 0x01	; 1
    20f6:	9c 93       	st	X, r25
    20f8:	8e 93       	st	-X, r24
	snake[a][1] = position[1];
    20fa:	8a 81       	ldd	r24, Y+2	; 0x02
    20fc:	9b 81       	ldd	r25, Y+3	; 0x03
    20fe:	e4 55       	subi	r30, 0x54	; 84
    2100:	ff 4f       	sbci	r31, 0xFF	; 255
    2102:	91 83       	std	Z+1, r25	; 0x01
    2104:	80 83       	st	Z, r24
	snake[a][2] = position[2];
    2106:	8c 81       	ldd	r24, Y+4	; 0x04
    2108:	9d 81       	ldd	r25, Y+5	; 0x05
    210a:	15 96       	adiw	r26, 0x05	; 5
    210c:	9c 93       	st	X, r25
    210e:	8e 93       	st	-X, r24
    2110:	14 97       	sbiw	r26, 0x04	; 4
	
}
    2112:	df 91       	pop	r29
    2114:	cf 91       	pop	r28
    2116:	08 95       	ret

00002118 <check>:
	setLED(fruit[0],fruit[1],fruit[2]);
}

void check()
{
	switch(direction)
    2118:	80 91 9d 00 	lds	r24, 0x009D
    211c:	90 91 9e 00 	lds	r25, 0x009E
    2120:	81 30       	cpi	r24, 0x01	; 1
    2122:	91 05       	cpc	r25, r1
    2124:	51 f0       	breq	.+20     	; 0x213a <check+0x22>
    2126:	82 30       	cpi	r24, 0x02	; 2
    2128:	91 05       	cpc	r25, r1
    212a:	71 f0       	breq	.+28     	; 0x2148 <check+0x30>
    212c:	89 2b       	or	r24, r25
    212e:	a1 f4       	brne	.+40     	; 0x2158 <check+0x40>
	{
		case 0:
			setLED(0,0,0);
    2130:	80 e0       	ldi	r24, 0x00	; 0
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	60 e0       	ldi	r22, 0x00	; 0
    2136:	70 e0       	ldi	r23, 0x00	; 0
    2138:	04 c0       	rjmp	.+8      	; 0x2142 <check+0x2a>
			break;
			case 1:
			setLED(0,4,0);
    213a:	80 e0       	ldi	r24, 0x00	; 0
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	64 e0       	ldi	r22, 0x04	; 4
    2140:	70 e0       	ldi	r23, 0x00	; 0
    2142:	40 e0       	ldi	r20, 0x00	; 0
    2144:	50 e0       	ldi	r21, 0x00	; 0
    2146:	06 c0       	rjmp	.+12     	; 0x2154 <check+0x3c>
			break;
			case 2:
			setLED(0,0,4);
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	60 e0       	ldi	r22, 0x00	; 0
    214e:	70 e0       	ldi	r23, 0x00	; 0
    2150:	44 e0       	ldi	r20, 0x04	; 4
    2152:	50 e0       	ldi	r21, 0x00	; 0
    2154:	0e 94 88 01 	call	0x310	; 0x310 <setLED>
			break;
	}
	delay_ms(50);
    2158:	82 e3       	ldi	r24, 0x32	; 50
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	0e 94 83 00 	call	0x106	; 0x106 <delay_ms>
}
    2160:	08 95       	ret

00002162 <displaySnake>:
		}
	}
}

void displaySnake()
{
    2162:	ef 92       	push	r14
    2164:	ff 92       	push	r15
    2166:	0f 93       	push	r16
    2168:	1f 93       	push	r17
    216a:	cf 93       	push	r28
    216c:	df 93       	push	r29
    216e:	ee 24       	eor	r14, r14
    2170:	ff 24       	eor	r15, r15
    2172:	26 c0       	rjmp	.+76     	; 0x21c0 <displaySnake+0x5e>
    2174:	82 e0       	ldi	r24, 0x02	; 2
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	0b c0       	rjmp	.+22     	; 0x2190 <displaySnake+0x2e>
	{
		for( b=0;b<3;b++)
		{
		if(snake[a][b]==-1)
		 break;
		setLED(snake[a][0],snake[a][1],snake[a][2]);
    217a:	f8 01       	movw	r30, r16
    217c:	80 81       	ld	r24, Z
    217e:	91 81       	ldd	r25, Z+1	; 0x01
    2180:	68 81       	ld	r22, Y
    2182:	79 81       	ldd	r23, Y+1	; 0x01
    2184:	44 81       	ldd	r20, Z+4	; 0x04
    2186:	55 81       	ldd	r21, Z+5	; 0x05
    2188:	0e 94 88 01 	call	0x310	; 0x310 <setLED>
    218c:	83 e0       	ldi	r24, 0x03	; 3
    218e:	90 e0       	ldi	r25, 0x00	; 0

		}
		if(snake[a][b]==-1)
    2190:	f7 01       	movw	r30, r14
    2192:	ee 0f       	add	r30, r30
    2194:	ff 1f       	adc	r31, r31
    2196:	ee 0d       	add	r30, r14
    2198:	ff 1d       	adc	r31, r15
    219a:	e8 0f       	add	r30, r24
    219c:	f9 1f       	adc	r31, r25
    219e:	ee 0f       	add	r30, r30
    21a0:	ff 1f       	adc	r31, r31
    21a2:	e6 55       	subi	r30, 0x56	; 86
    21a4:	ff 4f       	sbci	r31, 0xFF	; 255
    21a6:	80 81       	ld	r24, Z
    21a8:	91 81       	ldd	r25, Z+1	; 0x01
    21aa:	8f 5f       	subi	r24, 0xFF	; 255
    21ac:	9f 4f       	sbci	r25, 0xFF	; 255
    21ae:	09 f4       	brne	.+2      	; 0x21b2 <displaySnake+0x50>
    21b0:	41 c0       	rjmp	.+130    	; 0x2234 <displaySnake+0xd2>

void displaySnake()
{
int a,b;
//while(snake[a][b]!=-1)
	for( a=0;a<30;a++)
    21b2:	08 94       	sec
    21b4:	e1 1c       	adc	r14, r1
    21b6:	f1 1c       	adc	r15, r1
    21b8:	2e e1       	ldi	r18, 0x1E	; 30
    21ba:	e2 16       	cp	r14, r18
    21bc:	f1 04       	cpc	r15, r1
    21be:	d1 f1       	breq	.+116    	; 0x2234 <displaySnake+0xd2>
	{
		for( b=0;b<3;b++)
		{
		if(snake[a][b]==-1)
    21c0:	b7 01       	movw	r22, r14
    21c2:	66 0f       	add	r22, r22
    21c4:	77 1f       	adc	r23, r23
    21c6:	6e 0d       	add	r22, r14
    21c8:	7f 1d       	adc	r23, r15
    21ca:	8b 01       	movw	r16, r22
    21cc:	00 0f       	add	r16, r16
    21ce:	11 1f       	adc	r17, r17
    21d0:	06 55       	subi	r16, 0x56	; 86
    21d2:	1f 4f       	sbci	r17, 0xFF	; 255
    21d4:	f8 01       	movw	r30, r16
    21d6:	80 81       	ld	r24, Z
    21d8:	91 81       	ldd	r25, Z+1	; 0x01
    21da:	8f 5f       	subi	r24, 0xFF	; 255
    21dc:	9f 4f       	sbci	r25, 0xFF	; 255
    21de:	19 f4       	brne	.+6      	; 0x21e6 <displaySnake+0x84>
    21e0:	80 e0       	ldi	r24, 0x00	; 0
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	d5 cf       	rjmp	.-86     	; 0x2190 <displaySnake+0x2e>
		 break;
		setLED(snake[a][0],snake[a][1],snake[a][2]);
    21e6:	f8 01       	movw	r30, r16
    21e8:	80 81       	ld	r24, Z
    21ea:	91 81       	ldd	r25, Z+1	; 0x01
    21ec:	eb 01       	movw	r28, r22
    21ee:	cc 0f       	add	r28, r28
    21f0:	dd 1f       	adc	r29, r29
    21f2:	c4 55       	subi	r28, 0x54	; 84
    21f4:	df 4f       	sbci	r29, 0xFF	; 255
    21f6:	68 81       	ld	r22, Y
    21f8:	79 81       	ldd	r23, Y+1	; 0x01
    21fa:	44 81       	ldd	r20, Z+4	; 0x04
    21fc:	55 81       	ldd	r21, Z+5	; 0x05
    21fe:	0e 94 88 01 	call	0x310	; 0x310 <setLED>
//while(snake[a][b]!=-1)
	for( a=0;a<30;a++)
	{
		for( b=0;b<3;b++)
		{
		if(snake[a][b]==-1)
    2202:	88 81       	ld	r24, Y
    2204:	99 81       	ldd	r25, Y+1	; 0x01
    2206:	8f 5f       	subi	r24, 0xFF	; 255
    2208:	9f 4f       	sbci	r25, 0xFF	; 255
    220a:	19 f4       	brne	.+6      	; 0x2212 <displaySnake+0xb0>
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	bf cf       	rjmp	.-130    	; 0x2190 <displaySnake+0x2e>
		 break;
		setLED(snake[a][0],snake[a][1],snake[a][2]);
    2212:	f8 01       	movw	r30, r16
    2214:	80 81       	ld	r24, Z
    2216:	91 81       	ldd	r25, Z+1	; 0x01
    2218:	68 81       	ld	r22, Y
    221a:	79 81       	ldd	r23, Y+1	; 0x01
    221c:	44 81       	ldd	r20, Z+4	; 0x04
    221e:	55 81       	ldd	r21, Z+5	; 0x05
    2220:	0e 94 88 01 	call	0x310	; 0x310 <setLED>
//while(snake[a][b]!=-1)
	for( a=0;a<30;a++)
	{
		for( b=0;b<3;b++)
		{
		if(snake[a][b]==-1)
    2224:	f8 01       	movw	r30, r16
    2226:	84 81       	ldd	r24, Z+4	; 0x04
    2228:	95 81       	ldd	r25, Z+5	; 0x05
    222a:	8f 5f       	subi	r24, 0xFF	; 255
    222c:	9f 4f       	sbci	r25, 0xFF	; 255
    222e:	09 f0       	breq	.+2      	; 0x2232 <displaySnake+0xd0>
    2230:	a4 cf       	rjmp	.-184    	; 0x217a <displaySnake+0x18>
    2232:	a0 cf       	rjmp	.-192    	; 0x2174 <displaySnake+0x12>

		}
		if(snake[a][b]==-1)
		 break;
	}
}
    2234:	df 91       	pop	r29
    2236:	cf 91       	pop	r28
    2238:	1f 91       	pop	r17
    223a:	0f 91       	pop	r16
    223c:	ff 90       	pop	r15
    223e:	ef 90       	pop	r14
    2240:	08 95       	ret

00002242 <generateFruitPlace>:
	snake[a][2] = position[2];
	
}

void generateFruitPlace()
{
    2242:	cf 92       	push	r12
    2244:	df 92       	push	r13
    2246:	ef 92       	push	r14
    2248:	ff 92       	push	r15
    224a:	0f 93       	push	r16
    224c:	1f 93       	push	r17
	int x,y,z;
	do{
	x = rand()%5;
    224e:	0e 94 5f 15 	call	0x2abe	; 0x2abe <rand>
    2252:	65 e0       	ldi	r22, 0x05	; 5
    2254:	70 e0       	ldi	r23, 0x00	; 0
    2256:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <__divmodhi4>
    225a:	d8 2e       	mov	r13, r24
    225c:	c9 2e       	mov	r12, r25
	y = rand()%5;
    225e:	0e 94 5f 15 	call	0x2abe	; 0x2abe <rand>
    2262:	65 e0       	ldi	r22, 0x05	; 5
    2264:	70 e0       	ldi	r23, 0x00	; 0
    2266:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <__divmodhi4>
    226a:	f8 2e       	mov	r15, r24
    226c:	e9 2e       	mov	r14, r25
	z = rand()%5;
    226e:	0e 94 5f 15 	call	0x2abe	; 0x2abe <rand>
    2272:	65 e0       	ldi	r22, 0x05	; 5
    2274:	70 e0       	ldi	r23, 0x00	; 0
    2276:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <__divmodhi4>
    227a:	18 2f       	mov	r17, r24
    227c:	09 2f       	mov	r16, r25
	}
	while(getLED(x,y,z)==0x01);
    227e:	8d 2d       	mov	r24, r13
    2280:	9c 2d       	mov	r25, r12
    2282:	6f 2d       	mov	r22, r15
    2284:	7e 2d       	mov	r23, r14
    2286:	41 2f       	mov	r20, r17
    2288:	50 2f       	mov	r21, r16
    228a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <getLED>
    228e:	81 30       	cpi	r24, 0x01	; 1
    2290:	f1 f2       	breq	.-68     	; 0x224e <generateFruitPlace+0xc>
	
	fruit[0] = x;
    2292:	ea e6       	ldi	r30, 0x6A	; 106
    2294:	f1 e0       	ldi	r31, 0x01	; 1
    2296:	d0 92 6a 01 	sts	0x016A, r13
    229a:	c0 92 6b 01 	sts	0x016B, r12
	fruit[1] = y;
    229e:	f0 92 6c 01 	sts	0x016C, r15
    22a2:	e3 82       	std	Z+3, r14	; 0x03
	fruit[2] = z;
    22a4:	10 93 6e 01 	sts	0x016E, r17
    22a8:	05 83       	std	Z+5, r16	; 0x05
	setLED(fruit[0],fruit[1],fruit[2]);
    22aa:	8d 2d       	mov	r24, r13
    22ac:	9c 2d       	mov	r25, r12
    22ae:	6f 2d       	mov	r22, r15
    22b0:	7e 2d       	mov	r23, r14
    22b2:	41 2f       	mov	r20, r17
    22b4:	50 2f       	mov	r21, r16
    22b6:	0e 94 88 01 	call	0x310	; 0x310 <setLED>
}
    22ba:	1f 91       	pop	r17
    22bc:	0f 91       	pop	r16
    22be:	ff 90       	pop	r15
    22c0:	ef 90       	pop	r14
    22c2:	df 90       	pop	r13
    22c4:	cf 90       	pop	r12
    22c6:	08 95       	ret

000022c8 <start>:
}


void start()
{
	position[0]=0;
    22c8:	10 92 61 01 	sts	0x0161, r1
    22cc:	10 92 60 01 	sts	0x0160, r1
	position[1]=0;
    22d0:	10 92 63 01 	sts	0x0163, r1
    22d4:	10 92 62 01 	sts	0x0162, r1
	position[2]=0;
    22d8:	10 92 65 01 	sts	0x0165, r1
    22dc:	10 92 64 01 	sts	0x0164, r1
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	90 e0       	ldi	r25, 0x00	; 0
{
	for(int a=0;a<30;a++)
	{
		for(int b=0;b<3;b++)
		{
		 snake[a][b]=-1;
    22e4:	2f ef       	ldi	r18, 0xFF	; 255
    22e6:	3f ef       	ldi	r19, 0xFF	; 255
    22e8:	fc 01       	movw	r30, r24
    22ea:	ee 0f       	add	r30, r30
    22ec:	ff 1f       	adc	r31, r31
    22ee:	e8 0f       	add	r30, r24
    22f0:	f9 1f       	adc	r31, r25
    22f2:	ee 0f       	add	r30, r30
    22f4:	ff 1f       	adc	r31, r31
    22f6:	df 01       	movw	r26, r30
    22f8:	a6 55       	subi	r26, 0x56	; 86
    22fa:	bf 4f       	sbci	r27, 0xFF	; 255
    22fc:	11 96       	adiw	r26, 0x01	; 1
    22fe:	3c 93       	st	X, r19
    2300:	2e 93       	st	-X, r18
    2302:	e4 55       	subi	r30, 0x54	; 84
    2304:	ff 4f       	sbci	r31, 0xFF	; 255
    2306:	31 83       	std	Z+1, r19	; 0x01
    2308:	20 83       	st	Z, r18
    230a:	15 96       	adiw	r26, 0x05	; 5
    230c:	3c 93       	st	X, r19
    230e:	2e 93       	st	-X, r18
    2310:	14 97       	sbiw	r26, 0x04	; 4

volatile int snake[30][3];

void fillSnake()
{
	for(int a=0;a<30;a++)
    2312:	01 96       	adiw	r24, 0x01	; 1
    2314:	8e 31       	cpi	r24, 0x1E	; 30
    2316:	91 05       	cpc	r25, r1
    2318:	39 f7       	brne	.-50     	; 0x22e8 <start+0x20>
{
	position[0]=0;
	position[1]=0;
	position[2]=0;
	fillSnake();
	snake[0][0] = position[0];
    231a:	80 91 60 01 	lds	r24, 0x0160
    231e:	90 91 61 01 	lds	r25, 0x0161
    2322:	90 93 ab 00 	sts	0x00AB, r25
    2326:	80 93 aa 00 	sts	0x00AA, r24
	snake[0][1] = position[1];
    232a:	80 91 62 01 	lds	r24, 0x0162
    232e:	90 91 63 01 	lds	r25, 0x0163
    2332:	90 93 ad 00 	sts	0x00AD, r25
    2336:	80 93 ac 00 	sts	0x00AC, r24
	snake[0][2] = position[2];
    233a:	80 91 64 01 	lds	r24, 0x0164
    233e:	90 91 65 01 	lds	r25, 0x0165
    2342:	90 93 af 00 	sts	0x00AF, r25
    2346:	80 93 ae 00 	sts	0x00AE, r24
	
	 *posx = position[0];
    234a:	80 91 60 01 	lds	r24, 0x0160
    234e:	90 91 61 01 	lds	r25, 0x0161
    2352:	e0 91 68 01 	lds	r30, 0x0168
    2356:	f0 91 69 01 	lds	r31, 0x0169
    235a:	91 83       	std	Z+1, r25	; 0x01
    235c:	80 83       	st	Z, r24
	 *posy = position[1];
    235e:	80 91 62 01 	lds	r24, 0x0162
    2362:	90 91 63 01 	lds	r25, 0x0163
    2366:	e0 91 7a 01 	lds	r30, 0x017A
    236a:	f0 91 7b 01 	lds	r31, 0x017B
    236e:	91 83       	std	Z+1, r25	; 0x01
    2370:	80 83       	st	Z, r24
	 *posz = position[2];
    2372:	80 91 64 01 	lds	r24, 0x0164
    2376:	90 91 65 01 	lds	r25, 0x0165
    237a:	e0 91 5e 01 	lds	r30, 0x015E
    237e:	f0 91 5f 01 	lds	r31, 0x015F
    2382:	91 83       	std	Z+1, r25	; 0x01
    2384:	80 83       	st	Z, r24
	 *fruitx = fruit[0];
    2386:	e0 91 76 01 	lds	r30, 0x0176
    238a:	f0 91 77 01 	lds	r31, 0x0177
    238e:	80 91 6a 01 	lds	r24, 0x016A
    2392:	90 91 6b 01 	lds	r25, 0x016B
    2396:	91 83       	std	Z+1, r25	; 0x01
    2398:	80 83       	st	Z, r24
	 *fruity = fruit[1];
    239a:	e0 91 78 01 	lds	r30, 0x0178
    239e:	f0 91 79 01 	lds	r31, 0x0179
    23a2:	80 91 6c 01 	lds	r24, 0x016C
    23a6:	90 91 6d 01 	lds	r25, 0x016D
    23aa:	91 83       	std	Z+1, r25	; 0x01
    23ac:	80 83       	st	Z, r24
	 *fruitz = fruit[2];
    23ae:	e0 91 66 01 	lds	r30, 0x0166
    23b2:	f0 91 67 01 	lds	r31, 0x0167
    23b6:	80 91 6e 01 	lds	r24, 0x016E
    23ba:	90 91 6f 01 	lds	r25, 0x016F
    23be:	91 83       	std	Z+1, r25	; 0x01
    23c0:	80 83       	st	Z, r24
	int x=0,y=0,z=0;
	//unsigned int iseed = (unsigned int)time(NULL);
	//srand (iseed);
	generateFruitPlace();
    23c2:	0e 94 21 11 	call	0x2242	; 0x2242 <generateFruitPlace>
	
	while(1)
	{

		fill(0x00);
    23c6:	80 e0       	ldi	r24, 0x00	; 0
    23c8:	0e 94 21 05 	call	0xa42	; 0xa42 <fill>
		//
		//setLED(position[0],position[1],position[2]);
		//displaySnake();
		check();
    23cc:	0e 94 8c 10 	call	0x2118	; 0x2118 <check>
		//setLED(fruit[0],fruit[1],fruit[2]);
		//directionHandler();
		//fruitHandler(position,fruit);
		
		delay_ms(Time);
    23d0:	84 ef       	ldi	r24, 0xF4	; 244
    23d2:	91 e0       	ldi	r25, 0x01	; 1
    23d4:	0e 94 83 00 	call	0x106	; 0x106 <delay_ms>
    23d8:	f6 cf       	rjmp	.-20     	; 0x23c6 <start+0xfe>

000023da <fruitHandler>:

	
}

void fruitHandler(int* pos, int* fruit)
{
    23da:	fb 01       	movw	r30, r22
	
	
	if((head[0] == fruit[0]) && (head[1] == fruit[1]) && (head[2] == fruit[2]))
    23dc:	20 91 70 01 	lds	r18, 0x0170
    23e0:	30 91 71 01 	lds	r19, 0x0171
    23e4:	80 81       	ld	r24, Z
    23e6:	91 81       	ldd	r25, Z+1	; 0x01
    23e8:	28 17       	cp	r18, r24
    23ea:	39 07       	cpc	r19, r25
    23ec:	c1 f4       	brne	.+48     	; 0x241e <fruitHandler+0x44>
    23ee:	20 91 72 01 	lds	r18, 0x0172
    23f2:	30 91 73 01 	lds	r19, 0x0173
    23f6:	82 81       	ldd	r24, Z+2	; 0x02
    23f8:	93 81       	ldd	r25, Z+3	; 0x03
    23fa:	28 17       	cp	r18, r24
    23fc:	39 07       	cpc	r19, r25
    23fe:	79 f4       	brne	.+30     	; 0x241e <fruitHandler+0x44>
    2400:	20 91 74 01 	lds	r18, 0x0174
    2404:	30 91 75 01 	lds	r19, 0x0175
    2408:	84 81       	ldd	r24, Z+4	; 0x04
    240a:	95 81       	ldd	r25, Z+5	; 0x05
    240c:	28 17       	cp	r18, r24
    240e:	39 07       	cpc	r19, r25
    2410:	31 f4       	brne	.+12     	; 0x241e <fruitHandler+0x44>
	{
		generateFruitPlace();
    2412:	0e 94 21 11 	call	0x2242	; 0x2242 <generateFruitPlace>
		enlarge(head);
    2416:	80 e7       	ldi	r24, 0x70	; 112
    2418:	91 e0       	ldi	r25, 0x01	; 1
    241a:	0e 94 56 10 	call	0x20ac	; 0x20ac <enlarge>
    241e:	08 95       	ret

00002420 <vfprintf>:
    2420:	ab e0       	ldi	r26, 0x0B	; 11
    2422:	b0 e0       	ldi	r27, 0x00	; 0
    2424:	e6 e1       	ldi	r30, 0x16	; 22
    2426:	f2 e1       	ldi	r31, 0x12	; 18
    2428:	0c 94 77 16 	jmp	0x2cee	; 0x2cee <__prologue_saves__+0x8>
    242c:	5c 01       	movw	r10, r24
    242e:	4b 01       	movw	r8, r22
    2430:	7a 01       	movw	r14, r20
    2432:	fc 01       	movw	r30, r24
    2434:	17 82       	std	Z+7, r1	; 0x07
    2436:	16 82       	std	Z+6, r1	; 0x06
    2438:	83 81       	ldd	r24, Z+3	; 0x03
    243a:	81 fd       	sbrc	r24, 1
    243c:	08 c0       	rjmp	.+16     	; 0x244e <vfprintf+0x2e>
    243e:	6f ef       	ldi	r22, 0xFF	; 255
    2440:	7f ef       	ldi	r23, 0xFF	; 255
    2442:	08 c1       	rjmp	.+528    	; 0x2654 <vfprintf+0x234>
    2444:	42 e0       	ldi	r20, 0x02	; 2
    2446:	50 e0       	ldi	r21, 0x00	; 0
    2448:	e4 0e       	add	r14, r20
    244a:	f5 1e       	adc	r15, r21
    244c:	04 c0       	rjmp	.+8      	; 0x2456 <vfprintf+0x36>
    244e:	3e 01       	movw	r6, r28
    2450:	08 94       	sec
    2452:	61 1c       	adc	r6, r1
    2454:	71 1c       	adc	r7, r1
    2456:	f5 01       	movw	r30, r10
    2458:	d3 80       	ldd	r13, Z+3	; 0x03
    245a:	f4 01       	movw	r30, r8
    245c:	d3 fc       	sbrc	r13, 3
    245e:	85 91       	lpm	r24, Z+
    2460:	d3 fe       	sbrs	r13, 3
    2462:	81 91       	ld	r24, Z+
    2464:	4f 01       	movw	r8, r30
    2466:	88 23       	and	r24, r24
    2468:	09 f4       	brne	.+2      	; 0x246c <vfprintf+0x4c>
    246a:	f1 c0       	rjmp	.+482    	; 0x264e <vfprintf+0x22e>
    246c:	85 32       	cpi	r24, 0x25	; 37
    246e:	59 f4       	brne	.+22     	; 0x2486 <vfprintf+0x66>
    2470:	d3 fc       	sbrc	r13, 3
    2472:	65 91       	lpm	r22, Z+
    2474:	d3 fe       	sbrs	r13, 3
    2476:	61 91       	ld	r22, Z+
    2478:	4f 01       	movw	r8, r30
    247a:	65 32       	cpi	r22, 0x25	; 37
    247c:	19 f0       	breq	.+6      	; 0x2484 <vfprintf+0x64>
    247e:	06 2f       	mov	r16, r22
    2480:	10 e0       	ldi	r17, 0x00	; 0
    2482:	1b c0       	rjmp	.+54     	; 0x24ba <vfprintf+0x9a>
    2484:	85 e2       	ldi	r24, 0x25	; 37
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	2b c0       	rjmp	.+86     	; 0x24e0 <vfprintf+0xc0>
    248a:	00 23       	and	r16, r16
    248c:	09 f4       	brne	.+2      	; 0x2490 <vfprintf+0x70>
    248e:	df c0       	rjmp	.+446    	; 0x264e <vfprintf+0x22e>
    2490:	8d ea       	ldi	r24, 0xAD	; 173
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	60 2f       	mov	r22, r16
    2496:	70 e0       	ldi	r23, 0x00	; 0
    2498:	0e 94 6f 15 	call	0x2ade	; 0x2ade <strchr_P>
    249c:	89 2b       	or	r24, r25
    249e:	39 f4       	brne	.+14     	; 0x24ae <vfprintf+0x8e>
    24a0:	03 32       	cpi	r16, 0x23	; 35
    24a2:	11 f4       	brne	.+4      	; 0x24a8 <vfprintf+0x88>
    24a4:	10 61       	ori	r17, 0x10	; 16
    24a6:	03 c0       	rjmp	.+6      	; 0x24ae <vfprintf+0x8e>
    24a8:	0c 36       	cpi	r16, 0x6C	; 108
    24aa:	61 f4       	brne	.+24     	; 0x24c4 <vfprintf+0xa4>
    24ac:	10 68       	ori	r17, 0x80	; 128
    24ae:	f4 01       	movw	r30, r8
    24b0:	d3 fc       	sbrc	r13, 3
    24b2:	05 91       	lpm	r16, Z+
    24b4:	d3 fe       	sbrs	r13, 3
    24b6:	01 91       	ld	r16, Z+
    24b8:	4f 01       	movw	r8, r30
    24ba:	17 ff       	sbrs	r17, 7
    24bc:	e6 cf       	rjmp	.-52     	; 0x248a <vfprintf+0x6a>
    24be:	00 23       	and	r16, r16
    24c0:	09 f4       	brne	.+2      	; 0x24c4 <vfprintf+0xa4>
    24c2:	c5 c0       	rjmp	.+394    	; 0x264e <vfprintf+0x22e>
    24c4:	86 ea       	ldi	r24, 0xA6	; 166
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	60 2f       	mov	r22, r16
    24ca:	70 e0       	ldi	r23, 0x00	; 0
    24cc:	0e 94 6f 15 	call	0x2ade	; 0x2ade <strchr_P>
    24d0:	89 2b       	or	r24, r25
    24d2:	51 f0       	breq	.+20     	; 0x24e8 <vfprintf+0xc8>
    24d4:	44 e0       	ldi	r20, 0x04	; 4
    24d6:	50 e0       	ldi	r21, 0x00	; 0
    24d8:	e4 0e       	add	r14, r20
    24da:	f5 1e       	adc	r15, r21
    24dc:	8f e3       	ldi	r24, 0x3F	; 63
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	b5 01       	movw	r22, r10
    24e2:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <fputc>
    24e6:	b7 cf       	rjmp	.-146    	; 0x2456 <vfprintf+0x36>
    24e8:	03 36       	cpi	r16, 0x63	; 99
    24ea:	29 f0       	breq	.+10     	; 0x24f6 <vfprintf+0xd6>
    24ec:	03 37       	cpi	r16, 0x73	; 115
    24ee:	79 f0       	breq	.+30     	; 0x250e <vfprintf+0xee>
    24f0:	03 35       	cpi	r16, 0x53	; 83
    24f2:	f1 f4       	brne	.+60     	; 0x2530 <vfprintf+0x110>
    24f4:	0b c0       	rjmp	.+22     	; 0x250c <vfprintf+0xec>
    24f6:	87 01       	movw	r16, r14
    24f8:	0e 5f       	subi	r16, 0xFE	; 254
    24fa:	1f 4f       	sbci	r17, 0xFF	; 255
    24fc:	f7 01       	movw	r30, r14
    24fe:	80 81       	ld	r24, Z
    2500:	91 81       	ldd	r25, Z+1	; 0x01
    2502:	b5 01       	movw	r22, r10
    2504:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <fputc>
    2508:	78 01       	movw	r14, r16
    250a:	a5 cf       	rjmp	.-182    	; 0x2456 <vfprintf+0x36>
    250c:	11 60       	ori	r17, 0x01	; 1
    250e:	f7 01       	movw	r30, r14
    2510:	c0 80       	ld	r12, Z
    2512:	d1 80       	ldd	r13, Z+1	; 0x01
    2514:	04 c0       	rjmp	.+8      	; 0x251e <vfprintf+0xfe>
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	b5 01       	movw	r22, r10
    251a:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <fputc>
    251e:	f6 01       	movw	r30, r12
    2520:	10 fd       	sbrc	r17, 0
    2522:	85 91       	lpm	r24, Z+
    2524:	10 ff       	sbrs	r17, 0
    2526:	81 91       	ld	r24, Z+
    2528:	6f 01       	movw	r12, r30
    252a:	88 23       	and	r24, r24
    252c:	a1 f7       	brne	.-24     	; 0x2516 <vfprintf+0xf6>
    252e:	8a cf       	rjmp	.-236    	; 0x2444 <vfprintf+0x24>
    2530:	04 36       	cpi	r16, 0x64	; 100
    2532:	11 f0       	breq	.+4      	; 0x2538 <vfprintf+0x118>
    2534:	09 36       	cpi	r16, 0x69	; 105
    2536:	39 f5       	brne	.+78     	; 0x2586 <vfprintf+0x166>
    2538:	17 ff       	sbrs	r17, 7
    253a:	08 c0       	rjmp	.+16     	; 0x254c <vfprintf+0x12c>
    253c:	f7 01       	movw	r30, r14
    253e:	20 81       	ld	r18, Z
    2540:	31 81       	ldd	r19, Z+1	; 0x01
    2542:	42 81       	ldd	r20, Z+2	; 0x02
    2544:	53 81       	ldd	r21, Z+3	; 0x03
    2546:	84 e0       	ldi	r24, 0x04	; 4
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	0a c0       	rjmp	.+20     	; 0x2560 <vfprintf+0x140>
    254c:	f7 01       	movw	r30, r14
    254e:	80 81       	ld	r24, Z
    2550:	91 81       	ldd	r25, Z+1	; 0x01
    2552:	9c 01       	movw	r18, r24
    2554:	44 27       	eor	r20, r20
    2556:	37 fd       	sbrc	r19, 7
    2558:	40 95       	com	r20
    255a:	54 2f       	mov	r21, r20
    255c:	82 e0       	ldi	r24, 0x02	; 2
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	e8 0e       	add	r14, r24
    2562:	f9 1e       	adc	r15, r25
    2564:	1f 7e       	andi	r17, 0xEF	; 239
    2566:	57 ff       	sbrs	r21, 7
    2568:	08 c0       	rjmp	.+16     	; 0x257a <vfprintf+0x15a>
    256a:	50 95       	com	r21
    256c:	40 95       	com	r20
    256e:	30 95       	com	r19
    2570:	21 95       	neg	r18
    2572:	3f 4f       	sbci	r19, 0xFF	; 255
    2574:	4f 4f       	sbci	r20, 0xFF	; 255
    2576:	5f 4f       	sbci	r21, 0xFF	; 255
    2578:	10 64       	ori	r17, 0x40	; 64
    257a:	ca 01       	movw	r24, r20
    257c:	b9 01       	movw	r22, r18
    257e:	a3 01       	movw	r20, r6
    2580:	2a e0       	ldi	r18, 0x0A	; 10
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	34 c0       	rjmp	.+104    	; 0x25ee <vfprintf+0x1ce>
    2586:	00 37       	cpi	r16, 0x70	; 112
    2588:	a9 f0       	breq	.+42     	; 0x25b4 <vfprintf+0x194>
    258a:	01 37       	cpi	r16, 0x71	; 113
    258c:	30 f4       	brcc	.+12     	; 0x259a <vfprintf+0x17a>
    258e:	08 35       	cpi	r16, 0x58	; 88
    2590:	b1 f0       	breq	.+44     	; 0x25be <vfprintf+0x19e>
    2592:	0f 36       	cpi	r16, 0x6F	; 111
    2594:	09 f0       	breq	.+2      	; 0x2598 <vfprintf+0x178>
    2596:	5b c0       	rjmp	.+182    	; 0x264e <vfprintf+0x22e>
    2598:	06 c0       	rjmp	.+12     	; 0x25a6 <vfprintf+0x186>
    259a:	05 37       	cpi	r16, 0x75	; 117
    259c:	39 f0       	breq	.+14     	; 0x25ac <vfprintf+0x18c>
    259e:	08 37       	cpi	r16, 0x78	; 120
    25a0:	09 f0       	breq	.+2      	; 0x25a4 <vfprintf+0x184>
    25a2:	55 c0       	rjmp	.+170    	; 0x264e <vfprintf+0x22e>
    25a4:	08 c0       	rjmp	.+16     	; 0x25b6 <vfprintf+0x196>
    25a6:	28 e0       	ldi	r18, 0x08	; 8
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	0c c0       	rjmp	.+24     	; 0x25c4 <vfprintf+0x1a4>
    25ac:	1f 7e       	andi	r17, 0xEF	; 239
    25ae:	2a e0       	ldi	r18, 0x0A	; 10
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	08 c0       	rjmp	.+16     	; 0x25c4 <vfprintf+0x1a4>
    25b4:	10 61       	ori	r17, 0x10	; 16
    25b6:	14 62       	ori	r17, 0x24	; 36
    25b8:	20 e1       	ldi	r18, 0x10	; 16
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	03 c0       	rjmp	.+6      	; 0x25c4 <vfprintf+0x1a4>
    25be:	14 60       	ori	r17, 0x04	; 4
    25c0:	20 e1       	ldi	r18, 0x10	; 16
    25c2:	32 e0       	ldi	r19, 0x02	; 2
    25c4:	17 ff       	sbrs	r17, 7
    25c6:	08 c0       	rjmp	.+16     	; 0x25d8 <vfprintf+0x1b8>
    25c8:	f7 01       	movw	r30, r14
    25ca:	60 81       	ld	r22, Z
    25cc:	71 81       	ldd	r23, Z+1	; 0x01
    25ce:	82 81       	ldd	r24, Z+2	; 0x02
    25d0:	93 81       	ldd	r25, Z+3	; 0x03
    25d2:	44 e0       	ldi	r20, 0x04	; 4
    25d4:	50 e0       	ldi	r21, 0x00	; 0
    25d6:	08 c0       	rjmp	.+16     	; 0x25e8 <vfprintf+0x1c8>
    25d8:	f7 01       	movw	r30, r14
    25da:	80 81       	ld	r24, Z
    25dc:	91 81       	ldd	r25, Z+1	; 0x01
    25de:	bc 01       	movw	r22, r24
    25e0:	80 e0       	ldi	r24, 0x00	; 0
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	42 e0       	ldi	r20, 0x02	; 2
    25e6:	50 e0       	ldi	r21, 0x00	; 0
    25e8:	e4 0e       	add	r14, r20
    25ea:	f5 1e       	adc	r15, r21
    25ec:	a3 01       	movw	r20, r6
    25ee:	0e 94 02 16 	call	0x2c04	; 0x2c04 <__ultoa_invert>
    25f2:	d8 2e       	mov	r13, r24
    25f4:	d6 18       	sub	r13, r6
    25f6:	01 2f       	mov	r16, r17
    25f8:	10 e0       	ldi	r17, 0x00	; 0
    25fa:	06 ff       	sbrs	r16, 6
    25fc:	05 c0       	rjmp	.+10     	; 0x2608 <vfprintf+0x1e8>
    25fe:	8d e2       	ldi	r24, 0x2D	; 45
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	b5 01       	movw	r22, r10
    2604:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <fputc>
    2608:	04 ff       	sbrs	r16, 4
    260a:	15 c0       	rjmp	.+42     	; 0x2636 <vfprintf+0x216>
    260c:	fe 01       	movw	r30, r28
    260e:	ed 0d       	add	r30, r13
    2610:	f1 1d       	adc	r31, r1
    2612:	80 81       	ld	r24, Z
    2614:	80 33       	cpi	r24, 0x30	; 48
    2616:	79 f0       	breq	.+30     	; 0x2636 <vfprintf+0x216>
    2618:	80 e3       	ldi	r24, 0x30	; 48
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	b5 01       	movw	r22, r10
    261e:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <fputc>
    2622:	02 ff       	sbrs	r16, 2
    2624:	08 c0       	rjmp	.+16     	; 0x2636 <vfprintf+0x216>
    2626:	00 72       	andi	r16, 0x20	; 32
    2628:	10 70       	andi	r17, 0x00	; 0
    262a:	c8 01       	movw	r24, r16
    262c:	88 5a       	subi	r24, 0xA8	; 168
    262e:	9f 4f       	sbci	r25, 0xFF	; 255
    2630:	b5 01       	movw	r22, r10
    2632:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <fputc>
    2636:	da 94       	dec	r13
    2638:	f3 01       	movw	r30, r6
    263a:	ed 0d       	add	r30, r13
    263c:	f1 1d       	adc	r31, r1
    263e:	80 81       	ld	r24, Z
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	b5 01       	movw	r22, r10
    2644:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <fputc>
    2648:	dd 20       	and	r13, r13
    264a:	a9 f7       	brne	.-22     	; 0x2636 <vfprintf+0x216>
    264c:	04 cf       	rjmp	.-504    	; 0x2456 <vfprintf+0x36>
    264e:	f5 01       	movw	r30, r10
    2650:	66 81       	ldd	r22, Z+6	; 0x06
    2652:	77 81       	ldd	r23, Z+7	; 0x07
    2654:	cb 01       	movw	r24, r22
    2656:	2b 96       	adiw	r28, 0x0b	; 11
    2658:	ee e0       	ldi	r30, 0x0E	; 14
    265a:	0c 94 93 16 	jmp	0x2d26	; 0x2d26 <__epilogue_restores__+0x8>

0000265e <putval>:
    265e:	fc 01       	movw	r30, r24
    2660:	20 fd       	sbrc	r18, 0
    2662:	08 c0       	rjmp	.+16     	; 0x2674 <putval+0x16>
    2664:	23 fd       	sbrc	r18, 3
    2666:	05 c0       	rjmp	.+10     	; 0x2672 <putval+0x14>
    2668:	22 ff       	sbrs	r18, 2
    266a:	02 c0       	rjmp	.+4      	; 0x2670 <putval+0x12>
    266c:	73 83       	std	Z+3, r23	; 0x03
    266e:	62 83       	std	Z+2, r22	; 0x02
    2670:	51 83       	std	Z+1, r21	; 0x01
    2672:	40 83       	st	Z, r20
    2674:	08 95       	ret

00002676 <mulacc>:
    2676:	ef 92       	push	r14
    2678:	ff 92       	push	r15
    267a:	0f 93       	push	r16
    267c:	1f 93       	push	r17
    267e:	44 ff       	sbrs	r20, 4
    2680:	02 c0       	rjmp	.+4      	; 0x2686 <mulacc+0x10>
    2682:	33 e0       	ldi	r19, 0x03	; 3
    2684:	11 c0       	rjmp	.+34     	; 0x26a8 <mulacc+0x32>
    2686:	46 ff       	sbrs	r20, 6
    2688:	02 c0       	rjmp	.+4      	; 0x268e <mulacc+0x18>
    268a:	34 e0       	ldi	r19, 0x04	; 4
    268c:	0d c0       	rjmp	.+26     	; 0x26a8 <mulacc+0x32>
    268e:	db 01       	movw	r26, r22
    2690:	fc 01       	movw	r30, r24
    2692:	aa 0f       	add	r26, r26
    2694:	bb 1f       	adc	r27, r27
    2696:	ee 1f       	adc	r30, r30
    2698:	ff 1f       	adc	r31, r31
    269a:	10 94       	com	r1
    269c:	d1 f7       	brne	.-12     	; 0x2692 <mulacc+0x1c>
    269e:	6a 0f       	add	r22, r26
    26a0:	7b 1f       	adc	r23, r27
    26a2:	8e 1f       	adc	r24, r30
    26a4:	9f 1f       	adc	r25, r31
    26a6:	31 e0       	ldi	r19, 0x01	; 1
    26a8:	66 0f       	add	r22, r22
    26aa:	77 1f       	adc	r23, r23
    26ac:	88 1f       	adc	r24, r24
    26ae:	99 1f       	adc	r25, r25
    26b0:	31 50       	subi	r19, 0x01	; 1
    26b2:	d1 f7       	brne	.-12     	; 0x26a8 <mulacc+0x32>
    26b4:	7b 01       	movw	r14, r22
    26b6:	8c 01       	movw	r16, r24
    26b8:	e2 0e       	add	r14, r18
    26ba:	f1 1c       	adc	r15, r1
    26bc:	01 1d       	adc	r16, r1
    26be:	11 1d       	adc	r17, r1
    26c0:	a8 01       	movw	r20, r16
    26c2:	97 01       	movw	r18, r14
    26c4:	b7 01       	movw	r22, r14
    26c6:	ca 01       	movw	r24, r20
    26c8:	1f 91       	pop	r17
    26ca:	0f 91       	pop	r16
    26cc:	ff 90       	pop	r15
    26ce:	ef 90       	pop	r14
    26d0:	08 95       	ret

000026d2 <skip_spaces>:
    26d2:	0f 93       	push	r16
    26d4:	1f 93       	push	r17
    26d6:	cf 93       	push	r28
    26d8:	df 93       	push	r29
    26da:	8c 01       	movw	r16, r24
    26dc:	c8 01       	movw	r24, r16
    26de:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <fgetc>
    26e2:	ec 01       	movw	r28, r24
    26e4:	97 fd       	sbrc	r25, 7
    26e6:	08 c0       	rjmp	.+16     	; 0x26f8 <skip_spaces+0x26>
    26e8:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <isspace>
    26ec:	89 2b       	or	r24, r25
    26ee:	b1 f7       	brne	.-20     	; 0x26dc <skip_spaces+0xa>
    26f0:	ce 01       	movw	r24, r28
    26f2:	b8 01       	movw	r22, r16
    26f4:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <ungetc>
    26f8:	ce 01       	movw	r24, r28
    26fa:	df 91       	pop	r29
    26fc:	cf 91       	pop	r28
    26fe:	1f 91       	pop	r17
    2700:	0f 91       	pop	r16
    2702:	08 95       	ret

00002704 <conv_int>:
    2704:	a0 e0       	ldi	r26, 0x00	; 0
    2706:	b0 e0       	ldi	r27, 0x00	; 0
    2708:	e8 e8       	ldi	r30, 0x88	; 136
    270a:	f3 e1       	ldi	r31, 0x13	; 19
    270c:	0c 94 7b 16 	jmp	0x2cf6	; 0x2cf6 <__prologue_saves__+0x10>
    2710:	ec 01       	movw	r28, r24
    2712:	c6 2e       	mov	r12, r22
    2714:	5a 01       	movw	r10, r20
    2716:	12 2f       	mov	r17, r18
    2718:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <fgetc>
    271c:	ac 01       	movw	r20, r24
    271e:	8b 32       	cpi	r24, 0x2B	; 43
    2720:	19 f0       	breq	.+6      	; 0x2728 <conv_int+0x24>
    2722:	8d 32       	cpi	r24, 0x2D	; 45
    2724:	51 f4       	brne	.+20     	; 0x273a <conv_int+0x36>
    2726:	10 68       	ori	r17, 0x80	; 128
    2728:	ca 94       	dec	r12
    272a:	09 f4       	brne	.+2      	; 0x272e <conv_int+0x2a>
    272c:	6d c0       	rjmp	.+218    	; 0x2808 <conv_int+0x104>
    272e:	ce 01       	movw	r24, r28
    2730:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <fgetc>
    2734:	ac 01       	movw	r20, r24
    2736:	97 fd       	sbrc	r25, 7
    2738:	67 c0       	rjmp	.+206    	; 0x2808 <conv_int+0x104>
    273a:	6d ef       	ldi	r22, 0xFD	; 253
    273c:	d6 2e       	mov	r13, r22
    273e:	d1 22       	and	r13, r17
    2740:	8d 2d       	mov	r24, r13
    2742:	80 73       	andi	r24, 0x30	; 48
    2744:	01 f5       	brne	.+64     	; 0x2786 <conv_int+0x82>
    2746:	40 33       	cpi	r20, 0x30	; 48
    2748:	f1 f4       	brne	.+60     	; 0x2786 <conv_int+0x82>
    274a:	ca 94       	dec	r12
    274c:	09 f4       	brne	.+2      	; 0x2750 <conv_int+0x4c>
    274e:	47 c0       	rjmp	.+142    	; 0x27de <conv_int+0xda>
    2750:	ce 01       	movw	r24, r28
    2752:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <fgetc>
    2756:	ac 01       	movw	r20, r24
    2758:	97 fd       	sbrc	r25, 7
    275a:	41 c0       	rjmp	.+130    	; 0x27de <conv_int+0xda>
    275c:	82 e0       	ldi	r24, 0x02	; 2
    275e:	d8 2a       	or	r13, r24
    2760:	48 37       	cpi	r20, 0x78	; 120
    2762:	11 f0       	breq	.+4      	; 0x2768 <conv_int+0x64>
    2764:	48 35       	cpi	r20, 0x58	; 88
    2766:	59 f4       	brne	.+22     	; 0x277e <conv_int+0x7a>
    2768:	80 e4       	ldi	r24, 0x40	; 64
    276a:	d8 2a       	or	r13, r24
    276c:	ca 94       	dec	r12
    276e:	b9 f1       	breq	.+110    	; 0x27de <conv_int+0xda>
    2770:	ce 01       	movw	r24, r28
    2772:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <fgetc>
    2776:	ac 01       	movw	r20, r24
    2778:	99 23       	and	r25, r25
    277a:	2c f4       	brge	.+10     	; 0x2786 <conv_int+0x82>
    277c:	30 c0       	rjmp	.+96     	; 0x27de <conv_int+0xda>
    277e:	d6 fc       	sbrc	r13, 6
    2780:	02 c0       	rjmp	.+4      	; 0x2786 <conv_int+0x82>
    2782:	80 e1       	ldi	r24, 0x10	; 16
    2784:	d8 2a       	or	r13, r24
    2786:	ee 24       	eor	r14, r14
    2788:	ff 24       	eor	r15, r15
    278a:	87 01       	movw	r16, r14
    278c:	24 2f       	mov	r18, r20
    278e:	20 53       	subi	r18, 0x30	; 48
    2790:	28 30       	cpi	r18, 0x08	; 8
    2792:	88 f0       	brcs	.+34     	; 0x27b6 <conv_int+0xb2>
    2794:	d4 fc       	sbrc	r13, 4
    2796:	09 c0       	rjmp	.+18     	; 0x27aa <conv_int+0xa6>
    2798:	2a 30       	cpi	r18, 0x0A	; 10
    279a:	68 f0       	brcs	.+26     	; 0x27b6 <conv_int+0xb2>
    279c:	d6 fe       	sbrs	r13, 6
    279e:	05 c0       	rjmp	.+10     	; 0x27aa <conv_int+0xa6>
    27a0:	2f 7d       	andi	r18, 0xDF	; 223
    27a2:	82 2f       	mov	r24, r18
    27a4:	81 51       	subi	r24, 0x11	; 17
    27a6:	86 30       	cpi	r24, 0x06	; 6
    27a8:	28 f0       	brcs	.+10     	; 0x27b4 <conv_int+0xb0>
    27aa:	ca 01       	movw	r24, r20
    27ac:	be 01       	movw	r22, r28
    27ae:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <ungetc>
    27b2:	12 c0       	rjmp	.+36     	; 0x27d8 <conv_int+0xd4>
    27b4:	27 50       	subi	r18, 0x07	; 7
    27b6:	c8 01       	movw	r24, r16
    27b8:	b7 01       	movw	r22, r14
    27ba:	4d 2d       	mov	r20, r13
    27bc:	0e 94 3b 13 	call	0x2676	; 0x2676 <mulacc>
    27c0:	7b 01       	movw	r14, r22
    27c2:	8c 01       	movw	r16, r24
    27c4:	82 e0       	ldi	r24, 0x02	; 2
    27c6:	d8 2a       	or	r13, r24
    27c8:	ca 94       	dec	r12
    27ca:	61 f0       	breq	.+24     	; 0x27e4 <conv_int+0xe0>
    27cc:	ce 01       	movw	r24, r28
    27ce:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <fgetc>
    27d2:	ac 01       	movw	r20, r24
    27d4:	97 ff       	sbrs	r25, 7
    27d6:	da cf       	rjmp	.-76     	; 0x278c <conv_int+0x88>
    27d8:	d1 fc       	sbrc	r13, 1
    27da:	04 c0       	rjmp	.+8      	; 0x27e4 <conv_int+0xe0>
    27dc:	15 c0       	rjmp	.+42     	; 0x2808 <conv_int+0x104>
    27de:	ee 24       	eor	r14, r14
    27e0:	ff 24       	eor	r15, r15
    27e2:	87 01       	movw	r16, r14
    27e4:	d7 fe       	sbrs	r13, 7
    27e6:	08 c0       	rjmp	.+16     	; 0x27f8 <conv_int+0xf4>
    27e8:	10 95       	com	r17
    27ea:	00 95       	com	r16
    27ec:	f0 94       	com	r15
    27ee:	e0 94       	com	r14
    27f0:	e1 1c       	adc	r14, r1
    27f2:	f1 1c       	adc	r15, r1
    27f4:	01 1d       	adc	r16, r1
    27f6:	11 1d       	adc	r17, r1
    27f8:	c5 01       	movw	r24, r10
    27fa:	b8 01       	movw	r22, r16
    27fc:	a7 01       	movw	r20, r14
    27fe:	2d 2d       	mov	r18, r13
    2800:	0e 94 2f 13 	call	0x265e	; 0x265e <putval>
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	01 c0       	rjmp	.+2      	; 0x280a <conv_int+0x106>
    2808:	80 e0       	ldi	r24, 0x00	; 0
    280a:	cd b7       	in	r28, 0x3d	; 61
    280c:	de b7       	in	r29, 0x3e	; 62
    280e:	ea e0       	ldi	r30, 0x0A	; 10
    2810:	0c 94 97 16 	jmp	0x2d2e	; 0x2d2e <__epilogue_restores__+0x10>

00002814 <vfscanf>:
    2814:	a0 e0       	ldi	r26, 0x00	; 0
    2816:	b0 e0       	ldi	r27, 0x00	; 0
    2818:	e0 e1       	ldi	r30, 0x10	; 16
    281a:	f4 e1       	ldi	r31, 0x14	; 20
    281c:	0c 94 77 16 	jmp	0x2cee	; 0x2cee <__prologue_saves__+0x8>
    2820:	5c 01       	movw	r10, r24
    2822:	6b 01       	movw	r12, r22
    2824:	3a 01       	movw	r6, r20
    2826:	fc 01       	movw	r30, r24
    2828:	17 82       	std	Z+7, r1	; 0x07
    282a:	16 82       	std	Z+6, r1	; 0x06
    282c:	88 24       	eor	r8, r8
    282e:	dd c0       	rjmp	.+442    	; 0x29ea <vfscanf+0x1d6>
    2830:	81 2f       	mov	r24, r17
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <isspace>
    2838:	89 2b       	or	r24, r25
    283a:	21 f0       	breq	.+8      	; 0x2844 <vfscanf+0x30>
    283c:	c5 01       	movw	r24, r10
    283e:	0e 94 69 13 	call	0x26d2	; 0x26d2 <skip_spaces>
    2842:	d3 c0       	rjmp	.+422    	; 0x29ea <vfscanf+0x1d6>
    2844:	15 32       	cpi	r17, 0x25	; 37
    2846:	49 f4       	brne	.+18     	; 0x285a <vfscanf+0x46>
    2848:	f6 01       	movw	r30, r12
    284a:	f3 fc       	sbrc	r15, 3
    284c:	65 91       	lpm	r22, Z+
    284e:	f3 fe       	sbrs	r15, 3
    2850:	61 91       	ld	r22, Z+
    2852:	6f 01       	movw	r12, r30
    2854:	65 32       	cpi	r22, 0x25	; 37
    2856:	69 f4       	brne	.+26     	; 0x2872 <vfscanf+0x5e>
    2858:	15 e2       	ldi	r17, 0x25	; 37
    285a:	c5 01       	movw	r24, r10
    285c:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <fgetc>
    2860:	97 fd       	sbrc	r25, 7
    2862:	cf c0       	rjmp	.+414    	; 0x2a02 <vfscanf+0x1ee>
    2864:	18 17       	cp	r17, r24
    2866:	09 f4       	brne	.+2      	; 0x286a <vfscanf+0x56>
    2868:	c0 c0       	rjmp	.+384    	; 0x29ea <vfscanf+0x1d6>
    286a:	b5 01       	movw	r22, r10
    286c:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <ungetc>
    2870:	cd c0       	rjmp	.+410    	; 0x2a0c <vfscanf+0x1f8>
    2872:	6a 32       	cpi	r22, 0x2A	; 42
    2874:	19 f0       	breq	.+6      	; 0x287c <vfscanf+0x68>
    2876:	16 2f       	mov	r17, r22
    2878:	00 e0       	ldi	r16, 0x00	; 0
    287a:	06 c0       	rjmp	.+12     	; 0x2888 <vfscanf+0x74>
    287c:	f3 fc       	sbrc	r15, 3
    287e:	15 91       	lpm	r17, Z+
    2880:	f3 fe       	sbrs	r15, 3
    2882:	11 91       	ld	r17, Z+
    2884:	6f 01       	movw	r12, r30
    2886:	01 e0       	ldi	r16, 0x01	; 1
    2888:	99 24       	eor	r9, r9
    288a:	0f c0       	rjmp	.+30     	; 0x28aa <vfscanf+0x96>
    288c:	02 60       	ori	r16, 0x02	; 2
    288e:	69 2d       	mov	r22, r9
    2890:	70 e0       	ldi	r23, 0x00	; 0
    2892:	80 e0       	ldi	r24, 0x00	; 0
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	40 e2       	ldi	r20, 0x20	; 32
    2898:	0e 94 3b 13 	call	0x2676	; 0x2676 <mulacc>
    289c:	96 2e       	mov	r9, r22
    289e:	f6 01       	movw	r30, r12
    28a0:	f3 fc       	sbrc	r15, 3
    28a2:	15 91       	lpm	r17, Z+
    28a4:	f3 fe       	sbrs	r15, 3
    28a6:	11 91       	ld	r17, Z+
    28a8:	6f 01       	movw	r12, r30
    28aa:	21 2f       	mov	r18, r17
    28ac:	20 53       	subi	r18, 0x30	; 48
    28ae:	2a 30       	cpi	r18, 0x0A	; 10
    28b0:	68 f3       	brcs	.-38     	; 0x288c <vfscanf+0x78>
    28b2:	01 fd       	sbrc	r16, 1
    28b4:	03 c0       	rjmp	.+6      	; 0x28bc <vfscanf+0xa8>
    28b6:	99 24       	eor	r9, r9
    28b8:	9a 94       	dec	r9
    28ba:	03 c0       	rjmp	.+6      	; 0x28c2 <vfscanf+0xae>
    28bc:	99 20       	and	r9, r9
    28be:	09 f4       	brne	.+2      	; 0x28c2 <vfscanf+0xae>
    28c0:	a5 c0       	rjmp	.+330    	; 0x2a0c <vfscanf+0x1f8>
    28c2:	18 36       	cpi	r17, 0x68	; 104
    28c4:	21 f0       	breq	.+8      	; 0x28ce <vfscanf+0xba>
    28c6:	1c 36       	cpi	r17, 0x6C	; 108
    28c8:	99 f4       	brne	.+38     	; 0x28f0 <vfscanf+0xdc>
    28ca:	f6 01       	movw	r30, r12
    28cc:	0b c0       	rjmp	.+22     	; 0x28e4 <vfscanf+0xd0>
    28ce:	f6 01       	movw	r30, r12
    28d0:	f3 fc       	sbrc	r15, 3
    28d2:	65 91       	lpm	r22, Z+
    28d4:	f3 fe       	sbrs	r15, 3
    28d6:	61 91       	ld	r22, Z+
    28d8:	68 36       	cpi	r22, 0x68	; 104
    28da:	19 f0       	breq	.+6      	; 0x28e2 <vfscanf+0xce>
    28dc:	6f 01       	movw	r12, r30
    28de:	16 2f       	mov	r17, r22
    28e0:	07 c0       	rjmp	.+14     	; 0x28f0 <vfscanf+0xdc>
    28e2:	08 60       	ori	r16, 0x08	; 8
    28e4:	04 60       	ori	r16, 0x04	; 4
    28e6:	f3 fc       	sbrc	r15, 3
    28e8:	15 91       	lpm	r17, Z+
    28ea:	f3 fe       	sbrs	r15, 3
    28ec:	11 91       	ld	r17, Z+
    28ee:	6f 01       	movw	r12, r30
    28f0:	11 23       	and	r17, r17
    28f2:	09 f4       	brne	.+2      	; 0x28f6 <vfscanf+0xe2>
    28f4:	8b c0       	rjmp	.+278    	; 0x2a0c <vfscanf+0x1f8>
    28f6:	8d eb       	ldi	r24, 0xBD	; 189
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	61 2f       	mov	r22, r17
    28fc:	70 e0       	ldi	r23, 0x00	; 0
    28fe:	0e 94 6f 15 	call	0x2ade	; 0x2ade <strchr_P>
    2902:	89 2b       	or	r24, r25
    2904:	09 f4       	brne	.+2      	; 0x2908 <vfscanf+0xf4>
    2906:	82 c0       	rjmp	.+260    	; 0x2a0c <vfscanf+0x1f8>
    2908:	80 2f       	mov	r24, r16
    290a:	00 ff       	sbrs	r16, 0
    290c:	03 c0       	rjmp	.+6      	; 0x2914 <vfscanf+0x100>
    290e:	ee 24       	eor	r14, r14
    2910:	ff 24       	eor	r15, r15
    2912:	07 c0       	rjmp	.+14     	; 0x2922 <vfscanf+0x10e>
    2914:	f3 01       	movw	r30, r6
    2916:	e0 80       	ld	r14, Z
    2918:	f1 80       	ldd	r15, Z+1	; 0x01
    291a:	22 e0       	ldi	r18, 0x02	; 2
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	62 0e       	add	r6, r18
    2920:	73 1e       	adc	r7, r19
    2922:	1e 36       	cpi	r17, 0x6E	; 110
    2924:	51 f4       	brne	.+20     	; 0x293a <vfscanf+0x126>
    2926:	f5 01       	movw	r30, r10
    2928:	46 81       	ldd	r20, Z+6	; 0x06
    292a:	57 81       	ldd	r21, Z+7	; 0x07
    292c:	60 e0       	ldi	r22, 0x00	; 0
    292e:	70 e0       	ldi	r23, 0x00	; 0
    2930:	c7 01       	movw	r24, r14
    2932:	20 2f       	mov	r18, r16
    2934:	0e 94 2f 13 	call	0x265e	; 0x265e <putval>
    2938:	58 c0       	rjmp	.+176    	; 0x29ea <vfscanf+0x1d6>
    293a:	13 36       	cpi	r17, 0x63	; 99
    293c:	91 f4       	brne	.+36     	; 0x2962 <vfscanf+0x14e>
    293e:	81 fd       	sbrc	r24, 1
    2940:	02 c0       	rjmp	.+4      	; 0x2946 <vfscanf+0x132>
    2942:	99 24       	eor	r9, r9
    2944:	93 94       	inc	r9
    2946:	c5 01       	movw	r24, r10
    2948:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <fgetc>
    294c:	97 fd       	sbrc	r25, 7
    294e:	59 c0       	rjmp	.+178    	; 0x2a02 <vfscanf+0x1ee>
    2950:	e1 14       	cp	r14, r1
    2952:	f1 04       	cpc	r15, r1
    2954:	19 f0       	breq	.+6      	; 0x295c <vfscanf+0x148>
    2956:	f7 01       	movw	r30, r14
    2958:	81 93       	st	Z+, r24
    295a:	7f 01       	movw	r14, r30
    295c:	9a 94       	dec	r9
    295e:	99 f7       	brne	.-26     	; 0x2946 <vfscanf+0x132>
    2960:	42 c0       	rjmp	.+132    	; 0x29e6 <vfscanf+0x1d2>
    2962:	c5 01       	movw	r24, r10
    2964:	0e 94 69 13 	call	0x26d2	; 0x26d2 <skip_spaces>
    2968:	97 fd       	sbrc	r25, 7
    296a:	4b c0       	rjmp	.+150    	; 0x2a02 <vfscanf+0x1ee>
    296c:	1f 36       	cpi	r17, 0x6F	; 111
    296e:	59 f1       	breq	.+86     	; 0x29c6 <vfscanf+0x1b2>
    2970:	10 37       	cpi	r17, 0x70	; 112
    2972:	28 f4       	brcc	.+10     	; 0x297e <vfscanf+0x16a>
    2974:	14 36       	cpi	r17, 0x64	; 100
    2976:	29 f1       	breq	.+74     	; 0x29c2 <vfscanf+0x1ae>
    2978:	19 36       	cpi	r17, 0x69	; 105
    297a:	39 f5       	brne	.+78     	; 0x29ca <vfscanf+0x1b6>
    297c:	27 c0       	rjmp	.+78     	; 0x29cc <vfscanf+0x1b8>
    297e:	13 37       	cpi	r17, 0x73	; 115
    2980:	19 f0       	breq	.+6      	; 0x2988 <vfscanf+0x174>
    2982:	15 37       	cpi	r17, 0x75	; 117
    2984:	11 f5       	brne	.+68     	; 0x29ca <vfscanf+0x1b6>
    2986:	1d c0       	rjmp	.+58     	; 0x29c2 <vfscanf+0x1ae>
    2988:	c5 01       	movw	r24, r10
    298a:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <fgetc>
    298e:	ec 01       	movw	r28, r24
    2990:	97 fd       	sbrc	r25, 7
    2992:	11 c0       	rjmp	.+34     	; 0x29b6 <vfscanf+0x1a2>
    2994:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <isspace>
    2998:	89 2b       	or	r24, r25
    299a:	29 f0       	breq	.+10     	; 0x29a6 <vfscanf+0x192>
    299c:	ce 01       	movw	r24, r28
    299e:	b5 01       	movw	r22, r10
    29a0:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <ungetc>
    29a4:	08 c0       	rjmp	.+16     	; 0x29b6 <vfscanf+0x1a2>
    29a6:	e1 14       	cp	r14, r1
    29a8:	f1 04       	cpc	r15, r1
    29aa:	19 f0       	breq	.+6      	; 0x29b2 <vfscanf+0x19e>
    29ac:	f7 01       	movw	r30, r14
    29ae:	c1 93       	st	Z+, r28
    29b0:	7f 01       	movw	r14, r30
    29b2:	9a 94       	dec	r9
    29b4:	49 f7       	brne	.-46     	; 0x2988 <vfscanf+0x174>
    29b6:	e1 14       	cp	r14, r1
    29b8:	f1 04       	cpc	r15, r1
    29ba:	a9 f0       	breq	.+42     	; 0x29e6 <vfscanf+0x1d2>
    29bc:	f7 01       	movw	r30, r14
    29be:	10 82       	st	Z, r1
    29c0:	12 c0       	rjmp	.+36     	; 0x29e6 <vfscanf+0x1d2>
    29c2:	00 62       	ori	r16, 0x20	; 32
    29c4:	03 c0       	rjmp	.+6      	; 0x29cc <vfscanf+0x1b8>
    29c6:	00 61       	ori	r16, 0x10	; 16
    29c8:	01 c0       	rjmp	.+2      	; 0x29cc <vfscanf+0x1b8>
    29ca:	00 64       	ori	r16, 0x40	; 64
    29cc:	c5 01       	movw	r24, r10
    29ce:	69 2d       	mov	r22, r9
    29d0:	a7 01       	movw	r20, r14
    29d2:	20 2f       	mov	r18, r16
    29d4:	0e 94 82 13 	call	0x2704	; 0x2704 <conv_int>
    29d8:	88 23       	and	r24, r24
    29da:	29 f4       	brne	.+10     	; 0x29e6 <vfscanf+0x1d2>
    29dc:	f5 01       	movw	r30, r10
    29de:	83 81       	ldd	r24, Z+3	; 0x03
    29e0:	80 73       	andi	r24, 0x30	; 48
    29e2:	79 f4       	brne	.+30     	; 0x2a02 <vfscanf+0x1ee>
    29e4:	13 c0       	rjmp	.+38     	; 0x2a0c <vfscanf+0x1f8>
    29e6:	00 ff       	sbrs	r16, 0
    29e8:	83 94       	inc	r8
    29ea:	f5 01       	movw	r30, r10
    29ec:	f3 80       	ldd	r15, Z+3	; 0x03
    29ee:	f6 01       	movw	r30, r12
    29f0:	f3 fc       	sbrc	r15, 3
    29f2:	15 91       	lpm	r17, Z+
    29f4:	f3 fe       	sbrs	r15, 3
    29f6:	11 91       	ld	r17, Z+
    29f8:	6f 01       	movw	r12, r30
    29fa:	11 23       	and	r17, r17
    29fc:	09 f0       	breq	.+2      	; 0x2a00 <vfscanf+0x1ec>
    29fe:	18 cf       	rjmp	.-464    	; 0x2830 <vfscanf+0x1c>
    2a00:	05 c0       	rjmp	.+10     	; 0x2a0c <vfscanf+0x1f8>
    2a02:	88 20       	and	r8, r8
    2a04:	19 f4       	brne	.+6      	; 0x2a0c <vfscanf+0x1f8>
    2a06:	2f ef       	ldi	r18, 0xFF	; 255
    2a08:	3f ef       	ldi	r19, 0xFF	; 255
    2a0a:	02 c0       	rjmp	.+4      	; 0x2a10 <vfscanf+0x1fc>
    2a0c:	28 2d       	mov	r18, r8
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	c9 01       	movw	r24, r18
    2a12:	cd b7       	in	r28, 0x3d	; 61
    2a14:	de b7       	in	r29, 0x3e	; 62
    2a16:	ee e0       	ldi	r30, 0x0E	; 14
    2a18:	0c 94 93 16 	jmp	0x2d26	; 0x2d26 <__epilogue_restores__+0x8>

00002a1c <do_rand>:
    2a1c:	a0 e0       	ldi	r26, 0x00	; 0
    2a1e:	b0 e0       	ldi	r27, 0x00	; 0
    2a20:	e4 e1       	ldi	r30, 0x14	; 20
    2a22:	f5 e1       	ldi	r31, 0x15	; 21
    2a24:	0c 94 7b 16 	jmp	0x2cf6	; 0x2cf6 <__prologue_saves__+0x10>
    2a28:	ec 01       	movw	r28, r24
    2a2a:	a8 80       	ld	r10, Y
    2a2c:	b9 80       	ldd	r11, Y+1	; 0x01
    2a2e:	ca 80       	ldd	r12, Y+2	; 0x02
    2a30:	db 80       	ldd	r13, Y+3	; 0x03
    2a32:	a1 14       	cp	r10, r1
    2a34:	b1 04       	cpc	r11, r1
    2a36:	c1 04       	cpc	r12, r1
    2a38:	d1 04       	cpc	r13, r1
    2a3a:	41 f4       	brne	.+16     	; 0x2a4c <do_rand+0x30>
    2a3c:	84 e2       	ldi	r24, 0x24	; 36
    2a3e:	a8 2e       	mov	r10, r24
    2a40:	89 ed       	ldi	r24, 0xD9	; 217
    2a42:	b8 2e       	mov	r11, r24
    2a44:	8b e5       	ldi	r24, 0x5B	; 91
    2a46:	c8 2e       	mov	r12, r24
    2a48:	87 e0       	ldi	r24, 0x07	; 7
    2a4a:	d8 2e       	mov	r13, r24
    2a4c:	c6 01       	movw	r24, r12
    2a4e:	b5 01       	movw	r22, r10
    2a50:	2d e1       	ldi	r18, 0x1D	; 29
    2a52:	33 ef       	ldi	r19, 0xF3	; 243
    2a54:	41 e0       	ldi	r20, 0x01	; 1
    2a56:	50 e0       	ldi	r21, 0x00	; 0
    2a58:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <__divmodsi4>
    2a5c:	27 ea       	ldi	r18, 0xA7	; 167
    2a5e:	31 e4       	ldi	r19, 0x41	; 65
    2a60:	40 e0       	ldi	r20, 0x00	; 0
    2a62:	50 e0       	ldi	r21, 0x00	; 0
    2a64:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__mulsi3>
    2a68:	7b 01       	movw	r14, r22
    2a6a:	8c 01       	movw	r16, r24
    2a6c:	c6 01       	movw	r24, r12
    2a6e:	b5 01       	movw	r22, r10
    2a70:	2d e1       	ldi	r18, 0x1D	; 29
    2a72:	33 ef       	ldi	r19, 0xF3	; 243
    2a74:	41 e0       	ldi	r20, 0x01	; 1
    2a76:	50 e0       	ldi	r21, 0x00	; 0
    2a78:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <__divmodsi4>
    2a7c:	ca 01       	movw	r24, r20
    2a7e:	b9 01       	movw	r22, r18
    2a80:	2c ee       	ldi	r18, 0xEC	; 236
    2a82:	34 ef       	ldi	r19, 0xF4	; 244
    2a84:	4f ef       	ldi	r20, 0xFF	; 255
    2a86:	5f ef       	ldi	r21, 0xFF	; 255
    2a88:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__mulsi3>
    2a8c:	6e 0d       	add	r22, r14
    2a8e:	7f 1d       	adc	r23, r15
    2a90:	80 1f       	adc	r24, r16
    2a92:	91 1f       	adc	r25, r17
    2a94:	97 ff       	sbrs	r25, 7
    2a96:	04 c0       	rjmp	.+8      	; 0x2aa0 <do_rand+0x84>
    2a98:	61 50       	subi	r22, 0x01	; 1
    2a9a:	70 40       	sbci	r23, 0x00	; 0
    2a9c:	80 40       	sbci	r24, 0x00	; 0
    2a9e:	90 48       	sbci	r25, 0x80	; 128
    2aa0:	68 83       	st	Y, r22
    2aa2:	79 83       	std	Y+1, r23	; 0x01
    2aa4:	8a 83       	std	Y+2, r24	; 0x02
    2aa6:	9b 83       	std	Y+3, r25	; 0x03
    2aa8:	9b 01       	movw	r18, r22
    2aaa:	3f 77       	andi	r19, 0x7F	; 127
    2aac:	c9 01       	movw	r24, r18
    2aae:	cd b7       	in	r28, 0x3d	; 61
    2ab0:	de b7       	in	r29, 0x3e	; 62
    2ab2:	ea e0       	ldi	r30, 0x0A	; 10
    2ab4:	0c 94 97 16 	jmp	0x2d2e	; 0x2d2e <__epilogue_restores__+0x10>

00002ab8 <rand_r>:
    2ab8:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <do_rand>
    2abc:	08 95       	ret

00002abe <rand>:
    2abe:	80 e6       	ldi	r24, 0x60	; 96
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <do_rand>
    2ac6:	08 95       	ret

00002ac8 <srand>:
    2ac8:	a0 e0       	ldi	r26, 0x00	; 0
    2aca:	b0 e0       	ldi	r27, 0x00	; 0
    2acc:	80 93 60 00 	sts	0x0060, r24
    2ad0:	90 93 61 00 	sts	0x0061, r25
    2ad4:	a0 93 62 00 	sts	0x0062, r26
    2ad8:	b0 93 63 00 	sts	0x0063, r27
    2adc:	08 95       	ret

00002ade <strchr_P>:
    2ade:	fc 01       	movw	r30, r24
    2ae0:	05 90       	lpm	r0, Z+
    2ae2:	06 16       	cp	r0, r22
    2ae4:	21 f0       	breq	.+8      	; 0x2aee <strchr_P+0x10>
    2ae6:	00 20       	and	r0, r0
    2ae8:	d9 f7       	brne	.-10     	; 0x2ae0 <strchr_P+0x2>
    2aea:	c0 01       	movw	r24, r0
    2aec:	08 95       	ret
    2aee:	31 97       	sbiw	r30, 0x01	; 1
    2af0:	cf 01       	movw	r24, r30
    2af2:	08 95       	ret

00002af4 <fgetc>:
    2af4:	cf 93       	push	r28
    2af6:	df 93       	push	r29
    2af8:	ec 01       	movw	r28, r24
    2afa:	4b 81       	ldd	r20, Y+3	; 0x03
    2afc:	40 ff       	sbrs	r20, 0
    2afe:	1a c0       	rjmp	.+52     	; 0x2b34 <fgetc+0x40>
    2b00:	46 ff       	sbrs	r20, 6
    2b02:	0a c0       	rjmp	.+20     	; 0x2b18 <fgetc+0x24>
    2b04:	4f 7b       	andi	r20, 0xBF	; 191
    2b06:	4b 83       	std	Y+3, r20	; 0x03
    2b08:	8e 81       	ldd	r24, Y+6	; 0x06
    2b0a:	9f 81       	ldd	r25, Y+7	; 0x07
    2b0c:	01 96       	adiw	r24, 0x01	; 1
    2b0e:	9f 83       	std	Y+7, r25	; 0x07
    2b10:	8e 83       	std	Y+6, r24	; 0x06
    2b12:	8a 81       	ldd	r24, Y+2	; 0x02
    2b14:	28 2f       	mov	r18, r24
    2b16:	2b c0       	rjmp	.+86     	; 0x2b6e <fgetc+0x7a>
    2b18:	42 ff       	sbrs	r20, 2
    2b1a:	13 c0       	rjmp	.+38     	; 0x2b42 <fgetc+0x4e>
    2b1c:	e8 81       	ld	r30, Y
    2b1e:	f9 81       	ldd	r31, Y+1	; 0x01
    2b20:	80 81       	ld	r24, Z
    2b22:	28 2f       	mov	r18, r24
    2b24:	33 27       	eor	r19, r19
    2b26:	27 fd       	sbrc	r18, 7
    2b28:	30 95       	com	r19
    2b2a:	21 15       	cp	r18, r1
    2b2c:	31 05       	cpc	r19, r1
    2b2e:	29 f4       	brne	.+10     	; 0x2b3a <fgetc+0x46>
    2b30:	40 62       	ori	r20, 0x20	; 32
    2b32:	4b 83       	std	Y+3, r20	; 0x03
    2b34:	2f ef       	ldi	r18, 0xFF	; 255
    2b36:	3f ef       	ldi	r19, 0xFF	; 255
    2b38:	1b c0       	rjmp	.+54     	; 0x2b70 <fgetc+0x7c>
    2b3a:	31 96       	adiw	r30, 0x01	; 1
    2b3c:	f9 83       	std	Y+1, r31	; 0x01
    2b3e:	e8 83       	st	Y, r30
    2b40:	11 c0       	rjmp	.+34     	; 0x2b64 <fgetc+0x70>
    2b42:	ea 85       	ldd	r30, Y+10	; 0x0a
    2b44:	fb 85       	ldd	r31, Y+11	; 0x0b
    2b46:	ce 01       	movw	r24, r28
    2b48:	09 95       	icall
    2b4a:	9c 01       	movw	r18, r24
    2b4c:	97 ff       	sbrs	r25, 7
    2b4e:	0a c0       	rjmp	.+20     	; 0x2b64 <fgetc+0x70>
    2b50:	9b 81       	ldd	r25, Y+3	; 0x03
    2b52:	2f 5f       	subi	r18, 0xFF	; 255
    2b54:	3f 4f       	sbci	r19, 0xFF	; 255
    2b56:	11 f0       	breq	.+4      	; 0x2b5c <fgetc+0x68>
    2b58:	80 e2       	ldi	r24, 0x20	; 32
    2b5a:	01 c0       	rjmp	.+2      	; 0x2b5e <fgetc+0x6a>
    2b5c:	80 e1       	ldi	r24, 0x10	; 16
    2b5e:	89 2b       	or	r24, r25
    2b60:	8b 83       	std	Y+3, r24	; 0x03
    2b62:	e8 cf       	rjmp	.-48     	; 0x2b34 <fgetc+0x40>
    2b64:	8e 81       	ldd	r24, Y+6	; 0x06
    2b66:	9f 81       	ldd	r25, Y+7	; 0x07
    2b68:	01 96       	adiw	r24, 0x01	; 1
    2b6a:	9f 83       	std	Y+7, r25	; 0x07
    2b6c:	8e 83       	std	Y+6, r24	; 0x06
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	c9 01       	movw	r24, r18
    2b72:	df 91       	pop	r29
    2b74:	cf 91       	pop	r28
    2b76:	08 95       	ret

00002b78 <fputc>:
    2b78:	0f 93       	push	r16
    2b7a:	1f 93       	push	r17
    2b7c:	cf 93       	push	r28
    2b7e:	df 93       	push	r29
    2b80:	8c 01       	movw	r16, r24
    2b82:	eb 01       	movw	r28, r22
    2b84:	8b 81       	ldd	r24, Y+3	; 0x03
    2b86:	81 ff       	sbrs	r24, 1
    2b88:	1b c0       	rjmp	.+54     	; 0x2bc0 <fputc+0x48>
    2b8a:	82 ff       	sbrs	r24, 2
    2b8c:	0d c0       	rjmp	.+26     	; 0x2ba8 <fputc+0x30>
    2b8e:	2e 81       	ldd	r18, Y+6	; 0x06
    2b90:	3f 81       	ldd	r19, Y+7	; 0x07
    2b92:	8c 81       	ldd	r24, Y+4	; 0x04
    2b94:	9d 81       	ldd	r25, Y+5	; 0x05
    2b96:	28 17       	cp	r18, r24
    2b98:	39 07       	cpc	r19, r25
    2b9a:	64 f4       	brge	.+24     	; 0x2bb4 <fputc+0x3c>
    2b9c:	e8 81       	ld	r30, Y
    2b9e:	f9 81       	ldd	r31, Y+1	; 0x01
    2ba0:	01 93       	st	Z+, r16
    2ba2:	f9 83       	std	Y+1, r31	; 0x01
    2ba4:	e8 83       	st	Y, r30
    2ba6:	06 c0       	rjmp	.+12     	; 0x2bb4 <fputc+0x3c>
    2ba8:	e8 85       	ldd	r30, Y+8	; 0x08
    2baa:	f9 85       	ldd	r31, Y+9	; 0x09
    2bac:	80 2f       	mov	r24, r16
    2bae:	09 95       	icall
    2bb0:	89 2b       	or	r24, r25
    2bb2:	31 f4       	brne	.+12     	; 0x2bc0 <fputc+0x48>
    2bb4:	8e 81       	ldd	r24, Y+6	; 0x06
    2bb6:	9f 81       	ldd	r25, Y+7	; 0x07
    2bb8:	01 96       	adiw	r24, 0x01	; 1
    2bba:	9f 83       	std	Y+7, r25	; 0x07
    2bbc:	8e 83       	std	Y+6, r24	; 0x06
    2bbe:	02 c0       	rjmp	.+4      	; 0x2bc4 <fputc+0x4c>
    2bc0:	0f ef       	ldi	r16, 0xFF	; 255
    2bc2:	1f ef       	ldi	r17, 0xFF	; 255
    2bc4:	c8 01       	movw	r24, r16
    2bc6:	df 91       	pop	r29
    2bc8:	cf 91       	pop	r28
    2bca:	1f 91       	pop	r17
    2bcc:	0f 91       	pop	r16
    2bce:	08 95       	ret

00002bd0 <ungetc>:
    2bd0:	9c 01       	movw	r18, r24
    2bd2:	fb 01       	movw	r30, r22
    2bd4:	83 81       	ldd	r24, Z+3	; 0x03
    2bd6:	80 ff       	sbrs	r24, 0
    2bd8:	11 c0       	rjmp	.+34     	; 0x2bfc <ungetc+0x2c>
    2bda:	86 fd       	sbrc	r24, 6
    2bdc:	0f c0       	rjmp	.+30     	; 0x2bfc <ungetc+0x2c>
    2bde:	9f ef       	ldi	r25, 0xFF	; 255
    2be0:	2f 3f       	cpi	r18, 0xFF	; 255
    2be2:	39 07       	cpc	r19, r25
    2be4:	59 f0       	breq	.+22     	; 0x2bfc <ungetc+0x2c>
    2be6:	22 83       	std	Z+2, r18	; 0x02
    2be8:	80 64       	ori	r24, 0x40	; 64
    2bea:	8f 7d       	andi	r24, 0xDF	; 223
    2bec:	83 83       	std	Z+3, r24	; 0x03
    2bee:	86 81       	ldd	r24, Z+6	; 0x06
    2bf0:	97 81       	ldd	r25, Z+7	; 0x07
    2bf2:	01 97       	sbiw	r24, 0x01	; 1
    2bf4:	97 83       	std	Z+7, r25	; 0x07
    2bf6:	86 83       	std	Z+6, r24	; 0x06
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	02 c0       	rjmp	.+4      	; 0x2c00 <ungetc+0x30>
    2bfc:	2f ef       	ldi	r18, 0xFF	; 255
    2bfe:	3f ef       	ldi	r19, 0xFF	; 255
    2c00:	c9 01       	movw	r24, r18
    2c02:	08 95       	ret

00002c04 <__ultoa_invert>:
    2c04:	fa 01       	movw	r30, r20
    2c06:	aa 27       	eor	r26, r26
    2c08:	28 30       	cpi	r18, 0x08	; 8
    2c0a:	51 f1       	breq	.+84     	; 0x2c60 <__ultoa_invert+0x5c>
    2c0c:	20 31       	cpi	r18, 0x10	; 16
    2c0e:	81 f1       	breq	.+96     	; 0x2c70 <__ultoa_invert+0x6c>
    2c10:	e8 94       	clt
    2c12:	6f 93       	push	r22
    2c14:	6e 7f       	andi	r22, 0xFE	; 254
    2c16:	6e 5f       	subi	r22, 0xFE	; 254
    2c18:	7f 4f       	sbci	r23, 0xFF	; 255
    2c1a:	8f 4f       	sbci	r24, 0xFF	; 255
    2c1c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c1e:	af 4f       	sbci	r26, 0xFF	; 255
    2c20:	b1 e0       	ldi	r27, 0x01	; 1
    2c22:	3e d0       	rcall	.+124    	; 0x2ca0 <__ultoa_invert+0x9c>
    2c24:	b4 e0       	ldi	r27, 0x04	; 4
    2c26:	3c d0       	rcall	.+120    	; 0x2ca0 <__ultoa_invert+0x9c>
    2c28:	67 0f       	add	r22, r23
    2c2a:	78 1f       	adc	r23, r24
    2c2c:	89 1f       	adc	r24, r25
    2c2e:	9a 1f       	adc	r25, r26
    2c30:	a1 1d       	adc	r26, r1
    2c32:	68 0f       	add	r22, r24
    2c34:	79 1f       	adc	r23, r25
    2c36:	8a 1f       	adc	r24, r26
    2c38:	91 1d       	adc	r25, r1
    2c3a:	a1 1d       	adc	r26, r1
    2c3c:	6a 0f       	add	r22, r26
    2c3e:	71 1d       	adc	r23, r1
    2c40:	81 1d       	adc	r24, r1
    2c42:	91 1d       	adc	r25, r1
    2c44:	a1 1d       	adc	r26, r1
    2c46:	20 d0       	rcall	.+64     	; 0x2c88 <__ultoa_invert+0x84>
    2c48:	09 f4       	brne	.+2      	; 0x2c4c <__ultoa_invert+0x48>
    2c4a:	68 94       	set
    2c4c:	3f 91       	pop	r19
    2c4e:	2a e0       	ldi	r18, 0x0A	; 10
    2c50:	26 9f       	mul	r18, r22
    2c52:	11 24       	eor	r1, r1
    2c54:	30 19       	sub	r19, r0
    2c56:	30 5d       	subi	r19, 0xD0	; 208
    2c58:	31 93       	st	Z+, r19
    2c5a:	de f6       	brtc	.-74     	; 0x2c12 <__ultoa_invert+0xe>
    2c5c:	cf 01       	movw	r24, r30
    2c5e:	08 95       	ret
    2c60:	46 2f       	mov	r20, r22
    2c62:	47 70       	andi	r20, 0x07	; 7
    2c64:	40 5d       	subi	r20, 0xD0	; 208
    2c66:	41 93       	st	Z+, r20
    2c68:	b3 e0       	ldi	r27, 0x03	; 3
    2c6a:	0f d0       	rcall	.+30     	; 0x2c8a <__ultoa_invert+0x86>
    2c6c:	c9 f7       	brne	.-14     	; 0x2c60 <__ultoa_invert+0x5c>
    2c6e:	f6 cf       	rjmp	.-20     	; 0x2c5c <__ultoa_invert+0x58>
    2c70:	46 2f       	mov	r20, r22
    2c72:	4f 70       	andi	r20, 0x0F	; 15
    2c74:	40 5d       	subi	r20, 0xD0	; 208
    2c76:	4a 33       	cpi	r20, 0x3A	; 58
    2c78:	18 f0       	brcs	.+6      	; 0x2c80 <__ultoa_invert+0x7c>
    2c7a:	49 5d       	subi	r20, 0xD9	; 217
    2c7c:	31 fd       	sbrc	r19, 1
    2c7e:	40 52       	subi	r20, 0x20	; 32
    2c80:	41 93       	st	Z+, r20
    2c82:	02 d0       	rcall	.+4      	; 0x2c88 <__ultoa_invert+0x84>
    2c84:	a9 f7       	brne	.-22     	; 0x2c70 <__ultoa_invert+0x6c>
    2c86:	ea cf       	rjmp	.-44     	; 0x2c5c <__ultoa_invert+0x58>
    2c88:	b4 e0       	ldi	r27, 0x04	; 4
    2c8a:	a6 95       	lsr	r26
    2c8c:	97 95       	ror	r25
    2c8e:	87 95       	ror	r24
    2c90:	77 95       	ror	r23
    2c92:	67 95       	ror	r22
    2c94:	ba 95       	dec	r27
    2c96:	c9 f7       	brne	.-14     	; 0x2c8a <__ultoa_invert+0x86>
    2c98:	00 97       	sbiw	r24, 0x00	; 0
    2c9a:	61 05       	cpc	r22, r1
    2c9c:	71 05       	cpc	r23, r1
    2c9e:	08 95       	ret
    2ca0:	9b 01       	movw	r18, r22
    2ca2:	ac 01       	movw	r20, r24
    2ca4:	0a 2e       	mov	r0, r26
    2ca6:	06 94       	lsr	r0
    2ca8:	57 95       	ror	r21
    2caa:	47 95       	ror	r20
    2cac:	37 95       	ror	r19
    2cae:	27 95       	ror	r18
    2cb0:	ba 95       	dec	r27
    2cb2:	c9 f7       	brne	.-14     	; 0x2ca6 <__ultoa_invert+0xa2>
    2cb4:	62 0f       	add	r22, r18
    2cb6:	73 1f       	adc	r23, r19
    2cb8:	84 1f       	adc	r24, r20
    2cba:	95 1f       	adc	r25, r21
    2cbc:	a0 1d       	adc	r26, r0
    2cbe:	08 95       	ret

00002cc0 <__divmodhi4>:
    2cc0:	97 fb       	bst	r25, 7
    2cc2:	09 2e       	mov	r0, r25
    2cc4:	07 26       	eor	r0, r23
    2cc6:	0a d0       	rcall	.+20     	; 0x2cdc <__divmodhi4_neg1>
    2cc8:	77 fd       	sbrc	r23, 7
    2cca:	04 d0       	rcall	.+8      	; 0x2cd4 <__divmodhi4_neg2>
    2ccc:	43 d0       	rcall	.+134    	; 0x2d54 <__udivmodhi4>
    2cce:	06 d0       	rcall	.+12     	; 0x2cdc <__divmodhi4_neg1>
    2cd0:	00 20       	and	r0, r0
    2cd2:	1a f4       	brpl	.+6      	; 0x2cda <__divmodhi4_exit>

00002cd4 <__divmodhi4_neg2>:
    2cd4:	70 95       	com	r23
    2cd6:	61 95       	neg	r22
    2cd8:	7f 4f       	sbci	r23, 0xFF	; 255

00002cda <__divmodhi4_exit>:
    2cda:	08 95       	ret

00002cdc <__divmodhi4_neg1>:
    2cdc:	f6 f7       	brtc	.-4      	; 0x2cda <__divmodhi4_exit>
    2cde:	90 95       	com	r25
    2ce0:	81 95       	neg	r24
    2ce2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ce4:	08 95       	ret

00002ce6 <__prologue_saves__>:
    2ce6:	2f 92       	push	r2
    2ce8:	3f 92       	push	r3
    2cea:	4f 92       	push	r4
    2cec:	5f 92       	push	r5
    2cee:	6f 92       	push	r6
    2cf0:	7f 92       	push	r7
    2cf2:	8f 92       	push	r8
    2cf4:	9f 92       	push	r9
    2cf6:	af 92       	push	r10
    2cf8:	bf 92       	push	r11
    2cfa:	cf 92       	push	r12
    2cfc:	df 92       	push	r13
    2cfe:	ef 92       	push	r14
    2d00:	ff 92       	push	r15
    2d02:	0f 93       	push	r16
    2d04:	1f 93       	push	r17
    2d06:	cf 93       	push	r28
    2d08:	df 93       	push	r29
    2d0a:	cd b7       	in	r28, 0x3d	; 61
    2d0c:	de b7       	in	r29, 0x3e	; 62
    2d0e:	ca 1b       	sub	r28, r26
    2d10:	db 0b       	sbc	r29, r27
    2d12:	0f b6       	in	r0, 0x3f	; 63
    2d14:	f8 94       	cli
    2d16:	de bf       	out	0x3e, r29	; 62
    2d18:	0f be       	out	0x3f, r0	; 63
    2d1a:	cd bf       	out	0x3d, r28	; 61
    2d1c:	09 94       	ijmp

00002d1e <__epilogue_restores__>:
    2d1e:	2a 88       	ldd	r2, Y+18	; 0x12
    2d20:	39 88       	ldd	r3, Y+17	; 0x11
    2d22:	48 88       	ldd	r4, Y+16	; 0x10
    2d24:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d26:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d28:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d2a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d2c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d2e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d30:	b9 84       	ldd	r11, Y+9	; 0x09
    2d32:	c8 84       	ldd	r12, Y+8	; 0x08
    2d34:	df 80       	ldd	r13, Y+7	; 0x07
    2d36:	ee 80       	ldd	r14, Y+6	; 0x06
    2d38:	fd 80       	ldd	r15, Y+5	; 0x05
    2d3a:	0c 81       	ldd	r16, Y+4	; 0x04
    2d3c:	1b 81       	ldd	r17, Y+3	; 0x03
    2d3e:	aa 81       	ldd	r26, Y+2	; 0x02
    2d40:	b9 81       	ldd	r27, Y+1	; 0x01
    2d42:	ce 0f       	add	r28, r30
    2d44:	d1 1d       	adc	r29, r1
    2d46:	0f b6       	in	r0, 0x3f	; 63
    2d48:	f8 94       	cli
    2d4a:	de bf       	out	0x3e, r29	; 62
    2d4c:	0f be       	out	0x3f, r0	; 63
    2d4e:	cd bf       	out	0x3d, r28	; 61
    2d50:	ed 01       	movw	r28, r26
    2d52:	08 95       	ret

00002d54 <__udivmodhi4>:
    2d54:	aa 1b       	sub	r26, r26
    2d56:	bb 1b       	sub	r27, r27
    2d58:	51 e1       	ldi	r21, 0x11	; 17
    2d5a:	07 c0       	rjmp	.+14     	; 0x2d6a <__udivmodhi4_ep>

00002d5c <__udivmodhi4_loop>:
    2d5c:	aa 1f       	adc	r26, r26
    2d5e:	bb 1f       	adc	r27, r27
    2d60:	a6 17       	cp	r26, r22
    2d62:	b7 07       	cpc	r27, r23
    2d64:	10 f0       	brcs	.+4      	; 0x2d6a <__udivmodhi4_ep>
    2d66:	a6 1b       	sub	r26, r22
    2d68:	b7 0b       	sbc	r27, r23

00002d6a <__udivmodhi4_ep>:
    2d6a:	88 1f       	adc	r24, r24
    2d6c:	99 1f       	adc	r25, r25
    2d6e:	5a 95       	dec	r21
    2d70:	a9 f7       	brne	.-22     	; 0x2d5c <__udivmodhi4_loop>
    2d72:	80 95       	com	r24
    2d74:	90 95       	com	r25
    2d76:	bc 01       	movw	r22, r24
    2d78:	cd 01       	movw	r24, r26
    2d7a:	08 95       	ret

00002d7c <isspace>:
    2d7c:	91 11       	cpse	r25, r1
    2d7e:	06 c0       	rjmp	.+12     	; 0x2d8c <__ctype_isfalse>
    2d80:	80 32       	cpi	r24, 0x20	; 32
    2d82:	19 f0       	breq	.+6      	; 0x2d8a <isspace+0xe>
    2d84:	89 50       	subi	r24, 0x09	; 9
    2d86:	85 50       	subi	r24, 0x05	; 5
    2d88:	d0 f7       	brcc	.-12     	; 0x2d7e <isspace+0x2>
    2d8a:	08 95       	ret

00002d8c <__ctype_isfalse>:
    2d8c:	99 27       	eor	r25, r25
    2d8e:	88 27       	eor	r24, r24

00002d90 <__ctype_istrue>:
    2d90:	08 95       	ret

00002d92 <__mulsi3>:
    2d92:	62 9f       	mul	r22, r18
    2d94:	d0 01       	movw	r26, r0
    2d96:	73 9f       	mul	r23, r19
    2d98:	f0 01       	movw	r30, r0
    2d9a:	82 9f       	mul	r24, r18
    2d9c:	e0 0d       	add	r30, r0
    2d9e:	f1 1d       	adc	r31, r1
    2da0:	64 9f       	mul	r22, r20
    2da2:	e0 0d       	add	r30, r0
    2da4:	f1 1d       	adc	r31, r1
    2da6:	92 9f       	mul	r25, r18
    2da8:	f0 0d       	add	r31, r0
    2daa:	83 9f       	mul	r24, r19
    2dac:	f0 0d       	add	r31, r0
    2dae:	74 9f       	mul	r23, r20
    2db0:	f0 0d       	add	r31, r0
    2db2:	65 9f       	mul	r22, r21
    2db4:	f0 0d       	add	r31, r0
    2db6:	99 27       	eor	r25, r25
    2db8:	72 9f       	mul	r23, r18
    2dba:	b0 0d       	add	r27, r0
    2dbc:	e1 1d       	adc	r30, r1
    2dbe:	f9 1f       	adc	r31, r25
    2dc0:	63 9f       	mul	r22, r19
    2dc2:	b0 0d       	add	r27, r0
    2dc4:	e1 1d       	adc	r30, r1
    2dc6:	f9 1f       	adc	r31, r25
    2dc8:	bd 01       	movw	r22, r26
    2dca:	cf 01       	movw	r24, r30
    2dcc:	11 24       	eor	r1, r1
    2dce:	08 95       	ret

00002dd0 <__divmodsi4>:
    2dd0:	97 fb       	bst	r25, 7
    2dd2:	09 2e       	mov	r0, r25
    2dd4:	05 26       	eor	r0, r21
    2dd6:	0e d0       	rcall	.+28     	; 0x2df4 <__divmodsi4_neg1>
    2dd8:	57 fd       	sbrc	r21, 7
    2dda:	04 d0       	rcall	.+8      	; 0x2de4 <__divmodsi4_neg2>
    2ddc:	14 d0       	rcall	.+40     	; 0x2e06 <__udivmodsi4>
    2dde:	0a d0       	rcall	.+20     	; 0x2df4 <__divmodsi4_neg1>
    2de0:	00 1c       	adc	r0, r0
    2de2:	38 f4       	brcc	.+14     	; 0x2df2 <__divmodsi4_exit>

00002de4 <__divmodsi4_neg2>:
    2de4:	50 95       	com	r21
    2de6:	40 95       	com	r20
    2de8:	30 95       	com	r19
    2dea:	21 95       	neg	r18
    2dec:	3f 4f       	sbci	r19, 0xFF	; 255
    2dee:	4f 4f       	sbci	r20, 0xFF	; 255
    2df0:	5f 4f       	sbci	r21, 0xFF	; 255

00002df2 <__divmodsi4_exit>:
    2df2:	08 95       	ret

00002df4 <__divmodsi4_neg1>:
    2df4:	f6 f7       	brtc	.-4      	; 0x2df2 <__divmodsi4_exit>
    2df6:	90 95       	com	r25
    2df8:	80 95       	com	r24
    2dfa:	70 95       	com	r23
    2dfc:	61 95       	neg	r22
    2dfe:	7f 4f       	sbci	r23, 0xFF	; 255
    2e00:	8f 4f       	sbci	r24, 0xFF	; 255
    2e02:	9f 4f       	sbci	r25, 0xFF	; 255
    2e04:	08 95       	ret

00002e06 <__udivmodsi4>:
    2e06:	a1 e2       	ldi	r26, 0x21	; 33
    2e08:	1a 2e       	mov	r1, r26
    2e0a:	aa 1b       	sub	r26, r26
    2e0c:	bb 1b       	sub	r27, r27
    2e0e:	fd 01       	movw	r30, r26
    2e10:	0d c0       	rjmp	.+26     	; 0x2e2c <__udivmodsi4_ep>

00002e12 <__udivmodsi4_loop>:
    2e12:	aa 1f       	adc	r26, r26
    2e14:	bb 1f       	adc	r27, r27
    2e16:	ee 1f       	adc	r30, r30
    2e18:	ff 1f       	adc	r31, r31
    2e1a:	a2 17       	cp	r26, r18
    2e1c:	b3 07       	cpc	r27, r19
    2e1e:	e4 07       	cpc	r30, r20
    2e20:	f5 07       	cpc	r31, r21
    2e22:	20 f0       	brcs	.+8      	; 0x2e2c <__udivmodsi4_ep>
    2e24:	a2 1b       	sub	r26, r18
    2e26:	b3 0b       	sbc	r27, r19
    2e28:	e4 0b       	sbc	r30, r20
    2e2a:	f5 0b       	sbc	r31, r21

00002e2c <__udivmodsi4_ep>:
    2e2c:	66 1f       	adc	r22, r22
    2e2e:	77 1f       	adc	r23, r23
    2e30:	88 1f       	adc	r24, r24
    2e32:	99 1f       	adc	r25, r25
    2e34:	1a 94       	dec	r1
    2e36:	69 f7       	brne	.-38     	; 0x2e12 <__udivmodsi4_loop>
    2e38:	60 95       	com	r22
    2e3a:	70 95       	com	r23
    2e3c:	80 95       	com	r24
    2e3e:	90 95       	com	r25
    2e40:	9b 01       	movw	r18, r22
    2e42:	ac 01       	movw	r20, r24
    2e44:	bd 01       	movw	r22, r26
    2e46:	cf 01       	movw	r24, r30
    2e48:	08 95       	ret

00002e4a <_exit>:
    2e4a:	f8 94       	cli

00002e4c <__stop_program>:
    2e4c:	ff cf       	rjmp	.-2      	; 0x2e4c <__stop_program>
