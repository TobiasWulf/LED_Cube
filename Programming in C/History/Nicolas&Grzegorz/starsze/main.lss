
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002eac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00002eac  00002f40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000119  00800064  00800064  00002f44  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00002f44  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000627  00000000  00000000  00002fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002e2d  00000000  00000000  000035cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000061a  00000000  00000000  000063f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001f5d  00000000  00000000  00006a12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000510  00000000  00000000  00008970  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a6  00000000  00000000  00008e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000015e8  00000000  00000000  00009326  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000198  00000000  00000000  0000a90e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__ctors_end>
       4:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
       8:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
       c:	0c 94 b7 03 	jmp	0x76e	; 0x76e <__vector_3>
      10:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      14:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      18:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      1c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      20:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      24:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      28:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__vector_10>
      2c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      30:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      34:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      38:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      3c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      40:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      44:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      48:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      4c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      50:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      54:	e5 0c       	add	r14, r5
      56:	00 0d       	add	r16, r0
      58:	1e 0d       	add	r17, r14
      5a:	3d 0d       	add	r19, r13
      5c:	56 0d       	add	r21, r6
      5e:	73 0d       	add	r23, r3
      60:	92 0d       	add	r25, r2
      62:	b1 0d       	add	r27, r1
      64:	cd 0d       	add	r28, r13
      66:	e8 0d       	add	r30, r8
      68:	08 0e       	add	r0, r24
      6a:	25 0e       	add	r2, r21
      6c:	3e 0e       	add	r3, r30
      6e:	5b 0e       	add	r5, r27
      70:	7a 0e       	add	r7, r26
      72:	97 0e       	add	r9, r23
      74:	b5 0e       	add	r11, r21
      76:	d5 0e       	add	r13, r21
      78:	f5 0e       	add	r15, r21
      7a:	16 0f       	add	r17, r22
      7c:	35 0f       	add	r19, r21
      7e:	53 0f       	add	r21, r19
      80:	72 0f       	add	r23, r18
      82:	92 0f       	add	r25, r18
      84:	b2 0f       	add	r27, r18
      86:	d2 0f       	add	r29, r18

00000088 <spinning_line>:
      88:	10 08 04 02 01 00 18 04 03 00 00 03 04 18 00 01     ................
      98:	02 04 08 10 02 02 04 08 08 08 08 04 02 02           ..............

000000a6 <__c.1764>:
      a6:	45 46 47 65 66 67 00                                EFGefg.

000000ad <__c.1758>:
      ad:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

000000bd <__c.1918>:
      bd:	63 64 69 6e 6f 70 73 75 78 58 00                    cdinopsuxX.

000000c8 <__ctors_end>:
      c8:	11 24       	eor	r1, r1
      ca:	1f be       	out	0x3f, r1	; 63
      cc:	cf e5       	ldi	r28, 0x5F	; 95
      ce:	d8 e0       	ldi	r29, 0x08	; 8
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
      d4:	10 e0       	ldi	r17, 0x00	; 0
      d6:	a0 e6       	ldi	r26, 0x60	; 96
      d8:	b0 e0       	ldi	r27, 0x00	; 0
      da:	ec ea       	ldi	r30, 0xAC	; 172
      dc:	fe e2       	ldi	r31, 0x2E	; 46
      de:	02 c0       	rjmp	.+4      	; 0xe4 <.do_copy_data_start>

000000e0 <.do_copy_data_loop>:
      e0:	05 90       	lpm	r0, Z+
      e2:	0d 92       	st	X+, r0

000000e4 <.do_copy_data_start>:
      e4:	a4 36       	cpi	r26, 0x64	; 100
      e6:	b1 07       	cpc	r27, r17
      e8:	d9 f7       	brne	.-10     	; 0xe0 <.do_copy_data_loop>

000000ea <__do_clear_bss>:
      ea:	11 e0       	ldi	r17, 0x01	; 1
      ec:	a4 e6       	ldi	r26, 0x64	; 100
      ee:	b0 e0       	ldi	r27, 0x00	; 0
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
      f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
      f4:	ad 37       	cpi	r26, 0x7D	; 125
      f6:	b1 07       	cpc	r27, r17
      f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>
      fa:	0e 94 b9 05 	call	0xb72	; 0xb72 <main>
      fe:	0c 94 54 17 	jmp	0x2ea8	; 0x2ea8 <_exit>

00000102 <__bad_interrupt>:
     102:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000106 <fillSnake>:
int *fruitz;

volatile int snake[30][3];

void fillSnake()
{
     106:	80 e0       	ldi	r24, 0x00	; 0
     108:	90 e0       	ldi	r25, 0x00	; 0
	for(int a=0;a<30;a++)
	{
		for(int b=0;b<3;b++)
		{
		 snake[a][b]=-1;
     10a:	2f ef       	ldi	r18, 0xFF	; 255
     10c:	3f ef       	ldi	r19, 0xFF	; 255
     10e:	fc 01       	movw	r30, r24
     110:	ee 0f       	add	r30, r30
     112:	ff 1f       	adc	r31, r31
     114:	e8 0f       	add	r30, r24
     116:	f9 1f       	adc	r31, r25
     118:	ee 0f       	add	r30, r30
     11a:	ff 1f       	adc	r31, r31
     11c:	df 01       	movw	r26, r30
     11e:	ac 59       	subi	r26, 0x9C	; 156
     120:	bf 4f       	sbci	r27, 0xFF	; 255
     122:	11 96       	adiw	r26, 0x01	; 1
     124:	3c 93       	st	X, r19
     126:	2e 93       	st	-X, r18
     128:	ea 59       	subi	r30, 0x9A	; 154
     12a:	ff 4f       	sbci	r31, 0xFF	; 255
     12c:	31 83       	std	Z+1, r19	; 0x01
     12e:	20 83       	st	Z, r18
     130:	15 96       	adiw	r26, 0x05	; 5
     132:	3c 93       	st	X, r19
     134:	2e 93       	st	-X, r18
     136:	14 97       	sbiw	r26, 0x04	; 4

volatile int snake[30][3];

void fillSnake()
{
	for(int a=0;a<30;a++)
     138:	01 96       	adiw	r24, 0x01	; 1
     13a:	8e 31       	cpi	r24, 0x1E	; 30
     13c:	91 05       	cpc	r25, r1
     13e:	39 f7       	brne	.-50     	; 0x10e <fillSnake+0x8>
		for(int b=0;b<3;b++)
		{
		 snake[a][b]=-1;
		}
	}
}
     140:	08 95       	ret

00000142 <snakeMove>:
		 break;
	}
}

void snakeMove()
{
     142:	1f 93       	push	r17
     144:	cf 93       	push	r28
     146:	df 93       	push	r29
	int a,b;
	if(snake[1][0]!=-1)
     148:	80 91 6a 00 	lds	r24, 0x006A
     14c:	90 91 6b 00 	lds	r25, 0x006B
     150:	8f 5f       	subi	r24, 0xFF	; 255
     152:	9f 4f       	sbci	r25, 0xFF	; 255
     154:	09 f4       	brne	.+2      	; 0x158 <snakeMove+0x16>
     156:	79 c1       	rjmp	.+754    	; 0x44a <snakeMove+0x308>
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	30 c0       	rjmp	.+96     	; 0x1be <snakeMove+0x7c>
	{
		for(a=1;a<30;a++)
		{
			for(b=0;b<30;b++)
			{
				if(snake[a+1][b]==-1)
     15e:	fe 01       	movw	r30, r28
     160:	e2 0f       	add	r30, r18
     162:	f3 1f       	adc	r31, r19
     164:	ee 0f       	add	r30, r30
     166:	ff 1f       	adc	r31, r31
     168:	ec 59       	subi	r30, 0x9C	; 156
     16a:	ff 4f       	sbci	r31, 0xFF	; 255
     16c:	80 81       	ld	r24, Z
     16e:	91 81       	ldd	r25, Z+1	; 0x01
     170:	8f 5f       	subi	r24, 0xFF	; 255
     172:	9f 4f       	sbci	r25, 0xFF	; 255
     174:	81 f0       	breq	.+32     	; 0x196 <snakeMove+0x54>
					break;
				snake[a][b] = snake[a+1][b];
     176:	80 81       	ld	r24, Z
     178:	91 81       	ldd	r25, Z+1	; 0x01
     17a:	fd 01       	movw	r30, r26
     17c:	e2 0f       	add	r30, r18
     17e:	f3 1f       	adc	r31, r19
     180:	ee 0f       	add	r30, r30
     182:	ff 1f       	adc	r31, r31
     184:	ec 59       	subi	r30, 0x9C	; 156
     186:	ff 4f       	sbci	r31, 0xFF	; 255
     188:	91 83       	std	Z+1, r25	; 0x01
     18a:	80 83       	st	Z, r24
	int a,b;
	if(snake[1][0]!=-1)
	{
		for(a=1;a<30;a++)
		{
			for(b=0;b<30;b++)
     18c:	2f 5f       	subi	r18, 0xFF	; 255
     18e:	3f 4f       	sbci	r19, 0xFF	; 255
     190:	2e 31       	cpi	r18, 0x1E	; 30
     192:	31 05       	cpc	r19, r1
     194:	21 f7       	brne	.-56     	; 0x15e <snakeMove+0x1c>
			{
				if(snake[a+1][b]==-1)
					break;
				snake[a][b] = snake[a+1][b];
			}
			if(snake[a+1][b]==-1)
     196:	fb 01       	movw	r30, r22
     198:	ee 0f       	add	r30, r30
     19a:	ff 1f       	adc	r31, r31
     19c:	e6 0f       	add	r30, r22
     19e:	f7 1f       	adc	r31, r23
     1a0:	e2 0f       	add	r30, r18
     1a2:	f3 1f       	adc	r31, r19
     1a4:	ee 0f       	add	r30, r30
     1a6:	ff 1f       	adc	r31, r31
     1a8:	ec 59       	subi	r30, 0x9C	; 156
     1aa:	ff 4f       	sbci	r31, 0xFF	; 255
     1ac:	80 81       	ld	r24, Z
     1ae:	91 81       	ldd	r25, Z+1	; 0x01
     1b0:	8f 5f       	subi	r24, 0xFF	; 255
     1b2:	9f 4f       	sbci	r25, 0xFF	; 255
     1b4:	b9 f0       	breq	.+46     	; 0x1e4 <snakeMove+0xa2>
void snakeMove()
{
	int a,b;
	if(snake[1][0]!=-1)
	{
		for(a=1;a<30;a++)
     1b6:	6e 31       	cpi	r22, 0x1E	; 30
     1b8:	71 05       	cpc	r23, r1
     1ba:	91 f0       	breq	.+36     	; 0x1e0 <snakeMove+0x9e>
     1bc:	cb 01       	movw	r24, r22
     1be:	ac 01       	movw	r20, r24
     1c0:	20 e0       	ldi	r18, 0x00	; 0
     1c2:	30 e0       	ldi	r19, 0x00	; 0
		 break;
	}
}

void snakeMove()
{
     1c4:	bc 01       	movw	r22, r24
     1c6:	6f 5f       	subi	r22, 0xFF	; 255
     1c8:	7f 4f       	sbci	r23, 0xFF	; 255
	{
		for(a=1;a<30;a++)
		{
			for(b=0;b<30;b++)
			{
				if(snake[a+1][b]==-1)
     1ca:	eb 01       	movw	r28, r22
     1cc:	cc 0f       	add	r28, r28
     1ce:	dd 1f       	adc	r29, r29
     1d0:	c6 0f       	add	r28, r22
     1d2:	d7 1f       	adc	r29, r23
					break;
				snake[a][b] = snake[a+1][b];
     1d4:	da 01       	movw	r26, r20
     1d6:	aa 0f       	add	r26, r26
     1d8:	bb 1f       	adc	r27, r27
     1da:	a4 0f       	add	r26, r20
     1dc:	b5 1f       	adc	r27, r21
     1de:	bf cf       	rjmp	.-130    	; 0x15e <snakeMove+0x1c>
void snakeMove()
{
	int a,b;
	if(snake[1][0]!=-1)
	{
		for(a=1;a<30;a++)
     1e0:	4e e1       	ldi	r20, 0x1E	; 30
     1e2:	50 e0       	ldi	r21, 0x00	; 0
			}
			if(snake[a+1][b]==-1)
			break;
		}
		
			switch(direction)
     1e4:	80 91 5d 01 	lds	r24, 0x015D
     1e8:	90 91 5e 01 	lds	r25, 0x015E
     1ec:	82 30       	cpi	r24, 0x02	; 2
     1ee:	91 05       	cpc	r25, r1
     1f0:	a9 f1       	breq	.+106    	; 0x25c <snakeMove+0x11a>
     1f2:	83 30       	cpi	r24, 0x03	; 3
     1f4:	91 05       	cpc	r25, r1
     1f6:	34 f4       	brge	.+12     	; 0x204 <snakeMove+0xc2>
     1f8:	00 97       	sbiw	r24, 0x00	; 0
     1fa:	79 f0       	breq	.+30     	; 0x21a <snakeMove+0xd8>
     1fc:	01 97       	sbiw	r24, 0x01	; 1
     1fe:	09 f0       	breq	.+2      	; 0x202 <snakeMove+0xc0>
     200:	6d c0       	rjmp	.+218    	; 0x2dc <snakeMove+0x19a>
     202:	19 c0       	rjmp	.+50     	; 0x236 <snakeMove+0xf4>
     204:	84 30       	cpi	r24, 0x04	; 4
     206:	91 05       	cpc	r25, r1
     208:	09 f4       	brne	.+2      	; 0x20c <snakeMove+0xca>
     20a:	45 c0       	rjmp	.+138    	; 0x296 <snakeMove+0x154>
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	91 05       	cpc	r25, r1
     210:	b4 f1       	brlt	.+108    	; 0x27e <snakeMove+0x13c>
     212:	05 97       	sbiw	r24, 0x05	; 5
     214:	09 f0       	breq	.+2      	; 0x218 <snakeMove+0xd6>
     216:	62 c0       	rjmp	.+196    	; 0x2dc <snakeMove+0x19a>
     218:	4f c0       	rjmp	.+158    	; 0x2b8 <snakeMove+0x176>
		{
			case 0: // x+
				
				snake[a+1][0]=snake[a+1][0]+1;
     21a:	ca 01       	movw	r24, r20
     21c:	01 96       	adiw	r24, 0x01	; 1
     21e:	fc 01       	movw	r30, r24
     220:	ee 0f       	add	r30, r30
     222:	ff 1f       	adc	r31, r31
     224:	e8 0f       	add	r30, r24
     226:	f9 1f       	adc	r31, r25
     228:	ee 0f       	add	r30, r30
     22a:	ff 1f       	adc	r31, r31
     22c:	ec 59       	subi	r30, 0x9C	; 156
     22e:	ff 4f       	sbci	r31, 0xFF	; 255
     230:	80 81       	ld	r24, Z
     232:	91 81       	ldd	r25, Z+1	; 0x01
     234:	22 c0       	rjmp	.+68     	; 0x27a <snakeMove+0x138>
				break;
				
			case 1: // x-
				snake[a+1][0]=snake[a+1][0]--;
     236:	ca 01       	movw	r24, r20
     238:	01 96       	adiw	r24, 0x01	; 1
     23a:	fc 01       	movw	r30, r24
     23c:	ee 0f       	add	r30, r30
     23e:	ff 1f       	adc	r31, r31
     240:	e8 0f       	add	r30, r24
     242:	f9 1f       	adc	r31, r25
     244:	ee 0f       	add	r30, r30
     246:	ff 1f       	adc	r31, r31
     248:	ec 59       	subi	r30, 0x9C	; 156
     24a:	ff 4f       	sbci	r31, 0xFF	; 255
     24c:	80 81       	ld	r24, Z
     24e:	91 81       	ldd	r25, Z+1	; 0x01
     250:	91 83       	std	Z+1, r25	; 0x01
     252:	80 83       	st	Z, r24
     254:	01 97       	sbiw	r24, 0x01	; 1
     256:	91 83       	std	Z+1, r25	; 0x01
     258:	80 83       	st	Z, r24
     25a:	40 c0       	rjmp	.+128    	; 0x2dc <snakeMove+0x19a>
				break;
			
			case 2: // y+
				snake[a+1][1]=snake[a+1][1]++;
     25c:	ca 01       	movw	r24, r20
     25e:	01 96       	adiw	r24, 0x01	; 1
     260:	fc 01       	movw	r30, r24
     262:	ee 0f       	add	r30, r30
     264:	ff 1f       	adc	r31, r31
     266:	e8 0f       	add	r30, r24
     268:	f9 1f       	adc	r31, r25
     26a:	ee 0f       	add	r30, r30
     26c:	ff 1f       	adc	r31, r31
     26e:	ea 59       	subi	r30, 0x9A	; 154
     270:	ff 4f       	sbci	r31, 0xFF	; 255
     272:	80 81       	ld	r24, Z
     274:	91 81       	ldd	r25, Z+1	; 0x01
     276:	91 83       	std	Z+1, r25	; 0x01
     278:	80 83       	st	Z, r24
     27a:	01 96       	adiw	r24, 0x01	; 1
     27c:	ec cf       	rjmp	.-40     	; 0x256 <snakeMove+0x114>
				break;
				
			case 3: // y-
				snake[a+1][1]=snake[a+1][1]--;
     27e:	ca 01       	movw	r24, r20
     280:	01 96       	adiw	r24, 0x01	; 1
     282:	fc 01       	movw	r30, r24
     284:	ee 0f       	add	r30, r30
     286:	ff 1f       	adc	r31, r31
     288:	e8 0f       	add	r30, r24
     28a:	f9 1f       	adc	r31, r25
     28c:	ee 0f       	add	r30, r30
     28e:	ff 1f       	adc	r31, r31
     290:	ea 59       	subi	r30, 0x9A	; 154
     292:	ff 4f       	sbci	r31, 0xFF	; 255
     294:	db cf       	rjmp	.-74     	; 0x24c <snakeMove+0x10a>
				break;
			
			case 4: // z+
				snake[a+1][2]=snake[a+1][2]++;
     296:	ca 01       	movw	r24, r20
     298:	01 96       	adiw	r24, 0x01	; 1
     29a:	fc 01       	movw	r30, r24
     29c:	ee 0f       	add	r30, r30
     29e:	ff 1f       	adc	r31, r31
     2a0:	e8 0f       	add	r30, r24
     2a2:	f9 1f       	adc	r31, r25
     2a4:	ee 0f       	add	r30, r30
     2a6:	ff 1f       	adc	r31, r31
     2a8:	ec 59       	subi	r30, 0x9C	; 156
     2aa:	ff 4f       	sbci	r31, 0xFF	; 255
     2ac:	84 81       	ldd	r24, Z+4	; 0x04
     2ae:	95 81       	ldd	r25, Z+5	; 0x05
     2b0:	95 83       	std	Z+5, r25	; 0x05
     2b2:	84 83       	std	Z+4, r24	; 0x04
     2b4:	01 96       	adiw	r24, 0x01	; 1
     2b6:	10 c0       	rjmp	.+32     	; 0x2d8 <snakeMove+0x196>
				break;
				
			case 5: // z-
				snake[a+1][2]=snake[a+1][2]--;
     2b8:	ca 01       	movw	r24, r20
     2ba:	01 96       	adiw	r24, 0x01	; 1
     2bc:	fc 01       	movw	r30, r24
     2be:	ee 0f       	add	r30, r30
     2c0:	ff 1f       	adc	r31, r31
     2c2:	e8 0f       	add	r30, r24
     2c4:	f9 1f       	adc	r31, r25
     2c6:	ee 0f       	add	r30, r30
     2c8:	ff 1f       	adc	r31, r31
     2ca:	ec 59       	subi	r30, 0x9C	; 156
     2cc:	ff 4f       	sbci	r31, 0xFF	; 255
     2ce:	84 81       	ldd	r24, Z+4	; 0x04
     2d0:	95 81       	ldd	r25, Z+5	; 0x05
     2d2:	95 83       	std	Z+5, r25	; 0x05
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	01 97       	sbiw	r24, 0x01	; 1
     2d8:	95 83       	std	Z+5, r25	; 0x05
     2da:	84 83       	std	Z+4, r24	; 0x04
				break;
			
		}

		if(snake[a+1][0]>4) snake[a][0] = 0;
     2dc:	9a 01       	movw	r18, r20
     2de:	2f 5f       	subi	r18, 0xFF	; 255
     2e0:	3f 4f       	sbci	r19, 0xFF	; 255
     2e2:	f9 01       	movw	r30, r18
     2e4:	ee 0f       	add	r30, r30
     2e6:	ff 1f       	adc	r31, r31
     2e8:	e2 0f       	add	r30, r18
     2ea:	f3 1f       	adc	r31, r19
     2ec:	ee 0f       	add	r30, r30
     2ee:	ff 1f       	adc	r31, r31
     2f0:	ec 59       	subi	r30, 0x9C	; 156
     2f2:	ff 4f       	sbci	r31, 0xFF	; 255
     2f4:	80 81       	ld	r24, Z
     2f6:	91 81       	ldd	r25, Z+1	; 0x01
     2f8:	05 97       	sbiw	r24, 0x05	; 5
     2fa:	5c f0       	brlt	.+22     	; 0x312 <snakeMove+0x1d0>
     2fc:	fa 01       	movw	r30, r20
     2fe:	ee 0f       	add	r30, r30
     300:	ff 1f       	adc	r31, r31
     302:	e4 0f       	add	r30, r20
     304:	f5 1f       	adc	r31, r21
     306:	ee 0f       	add	r30, r30
     308:	ff 1f       	adc	r31, r31
     30a:	ec 59       	subi	r30, 0x9C	; 156
     30c:	ff 4f       	sbci	r31, 0xFF	; 255
     30e:	11 82       	std	Z+1, r1	; 0x01
     310:	10 82       	st	Z, r1
		if(snake[a+1][1]>4) snake[a][1] = 0;
     312:	f9 01       	movw	r30, r18
     314:	ee 0f       	add	r30, r30
     316:	ff 1f       	adc	r31, r31
     318:	e2 0f       	add	r30, r18
     31a:	f3 1f       	adc	r31, r19
     31c:	ee 0f       	add	r30, r30
     31e:	ff 1f       	adc	r31, r31
     320:	ea 59       	subi	r30, 0x9A	; 154
     322:	ff 4f       	sbci	r31, 0xFF	; 255
     324:	80 81       	ld	r24, Z
     326:	91 81       	ldd	r25, Z+1	; 0x01
     328:	05 97       	sbiw	r24, 0x05	; 5
     32a:	5c f0       	brlt	.+22     	; 0x342 <snakeMove+0x200>
     32c:	fa 01       	movw	r30, r20
     32e:	ee 0f       	add	r30, r30
     330:	ff 1f       	adc	r31, r31
     332:	e4 0f       	add	r30, r20
     334:	f5 1f       	adc	r31, r21
     336:	ee 0f       	add	r30, r30
     338:	ff 1f       	adc	r31, r31
     33a:	ea 59       	subi	r30, 0x9A	; 154
     33c:	ff 4f       	sbci	r31, 0xFF	; 255
     33e:	11 82       	std	Z+1, r1	; 0x01
     340:	10 82       	st	Z, r1
		if(snake[a+1][2]>4) snake[a][2] = 0;
     342:	f9 01       	movw	r30, r18
     344:	ee 0f       	add	r30, r30
     346:	ff 1f       	adc	r31, r31
     348:	e2 0f       	add	r30, r18
     34a:	f3 1f       	adc	r31, r19
     34c:	ee 0f       	add	r30, r30
     34e:	ff 1f       	adc	r31, r31
     350:	ec 59       	subi	r30, 0x9C	; 156
     352:	ff 4f       	sbci	r31, 0xFF	; 255
     354:	84 81       	ldd	r24, Z+4	; 0x04
     356:	95 81       	ldd	r25, Z+5	; 0x05
     358:	05 97       	sbiw	r24, 0x05	; 5
     35a:	5c f0       	brlt	.+22     	; 0x372 <snakeMove+0x230>
     35c:	fa 01       	movw	r30, r20
     35e:	ee 0f       	add	r30, r30
     360:	ff 1f       	adc	r31, r31
     362:	e4 0f       	add	r30, r20
     364:	f5 1f       	adc	r31, r21
     366:	ee 0f       	add	r30, r30
     368:	ff 1f       	adc	r31, r31
     36a:	ec 59       	subi	r30, 0x9C	; 156
     36c:	ff 4f       	sbci	r31, 0xFF	; 255
     36e:	15 82       	std	Z+5, r1	; 0x05
     370:	14 82       	std	Z+4, r1	; 0x04
		if(snake[a+1][0]<0) snake[a][0] = 4;
     372:	f9 01       	movw	r30, r18
     374:	ee 0f       	add	r30, r30
     376:	ff 1f       	adc	r31, r31
     378:	e2 0f       	add	r30, r18
     37a:	f3 1f       	adc	r31, r19
     37c:	ee 0f       	add	r30, r30
     37e:	ff 1f       	adc	r31, r31
     380:	ec 59       	subi	r30, 0x9C	; 156
     382:	ff 4f       	sbci	r31, 0xFF	; 255
     384:	80 81       	ld	r24, Z
     386:	91 81       	ldd	r25, Z+1	; 0x01
     388:	97 ff       	sbrs	r25, 7
     38a:	0d c0       	rjmp	.+26     	; 0x3a6 <snakeMove+0x264>
     38c:	fa 01       	movw	r30, r20
     38e:	ee 0f       	add	r30, r30
     390:	ff 1f       	adc	r31, r31
     392:	e4 0f       	add	r30, r20
     394:	f5 1f       	adc	r31, r21
     396:	ee 0f       	add	r30, r30
     398:	ff 1f       	adc	r31, r31
     39a:	ec 59       	subi	r30, 0x9C	; 156
     39c:	ff 4f       	sbci	r31, 0xFF	; 255
     39e:	84 e0       	ldi	r24, 0x04	; 4
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	91 83       	std	Z+1, r25	; 0x01
     3a4:	80 83       	st	Z, r24
		if(snake[a+1][1]<0) snake[a][1] = 4;
     3a6:	f9 01       	movw	r30, r18
     3a8:	ee 0f       	add	r30, r30
     3aa:	ff 1f       	adc	r31, r31
     3ac:	e2 0f       	add	r30, r18
     3ae:	f3 1f       	adc	r31, r19
     3b0:	ee 0f       	add	r30, r30
     3b2:	ff 1f       	adc	r31, r31
     3b4:	ea 59       	subi	r30, 0x9A	; 154
     3b6:	ff 4f       	sbci	r31, 0xFF	; 255
     3b8:	80 81       	ld	r24, Z
     3ba:	91 81       	ldd	r25, Z+1	; 0x01
     3bc:	97 ff       	sbrs	r25, 7
     3be:	0d c0       	rjmp	.+26     	; 0x3da <snakeMove+0x298>
     3c0:	fa 01       	movw	r30, r20
     3c2:	ee 0f       	add	r30, r30
     3c4:	ff 1f       	adc	r31, r31
     3c6:	e4 0f       	add	r30, r20
     3c8:	f5 1f       	adc	r31, r21
     3ca:	ee 0f       	add	r30, r30
     3cc:	ff 1f       	adc	r31, r31
     3ce:	ea 59       	subi	r30, 0x9A	; 154
     3d0:	ff 4f       	sbci	r31, 0xFF	; 255
     3d2:	84 e0       	ldi	r24, 0x04	; 4
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	91 83       	std	Z+1, r25	; 0x01
     3d8:	80 83       	st	Z, r24
		if(snake[a+1][2]<0) snake[a][2] = 4;
     3da:	f9 01       	movw	r30, r18
     3dc:	ee 0f       	add	r30, r30
     3de:	ff 1f       	adc	r31, r31
     3e0:	e2 0f       	add	r30, r18
     3e2:	f3 1f       	adc	r31, r19
     3e4:	ee 0f       	add	r30, r30
     3e6:	ff 1f       	adc	r31, r31
     3e8:	ec 59       	subi	r30, 0x9C	; 156
     3ea:	ff 4f       	sbci	r31, 0xFF	; 255
     3ec:	84 81       	ldd	r24, Z+4	; 0x04
     3ee:	95 81       	ldd	r25, Z+5	; 0x05
     3f0:	97 ff       	sbrs	r25, 7
     3f2:	0d c0       	rjmp	.+26     	; 0x40e <snakeMove+0x2cc>
     3f4:	fa 01       	movw	r30, r20
     3f6:	ee 0f       	add	r30, r30
     3f8:	ff 1f       	adc	r31, r31
     3fa:	e4 0f       	add	r30, r20
     3fc:	f5 1f       	adc	r31, r21
     3fe:	ee 0f       	add	r30, r30
     400:	ff 1f       	adc	r31, r31
     402:	ec 59       	subi	r30, 0x9C	; 156
     404:	ff 4f       	sbci	r31, 0xFF	; 255
     406:	84 e0       	ldi	r24, 0x04	; 4
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	95 83       	std	Z+5, r25	; 0x05
     40c:	84 83       	std	Z+4, r24	; 0x04
		
		head[0] = snake[a+1][0];
     40e:	f9 01       	movw	r30, r18
     410:	ee 0f       	add	r30, r30
     412:	ff 1f       	adc	r31, r31
     414:	e2 0f       	add	r30, r18
     416:	f3 1f       	adc	r31, r19
     418:	ee 0f       	add	r30, r30
     41a:	ff 1f       	adc	r31, r31
     41c:	df 01       	movw	r26, r30
     41e:	ac 59       	subi	r26, 0x9C	; 156
     420:	bf 4f       	sbci	r27, 0xFF	; 255
     422:	8d 91       	ld	r24, X+
     424:	9c 91       	ld	r25, X
     426:	11 97       	sbiw	r26, 0x01	; 1
     428:	90 93 6b 01 	sts	0x016B, r25
     42c:	80 93 6a 01 	sts	0x016A, r24
		head[1] = snake[a+1][1];
     430:	ea 59       	subi	r30, 0x9A	; 154
     432:	ff 4f       	sbci	r31, 0xFF	; 255
     434:	80 81       	ld	r24, Z
     436:	91 81       	ldd	r25, Z+1	; 0x01
     438:	90 93 6d 01 	sts	0x016D, r25
     43c:	80 93 6c 01 	sts	0x016C, r24
		head[2] = snake[a+1][2];
     440:	14 96       	adiw	r26, 0x04	; 4
     442:	8d 91       	ld	r24, X+
     444:	9c 91       	ld	r25, X
     446:	15 97       	sbiw	r26, 0x05	; 5
     448:	95 c0       	rjmp	.+298    	; 0x574 <snakeMove+0x432>
	}
	else
	{
		switch(direction)
     44a:	80 91 5d 01 	lds	r24, 0x015D
     44e:	90 91 5e 01 	lds	r25, 0x015E
     452:	82 30       	cpi	r24, 0x02	; 2
     454:	91 05       	cpc	r25, r1
     456:	19 f1       	breq	.+70     	; 0x49e <snakeMove+0x35c>
     458:	83 30       	cpi	r24, 0x03	; 3
     45a:	91 05       	cpc	r25, r1
     45c:	34 f4       	brge	.+12     	; 0x46a <snakeMove+0x328>
     45e:	00 97       	sbiw	r24, 0x00	; 0
     460:	71 f0       	breq	.+28     	; 0x47e <snakeMove+0x33c>
     462:	01 97       	sbiw	r24, 0x01	; 1
     464:	09 f0       	breq	.+2      	; 0x468 <snakeMove+0x326>
     466:	74 c0       	rjmp	.+232    	; 0x550 <snakeMove+0x40e>
     468:	10 c0       	rjmp	.+32     	; 0x48a <snakeMove+0x348>
     46a:	84 30       	cpi	r24, 0x04	; 4
     46c:	91 05       	cpc	r25, r1
     46e:	59 f1       	breq	.+86     	; 0x4c6 <snakeMove+0x384>
     470:	84 30       	cpi	r24, 0x04	; 4
     472:	91 05       	cpc	r25, r1
     474:	e4 f0       	brlt	.+56     	; 0x4ae <snakeMove+0x36c>
     476:	05 97       	sbiw	r24, 0x05	; 5
     478:	09 f0       	breq	.+2      	; 0x47c <snakeMove+0x33a>
     47a:	6a c0       	rjmp	.+212    	; 0x550 <snakeMove+0x40e>
     47c:	2c c0       	rjmp	.+88     	; 0x4d6 <snakeMove+0x394>
		{
			case 0: // x+
				
				snake[a][0]=snake[a][0]+1;
     47e:	e4 e6       	ldi	r30, 0x64	; 100
     480:	f0 e0       	ldi	r31, 0x00	; 0
     482:	80 81       	ld	r24, Z
     484:	91 81       	ldd	r25, Z+1	; 0x01
     486:	01 96       	adiw	r24, 0x01	; 1
     488:	07 c0       	rjmp	.+14     	; 0x498 <snakeMove+0x356>
				if(snake[a][1]<0) snake[a][1] = 4;
				if(snake[a][2]<0) snake[a][2] = 4;
				break;
				
			case 1: // x-
				snake[a][0]=snake[a][0]--;
     48a:	e4 e6       	ldi	r30, 0x64	; 100
     48c:	f0 e0       	ldi	r31, 0x00	; 0
     48e:	80 81       	ld	r24, Z
     490:	91 81       	ldd	r25, Z+1	; 0x01
     492:	91 83       	std	Z+1, r25	; 0x01
     494:	80 83       	st	Z, r24
     496:	01 97       	sbiw	r24, 0x01	; 1
     498:	91 83       	std	Z+1, r25	; 0x01
     49a:	80 83       	st	Z, r24
     49c:	25 c0       	rjmp	.+74     	; 0x4e8 <snakeMove+0x3a6>
				if(snake[a][1]<0) snake[a][1] = 4;
				if(snake[a][2]<0) snake[a][2] = 4;
				break;
			
			case 2: // y+
				snake[a][1]=snake[a][1]++;
     49e:	e6 e6       	ldi	r30, 0x66	; 102
     4a0:	f0 e0       	ldi	r31, 0x00	; 0
     4a2:	80 81       	ld	r24, Z
     4a4:	91 81       	ldd	r25, Z+1	; 0x01
     4a6:	91 83       	std	Z+1, r25	; 0x01
     4a8:	80 83       	st	Z, r24
     4aa:	01 96       	adiw	r24, 0x01	; 1
     4ac:	07 c0       	rjmp	.+14     	; 0x4bc <snakeMove+0x37a>
				if(snake[a][1]<0) snake[a][1] = 4;
				if(snake[a][2]<0) snake[a][2] = 4;
				break;
				
			case 3: // y-
				snake[a][1]=snake[a][1]--;
     4ae:	e6 e6       	ldi	r30, 0x66	; 102
     4b0:	f0 e0       	ldi	r31, 0x00	; 0
     4b2:	80 81       	ld	r24, Z
     4b4:	91 81       	ldd	r25, Z+1	; 0x01
     4b6:	91 83       	std	Z+1, r25	; 0x01
     4b8:	80 83       	st	Z, r24
     4ba:	01 97       	sbiw	r24, 0x01	; 1
     4bc:	91 83       	std	Z+1, r25	; 0x01
     4be:	80 83       	st	Z, r24
				if(snake[a][0]>4) snake[a][0] = 0;
     4c0:	e4 e6       	ldi	r30, 0x64	; 100
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
     4c4:	11 c0       	rjmp	.+34     	; 0x4e8 <snakeMove+0x3a6>
				if(snake[a][1]<0) snake[a][1] = 4;
				if(snake[a][2]<0) snake[a][2] = 4;
				break;
			
			case 4: // z+
				snake[a][2]=snake[a][2]++;
     4c6:	e4 e6       	ldi	r30, 0x64	; 100
     4c8:	f0 e0       	ldi	r31, 0x00	; 0
     4ca:	84 81       	ldd	r24, Z+4	; 0x04
     4cc:	95 81       	ldd	r25, Z+5	; 0x05
     4ce:	95 83       	std	Z+5, r25	; 0x05
     4d0:	84 83       	std	Z+4, r24	; 0x04
     4d2:	01 96       	adiw	r24, 0x01	; 1
     4d4:	07 c0       	rjmp	.+14     	; 0x4e4 <snakeMove+0x3a2>
				if(snake[a][1]<0) snake[a][1] = 4;
				if(snake[a][2]<0) snake[a][2] = 4;
				break;
				
			case 5: // z-
				snake[a][2]=snake[a][2]--;				
     4d6:	e4 e6       	ldi	r30, 0x64	; 100
     4d8:	f0 e0       	ldi	r31, 0x00	; 0
     4da:	84 81       	ldd	r24, Z+4	; 0x04
     4dc:	95 81       	ldd	r25, Z+5	; 0x05
     4de:	95 83       	std	Z+5, r25	; 0x05
     4e0:	84 83       	std	Z+4, r24	; 0x04
     4e2:	01 97       	sbiw	r24, 0x01	; 1
     4e4:	95 83       	std	Z+5, r25	; 0x05
     4e6:	84 83       	std	Z+4, r24	; 0x04
				if(snake[a][0]>4) snake[a][0] = 0;
     4e8:	80 81       	ld	r24, Z
     4ea:	91 81       	ldd	r25, Z+1	; 0x01
     4ec:	05 97       	sbiw	r24, 0x05	; 5
     4ee:	14 f0       	brlt	.+4      	; 0x4f4 <snakeMove+0x3b2>
     4f0:	11 82       	std	Z+1, r1	; 0x01
     4f2:	10 82       	st	Z, r1
				if(snake[a][1]>4) snake[a][1] = 0;
     4f4:	e6 e6       	ldi	r30, 0x66	; 102
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
     4f8:	80 81       	ld	r24, Z
     4fa:	91 81       	ldd	r25, Z+1	; 0x01
     4fc:	05 97       	sbiw	r24, 0x05	; 5
     4fe:	14 f0       	brlt	.+4      	; 0x504 <snakeMove+0x3c2>
     500:	11 82       	std	Z+1, r1	; 0x01
     502:	10 82       	st	Z, r1
				if(snake[a][2]>4) snake[a][2] = 0;
     504:	e4 e6       	ldi	r30, 0x64	; 100
     506:	f0 e0       	ldi	r31, 0x00	; 0
     508:	84 81       	ldd	r24, Z+4	; 0x04
     50a:	95 81       	ldd	r25, Z+5	; 0x05
     50c:	05 97       	sbiw	r24, 0x05	; 5
     50e:	14 f0       	brlt	.+4      	; 0x514 <snakeMove+0x3d2>
     510:	15 82       	std	Z+5, r1	; 0x05
     512:	14 82       	std	Z+4, r1	; 0x04
				if(snake[a][0]<0) snake[a][0] = 4;
     514:	e4 e6       	ldi	r30, 0x64	; 100
     516:	f0 e0       	ldi	r31, 0x00	; 0
     518:	80 81       	ld	r24, Z
     51a:	91 81       	ldd	r25, Z+1	; 0x01
     51c:	97 ff       	sbrs	r25, 7
     51e:	04 c0       	rjmp	.+8      	; 0x528 <snakeMove+0x3e6>
     520:	84 e0       	ldi	r24, 0x04	; 4
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	91 83       	std	Z+1, r25	; 0x01
     526:	80 83       	st	Z, r24
				if(snake[a][1]<0) snake[a][1] = 4;
     528:	e6 e6       	ldi	r30, 0x66	; 102
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	80 81       	ld	r24, Z
     52e:	91 81       	ldd	r25, Z+1	; 0x01
     530:	97 ff       	sbrs	r25, 7
     532:	04 c0       	rjmp	.+8      	; 0x53c <snakeMove+0x3fa>
     534:	84 e0       	ldi	r24, 0x04	; 4
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	91 83       	std	Z+1, r25	; 0x01
     53a:	80 83       	st	Z, r24
				if(snake[a][2]<0) snake[a][2] = 4;
     53c:	e4 e6       	ldi	r30, 0x64	; 100
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	84 81       	ldd	r24, Z+4	; 0x04
     542:	95 81       	ldd	r25, Z+5	; 0x05
     544:	97 ff       	sbrs	r25, 7
     546:	04 c0       	rjmp	.+8      	; 0x550 <snakeMove+0x40e>
     548:	84 e0       	ldi	r24, 0x04	; 4
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	95 83       	std	Z+5, r25	; 0x05
     54e:	84 83       	std	Z+4, r24	; 0x04
				break;
			
		}
		head[0] = snake[a][0];
     550:	e4 e6       	ldi	r30, 0x64	; 100
     552:	f0 e0       	ldi	r31, 0x00	; 0
     554:	80 81       	ld	r24, Z
     556:	91 81       	ldd	r25, Z+1	; 0x01
     558:	90 93 6b 01 	sts	0x016B, r25
     55c:	80 93 6a 01 	sts	0x016A, r24
		head[1] = snake[a][1];
     560:	80 91 66 00 	lds	r24, 0x0066
     564:	90 91 67 00 	lds	r25, 0x0067
     568:	90 93 6d 01 	sts	0x016D, r25
     56c:	80 93 6c 01 	sts	0x016C, r24
		head[2] = snake[a][2];
     570:	84 81       	ldd	r24, Z+4	; 0x04
     572:	95 81       	ldd	r25, Z+5	; 0x05
     574:	90 93 6f 01 	sts	0x016F, r25
     578:	80 93 6e 01 	sts	0x016E, r24
	}
}
     57c:	df 91       	pop	r29
     57e:	cf 91       	pop	r28
     580:	1f 91       	pop	r17
     582:	08 95       	ret

00000584 <directionHandler>:
void directionHandler(int* position)
{
	snakeMove();	
     584:	0e 94 a1 00 	call	0x142	; 0x142 <snakeMove>

	
}
     588:	08 95       	ret

0000058a <enlarge>:
		enlarge(head);
	}
}

void enlarge(int* position)
{
     58a:	0f 93       	push	r16
     58c:	1f 93       	push	r17
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	8c 01       	movw	r16, r24
     594:	20 e0       	ldi	r18, 0x00	; 0
     596:	30 e0       	ldi	r19, 0x00	; 0
	int a;
	for(a=0;a<30;a++)
	{
		if(snake[a][0]!=(-1))
     598:	f9 01       	movw	r30, r18
     59a:	ee 0f       	add	r30, r30
     59c:	ff 1f       	adc	r31, r31
     59e:	e2 0f       	add	r30, r18
     5a0:	f3 1f       	adc	r31, r19
     5a2:	ee 0f       	add	r30, r30
     5a4:	ff 1f       	adc	r31, r31
     5a6:	ec 59       	subi	r30, 0x9C	; 156
     5a8:	ff 4f       	sbci	r31, 0xFF	; 255
     5aa:	80 81       	ld	r24, Z
     5ac:	91 81       	ldd	r25, Z+1	; 0x01
     5ae:	8f 5f       	subi	r24, 0xFF	; 255
     5b0:	9f 4f       	sbci	r25, 0xFF	; 255
     5b2:	29 f4       	brne	.+10     	; 0x5be <enlarge+0x34>
}

void enlarge(int* position)
{
	int a;
	for(a=0;a<30;a++)
     5b4:	2f 5f       	subi	r18, 0xFF	; 255
     5b6:	3f 4f       	sbci	r19, 0xFF	; 255
     5b8:	2e 31       	cpi	r18, 0x1E	; 30
     5ba:	31 05       	cpc	r19, r1
     5bc:	69 f7       	brne	.-38     	; 0x598 <enlarge+0xe>
	{
		if(snake[a][0]!=(-1))
			break;
	}
	snake[a-1][0] = snake[a][0];
     5be:	c9 01       	movw	r24, r18
     5c0:	01 97       	sbiw	r24, 0x01	; 1
     5c2:	d9 01       	movw	r26, r18
     5c4:	aa 0f       	add	r26, r26
     5c6:	bb 1f       	adc	r27, r27
     5c8:	a2 0f       	add	r26, r18
     5ca:	b3 1f       	adc	r27, r19
     5cc:	aa 0f       	add	r26, r26
     5ce:	bb 1f       	adc	r27, r27
     5d0:	9d 01       	movw	r18, r26
     5d2:	2c 59       	subi	r18, 0x9C	; 156
     5d4:	3f 4f       	sbci	r19, 0xFF	; 255
     5d6:	e9 01       	movw	r28, r18
     5d8:	48 81       	ld	r20, Y
     5da:	59 81       	ldd	r21, Y+1	; 0x01
     5dc:	fc 01       	movw	r30, r24
     5de:	ee 0f       	add	r30, r30
     5e0:	ff 1f       	adc	r31, r31
     5e2:	e8 0f       	add	r30, r24
     5e4:	f9 1f       	adc	r31, r25
     5e6:	ee 0f       	add	r30, r30
     5e8:	ff 1f       	adc	r31, r31
     5ea:	bf 01       	movw	r22, r30
     5ec:	6c 59       	subi	r22, 0x9C	; 156
     5ee:	7f 4f       	sbci	r23, 0xFF	; 255
     5f0:	eb 01       	movw	r28, r22
     5f2:	59 83       	std	Y+1, r21	; 0x01
     5f4:	48 83       	st	Y, r20
	snake[a-1][1] = snake[a][1];
     5f6:	aa 59       	subi	r26, 0x9A	; 154
     5f8:	bf 4f       	sbci	r27, 0xFF	; 255
     5fa:	8d 91       	ld	r24, X+
     5fc:	9c 91       	ld	r25, X
     5fe:	11 97       	sbiw	r26, 0x01	; 1
     600:	ea 59       	subi	r30, 0x9A	; 154
     602:	ff 4f       	sbci	r31, 0xFF	; 255
     604:	91 83       	std	Z+1, r25	; 0x01
     606:	80 83       	st	Z, r24
	snake[a-1][2] = snake[a][2];
     608:	f9 01       	movw	r30, r18
     60a:	84 81       	ldd	r24, Z+4	; 0x04
     60c:	95 81       	ldd	r25, Z+5	; 0x05
     60e:	9d 83       	std	Y+5, r25	; 0x05
     610:	8c 83       	std	Y+4, r24	; 0x04
	snake[a][0] = position[0];
     612:	e8 01       	movw	r28, r16
     614:	88 81       	ld	r24, Y
     616:	99 81       	ldd	r25, Y+1	; 0x01
     618:	91 83       	std	Z+1, r25	; 0x01
     61a:	80 83       	st	Z, r24
	snake[a][1] = position[1];
     61c:	8a 81       	ldd	r24, Y+2	; 0x02
     61e:	9b 81       	ldd	r25, Y+3	; 0x03
     620:	11 96       	adiw	r26, 0x01	; 1
     622:	9c 93       	st	X, r25
     624:	8e 93       	st	-X, r24
	snake[a][2] = position[2];
     626:	8c 81       	ldd	r24, Y+4	; 0x04
     628:	9d 81       	ldd	r25, Y+5	; 0x05
     62a:	95 83       	std	Z+5, r25	; 0x05
     62c:	84 83       	std	Z+4, r24	; 0x04
	
}
     62e:	df 91       	pop	r29
     630:	cf 91       	pop	r28
     632:	1f 91       	pop	r17
     634:	0f 91       	pop	r16
     636:	08 95       	ret

00000638 <delay_ms>:
		launch_effect(current_effect);
    }
}

void delay_ms(int delay)
{
     638:	20 e0       	ldi	r18, 0x00	; 0
     63a:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     63c:	40 ea       	ldi	r20, 0xA0	; 160
     63e:	5f e0       	ldi	r21, 0x0F	; 15
     640:	05 c0       	rjmp	.+10     	; 0x64c <delay_ms+0x14>
     642:	fa 01       	movw	r30, r20
     644:	31 97       	sbiw	r30, 0x01	; 1
     646:	f1 f7       	brne	.-4      	; 0x644 <delay_ms+0xc>
	int i;
	for(i = 0 ; i < delay ; i++) _delay_ms(1);
     648:	2f 5f       	subi	r18, 0xFF	; 255
     64a:	3f 4f       	sbci	r19, 0xFF	; 255
     64c:	28 17       	cp	r18, r24
     64e:	39 07       	cpc	r19, r25
     650:	c4 f3       	brlt	.-16     	; 0x642 <delay_ms+0xa>
}
     652:	08 95       	ret

00000654 <cube_ini>:
{
	
	//set Input and Output for data direction
	//output = 1
	//input = 0
	DDRA = 0xff; //set X_PORT for output 00011111
     654:	8f ef       	ldi	r24, 0xFF	; 255
     656:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0x00; //set BUTTON_PORT for input and ISP
     658:	17 ba       	out	0x17, r1	; 23
	DDRC = 0xff; //set Y_PORT for output 00011111
     65a:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xff; //set Z/EN_PORT for output 11111100 and RXD/TXD for serial in (needs to enable with USRB)
     65c:	81 bb       	out	0x11, r24	; 17
	
	X_PORT = 0x00;
     65e:	1b ba       	out	0x1b, r1	; 27
	Y_PORT = 0x00;
     660:	15 ba       	out	0x15, r1	; 21
	Z_PORT = 0x00;
     662:	12 ba       	out	0x12, r1	; 18
	//set the intern pull ups where needed
	BUTTON_PORT |= (1 << BUTTON);
     664:	c2 9a       	sbi	0x18, 2	; 24
	
	// enable LED drivers
	EN_PORT &= ~(1 << EN);
     666:	97 98       	cbi	0x12, 7	; 18

	// define Mask for output register in ISR
	_X_[0] = 0x01;
     668:	41 e0       	ldi	r20, 0x01	; 1
     66a:	40 93 35 01 	sts	0x0135, r20
	_X_[1] = 0x02;
     66e:	32 e0       	ldi	r19, 0x02	; 2
     670:	30 93 36 01 	sts	0x0136, r19
	_X_[2] = 0x04;
     674:	24 e0       	ldi	r18, 0x04	; 4
     676:	20 93 37 01 	sts	0x0137, r18
	_X_[3] = 0x08;
     67a:	98 e0       	ldi	r25, 0x08	; 8
     67c:	90 93 38 01 	sts	0x0138, r25
	_X_[4] = 0x10;
     680:	80 e1       	ldi	r24, 0x10	; 16
     682:	80 93 39 01 	sts	0x0139, r24

	_Y_[0] = 0x10;
     686:	80 93 5f 01 	sts	0x015F, r24
	_Y_[1] = 0x08;
     68a:	90 93 60 01 	sts	0x0160, r25
	_Y_[2] = 0x04;
     68e:	20 93 61 01 	sts	0x0161, r18
	_Y_[3] = 0x02;
     692:	30 93 62 01 	sts	0x0162, r19
	_Y_[4] = 0x01;
     696:	40 93 63 01 	sts	0x0163, r20

	_Z_[0] = 0x04;
     69a:	20 93 78 01 	sts	0x0178, r18
	_Z_[1] = 0x08;
     69e:	90 93 79 01 	sts	0x0179, r25
	_Z_[2] = 0x10;
     6a2:	80 93 7a 01 	sts	0x017A, r24
	_Z_[3] = 0x20;
     6a6:	80 e2       	ldi	r24, 0x20	; 32
     6a8:	80 93 7b 01 	sts	0x017B, r24
	_Z_[4] = 0x40;
     6ac:	80 e4       	ldi	r24, 0x40	; 64
     6ae:	80 93 7c 01 	sts	0x017C, r24

	// ##########Initiate timers and external interrupt############

	
	//Frame buffer interrupt Timer Counter Control Register in CTC mode enabled in Timer Interrupt Mask Register
	TCNT0 = 0x00; //initial counter value = 0
     6b2:	12 be       	out	0x32, r1	; 50
	TIMSK |= (1 << OCIE0);  //Enable CTC interrupt
     6b4:	89 b7       	in	r24, 0x39	; 57
     6b6:	82 60       	ori	r24, 0x02	; 2
     6b8:	89 bf       	out	0x39, r24	; 57
	// and the interrupt routine is executed.
	// 16000000/256/10 = 6250 times per second
	// There are 5 rows per layer to update..
	// 16000000/256/10/5/5 = 250 FPS
	
	OCR0 = 10; //Interrupt at counter = 10
     6ba:	8a e0       	ldi	r24, 0x0A	; 10
     6bc:	8c bf       	out	0x3c, r24	; 60
	TCCR0 |= (1 << CS02); //prescaler = 256
     6be:	83 b7       	in	r24, 0x33	; 51
     6c0:	84 60       	ori	r24, 0x04	; 4
     6c2:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << WGM01); // Clear Timer on Compare Match (CTC) mode
     6c4:	83 b7       	in	r24, 0x33	; 51
     6c6:	88 60       	ori	r24, 0x08	; 8
     6c8:	83 bf       	out	0x33, r24	; 51

	//Ext. interrupt on interrupt pin INT2 (PB2) for effect switching
	GICR |= (1 << INT2); // INT2 enable im General Interrupt Control Register
     6ca:	8b b7       	in	r24, 0x3b	; 59
     6cc:	80 62       	ori	r24, 0x20	; 32
     6ce:	8b bf       	out	0x3b, r24	; 59
	MCUCSR &= ~(1 << ISC2); //Execute interrupt with falling edge
     6d0:	84 b7       	in	r24, 0x34	; 52
     6d2:	8f 7b       	andi	r24, 0xBF	; 191
     6d4:	84 bf       	out	0x34, r24	; 52

	//Activate global interrupts
	sei();
     6d6:	78 94       	sei
}
     6d8:	08 95       	ret

000006da <__vector_10>:

//Interrupt Service Routine for Frame Buffer
ISR(TIMER0_COMP_vect)
{
     6da:	1f 92       	push	r1
     6dc:	0f 92       	push	r0
     6de:	0f b6       	in	r0, 0x3f	; 63
     6e0:	0f 92       	push	r0
     6e2:	11 24       	eor	r1, r1
     6e4:	2f 93       	push	r18
     6e6:	8f 93       	push	r24
     6e8:	9f 93       	push	r25
     6ea:	ef 93       	push	r30
     6ec:	ff 93       	push	r31
	

	//Enable the layer
	Z_PORT = _Z_[current_layer];
     6ee:	e0 91 77 01 	lds	r30, 0x0177
     6f2:	f0 e0       	ldi	r31, 0x00	; 0
     6f4:	e8 58       	subi	r30, 0x88	; 136
     6f6:	fe 4f       	sbci	r31, 0xFE	; 254
     6f8:	80 81       	ld	r24, Z
     6fa:	82 bb       	out	0x12, r24	; 18
	
		for(current_Yrow = 0 ; current_Yrow < 5 ; current_Yrow++){	
     6fc:	10 92 1a 01 	sts	0x011A, r1
     700:	1e c0       	rjmp	.+60     	; 0x73e <__vector_10+0x64>
			X_PORT = cube[current_layer][current_Yrow];
     702:	80 91 77 01 	lds	r24, 0x0177
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	20 91 1a 01 	lds	r18, 0x011A
     70c:	fc 01       	movw	r30, r24
     70e:	ee 0f       	add	r30, r30
     710:	ff 1f       	adc	r31, r31
     712:	ee 0f       	add	r30, r30
     714:	ff 1f       	adc	r31, r31
     716:	e8 0f       	add	r30, r24
     718:	f9 1f       	adc	r31, r25
     71a:	e2 0f       	add	r30, r18
     71c:	f1 1d       	adc	r31, r1
     71e:	ee 5b       	subi	r30, 0xBE	; 190
     720:	fe 4f       	sbci	r31, 0xFE	; 254
     722:	80 81       	ld	r24, Z
     724:	8b bb       	out	0x1b, r24	; 27
			Y_PORT = _Y_[current_Yrow];
     726:	e0 91 1a 01 	lds	r30, 0x011A
     72a:	f0 e0       	ldi	r31, 0x00	; 0
     72c:	e1 5a       	subi	r30, 0xA1	; 161
     72e:	fe 4f       	sbci	r31, 0xFE	; 254
     730:	80 81       	ld	r24, Z
     732:	85 bb       	out	0x15, r24	; 21
	

	//Enable the layer
	Z_PORT = _Z_[current_layer];
	
		for(current_Yrow = 0 ; current_Yrow < 5 ; current_Yrow++){	
     734:	80 91 1a 01 	lds	r24, 0x011A
     738:	8f 5f       	subi	r24, 0xFF	; 255
     73a:	80 93 1a 01 	sts	0x011A, r24
     73e:	80 91 1a 01 	lds	r24, 0x011A
     742:	85 30       	cpi	r24, 0x05	; 5
     744:	f0 f2       	brcs	.-68     	; 0x702 <__vector_10+0x28>
		}
 
	
	//Running through 1 layer wins vs. updating all layers during an interrupt.
	//Because the ISR comes faster to an end and the cube has a faster update cycle to the buffer.
	if(current_layer++ == 4) current_layer = 0;
     746:	80 91 77 01 	lds	r24, 0x0177
     74a:	8f 5f       	subi	r24, 0xFF	; 255
     74c:	80 93 77 01 	sts	0x0177, r24
     750:	81 50       	subi	r24, 0x01	; 1
     752:	84 30       	cpi	r24, 0x04	; 4
     754:	11 f4       	brne	.+4      	; 0x75a <__vector_10+0x80>
     756:	10 92 77 01 	sts	0x0177, r1
}
     75a:	ff 91       	pop	r31
     75c:	ef 91       	pop	r30
     75e:	9f 91       	pop	r25
     760:	8f 91       	pop	r24
     762:	2f 91       	pop	r18
     764:	0f 90       	pop	r0
     766:	0f be       	out	0x3f, r0	; 63
     768:	0f 90       	pop	r0
     76a:	1f 90       	pop	r1
     76c:	18 95       	reti

0000076e <__vector_3>:

//Interrupt Service Routine for effect switching
ISR(INT2_vect)
{
     76e:	1f 92       	push	r1
     770:	0f 92       	push	r0
     772:	0f b6       	in	r0, 0x3f	; 63
     774:	0f 92       	push	r0
     776:	11 24       	eor	r1, r1
     778:	8f 93       	push	r24
     77a:	9f 93       	push	r25
	if(direction++ == 5) direction = 0;
     77c:	80 91 5d 01 	lds	r24, 0x015D
     780:	90 91 5e 01 	lds	r25, 0x015E
     784:	01 96       	adiw	r24, 0x01	; 1
     786:	90 93 5e 01 	sts	0x015E, r25
     78a:	80 93 5d 01 	sts	0x015D, r24
     78e:	01 97       	sbiw	r24, 0x01	; 1
     790:	05 97       	sbiw	r24, 0x05	; 5
     792:	21 f4       	brne	.+8      	; 0x79c <__vector_3+0x2e>
     794:	10 92 5e 01 	sts	0x015E, r1
     798:	10 92 5d 01 	sts	0x015D, r1
	
}
     79c:	9f 91       	pop	r25
     79e:	8f 91       	pop	r24
     7a0:	0f 90       	pop	r0
     7a2:	0f be       	out	0x3f, r0	; 63
     7a4:	0f 90       	pop	r0
     7a6:	1f 90       	pop	r1
     7a8:	18 95       	reti

000007aa <check>:



void check()
{
	switch(direction)
     7aa:	80 91 5d 01 	lds	r24, 0x015D
     7ae:	90 91 5e 01 	lds	r25, 0x015E
     7b2:	81 30       	cpi	r24, 0x01	; 1
     7b4:	91 05       	cpc	r25, r1
     7b6:	51 f0       	breq	.+20     	; 0x7cc <check+0x22>
     7b8:	82 30       	cpi	r24, 0x02	; 2
     7ba:	91 05       	cpc	r25, r1
     7bc:	71 f0       	breq	.+28     	; 0x7da <check+0x30>
     7be:	89 2b       	or	r24, r25
     7c0:	a1 f4       	brne	.+40     	; 0x7ea <check+0x40>
	{
		case 0:
			setLED(0,0,0);
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	60 e0       	ldi	r22, 0x00	; 0
     7c8:	70 e0       	ldi	r23, 0x00	; 0
     7ca:	04 c0       	rjmp	.+8      	; 0x7d4 <check+0x2a>
			break;
			case 1:
			setLED(0,4,0);
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	64 e0       	ldi	r22, 0x04	; 4
     7d2:	70 e0       	ldi	r23, 0x00	; 0
     7d4:	40 e0       	ldi	r20, 0x00	; 0
     7d6:	50 e0       	ldi	r21, 0x00	; 0
     7d8:	06 c0       	rjmp	.+12     	; 0x7e6 <check+0x3c>
			break;
			case 2:
			setLED(0,0,4);
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	60 e0       	ldi	r22, 0x00	; 0
     7e0:	70 e0       	ldi	r23, 0x00	; 0
     7e2:	44 e0       	ldi	r20, 0x04	; 4
     7e4:	50 e0       	ldi	r21, 0x00	; 0
     7e6:	0e 94 d0 05 	call	0xba0	; 0xba0 <setLED>
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	20 ea       	ldi	r18, 0xA0	; 160
     7f0:	3f e0       	ldi	r19, 0x0F	; 15
     7f2:	f9 01       	movw	r30, r18
     7f4:	31 97       	sbiw	r30, 0x01	; 1
     7f6:	f1 f7       	brne	.-4      	; 0x7f4 <check+0x4a>
}

void delay_ms(int delay)
{
	int i;
	for(i = 0 ; i < delay ; i++) _delay_ms(1);
     7f8:	01 96       	adiw	r24, 0x01	; 1
     7fa:	82 33       	cpi	r24, 0x32	; 50
     7fc:	91 05       	cpc	r25, r1
     7fe:	c9 f7       	brne	.-14     	; 0x7f2 <check+0x48>
			case 2:
			setLED(0,0,4);
			break;
	}
	delay_ms(50);
}
     800:	08 95       	ret

00000802 <displaySnake>:
		}
	}
}

void displaySnake()
{
     802:	ef 92       	push	r14
     804:	ff 92       	push	r15
     806:	0f 93       	push	r16
     808:	1f 93       	push	r17
     80a:	cf 93       	push	r28
     80c:	df 93       	push	r29
     80e:	ee 24       	eor	r14, r14
     810:	ff 24       	eor	r15, r15
     812:	26 c0       	rjmp	.+76     	; 0x860 <__stack+0x1>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	0b c0       	rjmp	.+22     	; 0x830 <displaySnake+0x2e>
	{
		for( b=0;b<3;b++)
		{
		if(snake[a][b]==-1)
		 break;
		setLED(snake[a][0],snake[a][1],snake[a][2]);
     81a:	f8 01       	movw	r30, r16
     81c:	80 81       	ld	r24, Z
     81e:	91 81       	ldd	r25, Z+1	; 0x01
     820:	68 81       	ld	r22, Y
     822:	79 81       	ldd	r23, Y+1	; 0x01
     824:	44 81       	ldd	r20, Z+4	; 0x04
     826:	55 81       	ldd	r21, Z+5	; 0x05
     828:	0e 94 d0 05 	call	0xba0	; 0xba0 <setLED>
     82c:	83 e0       	ldi	r24, 0x03	; 3
     82e:	90 e0       	ldi	r25, 0x00	; 0

		}
		if(snake[a][b]==-1)
     830:	f7 01       	movw	r30, r14
     832:	ee 0f       	add	r30, r30
     834:	ff 1f       	adc	r31, r31
     836:	ee 0d       	add	r30, r14
     838:	ff 1d       	adc	r31, r15
     83a:	e8 0f       	add	r30, r24
     83c:	f9 1f       	adc	r31, r25
     83e:	ee 0f       	add	r30, r30
     840:	ff 1f       	adc	r31, r31
     842:	ec 59       	subi	r30, 0x9C	; 156
     844:	ff 4f       	sbci	r31, 0xFF	; 255
     846:	80 81       	ld	r24, Z
     848:	91 81       	ldd	r25, Z+1	; 0x01
     84a:	8f 5f       	subi	r24, 0xFF	; 255
     84c:	9f 4f       	sbci	r25, 0xFF	; 255
     84e:	09 f4       	brne	.+2      	; 0x852 <displaySnake+0x50>
     850:	41 c0       	rjmp	.+130    	; 0x8d4 <__stack+0x75>
}

void displaySnake()
{
int a,b;
	for( a=0;a<30;a++)
     852:	08 94       	sec
     854:	e1 1c       	adc	r14, r1
     856:	f1 1c       	adc	r15, r1
     858:	2e e1       	ldi	r18, 0x1E	; 30
     85a:	e2 16       	cp	r14, r18
     85c:	f1 04       	cpc	r15, r1
     85e:	d1 f1       	breq	.+116    	; 0x8d4 <__stack+0x75>
	{
		for( b=0;b<3;b++)
		{
		if(snake[a][b]==-1)
     860:	b7 01       	movw	r22, r14
     862:	66 0f       	add	r22, r22
     864:	77 1f       	adc	r23, r23
     866:	6e 0d       	add	r22, r14
     868:	7f 1d       	adc	r23, r15
     86a:	8b 01       	movw	r16, r22
     86c:	00 0f       	add	r16, r16
     86e:	11 1f       	adc	r17, r17
     870:	0c 59       	subi	r16, 0x9C	; 156
     872:	1f 4f       	sbci	r17, 0xFF	; 255
     874:	f8 01       	movw	r30, r16
     876:	80 81       	ld	r24, Z
     878:	91 81       	ldd	r25, Z+1	; 0x01
     87a:	8f 5f       	subi	r24, 0xFF	; 255
     87c:	9f 4f       	sbci	r25, 0xFF	; 255
     87e:	19 f4       	brne	.+6      	; 0x886 <__stack+0x27>
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	d5 cf       	rjmp	.-86     	; 0x830 <displaySnake+0x2e>
		 break;
		setLED(snake[a][0],snake[a][1],snake[a][2]);
     886:	f8 01       	movw	r30, r16
     888:	80 81       	ld	r24, Z
     88a:	91 81       	ldd	r25, Z+1	; 0x01
     88c:	eb 01       	movw	r28, r22
     88e:	cc 0f       	add	r28, r28
     890:	dd 1f       	adc	r29, r29
     892:	ca 59       	subi	r28, 0x9A	; 154
     894:	df 4f       	sbci	r29, 0xFF	; 255
     896:	68 81       	ld	r22, Y
     898:	79 81       	ldd	r23, Y+1	; 0x01
     89a:	44 81       	ldd	r20, Z+4	; 0x04
     89c:	55 81       	ldd	r21, Z+5	; 0x05
     89e:	0e 94 d0 05 	call	0xba0	; 0xba0 <setLED>
int a,b;
	for( a=0;a<30;a++)
	{
		for( b=0;b<3;b++)
		{
		if(snake[a][b]==-1)
     8a2:	88 81       	ld	r24, Y
     8a4:	99 81       	ldd	r25, Y+1	; 0x01
     8a6:	8f 5f       	subi	r24, 0xFF	; 255
     8a8:	9f 4f       	sbci	r25, 0xFF	; 255
     8aa:	19 f4       	brne	.+6      	; 0x8b2 <__stack+0x53>
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	bf cf       	rjmp	.-130    	; 0x830 <displaySnake+0x2e>
		 break;
		setLED(snake[a][0],snake[a][1],snake[a][2]);
     8b2:	f8 01       	movw	r30, r16
     8b4:	80 81       	ld	r24, Z
     8b6:	91 81       	ldd	r25, Z+1	; 0x01
     8b8:	68 81       	ld	r22, Y
     8ba:	79 81       	ldd	r23, Y+1	; 0x01
     8bc:	44 81       	ldd	r20, Z+4	; 0x04
     8be:	55 81       	ldd	r21, Z+5	; 0x05
     8c0:	0e 94 d0 05 	call	0xba0	; 0xba0 <setLED>
int a,b;
	for( a=0;a<30;a++)
	{
		for( b=0;b<3;b++)
		{
		if(snake[a][b]==-1)
     8c4:	f8 01       	movw	r30, r16
     8c6:	84 81       	ldd	r24, Z+4	; 0x04
     8c8:	95 81       	ldd	r25, Z+5	; 0x05
     8ca:	8f 5f       	subi	r24, 0xFF	; 255
     8cc:	9f 4f       	sbci	r25, 0xFF	; 255
     8ce:	09 f0       	breq	.+2      	; 0x8d2 <__stack+0x73>
     8d0:	a4 cf       	rjmp	.-184    	; 0x81a <displaySnake+0x18>
     8d2:	a0 cf       	rjmp	.-192    	; 0x814 <displaySnake+0x12>

		}
		if(snake[a][b]==-1)
		 break;
	}
}
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	1f 91       	pop	r17
     8da:	0f 91       	pop	r16
     8dc:	ff 90       	pop	r15
     8de:	ef 90       	pop	r14
     8e0:	08 95       	ret

000008e2 <boot_check>:
	if(direction++ == 5) direction = 0;
	
}

void boot_check(int delay)
{
     8e2:	ef 92       	push	r14
     8e4:	ff 92       	push	r15
     8e6:	0f 93       	push	r16
     8e8:	1f 93       	push	r17
     8ea:	cf 93       	push	r28
     8ec:	df 93       	push	r29
     8ee:	8c 01       	movw	r16, r24
     8f0:	c0 e0       	ldi	r28, 0x00	; 0
     8f2:	d0 e0       	ldi	r29, 0x00	; 0
     8f4:	70 ea       	ldi	r23, 0xA0	; 160
     8f6:	e7 2e       	mov	r14, r23
     8f8:	7f e0       	ldi	r23, 0x0F	; 15
     8fa:	f7 2e       	mov	r15, r23
	//earn some blink blink for that ;)
	int i;
	
	for(i = 0 ; i < 4 ; i++)
	{
		fill(0x1f);
     8fc:	8f e1       	ldi	r24, 0x1F	; 31
     8fe:	0e 94 69 09 	call	0x12d2	; 0x12d2 <fill>
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	04 c0       	rjmp	.+8      	; 0x910 <boot_check+0x2e>
     908:	f7 01       	movw	r30, r14
     90a:	31 97       	sbiw	r30, 0x01	; 1
     90c:	f1 f7       	brne	.-4      	; 0x90a <boot_check+0x28>
}

void delay_ms(int delay)
{
	int i;
	for(i = 0 ; i < delay ; i++) _delay_ms(1);
     90e:	01 96       	adiw	r24, 0x01	; 1
     910:	80 17       	cp	r24, r16
     912:	91 07       	cpc	r25, r17
     914:	cc f3       	brlt	.-14     	; 0x908 <boot_check+0x26>
	
	for(i = 0 ; i < 4 ; i++)
	{
		fill(0x1f);
		delay_ms(delay);
		fill(0x00);
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	0e 94 69 09 	call	0x12d2	; 0x12d2 <fill>
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	04 c0       	rjmp	.+8      	; 0x92a <boot_check+0x48>
     922:	f7 01       	movw	r30, r14
     924:	31 97       	sbiw	r30, 0x01	; 1
     926:	f1 f7       	brne	.-4      	; 0x924 <boot_check+0x42>
}

void delay_ms(int delay)
{
	int i;
	for(i = 0 ; i < delay ; i++) _delay_ms(1);
     928:	01 96       	adiw	r24, 0x01	; 1
     92a:	80 17       	cp	r24, r16
     92c:	91 07       	cpc	r25, r17
     92e:	cc f3       	brlt	.-14     	; 0x922 <boot_check+0x40>
{
	//shows that the cube was successfully initiated
	//earn some blink blink for that ;)
	int i;
	
	for(i = 0 ; i < 4 ; i++)
     930:	21 96       	adiw	r28, 0x01	; 1
     932:	c4 30       	cpi	r28, 0x04	; 4
     934:	d1 05       	cpc	r29, r1
     936:	11 f7       	brne	.-60     	; 0x8fc <boot_check+0x1a>
		delay_ms(delay);
		fill(0x00);
		delay_ms(delay);
	}

}
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	1f 91       	pop	r17
     93e:	0f 91       	pop	r16
     940:	ff 90       	pop	r15
     942:	ef 90       	pop	r14
     944:	08 95       	ret

00000946 <generateFruitPlace>:
	snake[a][2] = position[2];
	
}

void generateFruitPlace()
{
     946:	cf 92       	push	r12
     948:	df 92       	push	r13
     94a:	ef 92       	push	r14
     94c:	ff 92       	push	r15
     94e:	0f 93       	push	r16
     950:	1f 93       	push	r17
	int x,y,z;
	do{
	x = rand()%5;
     952:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <rand>
     956:	65 e0       	ldi	r22, 0x05	; 5
     958:	70 e0       	ldi	r23, 0x00	; 0
     95a:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <__divmodhi4>
     95e:	d8 2e       	mov	r13, r24
     960:	c9 2e       	mov	r12, r25
	y = rand()%5;
     962:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <rand>
     966:	65 e0       	ldi	r22, 0x05	; 5
     968:	70 e0       	ldi	r23, 0x00	; 0
     96a:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <__divmodhi4>
     96e:	f8 2e       	mov	r15, r24
     970:	e9 2e       	mov	r14, r25
	z = rand()%5;
     972:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <rand>
     976:	65 e0       	ldi	r22, 0x05	; 5
     978:	70 e0       	ldi	r23, 0x00	; 0
     97a:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <__divmodhi4>
     97e:	18 2f       	mov	r17, r24
     980:	09 2f       	mov	r16, r25
	}
	while(getLED(x,y,z)==0x01);
     982:	8d 2d       	mov	r24, r13
     984:	9c 2d       	mov	r25, r12
     986:	6f 2d       	mov	r22, r15
     988:	7e 2d       	mov	r23, r14
     98a:	41 2f       	mov	r20, r17
     98c:	50 2f       	mov	r21, r16
     98e:	0e 94 19 06 	call	0xc32	; 0xc32 <getLED>
     992:	81 30       	cpi	r24, 0x01	; 1
     994:	f1 f2       	breq	.-68     	; 0x952 <generateFruitPlace+0xc>
	
	fruit[0] = x;
     996:	e4 e6       	ldi	r30, 0x64	; 100
     998:	f1 e0       	ldi	r31, 0x01	; 1
     99a:	d0 92 64 01 	sts	0x0164, r13
     99e:	c0 92 65 01 	sts	0x0165, r12
	fruit[1] = y;
     9a2:	f0 92 66 01 	sts	0x0166, r15
     9a6:	e3 82       	std	Z+3, r14	; 0x03
	fruit[2] = z;
     9a8:	10 93 68 01 	sts	0x0168, r17
     9ac:	05 83       	std	Z+5, r16	; 0x05
	setLED(fruit[0],fruit[1],fruit[2]);
     9ae:	8d 2d       	mov	r24, r13
     9b0:	9c 2d       	mov	r25, r12
     9b2:	6f 2d       	mov	r22, r15
     9b4:	7e 2d       	mov	r23, r14
     9b6:	41 2f       	mov	r20, r17
     9b8:	50 2f       	mov	r21, r16
     9ba:	0e 94 d0 05 	call	0xba0	; 0xba0 <setLED>
}
     9be:	1f 91       	pop	r17
     9c0:	0f 91       	pop	r16
     9c2:	ff 90       	pop	r15
     9c4:	ef 90       	pop	r14
     9c6:	df 90       	pop	r13
     9c8:	cf 90       	pop	r12
     9ca:	08 95       	ret

000009cc <fruitHandler>:

	
}

void fruitHandler(int* pos, int* fruit)
{
     9cc:	fb 01       	movw	r30, r22
	
	
	if((head[0] == fruit[0]) && (head[1] == fruit[1]) && (head[2] == fruit[2]))
     9ce:	20 91 6a 01 	lds	r18, 0x016A
     9d2:	30 91 6b 01 	lds	r19, 0x016B
     9d6:	80 81       	ld	r24, Z
     9d8:	91 81       	ldd	r25, Z+1	; 0x01
     9da:	28 17       	cp	r18, r24
     9dc:	39 07       	cpc	r19, r25
     9de:	d1 f4       	brne	.+52     	; 0xa14 <fruitHandler+0x48>
     9e0:	20 91 6c 01 	lds	r18, 0x016C
     9e4:	30 91 6d 01 	lds	r19, 0x016D
     9e8:	82 81       	ldd	r24, Z+2	; 0x02
     9ea:	93 81       	ldd	r25, Z+3	; 0x03
     9ec:	28 17       	cp	r18, r24
     9ee:	39 07       	cpc	r19, r25
     9f0:	89 f4       	brne	.+34     	; 0xa14 <fruitHandler+0x48>
     9f2:	20 91 6e 01 	lds	r18, 0x016E
     9f6:	30 91 6f 01 	lds	r19, 0x016F
     9fa:	84 81       	ldd	r24, Z+4	; 0x04
     9fc:	95 81       	ldd	r25, Z+5	; 0x05
     9fe:	28 17       	cp	r18, r24
     a00:	39 07       	cpc	r19, r25
     a02:	41 f4       	brne	.+16     	; 0xa14 <fruitHandler+0x48>
	{
		matrix();
     a04:	0e 94 57 10 	call	0x20ae	; 0x20ae <matrix>
		generateFruitPlace();
     a08:	0e 94 a3 04 	call	0x946	; 0x946 <generateFruitPlace>
		enlarge(head);
     a0c:	8a e6       	ldi	r24, 0x6A	; 106
     a0e:	91 e0       	ldi	r25, 0x01	; 1
     a10:	0e 94 c5 02 	call	0x58a	; 0x58a <enlarge>
     a14:	08 95       	ret

00000a16 <start>:
}



void start()
{
     a16:	cf 93       	push	r28
     a18:	df 93       	push	r29
	position[0]=0;
     a1a:	10 92 3b 01 	sts	0x013B, r1
     a1e:	10 92 3a 01 	sts	0x013A, r1
	position[1]=0;
     a22:	10 92 3d 01 	sts	0x013D, r1
     a26:	10 92 3c 01 	sts	0x013C, r1
	position[2]=0;
     a2a:	10 92 3f 01 	sts	0x013F, r1
     a2e:	10 92 3e 01 	sts	0x013E, r1
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	90 e0       	ldi	r25, 0x00	; 0
{
	for(int a=0;a<30;a++)
	{
		for(int b=0;b<3;b++)
		{
		 snake[a][b]=-1;
     a36:	2f ef       	ldi	r18, 0xFF	; 255
     a38:	3f ef       	ldi	r19, 0xFF	; 255
     a3a:	fc 01       	movw	r30, r24
     a3c:	ee 0f       	add	r30, r30
     a3e:	ff 1f       	adc	r31, r31
     a40:	e8 0f       	add	r30, r24
     a42:	f9 1f       	adc	r31, r25
     a44:	ee 0f       	add	r30, r30
     a46:	ff 1f       	adc	r31, r31
     a48:	df 01       	movw	r26, r30
     a4a:	ac 59       	subi	r26, 0x9C	; 156
     a4c:	bf 4f       	sbci	r27, 0xFF	; 255
     a4e:	11 96       	adiw	r26, 0x01	; 1
     a50:	3c 93       	st	X, r19
     a52:	2e 93       	st	-X, r18
     a54:	ea 59       	subi	r30, 0x9A	; 154
     a56:	ff 4f       	sbci	r31, 0xFF	; 255
     a58:	31 83       	std	Z+1, r19	; 0x01
     a5a:	20 83       	st	Z, r18
     a5c:	15 96       	adiw	r26, 0x05	; 5
     a5e:	3c 93       	st	X, r19
     a60:	2e 93       	st	-X, r18
     a62:	14 97       	sbiw	r26, 0x04	; 4

volatile int snake[30][3];

void fillSnake()
{
	for(int a=0;a<30;a++)
     a64:	01 96       	adiw	r24, 0x01	; 1
     a66:	8e 31       	cpi	r24, 0x1E	; 30
     a68:	91 05       	cpc	r25, r1
     a6a:	39 f7       	brne	.-50     	; 0xa3a <start+0x24>
{
	position[0]=0;
	position[1]=0;
	position[2]=0;
	fillSnake();
	snake[0][0] = position[0];
     a6c:	80 91 3a 01 	lds	r24, 0x013A
     a70:	90 91 3b 01 	lds	r25, 0x013B
     a74:	90 93 65 00 	sts	0x0065, r25
     a78:	80 93 64 00 	sts	0x0064, r24
	snake[0][1] = position[1];
     a7c:	80 91 3c 01 	lds	r24, 0x013C
     a80:	90 91 3d 01 	lds	r25, 0x013D
     a84:	90 93 67 00 	sts	0x0067, r25
     a88:	80 93 66 00 	sts	0x0066, r24
	snake[0][2] = position[2];
     a8c:	80 91 3e 01 	lds	r24, 0x013E
     a90:	90 91 3f 01 	lds	r25, 0x013F
     a94:	90 93 69 00 	sts	0x0069, r25
     a98:	80 93 68 00 	sts	0x0068, r24
	
	 *posx = position[0];
     a9c:	80 91 3a 01 	lds	r24, 0x013A
     aa0:	90 91 3b 01 	lds	r25, 0x013B
     aa4:	e0 91 5b 01 	lds	r30, 0x015B
     aa8:	f0 91 5c 01 	lds	r31, 0x015C
     aac:	91 83       	std	Z+1, r25	; 0x01
     aae:	80 83       	st	Z, r24
	 *posy = position[1];
     ab0:	80 91 3c 01 	lds	r24, 0x013C
     ab4:	90 91 3d 01 	lds	r25, 0x013D
     ab8:	e0 91 75 01 	lds	r30, 0x0175
     abc:	f0 91 76 01 	lds	r31, 0x0176
     ac0:	91 83       	std	Z+1, r25	; 0x01
     ac2:	80 83       	st	Z, r24
	 *posz = position[2];
     ac4:	80 91 3e 01 	lds	r24, 0x013E
     ac8:	90 91 3f 01 	lds	r25, 0x013F
     acc:	e0 91 18 01 	lds	r30, 0x0118
     ad0:	f0 91 19 01 	lds	r31, 0x0119
     ad4:	91 83       	std	Z+1, r25	; 0x01
     ad6:	80 83       	st	Z, r24
	 *fruitx = fruit[0];
     ad8:	e0 91 70 01 	lds	r30, 0x0170
     adc:	f0 91 71 01 	lds	r31, 0x0171
     ae0:	80 91 64 01 	lds	r24, 0x0164
     ae4:	90 91 65 01 	lds	r25, 0x0165
     ae8:	91 83       	std	Z+1, r25	; 0x01
     aea:	80 83       	st	Z, r24
	 *fruity = fruit[1];
     aec:	e0 91 73 01 	lds	r30, 0x0173
     af0:	f0 91 74 01 	lds	r31, 0x0174
     af4:	80 91 66 01 	lds	r24, 0x0166
     af8:	90 91 67 01 	lds	r25, 0x0167
     afc:	91 83       	std	Z+1, r25	; 0x01
     afe:	80 83       	st	Z, r24
	 *fruitz = fruit[2];
     b00:	e0 91 40 01 	lds	r30, 0x0140
     b04:	f0 91 41 01 	lds	r31, 0x0141
     b08:	80 91 68 01 	lds	r24, 0x0168
     b0c:	90 91 69 01 	lds	r25, 0x0169
     b10:	91 83       	std	Z+1, r25	; 0x01
     b12:	80 83       	st	Z, r24
	int x=0,y=0,z=0;
	//unsigned int iseed = (unsigned int)time(NULL);
	//srand (iseed);
	generateFruitPlace();
     b14:	0e 94 a3 04 	call	0x946	; 0x946 <generateFruitPlace>
     b18:	c0 ea       	ldi	r28, 0xA0	; 160
     b1a:	df e0       	ldi	r29, 0x0F	; 15
	
	while(1)
	{

		fill(0x00);
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	0e 94 69 09 	call	0x12d2	; 0x12d2 <fill>
		//
		//setLED(position[0],position[1],position[2]);
		displaySnake();
     b22:	0e 94 01 04 	call	0x802	; 0x802 <displaySnake>
		setLED(fruit[0],fruit[1],fruit[2]);
     b26:	60 91 66 01 	lds	r22, 0x0166
     b2a:	70 91 67 01 	lds	r23, 0x0167
     b2e:	40 91 68 01 	lds	r20, 0x0168
     b32:	50 91 69 01 	lds	r21, 0x0169
     b36:	80 91 64 01 	lds	r24, 0x0164
     b3a:	90 91 65 01 	lds	r25, 0x0165
     b3e:	0e 94 d0 05 	call	0xba0	; 0xba0 <setLED>
		head[2] = snake[a][2];
	}
}
void directionHandler(int* position)
{
	snakeMove();	
     b42:	0e 94 a1 00 	call	0x142	; 0x142 <snakeMove>
		//
		//setLED(position[0],position[1],position[2]);
		displaySnake();
		setLED(fruit[0],fruit[1],fruit[2]);
		directionHandler(position);
		fruitHandler(position,fruit);
     b46:	8a e3       	ldi	r24, 0x3A	; 58
     b48:	91 e0       	ldi	r25, 0x01	; 1
     b4a:	64 e6       	ldi	r22, 0x64	; 100
     b4c:	71 e0       	ldi	r23, 0x01	; 1
     b4e:	0e 94 e6 04 	call	0x9cc	; 0x9cc <fruitHandler>
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	fe 01       	movw	r30, r28
     b58:	31 97       	sbiw	r30, 0x01	; 1
     b5a:	f1 f7       	brne	.-4      	; 0xb58 <start+0x142>
}

void delay_ms(int delay)
{
	int i;
	for(i = 0 ; i < delay ; i++) _delay_ms(1);
     b5c:	01 96       	adiw	r24, 0x01	; 1
     b5e:	21 e0       	ldi	r18, 0x01	; 1
     b60:	84 3f       	cpi	r24, 0xF4	; 244
     b62:	92 07       	cpc	r25, r18
     b64:	c1 f7       	brne	.-16     	; 0xb56 <start+0x140>
     b66:	da cf       	rjmp	.-76     	; 0xb1c <start+0x106>

00000b68 <launch_effect>:
		break;
	}	
		*/
		while(1)
		{
		start();
     b68:	0e 94 0b 05 	call	0xa16	; 0xa16 <start>
		writeEestec();	
     b6c:	0e 94 b5 11 	call	0x236a	; 0x236a <writeEestec>
     b70:	fb cf       	rjmp	.-10     	; 0xb68 <launch_effect>

00000b72 <main>:

int main(void)
{

	//Set the layer and Y row to start drawing at
	current_layer = 0x00;
     b72:	10 92 77 01 	sts	0x0177, r1
	current_Yrow = 0x00;
     b76:	10 92 1a 01 	sts	0x011A, r1
	//Set effect to start with
	current_effect = 0;
     b7a:	10 92 34 01 	sts	0x0134, r1
 	
	cube_ini();
     b7e:	0e 94 2a 03 	call	0x654	; 0x654 <cube_ini>
	choice = 0;
     b82:	10 92 72 01 	sts	0x0172, r1
	direction = 0;
     b86:	10 92 5e 01 	sts	0x015E, r1
     b8a:	10 92 5d 01 	sts	0x015D, r1
	boot_check(500);
     b8e:	84 ef       	ldi	r24, 0xF4	; 244
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	0e 94 71 04 	call	0x8e2	; 0x8e2 <boot_check>
	
	while(1)
    {
		launch_effect(current_effect);
     b96:	80 91 34 01 	lds	r24, 0x0134
     b9a:	0e 94 b4 05 	call	0xb68	; 0xb68 <launch_effect>
     b9e:	fb cf       	rjmp	.-10     	; 0xb96 <main+0x24>

00000ba0 <setLED>:
// Voxel comes from volumetric and pixel. It describes a data point of 3D grid graphic
// Voxel == 1 LED in the 3D cube grid
// Set a voxel (LED) in the cube buffer

void setLED(int x, int y, int z)
{ 
     ba0:	dc 01       	movw	r26, r24
}

// This function validates that we are drawing inside the cube.
unsigned char inrange(int x, int y, int z)
{
	if (x >= 0 && x < 5 && y >= 0 && y < 5 && z >= 0 && z < 5){
     ba2:	85 30       	cpi	r24, 0x05	; 5
     ba4:	91 05       	cpc	r25, r1
     ba6:	f8 f4       	brcc	.+62     	; 0xbe6 <setLED+0x46>
     ba8:	77 fd       	sbrc	r23, 7
     baa:	1d c0       	rjmp	.+58     	; 0xbe6 <setLED+0x46>
     bac:	65 30       	cpi	r22, 0x05	; 5
     bae:	71 05       	cpc	r23, r1
     bb0:	d4 f4       	brge	.+52     	; 0xbe6 <setLED+0x46>
     bb2:	57 fd       	sbrc	r21, 7
     bb4:	18 c0       	rjmp	.+48     	; 0xbe6 <setLED+0x46>
     bb6:	45 30       	cpi	r20, 0x05	; 5
     bb8:	51 05       	cpc	r21, r1
     bba:	ac f4       	brge	.+42     	; 0xbe6 <setLED+0x46>
// Voxel == 1 LED in the 3D cube grid
// Set a voxel (LED) in the cube buffer

void setLED(int x, int y, int z)
{ 
	if (inrange(x, y, z)) cube[z][y] |= (1 << x);
     bbc:	fa 01       	movw	r30, r20
     bbe:	ee 0f       	add	r30, r30
     bc0:	ff 1f       	adc	r31, r31
     bc2:	ee 0f       	add	r30, r30
     bc4:	ff 1f       	adc	r31, r31
     bc6:	e4 0f       	add	r30, r20
     bc8:	f5 1f       	adc	r31, r21
     bca:	e6 0f       	add	r30, r22
     bcc:	f7 1f       	adc	r31, r23
     bce:	ee 5b       	subi	r30, 0xBE	; 190
     bd0:	fe 4f       	sbci	r31, 0xFE	; 254
     bd2:	20 81       	ld	r18, Z
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	02 c0       	rjmp	.+4      	; 0xbde <setLED+0x3e>
     bda:	88 0f       	add	r24, r24
     bdc:	99 1f       	adc	r25, r25
     bde:	aa 95       	dec	r26
     be0:	e2 f7       	brpl	.-8      	; 0xbda <setLED+0x3a>
     be2:	28 2b       	or	r18, r24
     be4:	20 83       	st	Z, r18
     be6:	08 95       	ret

00000be8 <clrLED>:
}

// Clear a voxel (LED) in the cube buffer
void clrLED(int x, int y, int z)
{
     be8:	dc 01       	movw	r26, r24
}

// This function validates that we are drawing inside the cube.
unsigned char inrange(int x, int y, int z)
{
	if (x >= 0 && x < 5 && y >= 0 && y < 5 && z >= 0 && z < 5){
     bea:	85 30       	cpi	r24, 0x05	; 5
     bec:	91 05       	cpc	r25, r1
     bee:	00 f5       	brcc	.+64     	; 0xc30 <clrLED+0x48>
     bf0:	77 fd       	sbrc	r23, 7
     bf2:	1e c0       	rjmp	.+60     	; 0xc30 <clrLED+0x48>
     bf4:	65 30       	cpi	r22, 0x05	; 5
     bf6:	71 05       	cpc	r23, r1
     bf8:	dc f4       	brge	.+54     	; 0xc30 <clrLED+0x48>
     bfa:	57 fd       	sbrc	r21, 7
     bfc:	19 c0       	rjmp	.+50     	; 0xc30 <clrLED+0x48>
     bfe:	45 30       	cpi	r20, 0x05	; 5
     c00:	51 05       	cpc	r21, r1
     c02:	b4 f4       	brge	.+44     	; 0xc30 <clrLED+0x48>
}

// Clear a voxel (LED) in the cube buffer
void clrLED(int x, int y, int z)
{
	if (inrange(x, y, z)) cube[z][y] &= ~(1 << x);
     c04:	fa 01       	movw	r30, r20
     c06:	ee 0f       	add	r30, r30
     c08:	ff 1f       	adc	r31, r31
     c0a:	ee 0f       	add	r30, r30
     c0c:	ff 1f       	adc	r31, r31
     c0e:	e4 0f       	add	r30, r20
     c10:	f5 1f       	adc	r31, r21
     c12:	e6 0f       	add	r30, r22
     c14:	f7 1f       	adc	r31, r23
     c16:	ee 5b       	subi	r30, 0xBE	; 190
     c18:	fe 4f       	sbci	r31, 0xFE	; 254
     c1a:	20 81       	ld	r18, Z
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	02 c0       	rjmp	.+4      	; 0xc26 <clrLED+0x3e>
     c22:	88 0f       	add	r24, r24
     c24:	99 1f       	adc	r25, r25
     c26:	aa 95       	dec	r26
     c28:	e2 f7       	brpl	.-8      	; 0xc22 <clrLED+0x3a>
     c2a:	80 95       	com	r24
     c2c:	82 23       	and	r24, r18
     c2e:	80 83       	st	Z, r24
     c30:	08 95       	ret

00000c32 <getLED>:
}

// Get the current status of a LED
unsigned char getLED(int x, int y, int z)
{
     c32:	9c 01       	movw	r18, r24
}

// This function validates that we are drawing inside the cube.
unsigned char inrange(int x, int y, int z)
{
	if (x >= 0 && x < 5 && y >= 0 && y < 5 && z >= 0 && z < 5){
     c34:	85 30       	cpi	r24, 0x05	; 5
     c36:	91 05       	cpc	r25, r1
     c38:	f0 f4       	brcc	.+60     	; 0xc76 <getLED+0x44>
     c3a:	77 fd       	sbrc	r23, 7
     c3c:	1c c0       	rjmp	.+56     	; 0xc76 <getLED+0x44>
     c3e:	65 30       	cpi	r22, 0x05	; 5
     c40:	71 05       	cpc	r23, r1
     c42:	cc f4       	brge	.+50     	; 0xc76 <getLED+0x44>
     c44:	57 fd       	sbrc	r21, 7
     c46:	17 c0       	rjmp	.+46     	; 0xc76 <getLED+0x44>
     c48:	45 30       	cpi	r20, 0x05	; 5
     c4a:	51 05       	cpc	r21, r1
     c4c:	a4 f4       	brge	.+40     	; 0xc76 <getLED+0x44>

// Get the current status of a LED
unsigned char getLED(int x, int y, int z)
{
	if (inrange(x, y, z)){
		if (cube[z][y] & (1 << x)){
     c4e:	fa 01       	movw	r30, r20
     c50:	ee 0f       	add	r30, r30
     c52:	ff 1f       	adc	r31, r31
     c54:	ee 0f       	add	r30, r30
     c56:	ff 1f       	adc	r31, r31
     c58:	e4 0f       	add	r30, r20
     c5a:	f5 1f       	adc	r31, r21
     c5c:	e6 0f       	add	r30, r22
     c5e:	f7 1f       	adc	r31, r23
     c60:	ee 5b       	subi	r30, 0xBE	; 190
     c62:	fe 4f       	sbci	r31, 0xFE	; 254
     c64:	80 81       	ld	r24, Z
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	02 c0       	rjmp	.+4      	; 0xc6e <getLED+0x3c>
     c6a:	95 95       	asr	r25
     c6c:	87 95       	ror	r24
     c6e:	2a 95       	dec	r18
     c70:	e2 f7       	brpl	.-8      	; 0xc6a <getLED+0x38>
     c72:	81 70       	andi	r24, 0x01	; 1
     c74:	08 95       	ret
     c76:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	else{
		return 0x00;
	}
}
     c78:	08 95       	ret

00000c7a <inrange>:

// This function validates that we are drawing inside the cube.
unsigned char inrange(int x, int y, int z)
{
	if (x >= 0 && x < 5 && y >= 0 && y < 5 && z >= 0 && z < 5){
     c7a:	05 97       	sbiw	r24, 0x05	; 5
     c7c:	78 f4       	brcc	.+30     	; 0xc9c <inrange+0x22>
     c7e:	77 fd       	sbrc	r23, 7
     c80:	0d c0       	rjmp	.+26     	; 0xc9c <inrange+0x22>
     c82:	65 30       	cpi	r22, 0x05	; 5
     c84:	71 05       	cpc	r23, r1
     c86:	54 f4       	brge	.+20     	; 0xc9c <inrange+0x22>
     c88:	57 fd       	sbrc	r21, 7
     c8a:	08 c0       	rjmp	.+16     	; 0xc9c <inrange+0x22>
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	45 30       	cpi	r20, 0x05	; 5
     c90:	51 05       	cpc	r21, r1
     c92:	0c f0       	brlt	.+2      	; 0xc96 <inrange+0x1c>
     c94:	91 e0       	ldi	r25, 0x01	; 1
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	98 27       	eor	r25, r24
     c9a:	01 c0       	rjmp	.+2      	; 0xc9e <inrange+0x24>
     c9c:	90 e0       	ldi	r25, 0x00	; 0
	} 
	else{
		// One of the coordinates was outside the cube.
		return 0x00;
	}
}
     c9e:	89 2f       	mov	r24, r25
     ca0:	08 95       	ret

00000ca2 <alterLED>:

// Alter the state of  a voxel in the cube buffer
// This function was made in order to make set and clr versions
// of other functions without writing two almost identical functions
void alterLED(int x, int y, int z, int state)
{
     ca2:	dc 01       	movw	r26, r24
	if (state == 1){
     ca4:	21 30       	cpi	r18, 0x01	; 1
     ca6:	31 05       	cpc	r19, r1
     ca8:	09 f5       	brne	.+66     	; 0xcec <alterLED+0x4a>
}

// This function validates that we are drawing inside the cube.
unsigned char inrange(int x, int y, int z)
{
	if (x >= 0 && x < 5 && y >= 0 && y < 5 && z >= 0 && z < 5){
     caa:	85 30       	cpi	r24, 0x05	; 5
     cac:	91 05       	cpc	r25, r1
     cae:	00 f5       	brcc	.+64     	; 0xcf0 <alterLED+0x4e>
     cb0:	77 fd       	sbrc	r23, 7
     cb2:	1e c0       	rjmp	.+60     	; 0xcf0 <alterLED+0x4e>
     cb4:	65 30       	cpi	r22, 0x05	; 5
     cb6:	71 05       	cpc	r23, r1
     cb8:	dc f4       	brge	.+54     	; 0xcf0 <alterLED+0x4e>
     cba:	57 fd       	sbrc	r21, 7
     cbc:	19 c0       	rjmp	.+50     	; 0xcf0 <alterLED+0x4e>
     cbe:	45 30       	cpi	r20, 0x05	; 5
     cc0:	51 05       	cpc	r21, r1
     cc2:	b4 f4       	brge	.+44     	; 0xcf0 <alterLED+0x4e>
// Voxel == 1 LED in the 3D cube grid
// Set a voxel (LED) in the cube buffer

void setLED(int x, int y, int z)
{ 
	if (inrange(x, y, z)) cube[z][y] |= (1 << x);
     cc4:	fa 01       	movw	r30, r20
     cc6:	ee 0f       	add	r30, r30
     cc8:	ff 1f       	adc	r31, r31
     cca:	ee 0f       	add	r30, r30
     ccc:	ff 1f       	adc	r31, r31
     cce:	e4 0f       	add	r30, r20
     cd0:	f5 1f       	adc	r31, r21
     cd2:	e6 0f       	add	r30, r22
     cd4:	f7 1f       	adc	r31, r23
     cd6:	ee 5b       	subi	r30, 0xBE	; 190
     cd8:	fe 4f       	sbci	r31, 0xFE	; 254
     cda:	80 81       	ld	r24, Z
     cdc:	02 c0       	rjmp	.+4      	; 0xce2 <alterLED+0x40>
     cde:	22 0f       	add	r18, r18
     ce0:	33 1f       	adc	r19, r19
     ce2:	aa 95       	dec	r26
     ce4:	e2 f7       	brpl	.-8      	; 0xcde <alterLED+0x3c>
     ce6:	82 2b       	or	r24, r18
     ce8:	80 83       	st	Z, r24
     cea:	08 95       	ret
{
	if (state == 1){
		setLED(x,y,z);
	} 
	else{
		clrLED(x,y,z);
     cec:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <clrLED>
     cf0:	08 95       	ret

00000cf2 <flpLED>:
}

// Flip the state of a LED.
// If the voxel in the buffer is 1, its turned into a 0, and vice versa.
void flpLED(int x, int y, int z)
{
     cf2:	dc 01       	movw	r26, r24
}

// This function validates that we are drawing inside the cube.
unsigned char inrange(int x, int y, int z)
{
	if (x >= 0 && x < 5 && y >= 0 && y < 5 && z >= 0 && z < 5){
     cf4:	85 30       	cpi	r24, 0x05	; 5
     cf6:	91 05       	cpc	r25, r1
     cf8:	f8 f4       	brcc	.+62     	; 0xd38 <flpLED+0x46>
     cfa:	77 fd       	sbrc	r23, 7
     cfc:	1d c0       	rjmp	.+58     	; 0xd38 <flpLED+0x46>
     cfe:	65 30       	cpi	r22, 0x05	; 5
     d00:	71 05       	cpc	r23, r1
     d02:	d4 f4       	brge	.+52     	; 0xd38 <flpLED+0x46>
     d04:	57 fd       	sbrc	r21, 7
     d06:	18 c0       	rjmp	.+48     	; 0xd38 <flpLED+0x46>
     d08:	45 30       	cpi	r20, 0x05	; 5
     d0a:	51 05       	cpc	r21, r1
     d0c:	ac f4       	brge	.+42     	; 0xd38 <flpLED+0x46>

// Flip the state of a LED.
// If the voxel in the buffer is 1, its turned into a 0, and vice versa.
void flpLED(int x, int y, int z)
{
	if (inrange(x, y, z)) cube[z][y] ^= (1 << x);
     d0e:	fa 01       	movw	r30, r20
     d10:	ee 0f       	add	r30, r30
     d12:	ff 1f       	adc	r31, r31
     d14:	ee 0f       	add	r30, r30
     d16:	ff 1f       	adc	r31, r31
     d18:	e4 0f       	add	r30, r20
     d1a:	f5 1f       	adc	r31, r21
     d1c:	e6 0f       	add	r30, r22
     d1e:	f7 1f       	adc	r31, r23
     d20:	ee 5b       	subi	r30, 0xBE	; 190
     d22:	fe 4f       	sbci	r31, 0xFE	; 254
     d24:	20 81       	ld	r18, Z
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <flpLED+0x3e>
     d2c:	88 0f       	add	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	aa 95       	dec	r26
     d32:	e2 f7       	brpl	.-8      	; 0xd2c <flpLED+0x3a>
     d34:	28 27       	eor	r18, r24
     d36:	20 83       	st	Z, r18
     d38:	08 95       	ret

00000d3a <setplane_z>:
// i.e. draws a horizonal plane on a given level (z)
void setplane_z (int z)
{
	int y;
	// Loop the 5 rows on the given level and write 1 to the bits.
	for(y = 0 ; y < 5 ; y++) cube[z][y] = 0x1f;
     d3a:	fc 01       	movw	r30, r24
     d3c:	ee 0f       	add	r30, r30
     d3e:	ff 1f       	adc	r31, r31
     d40:	ee 0f       	add	r30, r30
     d42:	ff 1f       	adc	r31, r31
     d44:	e8 0f       	add	r30, r24
     d46:	f9 1f       	adc	r31, r25
     d48:	ee 5b       	subi	r30, 0xBE	; 190
     d4a:	fe 4f       	sbci	r31, 0xFE	; 254
     d4c:	8f e1       	ldi	r24, 0x1F	; 31
     d4e:	80 83       	st	Z, r24
     d50:	81 83       	std	Z+1, r24	; 0x01
     d52:	82 83       	std	Z+2, r24	; 0x02
     d54:	83 83       	std	Z+3, r24	; 0x03
     d56:	84 83       	std	Z+4, r24	; 0x04
}
     d58:	08 95       	ret

00000d5a <clrplane_z>:

// Clears all the leds on X and Y for a given Z
void clrplane_z (int z)
{
	int y;
	for(y = 0 ; y < 5 ; y++) cube[z][y] = 0x00;
     d5a:	fc 01       	movw	r30, r24
     d5c:	ee 0f       	add	r30, r30
     d5e:	ff 1f       	adc	r31, r31
     d60:	ee 0f       	add	r30, r30
     d62:	ff 1f       	adc	r31, r31
     d64:	e8 0f       	add	r30, r24
     d66:	f9 1f       	adc	r31, r25
     d68:	ee 5b       	subi	r30, 0xBE	; 190
     d6a:	fe 4f       	sbci	r31, 0xFE	; 254
     d6c:	10 82       	st	Z, r1
     d6e:	11 82       	std	Z+1, r1	; 0x01
     d70:	12 82       	std	Z+2, r1	; 0x02
     d72:	13 82       	std	Z+3, r1	; 0x03
     d74:	14 82       	std	Z+4, r1	; 0x04
}
     d76:	08 95       	ret

00000d78 <setplane_x>:
	// the actual bits in each row of each layer
	// We loop them all, and set the apropriate bit.
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
			// Set a bit, and shift it inwards to the right X
			cube[z][y] |= (1 << x);
     d78:	21 e0       	ldi	r18, 0x01	; 1
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <setplane_x+0xa>
     d7e:	22 0f       	add	r18, r18
     d80:	33 1f       	adc	r19, r19
     d82:	8a 95       	dec	r24
     d84:	e2 f7       	brpl	.-8      	; 0xd7e <setplane_x+0x6>
     d86:	60 e0       	ldi	r22, 0x00	; 0
     d88:	70 e0       	ldi	r23, 0x00	; 0
     d8a:	12 c0       	rjmp	.+36     	; 0xdb0 <setplane_x+0x38>
     d8c:	fd 01       	movw	r30, r26
     d8e:	e4 0f       	add	r30, r20
     d90:	f5 1f       	adc	r31, r21
     d92:	ee 5b       	subi	r30, 0xBE	; 190
     d94:	fe 4f       	sbci	r31, 0xFE	; 254
     d96:	80 81       	ld	r24, Z
     d98:	82 2b       	or	r24, r18
     d9a:	80 83       	st	Z, r24
	int y;
	// Since coordinates along the X axis are
	// the actual bits in each row of each layer
	// We loop them all, and set the apropriate bit.
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
     d9c:	4f 5f       	subi	r20, 0xFF	; 255
     d9e:	5f 4f       	sbci	r21, 0xFF	; 255
     da0:	45 30       	cpi	r20, 0x05	; 5
     da2:	51 05       	cpc	r21, r1
     da4:	99 f7       	brne	.-26     	; 0xd8c <setplane_x+0x14>
	int z;
	int y;
	// Since coordinates along the X axis are
	// the actual bits in each row of each layer
	// We loop them all, and set the apropriate bit.
	for(z = 0 ; z < 5 ; z++){
     da6:	6f 5f       	subi	r22, 0xFF	; 255
     da8:	7f 4f       	sbci	r23, 0xFF	; 255
     daa:	65 30       	cpi	r22, 0x05	; 5
     dac:	71 05       	cpc	r23, r1
     dae:	51 f0       	breq	.+20     	; 0xdc4 <setplane_x+0x4c>
     db0:	40 e0       	ldi	r20, 0x00	; 0
     db2:	50 e0       	ldi	r21, 0x00	; 0
		for(y = 0 ; y < 5 ; y++){
			// Set a bit, and shift it inwards to the right X
			cube[z][y] |= (1 << x);
     db4:	db 01       	movw	r26, r22
     db6:	aa 0f       	add	r26, r26
     db8:	bb 1f       	adc	r27, r27
     dba:	aa 0f       	add	r26, r26
     dbc:	bb 1f       	adc	r27, r27
     dbe:	a6 0f       	add	r26, r22
     dc0:	b7 1f       	adc	r27, r23
     dc2:	e4 cf       	rjmp	.-56     	; 0xd8c <setplane_x+0x14>
     dc4:	08 95       	ret

00000dc6 <clrplane_x>:
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
			cube[z][y] &= ~(1 << x);
     dc6:	21 e0       	ldi	r18, 0x01	; 1
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <clrplane_x+0xa>
     dcc:	22 0f       	add	r18, r18
     dce:	33 1f       	adc	r19, r19
     dd0:	8a 95       	dec	r24
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <clrplane_x+0x6>
     dd4:	20 95       	com	r18
     dd6:	60 e0       	ldi	r22, 0x00	; 0
     dd8:	70 e0       	ldi	r23, 0x00	; 0
     dda:	12 c0       	rjmp	.+36     	; 0xe00 <clrplane_x+0x3a>
     ddc:	fd 01       	movw	r30, r26
     dde:	e4 0f       	add	r30, r20
     de0:	f5 1f       	adc	r31, r21
     de2:	ee 5b       	subi	r30, 0xBE	; 190
     de4:	fe 4f       	sbci	r31, 0xFE	; 254
     de6:	80 81       	ld	r24, Z
     de8:	82 23       	and	r24, r18
     dea:	80 83       	st	Z, r24
void clrplane_x (int x)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
     dec:	4f 5f       	subi	r20, 0xFF	; 255
     dee:	5f 4f       	sbci	r21, 0xFF	; 255
     df0:	45 30       	cpi	r20, 0x05	; 5
     df2:	51 05       	cpc	r21, r1
     df4:	99 f7       	brne	.-26     	; 0xddc <clrplane_x+0x16>
// Clear all the leds on Y and Z for a given X
void clrplane_x (int x)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
     df6:	6f 5f       	subi	r22, 0xFF	; 255
     df8:	7f 4f       	sbci	r23, 0xFF	; 255
     dfa:	65 30       	cpi	r22, 0x05	; 5
     dfc:	71 05       	cpc	r23, r1
     dfe:	51 f0       	breq	.+20     	; 0xe14 <clrplane_x+0x4e>
     e00:	40 e0       	ldi	r20, 0x00	; 0
     e02:	50 e0       	ldi	r21, 0x00	; 0
		for(y = 0 ; y < 5 ; y++){
			cube[z][y] &= ~(1 << x);
     e04:	db 01       	movw	r26, r22
     e06:	aa 0f       	add	r26, r26
     e08:	bb 1f       	adc	r27, r27
     e0a:	aa 0f       	add	r26, r26
     e0c:	bb 1f       	adc	r27, r27
     e0e:	a6 0f       	add	r26, r22
     e10:	b7 1f       	adc	r27, r23
     e12:	e4 cf       	rjmp	.-56     	; 0xddc <clrplane_x+0x16>
     e14:	08 95       	ret

00000e16 <setplane_y>:

// Sets all the leds on X and Z for a given Y
void setplane_y (int y)
{
	int z;
	for (z = 0 ; z < 5 ; z++) cube[z][y] = 0x1f; 
     e16:	fc 01       	movw	r30, r24
     e18:	ee 5b       	subi	r30, 0xBE	; 190
     e1a:	fe 4f       	sbci	r31, 0xFE	; 254
     e1c:	8f e1       	ldi	r24, 0x1F	; 31
     e1e:	80 83       	st	Z, r24
     e20:	85 83       	std	Z+5, r24	; 0x05
     e22:	82 87       	std	Z+10, r24	; 0x0a
     e24:	87 87       	std	Z+15, r24	; 0x0f
     e26:	84 8b       	std	Z+20, r24	; 0x14
}
     e28:	08 95       	ret

00000e2a <clrplane_y>:

// Sets all the leds on X and Z for a given Y
void clrplane_y (int y)
{
	int z;
	for(z = 0 ; z < 5 ; z++) cube[z][y] = 0x00; 
     e2a:	fc 01       	movw	r30, r24
     e2c:	ee 5b       	subi	r30, 0xBE	; 190
     e2e:	fe 4f       	sbci	r31, 0xFE	; 254
     e30:	10 82       	st	Z, r1
     e32:	15 82       	std	Z+5, r1	; 0x05
     e34:	12 86       	std	Z+10, r1	; 0x0a
     e36:	17 86       	std	Z+15, r1	; 0x0f
     e38:	14 8a       	std	Z+20, r1	; 0x14
}
     e3a:	08 95       	ret

00000e3c <setplane>:

// Set a plane using the functions above
void setplane(unsigned char plane, int i, int state)
{
	if (plane == 'x'){
     e3c:	88 37       	cpi	r24, 0x78	; 120
     e3e:	09 f0       	breq	.+2      	; 0xe42 <setplane+0x6>
     e40:	53 c0       	rjmp	.+166    	; 0xee8 <setplane+0xac>
		if (state > 0){
     e42:	14 16       	cp	r1, r20
     e44:	15 06       	cpc	r1, r21
     e46:	64 f0       	brlt	.+24     	; 0xe60 <setplane+0x24>
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
			cube[z][y] &= ~(1 << x);
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <setplane+0x16>
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	6a 95       	dec	r22
     e54:	e2 f7       	brpl	.-8      	; 0xe4e <setplane+0x12>
     e56:	98 2f       	mov	r25, r24
     e58:	90 95       	com	r25
     e5a:	40 e0       	ldi	r20, 0x00	; 0
     e5c:	50 e0       	ldi	r21, 0x00	; 0
     e5e:	3a c0       	rjmp	.+116    	; 0xed4 <setplane+0x98>
	// the actual bits in each row of each layer
	// We loop them all, and set the apropriate bit.
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
			// Set a bit, and shift it inwards to the right X
			cube[z][y] |= (1 << x);
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	02 c0       	rjmp	.+4      	; 0xe6a <setplane+0x2e>
     e66:	88 0f       	add	r24, r24
     e68:	99 1f       	adc	r25, r25
     e6a:	6a 95       	dec	r22
     e6c:	e2 f7       	brpl	.-8      	; 0xe66 <setplane+0x2a>
     e6e:	98 2f       	mov	r25, r24
     e70:	40 e0       	ldi	r20, 0x00	; 0
     e72:	50 e0       	ldi	r21, 0x00	; 0
     e74:	13 c0       	rjmp	.+38     	; 0xe9c <setplane+0x60>
     e76:	fb 01       	movw	r30, r22
     e78:	e2 0f       	add	r30, r18
     e7a:	f3 1f       	adc	r31, r19
     e7c:	ee 5b       	subi	r30, 0xBE	; 190
     e7e:	fe 4f       	sbci	r31, 0xFE	; 254
     e80:	80 81       	ld	r24, Z
     e82:	89 2b       	or	r24, r25
     e84:	80 83       	st	Z, r24
	int y;
	// Since coordinates along the X axis are
	// the actual bits in each row of each layer
	// We loop them all, and set the apropriate bit.
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
     e86:	2f 5f       	subi	r18, 0xFF	; 255
     e88:	3f 4f       	sbci	r19, 0xFF	; 255
     e8a:	25 30       	cpi	r18, 0x05	; 5
     e8c:	31 05       	cpc	r19, r1
     e8e:	99 f7       	brne	.-26     	; 0xe76 <setplane+0x3a>
	int z;
	int y;
	// Since coordinates along the X axis are
	// the actual bits in each row of each layer
	// We loop them all, and set the apropriate bit.
	for(z = 0 ; z < 5 ; z++){
     e90:	4f 5f       	subi	r20, 0xFF	; 255
     e92:	5f 4f       	sbci	r21, 0xFF	; 255
     e94:	45 30       	cpi	r20, 0x05	; 5
     e96:	51 05       	cpc	r21, r1
     e98:	09 f4       	brne	.+2      	; 0xe9c <setplane+0x60>
     e9a:	59 c0       	rjmp	.+178    	; 0xf4e <setplane+0x112>
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	30 e0       	ldi	r19, 0x00	; 0
		for(y = 0 ; y < 5 ; y++){
			// Set a bit, and shift it inwards to the right X
			cube[z][y] |= (1 << x);
     ea0:	ba 01       	movw	r22, r20
     ea2:	66 0f       	add	r22, r22
     ea4:	77 1f       	adc	r23, r23
     ea6:	66 0f       	add	r22, r22
     ea8:	77 1f       	adc	r23, r23
     eaa:	64 0f       	add	r22, r20
     eac:	75 1f       	adc	r23, r21
     eae:	e3 cf       	rjmp	.-58     	; 0xe76 <setplane+0x3a>
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
			cube[z][y] &= ~(1 << x);
     eb0:	fb 01       	movw	r30, r22
     eb2:	e2 0f       	add	r30, r18
     eb4:	f3 1f       	adc	r31, r19
     eb6:	ee 5b       	subi	r30, 0xBE	; 190
     eb8:	fe 4f       	sbci	r31, 0xFE	; 254
     eba:	80 81       	ld	r24, Z
     ebc:	89 23       	and	r24, r25
     ebe:	80 83       	st	Z, r24
void clrplane_x (int x)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
     ec0:	2f 5f       	subi	r18, 0xFF	; 255
     ec2:	3f 4f       	sbci	r19, 0xFF	; 255
     ec4:	25 30       	cpi	r18, 0x05	; 5
     ec6:	31 05       	cpc	r19, r1
     ec8:	99 f7       	brne	.-26     	; 0xeb0 <setplane+0x74>
// Clear all the leds on Y and Z for a given X
void clrplane_x (int x)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
     eca:	4f 5f       	subi	r20, 0xFF	; 255
     ecc:	5f 4f       	sbci	r21, 0xFF	; 255
     ece:	45 30       	cpi	r20, 0x05	; 5
     ed0:	51 05       	cpc	r21, r1
     ed2:	e9 f1       	breq	.+122    	; 0xf4e <setplane+0x112>
     ed4:	20 e0       	ldi	r18, 0x00	; 0
     ed6:	30 e0       	ldi	r19, 0x00	; 0
		for(y = 0 ; y < 5 ; y++){
			cube[z][y] &= ~(1 << x);
     ed8:	ba 01       	movw	r22, r20
     eda:	66 0f       	add	r22, r22
     edc:	77 1f       	adc	r23, r23
     ede:	66 0f       	add	r22, r22
     ee0:	77 1f       	adc	r23, r23
     ee2:	64 0f       	add	r22, r20
     ee4:	75 1f       	adc	r23, r21
     ee6:	e4 cf       	rjmp	.-56     	; 0xeb0 <setplane+0x74>
		else{
			clrplane_x(i);
		}
	}
	
	if (plane == 'y'){
     ee8:	89 37       	cpi	r24, 0x79	; 121
     eea:	99 f4       	brne	.+38     	; 0xf12 <setplane+0xd6>
     eec:	fb 01       	movw	r30, r22
     eee:	ee 5b       	subi	r30, 0xBE	; 190
     ef0:	fe 4f       	sbci	r31, 0xFE	; 254
		if (state > 0){
     ef2:	14 16       	cp	r1, r20
     ef4:	15 06       	cpc	r1, r21
     ef6:	3c f4       	brge	.+14     	; 0xf06 <setplane+0xca>

// Sets all the leds on X and Z for a given Y
void setplane_y (int y)
{
	int z;
	for (z = 0 ; z < 5 ; z++) cube[z][y] = 0x1f; 
     ef8:	8f e1       	ldi	r24, 0x1F	; 31
     efa:	80 83       	st	Z, r24
     efc:	85 83       	std	Z+5, r24	; 0x05
     efe:	82 87       	std	Z+10, r24	; 0x0a
     f00:	87 87       	std	Z+15, r24	; 0x0f
     f02:	84 8b       	std	Z+20, r24	; 0x14
     f04:	08 95       	ret

// Sets all the leds on X and Z for a given Y
void clrplane_y (int y)
{
	int z;
	for(z = 0 ; z < 5 ; z++) cube[z][y] = 0x00; 
     f06:	10 82       	st	Z, r1
     f08:	15 82       	std	Z+5, r1	; 0x05
     f0a:	12 86       	std	Z+10, r1	; 0x0a
     f0c:	17 86       	std	Z+15, r1	; 0x0f
     f0e:	14 8a       	std	Z+20, r1	; 0x14
     f10:	08 95       	ret
		else{
			clrplane_y(i);
		}
	}
	
	if (plane == 'z'){
     f12:	8a 37       	cpi	r24, 0x7A	; 122
     f14:	e1 f4       	brne	.+56     	; 0xf4e <setplane+0x112>
     f16:	fb 01       	movw	r30, r22
     f18:	ee 0f       	add	r30, r30
     f1a:	ff 1f       	adc	r31, r31
     f1c:	ee 0f       	add	r30, r30
     f1e:	ff 1f       	adc	r31, r31
		if (state > 0){
     f20:	14 16       	cp	r1, r20
     f22:	15 06       	cpc	r1, r21
     f24:	5c f4       	brge	.+22     	; 0xf3c <setplane+0x100>
// i.e. draws a horizonal plane on a given level (z)
void setplane_z (int z)
{
	int y;
	// Loop the 5 rows on the given level and write 1 to the bits.
	for(y = 0 ; y < 5 ; y++) cube[z][y] = 0x1f;
     f26:	e6 0f       	add	r30, r22
     f28:	f7 1f       	adc	r31, r23
     f2a:	ee 5b       	subi	r30, 0xBE	; 190
     f2c:	fe 4f       	sbci	r31, 0xFE	; 254
     f2e:	8f e1       	ldi	r24, 0x1F	; 31
     f30:	80 83       	st	Z, r24
     f32:	81 83       	std	Z+1, r24	; 0x01
     f34:	82 83       	std	Z+2, r24	; 0x02
     f36:	83 83       	std	Z+3, r24	; 0x03
     f38:	84 83       	std	Z+4, r24	; 0x04
     f3a:	08 95       	ret

// Clears all the leds on X and Y for a given Z
void clrplane_z (int z)
{
	int y;
	for(y = 0 ; y < 5 ; y++) cube[z][y] = 0x00;
     f3c:	e6 0f       	add	r30, r22
     f3e:	f7 1f       	adc	r31, r23
     f40:	ee 5b       	subi	r30, 0xBE	; 190
     f42:	fe 4f       	sbci	r31, 0xFE	; 254
     f44:	10 82       	st	Z, r1
     f46:	11 82       	std	Z+1, r1	; 0x01
     f48:	12 82       	std	Z+2, r1	; 0x02
     f4a:	13 82       	std	Z+3, r1	; 0x03
     f4c:	14 82       	std	Z+4, r1	; 0x04
     f4e:	08 95       	ret

00000f50 <line_z>:

// Draw a line along the Z axis
// state=0 clears a line of voxels,
// state=1 sets a line of voxels.
void line_z(int x, int y, int z1, int z2, int state)
{
     f50:	af 92       	push	r10
     f52:	bf 92       	push	r11
     f54:	cf 92       	push	r12
     f56:	df 92       	push	r13
     f58:	ef 92       	push	r14
     f5a:	ff 92       	push	r15
     f5c:	0f 93       	push	r16
     f5e:	1f 93       	push	r17
     f60:	cf 93       	push	r28
     f62:	df 93       	push	r29
     f64:	5c 01       	movw	r10, r24
     f66:	6b 01       	movw	r12, r22
     f68:	79 01       	movw	r14, r18
	
	if (z1>z2){
     f6a:	24 17       	cp	r18, r20
     f6c:	35 07       	cpc	r19, r21
     f6e:	14 f4       	brge	.+4      	; 0xf74 <line_z+0x24>
     f70:	7a 01       	movw	r14, r20
     f72:	a9 01       	movw	r20, r18
     f74:	ea 01       	movw	r28, r20
     f76:	07 c0       	rjmp	.+14     	; 0xf86 <line_z+0x36>
		z1= z2;
		z2 = tmp;
	}
	int i;
	for (i=z1;i<=z2;i++){
		alterLED(x,y,i,state);
     f78:	c5 01       	movw	r24, r10
     f7a:	b6 01       	movw	r22, r12
     f7c:	ae 01       	movw	r20, r28
     f7e:	98 01       	movw	r18, r16
     f80:	0e 94 51 06 	call	0xca2	; 0xca2 <alterLED>
		tmp = z1;
		z1= z2;
		z2 = tmp;
	}
	int i;
	for (i=z1;i<=z2;i++){
     f84:	21 96       	adiw	r28, 0x01	; 1
     f86:	ec 16       	cp	r14, r28
     f88:	fd 06       	cpc	r15, r29
     f8a:	b4 f7       	brge	.-20     	; 0xf78 <line_z+0x28>
		alterLED(x,y,i,state);
	}
}
     f8c:	df 91       	pop	r29
     f8e:	cf 91       	pop	r28
     f90:	1f 91       	pop	r17
     f92:	0f 91       	pop	r16
     f94:	ff 90       	pop	r15
     f96:	ef 90       	pop	r14
     f98:	df 90       	pop	r13
     f9a:	cf 90       	pop	r12
     f9c:	bf 90       	pop	r11
     f9e:	af 90       	pop	r10
     fa0:	08 95       	ret

00000fa2 <line_x>:

// Draw a line along the X axis
void line_x(int z, int y, int x1, int x2, int state)
{
     fa2:	af 92       	push	r10
     fa4:	bf 92       	push	r11
     fa6:	cf 92       	push	r12
     fa8:	df 92       	push	r13
     faa:	ef 92       	push	r14
     fac:	ff 92       	push	r15
     fae:	0f 93       	push	r16
     fb0:	1f 93       	push	r17
     fb2:	cf 93       	push	r28
     fb4:	df 93       	push	r29
     fb6:	5c 01       	movw	r10, r24
     fb8:	6b 01       	movw	r12, r22
     fba:	79 01       	movw	r14, r18
	if (x1>x2){
     fbc:	24 17       	cp	r18, r20
     fbe:	35 07       	cpc	r19, r21
     fc0:	14 f4       	brge	.+4      	; 0xfc6 <line_x+0x24>
     fc2:	7a 01       	movw	r14, r20
     fc4:	a9 01       	movw	r20, r18
     fc6:	ea 01       	movw	r28, r20
     fc8:	07 c0       	rjmp	.+14     	; 0xfd8 <line_x+0x36>
		x1= x2;
		x2 = tmp;
	}
	int i;
	for (i=x1;i<=x2;i++){
		alterLED(i,y,z,state);
     fca:	ce 01       	movw	r24, r28
     fcc:	b6 01       	movw	r22, r12
     fce:	a5 01       	movw	r20, r10
     fd0:	98 01       	movw	r18, r16
     fd2:	0e 94 51 06 	call	0xca2	; 0xca2 <alterLED>
		tmp = x1;
		x1= x2;
		x2 = tmp;
	}
	int i;
	for (i=x1;i<=x2;i++){
     fd6:	21 96       	adiw	r28, 0x01	; 1
     fd8:	ec 16       	cp	r14, r28
     fda:	fd 06       	cpc	r15, r29
     fdc:	b4 f7       	brge	.-20     	; 0xfca <line_x+0x28>
		alterLED(i,y,z,state);
	}
}
     fde:	df 91       	pop	r29
     fe0:	cf 91       	pop	r28
     fe2:	1f 91       	pop	r17
     fe4:	0f 91       	pop	r16
     fe6:	ff 90       	pop	r15
     fe8:	ef 90       	pop	r14
     fea:	df 90       	pop	r13
     fec:	cf 90       	pop	r12
     fee:	bf 90       	pop	r11
     ff0:	af 90       	pop	r10
     ff2:	08 95       	ret

00000ff4 <line_y>:

// Draw a line along the Y axis.
void line_y(int z, int x, int y1, int y2, int state)
{
     ff4:	af 92       	push	r10
     ff6:	bf 92       	push	r11
     ff8:	cf 92       	push	r12
     ffa:	df 92       	push	r13
     ffc:	ef 92       	push	r14
     ffe:	ff 92       	push	r15
    1000:	0f 93       	push	r16
    1002:	1f 93       	push	r17
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	5c 01       	movw	r10, r24
    100a:	6b 01       	movw	r12, r22
    100c:	79 01       	movw	r14, r18
	if (y1>y2){
    100e:	24 17       	cp	r18, r20
    1010:	35 07       	cpc	r19, r21
    1012:	14 f4       	brge	.+4      	; 0x1018 <line_y+0x24>
    1014:	7a 01       	movw	r14, r20
    1016:	a9 01       	movw	r20, r18
    1018:	ea 01       	movw	r28, r20
    101a:	07 c0       	rjmp	.+14     	; 0x102a <line_y+0x36>
		y1= y2;
		y2 = tmp;
	}
	int i;
	for (i=y1;i<=y2;i++){
			alterLED(x,i,z,state);
    101c:	c6 01       	movw	r24, r12
    101e:	be 01       	movw	r22, r28
    1020:	a5 01       	movw	r20, r10
    1022:	98 01       	movw	r18, r16
    1024:	0e 94 51 06 	call	0xca2	; 0xca2 <alterLED>
		tmp = y1;
		y1= y2;
		y2 = tmp;
	}
	int i;
	for (i=y1;i<=y2;i++){
    1028:	21 96       	adiw	r28, 0x01	; 1
    102a:	ec 16       	cp	r14, r28
    102c:	fd 06       	cpc	r15, r29
    102e:	b4 f7       	brge	.-20     	; 0x101c <line_y+0x28>
			alterLED(x,i,z,state);
	}
}
    1030:	df 91       	pop	r29
    1032:	cf 91       	pop	r28
    1034:	1f 91       	pop	r17
    1036:	0f 91       	pop	r16
    1038:	ff 90       	pop	r15
    103a:	ef 90       	pop	r14
    103c:	df 90       	pop	r13
    103e:	cf 90       	pop	r12
    1040:	bf 90       	pop	r11
    1042:	af 90       	pop	r10
    1044:	08 95       	ret

00001046 <drawline_plane>:

// Draws a plane on any diagonal angle
// unsigned char anchor is the plane that is constant. ("x","y", or "z")
void drawline_plane(int x2, int y2, int x1, int y1,unsigned char anchor){
    1046:	2f 92       	push	r2
    1048:	3f 92       	push	r3
    104a:	5f 92       	push	r5
    104c:	6f 92       	push	r6
    104e:	7f 92       	push	r7
    1050:	8f 92       	push	r8
    1052:	9f 92       	push	r9
    1054:	af 92       	push	r10
    1056:	bf 92       	push	r11
    1058:	cf 92       	push	r12
    105a:	df 92       	push	r13
    105c:	ef 92       	push	r14
    105e:	ff 92       	push	r15
    1060:	0f 93       	push	r16
    1062:	1f 93       	push	r17
    1064:	cf 93       	push	r28
    1066:	df 93       	push	r29
    1068:	fc 01       	movw	r30, r24
    106a:	50 2e       	mov	r5, r16
	int deltax = abs(x2 - x1);        // The difference between the x's
    106c:	84 1b       	sub	r24, r20
    106e:	95 0b       	sbc	r25, r21
    1070:	97 ff       	sbrs	r25, 7
    1072:	03 c0       	rjmp	.+6      	; 0x107a <drawline_plane+0x34>
    1074:	90 95       	com	r25
    1076:	81 95       	neg	r24
    1078:	9f 4f       	sbci	r25, 0xFF	; 255
	int deltay = abs(y2 - y1);        // The difference between the y's
    107a:	db 01       	movw	r26, r22
    107c:	a2 1b       	sub	r26, r18
    107e:	b3 0b       	sbc	r27, r19
    1080:	b7 ff       	sbrs	r27, 7
    1082:	03 c0       	rjmp	.+6      	; 0x108a <drawline_plane+0x44>
    1084:	b0 95       	com	r27
    1086:	a1 95       	neg	r26
    1088:	bf 4f       	sbci	r27, 0xFF	; 255
	int den;
	int num;
	int numadd;
	int numpixels;
	
	if (x2 >= x1){                 // The x-values are increasing
    108a:	e4 17       	cp	r30, r20
    108c:	f5 07       	cpc	r31, r21
    108e:	3c f4       	brge	.+14     	; 0x109e <drawline_plane+0x58>
    1090:	66 24       	eor	r6, r6
    1092:	6a 94       	dec	r6
    1094:	76 2c       	mov	r7, r6
    1096:	88 24       	eor	r8, r8
    1098:	8a 94       	dec	r8
    109a:	98 2c       	mov	r9, r8
    109c:	06 c0       	rjmp	.+12     	; 0x10aa <drawline_plane+0x64>
    109e:	01 e0       	ldi	r16, 0x01	; 1
    10a0:	60 2e       	mov	r6, r16
    10a2:	71 2c       	mov	r7, r1
    10a4:	11 e0       	ldi	r17, 0x01	; 1
    10a6:	81 2e       	mov	r8, r17
    10a8:	91 2c       	mov	r9, r1
	else{                          // The x-values are decreasing
		xinc1 = -1;
		xinc2 = -1;
	}
	
	if (y2 >= y1){                 // The y-values are increasing
    10aa:	62 17       	cp	r22, r18
    10ac:	73 07       	cpc	r23, r19
    10ae:	3c f4       	brge	.+14     	; 0x10be <drawline_plane+0x78>
    10b0:	aa 24       	eor	r10, r10
    10b2:	aa 94       	dec	r10
    10b4:	ba 2c       	mov	r11, r10
    10b6:	cc 24       	eor	r12, r12
    10b8:	ca 94       	dec	r12
    10ba:	dc 2c       	mov	r13, r12
    10bc:	06 c0       	rjmp	.+12     	; 0x10ca <drawline_plane+0x84>
    10be:	f1 e0       	ldi	r31, 0x01	; 1
    10c0:	af 2e       	mov	r10, r31
    10c2:	b1 2c       	mov	r11, r1
    10c4:	e1 e0       	ldi	r30, 0x01	; 1
    10c6:	ce 2e       	mov	r12, r30
    10c8:	d1 2c       	mov	r13, r1
	else{                          // The y-values are decreasing
		yinc1 = -1;
		yinc2 = -1;
	}
	
	if (deltax >= deltay){         // There is at least one x-value for every y-value
    10ca:	8a 17       	cp	r24, r26
    10cc:	9b 07       	cpc	r25, r27
    10ce:	5c f0       	brlt	.+22     	; 0x10e6 <drawline_plane+0xa0>
		xinc1 = 0;                  // Don't change the x when numerator >= denominator
		yinc2 = 0;                  // Don't change the y for every iteration
		den = deltax;
		num = deltax / 2;
    10d0:	ec 01       	movw	r28, r24
    10d2:	d5 95       	asr	r29
    10d4:	c7 95       	ror	r28
    10d6:	1d 01       	movw	r2, r26
    10d8:	dc 01       	movw	r26, r24
    10da:	7c 01       	movw	r14, r24
    10dc:	66 24       	eor	r6, r6
    10de:	77 24       	eor	r7, r7
    10e0:	cc 24       	eor	r12, r12
    10e2:	dd 24       	eor	r13, r13
    10e4:	09 c0       	rjmp	.+18     	; 0x10f8 <drawline_plane+0xb2>
	}
	else{                          // There is at least one y-value for every x-value
		xinc2 = 0;                  // Don't change the x for every iteration
		yinc1 = 0;                  // Don't change the y when numerator >= denominator
		den = deltay;
		num = deltay / 2;
    10e6:	ed 01       	movw	r28, r26
    10e8:	d5 95       	asr	r29
    10ea:	c7 95       	ror	r28
    10ec:	1c 01       	movw	r2, r24
    10ee:	7d 01       	movw	r14, r26
    10f0:	88 24       	eor	r8, r8
    10f2:	99 24       	eor	r9, r9
    10f4:	aa 24       	eor	r10, r10
    10f6:	bb 24       	eor	r11, r11
    10f8:	b9 01       	movw	r22, r18
    10fa:	00 e0       	ldi	r16, 0x00	; 0
    10fc:	10 e0       	ldi	r17, 0x00	; 0
		numadd = deltax;
		numpixels = deltay;         // There are more y-values than x-values
	}
	int curpixel;
	for(curpixel = 0 ; curpixel <= numpixels ; curpixel++){
		if (anchor == 'z')
    10fe:	8a e7       	ldi	r24, 0x7A	; 122
    1100:	58 16       	cp	r5, r24
    1102:	11 f5       	brne	.+68     	; 0x1148 <drawline_plane+0x102>
}

// This function validates that we are drawing inside the cube.
unsigned char inrange(int x, int y, int z)
{
	if (x >= 0 && x < 5 && y >= 0 && y < 5 && z >= 0 && z < 5){
    1104:	45 30       	cpi	r20, 0x05	; 5
    1106:	51 05       	cpc	r21, r1
    1108:	08 f0       	brcs	.+2      	; 0x110c <drawline_plane+0xc6>
    110a:	72 c0       	rjmp	.+228    	; 0x11f0 <drawline_plane+0x1aa>
    110c:	77 fd       	sbrc	r23, 7
    110e:	70 c0       	rjmp	.+224    	; 0x11f0 <drawline_plane+0x1aa>
    1110:	65 30       	cpi	r22, 0x05	; 5
    1112:	71 05       	cpc	r23, r1
    1114:	0c f0       	brlt	.+2      	; 0x1118 <drawline_plane+0xd2>
    1116:	6c c0       	rjmp	.+216    	; 0x11f0 <drawline_plane+0x1aa>
// Voxel == 1 LED in the 3D cube grid
// Set a voxel (LED) in the cube buffer

void setLED(int x, int y, int z)
{ 
	if (inrange(x, y, z)) cube[z][y] |= (1 << x);
    1118:	fb 01       	movw	r30, r22
    111a:	ee 5b       	subi	r30, 0xBE	; 190
    111c:	fe 4f       	sbci	r31, 0xFE	; 254
    111e:	24 89       	ldd	r18, Z+20	; 0x14
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	04 2e       	mov	r0, r20
    1126:	02 c0       	rjmp	.+4      	; 0x112c <drawline_plane+0xe6>
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	0a 94       	dec	r0
    112e:	e2 f7       	brpl	.-8      	; 0x1128 <drawline_plane+0xe2>
    1130:	28 2b       	or	r18, r24
    1132:	24 8b       	std	Z+20, r18	; 0x14
			setLED(x, y, 2);
			setLED(x, y, 1);
			setLED(x, y, 0);
		}
		
		if (anchor == 'x')
    1134:	27 85       	ldd	r18, Z+15	; 0x0f
    1136:	28 2b       	or	r18, r24
    1138:	27 87       	std	Z+15, r18	; 0x0f
    113a:	22 85       	ldd	r18, Z+10	; 0x0a
    113c:	28 2b       	or	r18, r24
    113e:	22 87       	std	Z+10, r18	; 0x0a
    1140:	25 81       	ldd	r18, Z+5	; 0x05
    1142:	28 2b       	or	r18, r24
    1144:	25 83       	std	Z+5, r18	; 0x05
    1146:	2a c0       	rjmp	.+84     	; 0x119c <drawline_plane+0x156>
    1148:	88 e7       	ldi	r24, 0x78	; 120
    114a:	58 16       	cp	r5, r24
    114c:	51 f5       	brne	.+84     	; 0x11a2 <drawline_plane+0x15c>
}

// This function validates that we are drawing inside the cube.
unsigned char inrange(int x, int y, int z)
{
	if (x >= 0 && x < 5 && y >= 0 && y < 5 && z >= 0 && z < 5){
    114e:	45 30       	cpi	r20, 0x05	; 5
    1150:	51 05       	cpc	r21, r1
    1152:	08 f0       	brcs	.+2      	; 0x1156 <drawline_plane+0x110>
    1154:	4d c0       	rjmp	.+154    	; 0x11f0 <drawline_plane+0x1aa>
    1156:	77 fd       	sbrc	r23, 7
    1158:	4b c0       	rjmp	.+150    	; 0x11f0 <drawline_plane+0x1aa>
    115a:	65 30       	cpi	r22, 0x05	; 5
    115c:	71 05       	cpc	r23, r1
    115e:	0c f0       	brlt	.+2      	; 0x1162 <drawline_plane+0x11c>
    1160:	47 c0       	rjmp	.+142    	; 0x11f0 <drawline_plane+0x1aa>
// Voxel == 1 LED in the 3D cube grid
// Set a voxel (LED) in the cube buffer

void setLED(int x, int y, int z)
{ 
	if (inrange(x, y, z)) cube[z][y] |= (1 << x);
    1162:	fb 01       	movw	r30, r22
    1164:	ee 0f       	add	r30, r30
    1166:	ff 1f       	adc	r31, r31
    1168:	ee 0f       	add	r30, r30
    116a:	ff 1f       	adc	r31, r31
    116c:	e6 0f       	add	r30, r22
    116e:	f7 1f       	adc	r31, r23
    1170:	ee 5b       	subi	r30, 0xBE	; 190
    1172:	fe 4f       	sbci	r31, 0xFE	; 254
    1174:	24 81       	ldd	r18, Z+4	; 0x04
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	04 2e       	mov	r0, r20
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <drawline_plane+0x13c>
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	0a 94       	dec	r0
    1184:	e2 f7       	brpl	.-8      	; 0x117e <drawline_plane+0x138>
    1186:	28 2b       	or	r18, r24
    1188:	24 83       	std	Z+4, r18	; 0x04
			setLED(x, 2, y);
			setLED(x, 1, y);
			setLED(x, 0, y);
		}
		
		if (anchor == 'y')
    118a:	23 81       	ldd	r18, Z+3	; 0x03
    118c:	28 2b       	or	r18, r24
    118e:	23 83       	std	Z+3, r18	; 0x03
    1190:	22 81       	ldd	r18, Z+2	; 0x02
    1192:	28 2b       	or	r18, r24
    1194:	22 83       	std	Z+2, r18	; 0x02
    1196:	21 81       	ldd	r18, Z+1	; 0x01
    1198:	28 2b       	or	r18, r24
    119a:	21 83       	std	Z+1, r18	; 0x01
    119c:	20 81       	ld	r18, Z
    119e:	82 2b       	or	r24, r18
    11a0:	26 c0       	rjmp	.+76     	; 0x11ee <drawline_plane+0x1a8>
    11a2:	89 e7       	ldi	r24, 0x79	; 121
    11a4:	58 16       	cp	r5, r24
    11a6:	21 f5       	brne	.+72     	; 0x11f0 <drawline_plane+0x1aa>
}

// This function validates that we are drawing inside the cube.
unsigned char inrange(int x, int y, int z)
{
	if (x >= 0 && x < 5 && y >= 0 && y < 5 && z >= 0 && z < 5){
    11a8:	77 fd       	sbrc	r23, 7
    11aa:	22 c0       	rjmp	.+68     	; 0x11f0 <drawline_plane+0x1aa>
    11ac:	65 30       	cpi	r22, 0x05	; 5
    11ae:	71 05       	cpc	r23, r1
    11b0:	fc f4       	brge	.+62     	; 0x11f0 <drawline_plane+0x1aa>
    11b2:	57 fd       	sbrc	r21, 7
    11b4:	1d c0       	rjmp	.+58     	; 0x11f0 <drawline_plane+0x1aa>
    11b6:	45 30       	cpi	r20, 0x05	; 5
    11b8:	51 05       	cpc	r21, r1
    11ba:	d4 f4       	brge	.+52     	; 0x11f0 <drawline_plane+0x1aa>
// Voxel == 1 LED in the 3D cube grid
// Set a voxel (LED) in the cube buffer

void setLED(int x, int y, int z)
{ 
	if (inrange(x, y, z)) cube[z][y] |= (1 << x);
    11bc:	fa 01       	movw	r30, r20
    11be:	ee 0f       	add	r30, r30
    11c0:	ff 1f       	adc	r31, r31
    11c2:	ee 0f       	add	r30, r30
    11c4:	ff 1f       	adc	r31, r31
    11c6:	e4 0f       	add	r30, r20
    11c8:	f5 1f       	adc	r31, r21
    11ca:	e6 0f       	add	r30, r22
    11cc:	f7 1f       	adc	r31, r23
    11ce:	ee 5b       	subi	r30, 0xBE	; 190
    11d0:	fe 4f       	sbci	r31, 0xFE	; 254
    11d2:	80 81       	ld	r24, Z
    11d4:	80 61       	ori	r24, 0x10	; 16
    11d6:	80 83       	st	Z, r24
			setLED(2, y, x);
			setLED(1, y, x);
			setLED(0, y, x);
		}
		
		num += numadd;              // Increase the numerator by the top of the fraction
    11d8:	80 81       	ld	r24, Z
    11da:	88 60       	ori	r24, 0x08	; 8
    11dc:	80 83       	st	Z, r24
    11de:	80 81       	ld	r24, Z
    11e0:	84 60       	ori	r24, 0x04	; 4
    11e2:	80 83       	st	Z, r24
    11e4:	80 81       	ld	r24, Z
    11e6:	82 60       	ori	r24, 0x02	; 2
    11e8:	80 83       	st	Z, r24
    11ea:	80 81       	ld	r24, Z
    11ec:	81 60       	ori	r24, 0x01	; 1
    11ee:	80 83       	st	Z, r24
    11f0:	c2 0d       	add	r28, r2
    11f2:	d3 1d       	adc	r29, r3
		if (num >= den){             // Check if numerator >= denominator
    11f4:	ce 15       	cp	r28, r14
    11f6:	df 05       	cpc	r29, r15
    11f8:	34 f0       	brlt	.+12     	; 0x1206 <drawline_plane+0x1c0>
			num -= den;               // Calculate the new numerator value
    11fa:	ce 19       	sub	r28, r14
    11fc:	df 09       	sbc	r29, r15
			x += xinc1;               // Change the x as appropriate
    11fe:	46 0d       	add	r20, r6
    1200:	57 1d       	adc	r21, r7
			y += yinc1;               // Change the y as appropriate
    1202:	6a 0d       	add	r22, r10
    1204:	7b 1d       	adc	r23, r11
		num = deltay / 2;
		numadd = deltax;
		numpixels = deltay;         // There are more y-values than x-values
	}
	int curpixel;
	for(curpixel = 0 ; curpixel <= numpixels ; curpixel++){
    1206:	0f 5f       	subi	r16, 0xFF	; 255
    1208:	1f 4f       	sbci	r17, 0xFF	; 255
    120a:	a0 17       	cp	r26, r16
    120c:	b1 07       	cpc	r27, r17
    120e:	2c f0       	brlt	.+10     	; 0x121a <drawline_plane+0x1d4>
		if (num >= den){             // Check if numerator >= denominator
			num -= den;               // Calculate the new numerator value
			x += xinc1;               // Change the x as appropriate
			y += yinc1;               // Change the y as appropriate
		}
		x += xinc2;                 // Change the x as appropriate
    1210:	48 0d       	add	r20, r8
    1212:	59 1d       	adc	r21, r9
		y += yinc2;                 // Change the y as appropriate
    1214:	6c 0d       	add	r22, r12
    1216:	7d 1d       	adc	r23, r13
    1218:	72 cf       	rjmp	.-284    	; 0x10fe <drawline_plane+0xb8>
	}
}
    121a:	df 91       	pop	r29
    121c:	cf 91       	pop	r28
    121e:	1f 91       	pop	r17
    1220:	0f 91       	pop	r16
    1222:	ff 90       	pop	r15
    1224:	ef 90       	pop	r14
    1226:	df 90       	pop	r13
    1228:	cf 90       	pop	r12
    122a:	bf 90       	pop	r11
    122c:	af 90       	pop	r10
    122e:	9f 90       	pop	r9
    1230:	8f 90       	pop	r8
    1232:	7f 90       	pop	r7
    1234:	6f 90       	pop	r6
    1236:	5f 90       	pop	r5
    1238:	3f 90       	pop	r3
    123a:	2f 90       	pop	r2
    123c:	08 95       	ret

0000123e <tmp2cube>:

// Copy the temp cube onto the real cube
void tmp2cube(void)
{
    123e:	20 e0       	ldi	r18, 0x00	; 0
    1240:	30 e0       	ldi	r19, 0x00	; 0
	int y, z;
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
			cube[z][y] = tmpcube[z][y];
    1242:	f9 01       	movw	r30, r18
    1244:	ee 0f       	add	r30, r30
    1246:	ff 1f       	adc	r31, r31
    1248:	ee 0f       	add	r30, r30
    124a:	ff 1f       	adc	r31, r31
    124c:	e2 0f       	add	r30, r18
    124e:	f3 1f       	adc	r31, r19
    1250:	df 01       	movw	r26, r30
    1252:	a5 5e       	subi	r26, 0xE5	; 229
    1254:	be 4f       	sbci	r27, 0xFE	; 254
    1256:	8c 91       	ld	r24, X
    1258:	ee 5b       	subi	r30, 0xBE	; 190
    125a:	fe 4f       	sbci	r31, 0xFE	; 254
    125c:	80 83       	st	Z, r24
    125e:	11 96       	adiw	r26, 0x01	; 1
    1260:	8c 91       	ld	r24, X
    1262:	11 97       	sbiw	r26, 0x01	; 1
    1264:	81 83       	std	Z+1, r24	; 0x01
    1266:	12 96       	adiw	r26, 0x02	; 2
    1268:	8c 91       	ld	r24, X
    126a:	12 97       	sbiw	r26, 0x02	; 2
    126c:	82 83       	std	Z+2, r24	; 0x02
    126e:	13 96       	adiw	r26, 0x03	; 3
    1270:	8c 91       	ld	r24, X
    1272:	13 97       	sbiw	r26, 0x03	; 3
    1274:	83 83       	std	Z+3, r24	; 0x03
    1276:	14 96       	adiw	r26, 0x04	; 4
    1278:	8c 91       	ld	r24, X
    127a:	84 83       	std	Z+4, r24	; 0x04

// Copy the temp cube onto the real cube
void tmp2cube(void)
{
	int y, z;
	for(z = 0 ; z < 5 ; z++){
    127c:	2f 5f       	subi	r18, 0xFF	; 255
    127e:	3f 4f       	sbci	r19, 0xFF	; 255
    1280:	25 30       	cpi	r18, 0x05	; 5
    1282:	31 05       	cpc	r19, r1
    1284:	f1 f6       	brne	.-68     	; 0x1242 <tmp2cube+0x4>
		for(y = 0 ; y < 5 ; y++){
			cube[z][y] = tmpcube[z][y];
		}
	}
}
    1286:	08 95       	ret

00001288 <cube2tmp>:

// Copy the cube into the temp buffer
void cube2tmp(void)
{
    1288:	20 e0       	ldi	r18, 0x00	; 0
    128a:	30 e0       	ldi	r19, 0x00	; 0
	int y, z;
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
			tmpcube[z][y] = cube[z][y];
    128c:	f9 01       	movw	r30, r18
    128e:	ee 0f       	add	r30, r30
    1290:	ff 1f       	adc	r31, r31
    1292:	ee 0f       	add	r30, r30
    1294:	ff 1f       	adc	r31, r31
    1296:	e2 0f       	add	r30, r18
    1298:	f3 1f       	adc	r31, r19
    129a:	df 01       	movw	r26, r30
    129c:	ae 5b       	subi	r26, 0xBE	; 190
    129e:	be 4f       	sbci	r27, 0xFE	; 254
    12a0:	8c 91       	ld	r24, X
    12a2:	e5 5e       	subi	r30, 0xE5	; 229
    12a4:	fe 4f       	sbci	r31, 0xFE	; 254
    12a6:	80 83       	st	Z, r24
    12a8:	11 96       	adiw	r26, 0x01	; 1
    12aa:	8c 91       	ld	r24, X
    12ac:	11 97       	sbiw	r26, 0x01	; 1
    12ae:	81 83       	std	Z+1, r24	; 0x01
    12b0:	12 96       	adiw	r26, 0x02	; 2
    12b2:	8c 91       	ld	r24, X
    12b4:	12 97       	sbiw	r26, 0x02	; 2
    12b6:	82 83       	std	Z+2, r24	; 0x02
    12b8:	13 96       	adiw	r26, 0x03	; 3
    12ba:	8c 91       	ld	r24, X
    12bc:	13 97       	sbiw	r26, 0x03	; 3
    12be:	83 83       	std	Z+3, r24	; 0x03
    12c0:	14 96       	adiw	r26, 0x04	; 4
    12c2:	8c 91       	ld	r24, X
    12c4:	84 83       	std	Z+4, r24	; 0x04

// Copy the cube into the temp buffer
void cube2tmp(void)
{
	int y, z;
	for(z = 0 ; z < 5 ; z++){
    12c6:	2f 5f       	subi	r18, 0xFF	; 255
    12c8:	3f 4f       	sbci	r19, 0xFF	; 255
    12ca:	25 30       	cpi	r18, 0x05	; 5
    12cc:	31 05       	cpc	r19, r1
    12ce:	f1 f6       	brne	.-68     	; 0x128c <cube2tmp+0x4>
		for(y = 0 ; y < 5 ; y++){
			tmpcube[z][y] = cube[z][y];
		}
	}
}
    12d0:	08 95       	ret

000012d2 <fill>:

// Fill the cube with a given pattern.
// fill(0x00); clears the cube
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	30 e0       	ldi	r19, 0x00	; 0
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    12d6:	f9 01       	movw	r30, r18
    12d8:	ee 0f       	add	r30, r30
    12da:	ff 1f       	adc	r31, r31
    12dc:	ee 0f       	add	r30, r30
    12de:	ff 1f       	adc	r31, r31
    12e0:	e2 0f       	add	r30, r18
    12e2:	f3 1f       	adc	r31, r19
    12e4:	ee 5b       	subi	r30, 0xBE	; 190
    12e6:	fe 4f       	sbci	r31, 0xFE	; 254
    12e8:	80 83       	st	Z, r24
    12ea:	81 83       	std	Z+1, r24	; 0x01
    12ec:	82 83       	std	Z+2, r24	; 0x02
    12ee:	83 83       	std	Z+3, r24	; 0x03
    12f0:	84 83       	std	Z+4, r24	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    12f2:	2f 5f       	subi	r18, 0xFF	; 255
    12f4:	3f 4f       	sbci	r19, 0xFF	; 255
    12f6:	25 30       	cpi	r18, 0x05	; 5
    12f8:	31 05       	cpc	r19, r1
    12fa:	69 f7       	brne	.-38     	; 0x12d6 <fill+0x4>
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
		}
	}
}
    12fc:	08 95       	ret

000012fe <writeA>:

// write E

void writeA(int l)
{
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1302:	f9 01       	movw	r30, r18
    1304:	ee 0f       	add	r30, r30
    1306:	ff 1f       	adc	r31, r31
    1308:	ee 0f       	add	r30, r30
    130a:	ff 1f       	adc	r31, r31
    130c:	e2 0f       	add	r30, r18
    130e:	f3 1f       	adc	r31, r19
    1310:	ee 5b       	subi	r30, 0xBE	; 190
    1312:	fe 4f       	sbci	r31, 0xFE	; 254
    1314:	10 82       	st	Z, r1
    1316:	11 82       	std	Z+1, r1	; 0x01
    1318:	12 82       	std	Z+2, r1	; 0x02
    131a:	13 82       	std	Z+3, r1	; 0x03
    131c:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    131e:	2f 5f       	subi	r18, 0xFF	; 255
    1320:	3f 4f       	sbci	r19, 0xFF	; 255
    1322:	25 30       	cpi	r18, 0x05	; 5
    1324:	31 05       	cpc	r19, r1
    1326:	69 f7       	brne	.-38     	; 0x1302 <writeA+0x4>
// write E

void writeA(int l)
{
		fill(0x00);
	cube[4][l] = 0x0E;
    1328:	fc 01       	movw	r30, r24
    132a:	ee 5b       	subi	r30, 0xBE	; 190
    132c:	fe 4f       	sbci	r31, 0xFE	; 254
    132e:	8e e0       	ldi	r24, 0x0E	; 14
    1330:	84 8b       	std	Z+20, r24	; 0x14
	cube[3][l] = 0x11;
    1332:	91 e1       	ldi	r25, 0x11	; 17
    1334:	97 87       	std	Z+15, r25	; 0x0f
	cube[2][l] = 0x1F;
    1336:	8f e1       	ldi	r24, 0x1F	; 31
    1338:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x11;
    133a:	95 83       	std	Z+5, r25	; 0x05
	cube[0][l] = 0x11;
    133c:	90 83       	st	Z, r25
}
    133e:	08 95       	ret

00001340 <writeB>:
void writeB(int l)
{
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1344:	f9 01       	movw	r30, r18
    1346:	ee 0f       	add	r30, r30
    1348:	ff 1f       	adc	r31, r31
    134a:	ee 0f       	add	r30, r30
    134c:	ff 1f       	adc	r31, r31
    134e:	e2 0f       	add	r30, r18
    1350:	f3 1f       	adc	r31, r19
    1352:	ee 5b       	subi	r30, 0xBE	; 190
    1354:	fe 4f       	sbci	r31, 0xFE	; 254
    1356:	10 82       	st	Z, r1
    1358:	11 82       	std	Z+1, r1	; 0x01
    135a:	12 82       	std	Z+2, r1	; 0x02
    135c:	13 82       	std	Z+3, r1	; 0x03
    135e:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1360:	2f 5f       	subi	r18, 0xFF	; 255
    1362:	3f 4f       	sbci	r19, 0xFF	; 255
    1364:	25 30       	cpi	r18, 0x05	; 5
    1366:	31 05       	cpc	r19, r1
    1368:	69 f7       	brne	.-38     	; 0x1344 <writeB+0x4>
	cube[0][l] = 0x11;
}
void writeB(int l)
{
		fill(0x00);
	cube[4][l] = 0x0F;
    136a:	fc 01       	movw	r30, r24
    136c:	ee 5b       	subi	r30, 0xBE	; 190
    136e:	fe 4f       	sbci	r31, 0xFE	; 254
    1370:	8f e0       	ldi	r24, 0x0F	; 15
    1372:	84 8b       	std	Z+20, r24	; 0x14
	cube[3][l] = 0x11;
    1374:	91 e1       	ldi	r25, 0x11	; 17
    1376:	97 87       	std	Z+15, r25	; 0x0f
	cube[2][l] = 0x0F;
    1378:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x11;
    137a:	95 83       	std	Z+5, r25	; 0x05
	cube[0][l] = 0x0F;
    137c:	80 83       	st	Z, r24
}
    137e:	08 95       	ret

00001380 <writeC>:


void writeC (int l)
{
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1384:	f9 01       	movw	r30, r18
    1386:	ee 0f       	add	r30, r30
    1388:	ff 1f       	adc	r31, r31
    138a:	ee 0f       	add	r30, r30
    138c:	ff 1f       	adc	r31, r31
    138e:	e2 0f       	add	r30, r18
    1390:	f3 1f       	adc	r31, r19
    1392:	ee 5b       	subi	r30, 0xBE	; 190
    1394:	fe 4f       	sbci	r31, 0xFE	; 254
    1396:	10 82       	st	Z, r1
    1398:	11 82       	std	Z+1, r1	; 0x01
    139a:	12 82       	std	Z+2, r1	; 0x02
    139c:	13 82       	std	Z+3, r1	; 0x03
    139e:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    13a0:	2f 5f       	subi	r18, 0xFF	; 255
    13a2:	3f 4f       	sbci	r19, 0xFF	; 255
    13a4:	25 30       	cpi	r18, 0x05	; 5
    13a6:	31 05       	cpc	r19, r1
    13a8:	69 f7       	brne	.-38     	; 0x1384 <writeC+0x4>


void writeC (int l)
{
	fill(0x00);
	cube[0][l] = 0x1E;
    13aa:	fc 01       	movw	r30, r24
    13ac:	ee 5b       	subi	r30, 0xBE	; 190
    13ae:	fe 4f       	sbci	r31, 0xFE	; 254
    13b0:	8e e1       	ldi	r24, 0x1E	; 30
    13b2:	80 83       	st	Z, r24
	cube[4][l] = 0x1E;
    13b4:	84 8b       	std	Z+20, r24	; 0x14
	cube[3][l] = 0x01;
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x01;
    13ba:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x01;
    13bc:	85 83       	std	Z+5, r24	; 0x05

}
    13be:	08 95       	ret

000013c0 <writeD>:
void writeD(int l)
{
    13c0:	20 e0       	ldi	r18, 0x00	; 0
    13c2:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    13c4:	f9 01       	movw	r30, r18
    13c6:	ee 0f       	add	r30, r30
    13c8:	ff 1f       	adc	r31, r31
    13ca:	ee 0f       	add	r30, r30
    13cc:	ff 1f       	adc	r31, r31
    13ce:	e2 0f       	add	r30, r18
    13d0:	f3 1f       	adc	r31, r19
    13d2:	ee 5b       	subi	r30, 0xBE	; 190
    13d4:	fe 4f       	sbci	r31, 0xFE	; 254
    13d6:	10 82       	st	Z, r1
    13d8:	11 82       	std	Z+1, r1	; 0x01
    13da:	12 82       	std	Z+2, r1	; 0x02
    13dc:	13 82       	std	Z+3, r1	; 0x03
    13de:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    13e0:	2f 5f       	subi	r18, 0xFF	; 255
    13e2:	3f 4f       	sbci	r19, 0xFF	; 255
    13e4:	25 30       	cpi	r18, 0x05	; 5
    13e6:	31 05       	cpc	r19, r1
    13e8:	69 f7       	brne	.-38     	; 0x13c4 <writeD+0x4>

}
void writeD(int l)
{
		fill(0x00);
	cube[4][l] = 0x0F;
    13ea:	fc 01       	movw	r30, r24
    13ec:	ee 5b       	subi	r30, 0xBE	; 190
    13ee:	fe 4f       	sbci	r31, 0xFE	; 254
    13f0:	9f e0       	ldi	r25, 0x0F	; 15
    13f2:	94 8b       	std	Z+20, r25	; 0x14
	cube[3][l] = 0x11;
    13f4:	81 e1       	ldi	r24, 0x11	; 17
    13f6:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x11;
    13f8:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x11;
    13fa:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x0F;
    13fc:	90 83       	st	Z, r25
}
    13fe:	08 95       	ret

00001400 <writeE>:
	

void writeE (int l)
{
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1404:	f9 01       	movw	r30, r18
    1406:	ee 0f       	add	r30, r30
    1408:	ff 1f       	adc	r31, r31
    140a:	ee 0f       	add	r30, r30
    140c:	ff 1f       	adc	r31, r31
    140e:	e2 0f       	add	r30, r18
    1410:	f3 1f       	adc	r31, r19
    1412:	ee 5b       	subi	r30, 0xBE	; 190
    1414:	fe 4f       	sbci	r31, 0xFE	; 254
    1416:	10 82       	st	Z, r1
    1418:	11 82       	std	Z+1, r1	; 0x01
    141a:	12 82       	std	Z+2, r1	; 0x02
    141c:	13 82       	std	Z+3, r1	; 0x03
    141e:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1420:	2f 5f       	subi	r18, 0xFF	; 255
    1422:	3f 4f       	sbci	r19, 0xFF	; 255
    1424:	25 30       	cpi	r18, 0x05	; 5
    1426:	31 05       	cpc	r19, r1
    1428:	69 f7       	brne	.-38     	; 0x1404 <writeE+0x4>
	

void writeE (int l)
{
	fill(0x00);
	cube[4][l] = 0x1F;
    142a:	fc 01       	movw	r30, r24
    142c:	ee 5b       	subi	r30, 0xBE	; 190
    142e:	fe 4f       	sbci	r31, 0xFE	; 254
    1430:	2f e1       	ldi	r18, 0x1F	; 31
    1432:	24 8b       	std	Z+20, r18	; 0x14
	cube[3][l] = 0x01;
    1434:	91 e0       	ldi	r25, 0x01	; 1
    1436:	97 87       	std	Z+15, r25	; 0x0f
	cube[2][l] = 0x07;
    1438:	87 e0       	ldi	r24, 0x07	; 7
    143a:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x01;
    143c:	95 83       	std	Z+5, r25	; 0x05
	cube[0][l] = 0x1F;
    143e:	20 83       	st	Z, r18
}
    1440:	08 95       	ret

00001442 <writeF>:
void writeF(int l)
{
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1446:	f9 01       	movw	r30, r18
    1448:	ee 0f       	add	r30, r30
    144a:	ff 1f       	adc	r31, r31
    144c:	ee 0f       	add	r30, r30
    144e:	ff 1f       	adc	r31, r31
    1450:	e2 0f       	add	r30, r18
    1452:	f3 1f       	adc	r31, r19
    1454:	ee 5b       	subi	r30, 0xBE	; 190
    1456:	fe 4f       	sbci	r31, 0xFE	; 254
    1458:	10 82       	st	Z, r1
    145a:	11 82       	std	Z+1, r1	; 0x01
    145c:	12 82       	std	Z+2, r1	; 0x02
    145e:	13 82       	std	Z+3, r1	; 0x03
    1460:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1462:	2f 5f       	subi	r18, 0xFF	; 255
    1464:	3f 4f       	sbci	r19, 0xFF	; 255
    1466:	25 30       	cpi	r18, 0x05	; 5
    1468:	31 05       	cpc	r19, r1
    146a:	69 f7       	brne	.-38     	; 0x1446 <writeF+0x4>
	cube[0][l] = 0x1F;
}
void writeF(int l)
{
		fill(0x00);
	cube[4][l] = 0x1F;
    146c:	fc 01       	movw	r30, r24
    146e:	ee 5b       	subi	r30, 0xBE	; 190
    1470:	fe 4f       	sbci	r31, 0xFE	; 254
    1472:	8f e1       	ldi	r24, 0x1F	; 31
    1474:	84 8b       	std	Z+20, r24	; 0x14
	cube[3][l] = 0x01;
    1476:	91 e0       	ldi	r25, 0x01	; 1
    1478:	97 87       	std	Z+15, r25	; 0x0f
	cube[2][l] = 0x07;
    147a:	87 e0       	ldi	r24, 0x07	; 7
    147c:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x01;
    147e:	95 83       	std	Z+5, r25	; 0x05
	cube[0][l] = 0x01;
    1480:	90 83       	st	Z, r25
}
    1482:	08 95       	ret

00001484 <writeG>:
void writeG(int l)
{
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1488:	f9 01       	movw	r30, r18
    148a:	ee 0f       	add	r30, r30
    148c:	ff 1f       	adc	r31, r31
    148e:	ee 0f       	add	r30, r30
    1490:	ff 1f       	adc	r31, r31
    1492:	e2 0f       	add	r30, r18
    1494:	f3 1f       	adc	r31, r19
    1496:	ee 5b       	subi	r30, 0xBE	; 190
    1498:	fe 4f       	sbci	r31, 0xFE	; 254
    149a:	10 82       	st	Z, r1
    149c:	11 82       	std	Z+1, r1	; 0x01
    149e:	12 82       	std	Z+2, r1	; 0x02
    14a0:	13 82       	std	Z+3, r1	; 0x03
    14a2:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    14a4:	2f 5f       	subi	r18, 0xFF	; 255
    14a6:	3f 4f       	sbci	r19, 0xFF	; 255
    14a8:	25 30       	cpi	r18, 0x05	; 5
    14aa:	31 05       	cpc	r19, r1
    14ac:	69 f7       	brne	.-38     	; 0x1488 <writeG+0x4>
	cube[0][l] = 0x01;
}
void writeG(int l)
{
		fill(0x00);
	cube[4][l] = 0x0E;
    14ae:	fc 01       	movw	r30, r24
    14b0:	ee 5b       	subi	r30, 0xBE	; 190
    14b2:	fe 4f       	sbci	r31, 0xFE	; 254
    14b4:	9e e0       	ldi	r25, 0x0E	; 14
    14b6:	94 8b       	std	Z+20, r25	; 0x14
	cube[3][l] = 0x01;
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x1D;
    14bc:	8d e1       	ldi	r24, 0x1D	; 29
    14be:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x11;
    14c0:	81 e1       	ldi	r24, 0x11	; 17
    14c2:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x0E;
    14c4:	90 83       	st	Z, r25
}
    14c6:	08 95       	ret

000014c8 <writeH>:
void writeH(int l)
{
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    14cc:	f9 01       	movw	r30, r18
    14ce:	ee 0f       	add	r30, r30
    14d0:	ff 1f       	adc	r31, r31
    14d2:	ee 0f       	add	r30, r30
    14d4:	ff 1f       	adc	r31, r31
    14d6:	e2 0f       	add	r30, r18
    14d8:	f3 1f       	adc	r31, r19
    14da:	ee 5b       	subi	r30, 0xBE	; 190
    14dc:	fe 4f       	sbci	r31, 0xFE	; 254
    14de:	10 82       	st	Z, r1
    14e0:	11 82       	std	Z+1, r1	; 0x01
    14e2:	12 82       	std	Z+2, r1	; 0x02
    14e4:	13 82       	std	Z+3, r1	; 0x03
    14e6:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    14e8:	2f 5f       	subi	r18, 0xFF	; 255
    14ea:	3f 4f       	sbci	r19, 0xFF	; 255
    14ec:	25 30       	cpi	r18, 0x05	; 5
    14ee:	31 05       	cpc	r19, r1
    14f0:	69 f7       	brne	.-38     	; 0x14cc <writeH+0x4>
	cube[0][l] = 0x0E;
}
void writeH(int l)
{
		fill(0x00);
	cube[4][l] = 0x11;
    14f2:	fc 01       	movw	r30, r24
    14f4:	ee 5b       	subi	r30, 0xBE	; 190
    14f6:	fe 4f       	sbci	r31, 0xFE	; 254
    14f8:	91 e1       	ldi	r25, 0x11	; 17
    14fa:	94 8b       	std	Z+20, r25	; 0x14
	cube[3][l] = 0x11;
    14fc:	97 87       	std	Z+15, r25	; 0x0f
	cube[2][l] = 0x1F;
    14fe:	8f e1       	ldi	r24, 0x1F	; 31
    1500:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x11;
    1502:	95 83       	std	Z+5, r25	; 0x05
	cube[0][l] = 0x11;
    1504:	90 83       	st	Z, r25
}
    1506:	08 95       	ret

00001508 <writeI>:
void writeI(int l)
{
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    150c:	f9 01       	movw	r30, r18
    150e:	ee 0f       	add	r30, r30
    1510:	ff 1f       	adc	r31, r31
    1512:	ee 0f       	add	r30, r30
    1514:	ff 1f       	adc	r31, r31
    1516:	e2 0f       	add	r30, r18
    1518:	f3 1f       	adc	r31, r19
    151a:	ee 5b       	subi	r30, 0xBE	; 190
    151c:	fe 4f       	sbci	r31, 0xFE	; 254
    151e:	10 82       	st	Z, r1
    1520:	11 82       	std	Z+1, r1	; 0x01
    1522:	12 82       	std	Z+2, r1	; 0x02
    1524:	13 82       	std	Z+3, r1	; 0x03
    1526:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1528:	2f 5f       	subi	r18, 0xFF	; 255
    152a:	3f 4f       	sbci	r19, 0xFF	; 255
    152c:	25 30       	cpi	r18, 0x05	; 5
    152e:	31 05       	cpc	r19, r1
    1530:	69 f7       	brne	.-38     	; 0x150c <writeI+0x4>
	cube[0][l] = 0x11;
}
void writeI(int l)
{
		fill(0x00);
	cube[4][l] = 0x1F;
    1532:	fc 01       	movw	r30, r24
    1534:	ee 5b       	subi	r30, 0xBE	; 190
    1536:	fe 4f       	sbci	r31, 0xFE	; 254
    1538:	9f e1       	ldi	r25, 0x1F	; 31
    153a:	94 8b       	std	Z+20, r25	; 0x14
	cube[3][l] = 0x04;
    153c:	84 e0       	ldi	r24, 0x04	; 4
    153e:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x04;
    1540:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x04; 
    1542:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x1F;
    1544:	90 83       	st	Z, r25
}
    1546:	08 95       	ret

00001548 <writeJ>:
void writeJ(int l)
{
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    154c:	f9 01       	movw	r30, r18
    154e:	ee 0f       	add	r30, r30
    1550:	ff 1f       	adc	r31, r31
    1552:	ee 0f       	add	r30, r30
    1554:	ff 1f       	adc	r31, r31
    1556:	e2 0f       	add	r30, r18
    1558:	f3 1f       	adc	r31, r19
    155a:	ee 5b       	subi	r30, 0xBE	; 190
    155c:	fe 4f       	sbci	r31, 0xFE	; 254
    155e:	10 82       	st	Z, r1
    1560:	11 82       	std	Z+1, r1	; 0x01
    1562:	12 82       	std	Z+2, r1	; 0x02
    1564:	13 82       	std	Z+3, r1	; 0x03
    1566:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1568:	2f 5f       	subi	r18, 0xFF	; 255
    156a:	3f 4f       	sbci	r19, 0xFF	; 255
    156c:	25 30       	cpi	r18, 0x05	; 5
    156e:	31 05       	cpc	r19, r1
    1570:	69 f7       	brne	.-38     	; 0x154c <writeJ+0x4>
	cube[0][l] = 0x1F;
}
void writeJ(int l)
{
		fill(0x00);
	cube[4][l] = 0x1F;
    1572:	fc 01       	movw	r30, r24
    1574:	ee 5b       	subi	r30, 0xBE	; 190
    1576:	fe 4f       	sbci	r31, 0xFE	; 254
    1578:	8f e1       	ldi	r24, 0x1F	; 31
    157a:	84 8b       	std	Z+20, r24	; 0x14
	cube[3][l] = 0x10;
    157c:	80 e1       	ldi	r24, 0x10	; 16
    157e:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x10;
    1580:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x11;
    1582:	81 e1       	ldi	r24, 0x11	; 17
    1584:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x0E;
    1586:	8e e0       	ldi	r24, 0x0E	; 14
    1588:	80 83       	st	Z, r24
}
    158a:	08 95       	ret

0000158c <writeK>:
void writeK(int l)
{
    158c:	20 e0       	ldi	r18, 0x00	; 0
    158e:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1590:	f9 01       	movw	r30, r18
    1592:	ee 0f       	add	r30, r30
    1594:	ff 1f       	adc	r31, r31
    1596:	ee 0f       	add	r30, r30
    1598:	ff 1f       	adc	r31, r31
    159a:	e2 0f       	add	r30, r18
    159c:	f3 1f       	adc	r31, r19
    159e:	ee 5b       	subi	r30, 0xBE	; 190
    15a0:	fe 4f       	sbci	r31, 0xFE	; 254
    15a2:	10 82       	st	Z, r1
    15a4:	11 82       	std	Z+1, r1	; 0x01
    15a6:	12 82       	std	Z+2, r1	; 0x02
    15a8:	13 82       	std	Z+3, r1	; 0x03
    15aa:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    15ac:	2f 5f       	subi	r18, 0xFF	; 255
    15ae:	3f 4f       	sbci	r19, 0xFF	; 255
    15b0:	25 30       	cpi	r18, 0x05	; 5
    15b2:	31 05       	cpc	r19, r1
    15b4:	69 f7       	brne	.-38     	; 0x1590 <writeK+0x4>
	cube[0][l] = 0x0E;
}
void writeK(int l)
{
		fill(0x00);
	cube[4][l] = 0x09;
    15b6:	fc 01       	movw	r30, r24
    15b8:	ee 5b       	subi	r30, 0xBE	; 190
    15ba:	fe 4f       	sbci	r31, 0xFE	; 254
    15bc:	29 e0       	ldi	r18, 0x09	; 9
    15be:	24 8b       	std	Z+20, r18	; 0x14
	cube[3][l] = 0x05;
    15c0:	95 e0       	ldi	r25, 0x05	; 5
    15c2:	97 87       	std	Z+15, r25	; 0x0f
	cube[2][l] = 0x03;
    15c4:	83 e0       	ldi	r24, 0x03	; 3
    15c6:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x05;
    15c8:	95 83       	std	Z+5, r25	; 0x05
	cube[0][l] = 0x09;
    15ca:	20 83       	st	Z, r18
}
    15cc:	08 95       	ret

000015ce <writeL>:
void writeL(int l)
{
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    15d2:	f9 01       	movw	r30, r18
    15d4:	ee 0f       	add	r30, r30
    15d6:	ff 1f       	adc	r31, r31
    15d8:	ee 0f       	add	r30, r30
    15da:	ff 1f       	adc	r31, r31
    15dc:	e2 0f       	add	r30, r18
    15de:	f3 1f       	adc	r31, r19
    15e0:	ee 5b       	subi	r30, 0xBE	; 190
    15e2:	fe 4f       	sbci	r31, 0xFE	; 254
    15e4:	10 82       	st	Z, r1
    15e6:	11 82       	std	Z+1, r1	; 0x01
    15e8:	12 82       	std	Z+2, r1	; 0x02
    15ea:	13 82       	std	Z+3, r1	; 0x03
    15ec:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    15ee:	2f 5f       	subi	r18, 0xFF	; 255
    15f0:	3f 4f       	sbci	r19, 0xFF	; 255
    15f2:	25 30       	cpi	r18, 0x05	; 5
    15f4:	31 05       	cpc	r19, r1
    15f6:	69 f7       	brne	.-38     	; 0x15d2 <writeL+0x4>
	cube[0][l] = 0x09;
}
void writeL(int l)
{
		fill(0x00);
	cube[4][l] = 0x01;
    15f8:	fc 01       	movw	r30, r24
    15fa:	ee 5b       	subi	r30, 0xBE	; 190
    15fc:	fe 4f       	sbci	r31, 0xFE	; 254
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	84 8b       	std	Z+20, r24	; 0x14
	cube[3][l] = 0x01;
    1602:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x01;
    1604:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x01;
    1606:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x1F;
    1608:	8f e1       	ldi	r24, 0x1F	; 31
    160a:	80 83       	st	Z, r24
}
    160c:	08 95       	ret

0000160e <writeM>:
void writeM(int l)
{
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1612:	f9 01       	movw	r30, r18
    1614:	ee 0f       	add	r30, r30
    1616:	ff 1f       	adc	r31, r31
    1618:	ee 0f       	add	r30, r30
    161a:	ff 1f       	adc	r31, r31
    161c:	e2 0f       	add	r30, r18
    161e:	f3 1f       	adc	r31, r19
    1620:	ee 5b       	subi	r30, 0xBE	; 190
    1622:	fe 4f       	sbci	r31, 0xFE	; 254
    1624:	10 82       	st	Z, r1
    1626:	11 82       	std	Z+1, r1	; 0x01
    1628:	12 82       	std	Z+2, r1	; 0x02
    162a:	13 82       	std	Z+3, r1	; 0x03
    162c:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    162e:	2f 5f       	subi	r18, 0xFF	; 255
    1630:	3f 4f       	sbci	r19, 0xFF	; 255
    1632:	25 30       	cpi	r18, 0x05	; 5
    1634:	31 05       	cpc	r19, r1
    1636:	69 f7       	brne	.-38     	; 0x1612 <writeM+0x4>
	cube[0][l] = 0x1F;
}
void writeM(int l)
{
		fill(0x00);
	cube[4][l] = 0x11;
    1638:	fc 01       	movw	r30, r24
    163a:	ee 5b       	subi	r30, 0xBE	; 190
    163c:	fe 4f       	sbci	r31, 0xFE	; 254
    163e:	91 e1       	ldi	r25, 0x11	; 17
    1640:	94 8b       	std	Z+20, r25	; 0x14
	cube[3][l] = 0x1B;
    1642:	8b e1       	ldi	r24, 0x1B	; 27
    1644:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x15;
    1646:	85 e1       	ldi	r24, 0x15	; 21
    1648:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x11;
    164a:	95 83       	std	Z+5, r25	; 0x05
	cube[0][l] = 0x11;
    164c:	90 83       	st	Z, r25
}
    164e:	08 95       	ret

00001650 <writeN>:
void writeN(int l)
{
    1650:	20 e0       	ldi	r18, 0x00	; 0
    1652:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1654:	f9 01       	movw	r30, r18
    1656:	ee 0f       	add	r30, r30
    1658:	ff 1f       	adc	r31, r31
    165a:	ee 0f       	add	r30, r30
    165c:	ff 1f       	adc	r31, r31
    165e:	e2 0f       	add	r30, r18
    1660:	f3 1f       	adc	r31, r19
    1662:	ee 5b       	subi	r30, 0xBE	; 190
    1664:	fe 4f       	sbci	r31, 0xFE	; 254
    1666:	10 82       	st	Z, r1
    1668:	11 82       	std	Z+1, r1	; 0x01
    166a:	12 82       	std	Z+2, r1	; 0x02
    166c:	13 82       	std	Z+3, r1	; 0x03
    166e:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1670:	2f 5f       	subi	r18, 0xFF	; 255
    1672:	3f 4f       	sbci	r19, 0xFF	; 255
    1674:	25 30       	cpi	r18, 0x05	; 5
    1676:	31 05       	cpc	r19, r1
    1678:	69 f7       	brne	.-38     	; 0x1654 <writeN+0x4>
	cube[0][l] = 0x11;
}
void writeN(int l)
{
		fill(0x00);
	cube[4][l] = 0x11;
    167a:	fc 01       	movw	r30, r24
    167c:	ee 5b       	subi	r30, 0xBE	; 190
    167e:	fe 4f       	sbci	r31, 0xFE	; 254
    1680:	91 e1       	ldi	r25, 0x11	; 17
    1682:	94 8b       	std	Z+20, r25	; 0x14
	cube[3][l] = 0x13;
    1684:	83 e1       	ldi	r24, 0x13	; 19
    1686:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x15;
    1688:	85 e1       	ldi	r24, 0x15	; 21
    168a:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x19;
    168c:	89 e1       	ldi	r24, 0x19	; 25
    168e:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x11;
    1690:	90 83       	st	Z, r25
}
    1692:	08 95       	ret

00001694 <writeO>:
void writeO(int l)
{
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1698:	f9 01       	movw	r30, r18
    169a:	ee 0f       	add	r30, r30
    169c:	ff 1f       	adc	r31, r31
    169e:	ee 0f       	add	r30, r30
    16a0:	ff 1f       	adc	r31, r31
    16a2:	e2 0f       	add	r30, r18
    16a4:	f3 1f       	adc	r31, r19
    16a6:	ee 5b       	subi	r30, 0xBE	; 190
    16a8:	fe 4f       	sbci	r31, 0xFE	; 254
    16aa:	10 82       	st	Z, r1
    16ac:	11 82       	std	Z+1, r1	; 0x01
    16ae:	12 82       	std	Z+2, r1	; 0x02
    16b0:	13 82       	std	Z+3, r1	; 0x03
    16b2:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    16b4:	2f 5f       	subi	r18, 0xFF	; 255
    16b6:	3f 4f       	sbci	r19, 0xFF	; 255
    16b8:	25 30       	cpi	r18, 0x05	; 5
    16ba:	31 05       	cpc	r19, r1
    16bc:	69 f7       	brne	.-38     	; 0x1698 <writeO+0x4>
	cube[0][l] = 0x11;
}
void writeO(int l)
{
		fill(0x00);
	cube[4][l] = 0x0E;
    16be:	fc 01       	movw	r30, r24
    16c0:	ee 5b       	subi	r30, 0xBE	; 190
    16c2:	fe 4f       	sbci	r31, 0xFE	; 254
    16c4:	9e e0       	ldi	r25, 0x0E	; 14
    16c6:	94 8b       	std	Z+20, r25	; 0x14
	cube[3][l] = 0x11;
    16c8:	81 e1       	ldi	r24, 0x11	; 17
    16ca:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x11;
    16cc:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x11;
    16ce:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x0E;
    16d0:	90 83       	st	Z, r25
}
    16d2:	08 95       	ret

000016d4 <writeP>:

void writeP(int l)
{
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    16d8:	f9 01       	movw	r30, r18
    16da:	ee 0f       	add	r30, r30
    16dc:	ff 1f       	adc	r31, r31
    16de:	ee 0f       	add	r30, r30
    16e0:	ff 1f       	adc	r31, r31
    16e2:	e2 0f       	add	r30, r18
    16e4:	f3 1f       	adc	r31, r19
    16e6:	ee 5b       	subi	r30, 0xBE	; 190
    16e8:	fe 4f       	sbci	r31, 0xFE	; 254
    16ea:	10 82       	st	Z, r1
    16ec:	11 82       	std	Z+1, r1	; 0x01
    16ee:	12 82       	std	Z+2, r1	; 0x02
    16f0:	13 82       	std	Z+3, r1	; 0x03
    16f2:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    16f4:	2f 5f       	subi	r18, 0xFF	; 255
    16f6:	3f 4f       	sbci	r19, 0xFF	; 255
    16f8:	25 30       	cpi	r18, 0x05	; 5
    16fa:	31 05       	cpc	r19, r1
    16fc:	69 f7       	brne	.-38     	; 0x16d8 <writeP+0x4>
}

void writeP(int l)
{
		fill(0x00);
	cube[4][l] = 0x0F;
    16fe:	fc 01       	movw	r30, r24
    1700:	ee 5b       	subi	r30, 0xBE	; 190
    1702:	fe 4f       	sbci	r31, 0xFE	; 254
    1704:	9f e0       	ldi	r25, 0x0F	; 15
    1706:	94 8b       	std	Z+20, r25	; 0x14
	cube[3][l] = 0x11;
    1708:	81 e1       	ldi	r24, 0x11	; 17
    170a:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x0F;
    170c:	92 87       	std	Z+10, r25	; 0x0a
	cube[1][l] = 0x01;
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x01;
    1712:	80 83       	st	Z, r24
}
    1714:	08 95       	ret

00001716 <writeQ>:

void writeQ(int l)
{
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    171a:	f9 01       	movw	r30, r18
    171c:	ee 0f       	add	r30, r30
    171e:	ff 1f       	adc	r31, r31
    1720:	ee 0f       	add	r30, r30
    1722:	ff 1f       	adc	r31, r31
    1724:	e2 0f       	add	r30, r18
    1726:	f3 1f       	adc	r31, r19
    1728:	ee 5b       	subi	r30, 0xBE	; 190
    172a:	fe 4f       	sbci	r31, 0xFE	; 254
    172c:	10 82       	st	Z, r1
    172e:	11 82       	std	Z+1, r1	; 0x01
    1730:	12 82       	std	Z+2, r1	; 0x02
    1732:	13 82       	std	Z+3, r1	; 0x03
    1734:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1736:	2f 5f       	subi	r18, 0xFF	; 255
    1738:	3f 4f       	sbci	r19, 0xFF	; 255
    173a:	25 30       	cpi	r18, 0x05	; 5
    173c:	31 05       	cpc	r19, r1
    173e:	69 f7       	brne	.-38     	; 0x171a <writeQ+0x4>
}

void writeQ(int l)
{
		fill(0x00);
	cube[4][l] = 0x06;
    1740:	fc 01       	movw	r30, r24
    1742:	ee 5b       	subi	r30, 0xBE	; 190
    1744:	fe 4f       	sbci	r31, 0xFE	; 254
    1746:	86 e0       	ldi	r24, 0x06	; 6
    1748:	84 8b       	std	Z+20, r24	; 0x14
	cube[3][l] = 0x09;
    174a:	89 e0       	ldi	r24, 0x09	; 9
    174c:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x09;
    174e:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x0E;
    1750:	8e e0       	ldi	r24, 0x0E	; 14
    1752:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x10;
    1754:	80 e1       	ldi	r24, 0x10	; 16
    1756:	80 83       	st	Z, r24
}
    1758:	08 95       	ret

0000175a <writeR>:
void writeR(int l)
{
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    175e:	f9 01       	movw	r30, r18
    1760:	ee 0f       	add	r30, r30
    1762:	ff 1f       	adc	r31, r31
    1764:	ee 0f       	add	r30, r30
    1766:	ff 1f       	adc	r31, r31
    1768:	e2 0f       	add	r30, r18
    176a:	f3 1f       	adc	r31, r19
    176c:	ee 5b       	subi	r30, 0xBE	; 190
    176e:	fe 4f       	sbci	r31, 0xFE	; 254
    1770:	10 82       	st	Z, r1
    1772:	11 82       	std	Z+1, r1	; 0x01
    1774:	12 82       	std	Z+2, r1	; 0x02
    1776:	13 82       	std	Z+3, r1	; 0x03
    1778:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    177a:	2f 5f       	subi	r18, 0xFF	; 255
    177c:	3f 4f       	sbci	r19, 0xFF	; 255
    177e:	25 30       	cpi	r18, 0x05	; 5
    1780:	31 05       	cpc	r19, r1
    1782:	69 f7       	brne	.-38     	; 0x175e <writeR+0x4>
	cube[0][l] = 0x10;
}
void writeR(int l)
{
		fill(0x00);
	cube[4][l] = 0x0F;
    1784:	fc 01       	movw	r30, r24
    1786:	ee 5b       	subi	r30, 0xBE	; 190
    1788:	fe 4f       	sbci	r31, 0xFE	; 254
    178a:	9f e0       	ldi	r25, 0x0F	; 15
    178c:	94 8b       	std	Z+20, r25	; 0x14
	cube[3][l] = 0x11;
    178e:	81 e1       	ldi	r24, 0x11	; 17
    1790:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x0F;
    1792:	92 87       	std	Z+10, r25	; 0x0a
	cube[1][l] = 0x05;
    1794:	85 e0       	ldi	r24, 0x05	; 5
    1796:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x09;
    1798:	89 e0       	ldi	r24, 0x09	; 9
    179a:	80 83       	st	Z, r24
}
    179c:	08 95       	ret

0000179e <writeS>:

void writeS(int l)
{
    179e:	20 e0       	ldi	r18, 0x00	; 0
    17a0:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    17a2:	f9 01       	movw	r30, r18
    17a4:	ee 0f       	add	r30, r30
    17a6:	ff 1f       	adc	r31, r31
    17a8:	ee 0f       	add	r30, r30
    17aa:	ff 1f       	adc	r31, r31
    17ac:	e2 0f       	add	r30, r18
    17ae:	f3 1f       	adc	r31, r19
    17b0:	ee 5b       	subi	r30, 0xBE	; 190
    17b2:	fe 4f       	sbci	r31, 0xFE	; 254
    17b4:	10 82       	st	Z, r1
    17b6:	11 82       	std	Z+1, r1	; 0x01
    17b8:	12 82       	std	Z+2, r1	; 0x02
    17ba:	13 82       	std	Z+3, r1	; 0x03
    17bc:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    17be:	2f 5f       	subi	r18, 0xFF	; 255
    17c0:	3f 4f       	sbci	r19, 0xFF	; 255
    17c2:	25 30       	cpi	r18, 0x05	; 5
    17c4:	31 05       	cpc	r19, r1
    17c6:	69 f7       	brne	.-38     	; 0x17a2 <writeS+0x4>
}

void writeS(int l)
{
	fill(0x00);
	cube[4][l] = 0x1E;
    17c8:	fc 01       	movw	r30, r24
    17ca:	ee 5b       	subi	r30, 0xBE	; 190
    17cc:	fe 4f       	sbci	r31, 0xFE	; 254
    17ce:	8e e1       	ldi	r24, 0x1E	; 30
    17d0:	84 8b       	std	Z+20, r24	; 0x14
	cube[3][l] = 0x01;
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x0E;
    17d6:	8e e0       	ldi	r24, 0x0E	; 14
    17d8:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x10;
    17da:	80 e1       	ldi	r24, 0x10	; 16
    17dc:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x0F;
    17de:	8f e0       	ldi	r24, 0x0F	; 15
    17e0:	80 83       	st	Z, r24
}
    17e2:	08 95       	ret

000017e4 <writeT>:

void writeT(int l)
{
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    17e8:	f9 01       	movw	r30, r18
    17ea:	ee 0f       	add	r30, r30
    17ec:	ff 1f       	adc	r31, r31
    17ee:	ee 0f       	add	r30, r30
    17f0:	ff 1f       	adc	r31, r31
    17f2:	e2 0f       	add	r30, r18
    17f4:	f3 1f       	adc	r31, r19
    17f6:	ee 5b       	subi	r30, 0xBE	; 190
    17f8:	fe 4f       	sbci	r31, 0xFE	; 254
    17fa:	10 82       	st	Z, r1
    17fc:	11 82       	std	Z+1, r1	; 0x01
    17fe:	12 82       	std	Z+2, r1	; 0x02
    1800:	13 82       	std	Z+3, r1	; 0x03
    1802:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1804:	2f 5f       	subi	r18, 0xFF	; 255
    1806:	3f 4f       	sbci	r19, 0xFF	; 255
    1808:	25 30       	cpi	r18, 0x05	; 5
    180a:	31 05       	cpc	r19, r1
    180c:	69 f7       	brne	.-38     	; 0x17e8 <writeT+0x4>
}

void writeT(int l)
{
	fill(0x00);
	cube[0][l] = 0x04;
    180e:	fc 01       	movw	r30, r24
    1810:	ee 5b       	subi	r30, 0xBE	; 190
    1812:	fe 4f       	sbci	r31, 0xFE	; 254
    1814:	84 e0       	ldi	r24, 0x04	; 4
    1816:	80 83       	st	Z, r24
	cube[1][l] = 0x04;
    1818:	85 83       	std	Z+5, r24	; 0x05
	cube[2][l] = 0x04;
    181a:	82 87       	std	Z+10, r24	; 0x0a
	cube[3][l] = 0x04;
    181c:	87 87       	std	Z+15, r24	; 0x0f
	cube[4][l] = 0x1F;
    181e:	8f e1       	ldi	r24, 0x1F	; 31
    1820:	84 8b       	std	Z+20, r24	; 0x14
}
    1822:	08 95       	ret

00001824 <writeU>:

void writeU(int l)
{
    1824:	20 e0       	ldi	r18, 0x00	; 0
    1826:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1828:	f9 01       	movw	r30, r18
    182a:	ee 0f       	add	r30, r30
    182c:	ff 1f       	adc	r31, r31
    182e:	ee 0f       	add	r30, r30
    1830:	ff 1f       	adc	r31, r31
    1832:	e2 0f       	add	r30, r18
    1834:	f3 1f       	adc	r31, r19
    1836:	ee 5b       	subi	r30, 0xBE	; 190
    1838:	fe 4f       	sbci	r31, 0xFE	; 254
    183a:	10 82       	st	Z, r1
    183c:	11 82       	std	Z+1, r1	; 0x01
    183e:	12 82       	std	Z+2, r1	; 0x02
    1840:	13 82       	std	Z+3, r1	; 0x03
    1842:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1844:	2f 5f       	subi	r18, 0xFF	; 255
    1846:	3f 4f       	sbci	r19, 0xFF	; 255
    1848:	25 30       	cpi	r18, 0x05	; 5
    184a:	31 05       	cpc	r19, r1
    184c:	69 f7       	brne	.-38     	; 0x1828 <writeU+0x4>
}

void writeU(int l)
{
		fill(0x00);
	cube[4][l] = 0x11;
    184e:	fc 01       	movw	r30, r24
    1850:	ee 5b       	subi	r30, 0xBE	; 190
    1852:	fe 4f       	sbci	r31, 0xFE	; 254
    1854:	81 e1       	ldi	r24, 0x11	; 17
    1856:	84 8b       	std	Z+20, r24	; 0x14
	cube[3][l] = 0x11;
    1858:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x11;
    185a:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x11;
    185c:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x1F;
    185e:	8f e1       	ldi	r24, 0x1F	; 31
    1860:	80 83       	st	Z, r24
}
    1862:	08 95       	ret

00001864 <writeW>:
void writeW(int l)
{
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1868:	f9 01       	movw	r30, r18
    186a:	ee 0f       	add	r30, r30
    186c:	ff 1f       	adc	r31, r31
    186e:	ee 0f       	add	r30, r30
    1870:	ff 1f       	adc	r31, r31
    1872:	e2 0f       	add	r30, r18
    1874:	f3 1f       	adc	r31, r19
    1876:	ee 5b       	subi	r30, 0xBE	; 190
    1878:	fe 4f       	sbci	r31, 0xFE	; 254
    187a:	10 82       	st	Z, r1
    187c:	11 82       	std	Z+1, r1	; 0x01
    187e:	12 82       	std	Z+2, r1	; 0x02
    1880:	13 82       	std	Z+3, r1	; 0x03
    1882:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1884:	2f 5f       	subi	r18, 0xFF	; 255
    1886:	3f 4f       	sbci	r19, 0xFF	; 255
    1888:	25 30       	cpi	r18, 0x05	; 5
    188a:	31 05       	cpc	r19, r1
    188c:	69 f7       	brne	.-38     	; 0x1868 <writeW+0x4>
	cube[0][l] = 0x1F;
}
void writeW(int l)
{
		fill(0x00);
	cube[4][l] = 0x11;
    188e:	fc 01       	movw	r30, r24
    1890:	ee 5b       	subi	r30, 0xBE	; 190
    1892:	fe 4f       	sbci	r31, 0xFE	; 254
    1894:	91 e1       	ldi	r25, 0x11	; 17
    1896:	94 8b       	std	Z+20, r25	; 0x14
	cube[3][l] = 0x11;
    1898:	97 87       	std	Z+15, r25	; 0x0f
	cube[2][l] = 0x15;
    189a:	85 e1       	ldi	r24, 0x15	; 21
    189c:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x1B;
    189e:	8b e1       	ldi	r24, 0x1B	; 27
    18a0:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x11;
    18a2:	90 83       	st	Z, r25
}
    18a4:	08 95       	ret

000018a6 <writeV>:
void writeV(int l)
{
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    18aa:	f9 01       	movw	r30, r18
    18ac:	ee 0f       	add	r30, r30
    18ae:	ff 1f       	adc	r31, r31
    18b0:	ee 0f       	add	r30, r30
    18b2:	ff 1f       	adc	r31, r31
    18b4:	e2 0f       	add	r30, r18
    18b6:	f3 1f       	adc	r31, r19
    18b8:	ee 5b       	subi	r30, 0xBE	; 190
    18ba:	fe 4f       	sbci	r31, 0xFE	; 254
    18bc:	10 82       	st	Z, r1
    18be:	11 82       	std	Z+1, r1	; 0x01
    18c0:	12 82       	std	Z+2, r1	; 0x02
    18c2:	13 82       	std	Z+3, r1	; 0x03
    18c4:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    18c6:	2f 5f       	subi	r18, 0xFF	; 255
    18c8:	3f 4f       	sbci	r19, 0xFF	; 255
    18ca:	25 30       	cpi	r18, 0x05	; 5
    18cc:	31 05       	cpc	r19, r1
    18ce:	69 f7       	brne	.-38     	; 0x18aa <writeV+0x4>
	cube[0][l] = 0x11;
}
void writeV(int l)
{
		fill(0x00);
	cube[4][l] = 0x11;
    18d0:	fc 01       	movw	r30, r24
    18d2:	ee 5b       	subi	r30, 0xBE	; 190
    18d4:	fe 4f       	sbci	r31, 0xFE	; 254
    18d6:	81 e1       	ldi	r24, 0x11	; 17
    18d8:	84 8b       	std	Z+20, r24	; 0x14
	cube[3][l] = 0x11;
    18da:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x11;
    18dc:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x0A;
    18de:	8a e0       	ldi	r24, 0x0A	; 10
    18e0:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x04;
    18e2:	84 e0       	ldi	r24, 0x04	; 4
    18e4:	80 83       	st	Z, r24
}
    18e6:	08 95       	ret

000018e8 <writeX>:
void writeX(int l)
{
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    18ec:	f9 01       	movw	r30, r18
    18ee:	ee 0f       	add	r30, r30
    18f0:	ff 1f       	adc	r31, r31
    18f2:	ee 0f       	add	r30, r30
    18f4:	ff 1f       	adc	r31, r31
    18f6:	e2 0f       	add	r30, r18
    18f8:	f3 1f       	adc	r31, r19
    18fa:	ee 5b       	subi	r30, 0xBE	; 190
    18fc:	fe 4f       	sbci	r31, 0xFE	; 254
    18fe:	10 82       	st	Z, r1
    1900:	11 82       	std	Z+1, r1	; 0x01
    1902:	12 82       	std	Z+2, r1	; 0x02
    1904:	13 82       	std	Z+3, r1	; 0x03
    1906:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1908:	2f 5f       	subi	r18, 0xFF	; 255
    190a:	3f 4f       	sbci	r19, 0xFF	; 255
    190c:	25 30       	cpi	r18, 0x05	; 5
    190e:	31 05       	cpc	r19, r1
    1910:	69 f7       	brne	.-38     	; 0x18ec <writeX+0x4>
	cube[0][l] = 0x04;
}
void writeX(int l)
{
		fill(0x00);
	cube[4][l] = 0x11;
    1912:	fc 01       	movw	r30, r24
    1914:	ee 5b       	subi	r30, 0xBE	; 190
    1916:	fe 4f       	sbci	r31, 0xFE	; 254
    1918:	21 e1       	ldi	r18, 0x11	; 17
    191a:	24 8b       	std	Z+20, r18	; 0x14
	cube[3][l] = 0x0A;
    191c:	9a e0       	ldi	r25, 0x0A	; 10
    191e:	97 87       	std	Z+15, r25	; 0x0f
	cube[2][l] = 0x04;
    1920:	84 e0       	ldi	r24, 0x04	; 4
    1922:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x0A;
    1924:	95 83       	std	Z+5, r25	; 0x05
	cube[0][l] = 0x11;
    1926:	20 83       	st	Z, r18
}
    1928:	08 95       	ret

0000192a <writeY>:

void writeY(int l)
{
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    192e:	f9 01       	movw	r30, r18
    1930:	ee 0f       	add	r30, r30
    1932:	ff 1f       	adc	r31, r31
    1934:	ee 0f       	add	r30, r30
    1936:	ff 1f       	adc	r31, r31
    1938:	e2 0f       	add	r30, r18
    193a:	f3 1f       	adc	r31, r19
    193c:	ee 5b       	subi	r30, 0xBE	; 190
    193e:	fe 4f       	sbci	r31, 0xFE	; 254
    1940:	10 82       	st	Z, r1
    1942:	11 82       	std	Z+1, r1	; 0x01
    1944:	12 82       	std	Z+2, r1	; 0x02
    1946:	13 82       	std	Z+3, r1	; 0x03
    1948:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    194a:	2f 5f       	subi	r18, 0xFF	; 255
    194c:	3f 4f       	sbci	r19, 0xFF	; 255
    194e:	25 30       	cpi	r18, 0x05	; 5
    1950:	31 05       	cpc	r19, r1
    1952:	69 f7       	brne	.-38     	; 0x192e <writeY+0x4>
}

void writeY(int l)
{
		fill(0x00);
	cube[4][l] = 0x11;
    1954:	fc 01       	movw	r30, r24
    1956:	ee 5b       	subi	r30, 0xBE	; 190
    1958:	fe 4f       	sbci	r31, 0xFE	; 254
    195a:	81 e1       	ldi	r24, 0x11	; 17
    195c:	84 8b       	std	Z+20, r24	; 0x14
	cube[3][l] = 0x0A;
    195e:	8a e0       	ldi	r24, 0x0A	; 10
    1960:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x04;
    1962:	84 e0       	ldi	r24, 0x04	; 4
    1964:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x04;
    1966:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x04;
    1968:	80 83       	st	Z, r24
}
    196a:	08 95       	ret

0000196c <writeZ>:
void writeZ(int l)
{
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	30 e0       	ldi	r19, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1970:	f9 01       	movw	r30, r18
    1972:	ee 0f       	add	r30, r30
    1974:	ff 1f       	adc	r31, r31
    1976:	ee 0f       	add	r30, r30
    1978:	ff 1f       	adc	r31, r31
    197a:	e2 0f       	add	r30, r18
    197c:	f3 1f       	adc	r31, r19
    197e:	ee 5b       	subi	r30, 0xBE	; 190
    1980:	fe 4f       	sbci	r31, 0xFE	; 254
    1982:	10 82       	st	Z, r1
    1984:	11 82       	std	Z+1, r1	; 0x01
    1986:	12 82       	std	Z+2, r1	; 0x02
    1988:	13 82       	std	Z+3, r1	; 0x03
    198a:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    198c:	2f 5f       	subi	r18, 0xFF	; 255
    198e:	3f 4f       	sbci	r19, 0xFF	; 255
    1990:	25 30       	cpi	r18, 0x05	; 5
    1992:	31 05       	cpc	r19, r1
    1994:	69 f7       	brne	.-38     	; 0x1970 <writeZ+0x4>
	cube[0][l] = 0x04;
}
void writeZ(int l)
{
		fill(0x00);
	cube[4][l] = 0x1F;
    1996:	fc 01       	movw	r30, r24
    1998:	ee 5b       	subi	r30, 0xBE	; 190
    199a:	fe 4f       	sbci	r31, 0xFE	; 254
    199c:	9f e1       	ldi	r25, 0x1F	; 31
    199e:	94 8b       	std	Z+20, r25	; 0x14
	cube[3][l] = 0x08;
    19a0:	88 e0       	ldi	r24, 0x08	; 8
    19a2:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x04;
    19a4:	84 e0       	ldi	r24, 0x04	; 4
    19a6:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x02;
    19a8:	82 e0       	ldi	r24, 0x02	; 2
    19aa:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x1F;
    19ac:	90 83       	st	Z, r25
}
    19ae:	08 95       	ret

000019b0 <getLetter>:


void getLetter(int letter, int l)
{
	
	switch(letter)
    19b0:	fc 01       	movw	r30, r24
    19b2:	8a 31       	cpi	r24, 0x1A	; 26
    19b4:	91 05       	cpc	r25, r1
    19b6:	08 f0       	brcs	.+2      	; 0x19ba <getLetter+0xa>
    19b8:	15 c3       	rjmp	.+1578   	; 0x1fe4 <getLetter+0x634>
    19ba:	e6 5d       	subi	r30, 0xD6	; 214
    19bc:	ff 4f       	sbci	r31, 0xFF	; 255
    19be:	ee 0f       	add	r30, r30
    19c0:	ff 1f       	adc	r31, r31
    19c2:	05 90       	lpm	r0, Z+
    19c4:	f4 91       	lpm	r31, Z+
    19c6:	e0 2d       	mov	r30, r0
    19c8:	09 94       	ijmp
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    19ce:	fc 01       	movw	r30, r24
    19d0:	ee 0f       	add	r30, r30
    19d2:	ff 1f       	adc	r31, r31
    19d4:	ee 0f       	add	r30, r30
    19d6:	ff 1f       	adc	r31, r31
    19d8:	e8 0f       	add	r30, r24
    19da:	f9 1f       	adc	r31, r25
    19dc:	ee 5b       	subi	r30, 0xBE	; 190
    19de:	fe 4f       	sbci	r31, 0xFE	; 254
    19e0:	10 82       	st	Z, r1
    19e2:	11 82       	std	Z+1, r1	; 0x01
    19e4:	12 82       	std	Z+2, r1	; 0x02
    19e6:	13 82       	std	Z+3, r1	; 0x03
    19e8:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    19ea:	01 96       	adiw	r24, 0x01	; 1
    19ec:	85 30       	cpi	r24, 0x05	; 5
    19ee:	91 05       	cpc	r25, r1
    19f0:	71 f7       	brne	.-36     	; 0x19ce <getLetter+0x1e>
// write E

void writeA(int l)
{
		fill(0x00);
	cube[4][l] = 0x0E;
    19f2:	fb 01       	movw	r30, r22
    19f4:	ee 5b       	subi	r30, 0xBE	; 190
    19f6:	fe 4f       	sbci	r31, 0xFE	; 254
    19f8:	8e e0       	ldi	r24, 0x0E	; 14
    19fa:	84 8b       	std	Z+20, r24	; 0x14
	cube[3][l] = 0x11;
    19fc:	91 e1       	ldi	r25, 0x11	; 17
    19fe:	ca c0       	rjmp	.+404    	; 0x1b94 <getLetter+0x1e4>
void getLetter(int letter, int l)
{
	
	switch(letter)
	{
		case 0: writeA(l);break;
    1a00:	80 e0       	ldi	r24, 0x00	; 0
    1a02:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1a04:	fc 01       	movw	r30, r24
    1a06:	ee 0f       	add	r30, r30
    1a08:	ff 1f       	adc	r31, r31
    1a0a:	ee 0f       	add	r30, r30
    1a0c:	ff 1f       	adc	r31, r31
    1a0e:	e8 0f       	add	r30, r24
    1a10:	f9 1f       	adc	r31, r25
    1a12:	ee 5b       	subi	r30, 0xBE	; 190
    1a14:	fe 4f       	sbci	r31, 0xFE	; 254
    1a16:	10 82       	st	Z, r1
    1a18:	11 82       	std	Z+1, r1	; 0x01
    1a1a:	12 82       	std	Z+2, r1	; 0x02
    1a1c:	13 82       	std	Z+3, r1	; 0x03
    1a1e:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1a20:	01 96       	adiw	r24, 0x01	; 1
    1a22:	85 30       	cpi	r24, 0x05	; 5
    1a24:	91 05       	cpc	r25, r1
    1a26:	71 f7       	brne	.-36     	; 0x1a04 <getLetter+0x54>
	cube[0][l] = 0x11;
}
void writeB(int l)
{
		fill(0x00);
	cube[4][l] = 0x0F;
    1a28:	fb 01       	movw	r30, r22
    1a2a:	ee 5b       	subi	r30, 0xBE	; 190
    1a2c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a2e:	8f e0       	ldi	r24, 0x0F	; 15
    1a30:	84 8b       	std	Z+20, r24	; 0x14
	cube[3][l] = 0x11;
    1a32:	91 e1       	ldi	r25, 0x11	; 17
    1a34:	97 87       	std	Z+15, r25	; 0x0f
	cube[2][l] = 0x0F;
    1a36:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x11;
    1a38:	95 83       	std	Z+5, r25	; 0x05
    1a3a:	b2 c2       	rjmp	.+1380   	; 0x1fa0 <getLetter+0x5f0>
{
	
	switch(letter)
	{
		case 0: writeA(l);break;
		case 1: writeB(l);break;
    1a3c:	80 e0       	ldi	r24, 0x00	; 0
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1a40:	fc 01       	movw	r30, r24
    1a42:	ee 0f       	add	r30, r30
    1a44:	ff 1f       	adc	r31, r31
    1a46:	ee 0f       	add	r30, r30
    1a48:	ff 1f       	adc	r31, r31
    1a4a:	e8 0f       	add	r30, r24
    1a4c:	f9 1f       	adc	r31, r25
    1a4e:	ee 5b       	subi	r30, 0xBE	; 190
    1a50:	fe 4f       	sbci	r31, 0xFE	; 254
    1a52:	10 82       	st	Z, r1
    1a54:	11 82       	std	Z+1, r1	; 0x01
    1a56:	12 82       	std	Z+2, r1	; 0x02
    1a58:	13 82       	std	Z+3, r1	; 0x03
    1a5a:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1a5c:	01 96       	adiw	r24, 0x01	; 1
    1a5e:	85 30       	cpi	r24, 0x05	; 5
    1a60:	91 05       	cpc	r25, r1
    1a62:	71 f7       	brne	.-36     	; 0x1a40 <getLetter+0x90>


void writeC (int l)
{
	fill(0x00);
	cube[0][l] = 0x1E;
    1a64:	fb 01       	movw	r30, r22
    1a66:	ee 5b       	subi	r30, 0xBE	; 190
    1a68:	fe 4f       	sbci	r31, 0xFE	; 254
    1a6a:	8e e1       	ldi	r24, 0x1E	; 30
    1a6c:	80 83       	st	Z, r24
	cube[4][l] = 0x1E;
    1a6e:	84 8b       	std	Z+20, r24	; 0x14
	cube[3][l] = 0x01;
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x01;
    1a74:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x01;
    1a76:	85 83       	std	Z+5, r24	; 0x05
    1a78:	08 95       	ret
	
	switch(letter)
	{
		case 0: writeA(l);break;
		case 1: writeB(l);break;
		case 2: writeC(l);break;
    1a7a:	80 e0       	ldi	r24, 0x00	; 0
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1a7e:	fc 01       	movw	r30, r24
    1a80:	ee 0f       	add	r30, r30
    1a82:	ff 1f       	adc	r31, r31
    1a84:	ee 0f       	add	r30, r30
    1a86:	ff 1f       	adc	r31, r31
    1a88:	e8 0f       	add	r30, r24
    1a8a:	f9 1f       	adc	r31, r25
    1a8c:	ee 5b       	subi	r30, 0xBE	; 190
    1a8e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a90:	10 82       	st	Z, r1
    1a92:	11 82       	std	Z+1, r1	; 0x01
    1a94:	12 82       	std	Z+2, r1	; 0x02
    1a96:	13 82       	std	Z+3, r1	; 0x03
    1a98:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1a9a:	01 96       	adiw	r24, 0x01	; 1
    1a9c:	85 30       	cpi	r24, 0x05	; 5
    1a9e:	91 05       	cpc	r25, r1
    1aa0:	71 f7       	brne	.-36     	; 0x1a7e <getLetter+0xce>

}
void writeD(int l)
{
		fill(0x00);
	cube[4][l] = 0x0F;
    1aa2:	fb 01       	movw	r30, r22
    1aa4:	ee 5b       	subi	r30, 0xBE	; 190
    1aa6:	fe 4f       	sbci	r31, 0xFE	; 254
    1aa8:	9f e0       	ldi	r25, 0x0F	; 15
    1aaa:	3c c1       	rjmp	.+632    	; 0x1d24 <getLetter+0x374>
	switch(letter)
	{
		case 0: writeA(l);break;
		case 1: writeB(l);break;
		case 2: writeC(l);break;
		case 3: writeD(l);break;
    1aac:	80 e0       	ldi	r24, 0x00	; 0
    1aae:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1ab0:	fc 01       	movw	r30, r24
    1ab2:	ee 0f       	add	r30, r30
    1ab4:	ff 1f       	adc	r31, r31
    1ab6:	ee 0f       	add	r30, r30
    1ab8:	ff 1f       	adc	r31, r31
    1aba:	e8 0f       	add	r30, r24
    1abc:	f9 1f       	adc	r31, r25
    1abe:	ee 5b       	subi	r30, 0xBE	; 190
    1ac0:	fe 4f       	sbci	r31, 0xFE	; 254
    1ac2:	10 82       	st	Z, r1
    1ac4:	11 82       	std	Z+1, r1	; 0x01
    1ac6:	12 82       	std	Z+2, r1	; 0x02
    1ac8:	13 82       	std	Z+3, r1	; 0x03
    1aca:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1acc:	01 96       	adiw	r24, 0x01	; 1
    1ace:	85 30       	cpi	r24, 0x05	; 5
    1ad0:	91 05       	cpc	r25, r1
    1ad2:	71 f7       	brne	.-36     	; 0x1ab0 <getLetter+0x100>
	

void writeE (int l)
{
	fill(0x00);
	cube[4][l] = 0x1F;
    1ad4:	fb 01       	movw	r30, r22
    1ad6:	ee 5b       	subi	r30, 0xBE	; 190
    1ad8:	fe 4f       	sbci	r31, 0xFE	; 254
    1ada:	2f e1       	ldi	r18, 0x1F	; 31
    1adc:	24 8b       	std	Z+20, r18	; 0x14
	cube[3][l] = 0x01;
    1ade:	91 e0       	ldi	r25, 0x01	; 1
    1ae0:	97 87       	std	Z+15, r25	; 0x0f
	cube[2][l] = 0x07;
    1ae2:	87 e0       	ldi	r24, 0x07	; 7
    1ae4:	3b c2       	rjmp	.+1142   	; 0x1f5c <getLetter+0x5ac>
	{
		case 0: writeA(l);break;
		case 1: writeB(l);break;
		case 2: writeC(l);break;
		case 3: writeD(l);break;
		case 4: writeE(l);break;
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1aea:	fc 01       	movw	r30, r24
    1aec:	ee 0f       	add	r30, r30
    1aee:	ff 1f       	adc	r31, r31
    1af0:	ee 0f       	add	r30, r30
    1af2:	ff 1f       	adc	r31, r31
    1af4:	e8 0f       	add	r30, r24
    1af6:	f9 1f       	adc	r31, r25
    1af8:	ee 5b       	subi	r30, 0xBE	; 190
    1afa:	fe 4f       	sbci	r31, 0xFE	; 254
    1afc:	10 82       	st	Z, r1
    1afe:	11 82       	std	Z+1, r1	; 0x01
    1b00:	12 82       	std	Z+2, r1	; 0x02
    1b02:	13 82       	std	Z+3, r1	; 0x03
    1b04:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1b06:	01 96       	adiw	r24, 0x01	; 1
    1b08:	85 30       	cpi	r24, 0x05	; 5
    1b0a:	91 05       	cpc	r25, r1
    1b0c:	71 f7       	brne	.-36     	; 0x1aea <getLetter+0x13a>
	cube[0][l] = 0x1F;
}
void writeF(int l)
{
		fill(0x00);
	cube[4][l] = 0x1F;
    1b0e:	fb 01       	movw	r30, r22
    1b10:	ee 5b       	subi	r30, 0xBE	; 190
    1b12:	fe 4f       	sbci	r31, 0xFE	; 254
    1b14:	8f e1       	ldi	r24, 0x1F	; 31
    1b16:	84 8b       	std	Z+20, r24	; 0x14
	cube[3][l] = 0x01;
    1b18:	91 e0       	ldi	r25, 0x01	; 1
    1b1a:	97 87       	std	Z+15, r25	; 0x0f
	cube[2][l] = 0x07;
    1b1c:	87 e0       	ldi	r24, 0x07	; 7
    1b1e:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x01;
    1b20:	95 83       	std	Z+5, r25	; 0x05
    1b22:	fe c1       	rjmp	.+1020   	; 0x1f20 <getLetter+0x570>
		case 0: writeA(l);break;
		case 1: writeB(l);break;
		case 2: writeC(l);break;
		case 3: writeD(l);break;
		case 4: writeE(l);break;
		case 5: writeF(l);break;
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1b28:	fc 01       	movw	r30, r24
    1b2a:	ee 0f       	add	r30, r30
    1b2c:	ff 1f       	adc	r31, r31
    1b2e:	ee 0f       	add	r30, r30
    1b30:	ff 1f       	adc	r31, r31
    1b32:	e8 0f       	add	r30, r24
    1b34:	f9 1f       	adc	r31, r25
    1b36:	ee 5b       	subi	r30, 0xBE	; 190
    1b38:	fe 4f       	sbci	r31, 0xFE	; 254
    1b3a:	10 82       	st	Z, r1
    1b3c:	11 82       	std	Z+1, r1	; 0x01
    1b3e:	12 82       	std	Z+2, r1	; 0x02
    1b40:	13 82       	std	Z+3, r1	; 0x03
    1b42:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1b44:	01 96       	adiw	r24, 0x01	; 1
    1b46:	85 30       	cpi	r24, 0x05	; 5
    1b48:	91 05       	cpc	r25, r1
    1b4a:	71 f7       	brne	.-36     	; 0x1b28 <getLetter+0x178>
	cube[0][l] = 0x01;
}
void writeG(int l)
{
		fill(0x00);
	cube[4][l] = 0x0E;
    1b4c:	fb 01       	movw	r30, r22
    1b4e:	ee 5b       	subi	r30, 0xBE	; 190
    1b50:	fe 4f       	sbci	r31, 0xFE	; 254
    1b52:	9e e0       	ldi	r25, 0x0E	; 14
    1b54:	94 8b       	std	Z+20, r25	; 0x14
	cube[3][l] = 0x01;
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x1D;
    1b5a:	8d e1       	ldi	r24, 0x1D	; 29
    1b5c:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x11;
    1b5e:	81 e1       	ldi	r24, 0x11	; 17
    1b60:	de c1       	rjmp	.+956    	; 0x1f1e <getLetter+0x56e>
		case 1: writeB(l);break;
		case 2: writeC(l);break;
		case 3: writeD(l);break;
		case 4: writeE(l);break;
		case 5: writeF(l);break;
		case 6: writeG(l);break;
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1b66:	fc 01       	movw	r30, r24
    1b68:	ee 0f       	add	r30, r30
    1b6a:	ff 1f       	adc	r31, r31
    1b6c:	ee 0f       	add	r30, r30
    1b6e:	ff 1f       	adc	r31, r31
    1b70:	e8 0f       	add	r30, r24
    1b72:	f9 1f       	adc	r31, r25
    1b74:	ee 5b       	subi	r30, 0xBE	; 190
    1b76:	fe 4f       	sbci	r31, 0xFE	; 254
    1b78:	10 82       	st	Z, r1
    1b7a:	11 82       	std	Z+1, r1	; 0x01
    1b7c:	12 82       	std	Z+2, r1	; 0x02
    1b7e:	13 82       	std	Z+3, r1	; 0x03
    1b80:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1b82:	01 96       	adiw	r24, 0x01	; 1
    1b84:	85 30       	cpi	r24, 0x05	; 5
    1b86:	91 05       	cpc	r25, r1
    1b88:	71 f7       	brne	.-36     	; 0x1b66 <getLetter+0x1b6>
	cube[0][l] = 0x0E;
}
void writeH(int l)
{
		fill(0x00);
	cube[4][l] = 0x11;
    1b8a:	fb 01       	movw	r30, r22
    1b8c:	ee 5b       	subi	r30, 0xBE	; 190
    1b8e:	fe 4f       	sbci	r31, 0xFE	; 254
    1b90:	91 e1       	ldi	r25, 0x11	; 17
    1b92:	94 8b       	std	Z+20, r25	; 0x14
	cube[3][l] = 0x11;
    1b94:	97 87       	std	Z+15, r25	; 0x0f
	cube[2][l] = 0x1F;
    1b96:	8f e1       	ldi	r24, 0x1F	; 31
    1b98:	c2 cf       	rjmp	.-124    	; 0x1b1e <getLetter+0x16e>
		case 2: writeC(l);break;
		case 3: writeD(l);break;
		case 4: writeE(l);break;
		case 5: writeF(l);break;
		case 6: writeG(l);break;
		case 7: writeH(l);break;
    1b9a:	80 e0       	ldi	r24, 0x00	; 0
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1b9e:	fc 01       	movw	r30, r24
    1ba0:	ee 0f       	add	r30, r30
    1ba2:	ff 1f       	adc	r31, r31
    1ba4:	ee 0f       	add	r30, r30
    1ba6:	ff 1f       	adc	r31, r31
    1ba8:	e8 0f       	add	r30, r24
    1baa:	f9 1f       	adc	r31, r25
    1bac:	ee 5b       	subi	r30, 0xBE	; 190
    1bae:	fe 4f       	sbci	r31, 0xFE	; 254
    1bb0:	10 82       	st	Z, r1
    1bb2:	11 82       	std	Z+1, r1	; 0x01
    1bb4:	12 82       	std	Z+2, r1	; 0x02
    1bb6:	13 82       	std	Z+3, r1	; 0x03
    1bb8:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1bba:	01 96       	adiw	r24, 0x01	; 1
    1bbc:	85 30       	cpi	r24, 0x05	; 5
    1bbe:	91 05       	cpc	r25, r1
    1bc0:	71 f7       	brne	.-36     	; 0x1b9e <getLetter+0x1ee>
	cube[0][l] = 0x11;
}
void writeI(int l)
{
		fill(0x00);
	cube[4][l] = 0x1F;
    1bc2:	fb 01       	movw	r30, r22
    1bc4:	ee 5b       	subi	r30, 0xBE	; 190
    1bc6:	fe 4f       	sbci	r31, 0xFE	; 254
    1bc8:	9f e1       	ldi	r25, 0x1F	; 31
    1bca:	94 8b       	std	Z+20, r25	; 0x14
	cube[3][l] = 0x04;
    1bcc:	84 e0       	ldi	r24, 0x04	; 4
    1bce:	ac c0       	rjmp	.+344    	; 0x1d28 <getLetter+0x378>
		case 3: writeD(l);break;
		case 4: writeE(l);break;
		case 5: writeF(l);break;
		case 6: writeG(l);break;
		case 7: writeH(l);break;
		case 8: writeI(l);break;
    1bd0:	80 e0       	ldi	r24, 0x00	; 0
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1bd4:	fc 01       	movw	r30, r24
    1bd6:	ee 0f       	add	r30, r30
    1bd8:	ff 1f       	adc	r31, r31
    1bda:	ee 0f       	add	r30, r30
    1bdc:	ff 1f       	adc	r31, r31
    1bde:	e8 0f       	add	r30, r24
    1be0:	f9 1f       	adc	r31, r25
    1be2:	ee 5b       	subi	r30, 0xBE	; 190
    1be4:	fe 4f       	sbci	r31, 0xFE	; 254
    1be6:	10 82       	st	Z, r1
    1be8:	11 82       	std	Z+1, r1	; 0x01
    1bea:	12 82       	std	Z+2, r1	; 0x02
    1bec:	13 82       	std	Z+3, r1	; 0x03
    1bee:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1bf0:	01 96       	adiw	r24, 0x01	; 1
    1bf2:	85 30       	cpi	r24, 0x05	; 5
    1bf4:	91 05       	cpc	r25, r1
    1bf6:	71 f7       	brne	.-36     	; 0x1bd4 <getLetter+0x224>
	cube[0][l] = 0x1F;
}
void writeJ(int l)
{
		fill(0x00);
	cube[4][l] = 0x1F;
    1bf8:	fb 01       	movw	r30, r22
    1bfa:	ee 5b       	subi	r30, 0xBE	; 190
    1bfc:	fe 4f       	sbci	r31, 0xFE	; 254
    1bfe:	8f e1       	ldi	r24, 0x1F	; 31
    1c00:	84 8b       	std	Z+20, r24	; 0x14
	cube[3][l] = 0x10;
    1c02:	80 e1       	ldi	r24, 0x10	; 16
    1c04:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x10;
    1c06:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x11;
    1c08:	81 e1       	ldi	r24, 0x11	; 17
    1c0a:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x0E;
    1c0c:	8e e0       	ldi	r24, 0x0E	; 14
    1c0e:	c8 c1       	rjmp	.+912    	; 0x1fa0 <getLetter+0x5f0>
		case 4: writeE(l);break;
		case 5: writeF(l);break;
		case 6: writeG(l);break;
		case 7: writeH(l);break;
		case 8: writeI(l);break;
		case 9: writeJ(l);break;
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1c14:	fc 01       	movw	r30, r24
    1c16:	ee 0f       	add	r30, r30
    1c18:	ff 1f       	adc	r31, r31
    1c1a:	ee 0f       	add	r30, r30
    1c1c:	ff 1f       	adc	r31, r31
    1c1e:	e8 0f       	add	r30, r24
    1c20:	f9 1f       	adc	r31, r25
    1c22:	ee 5b       	subi	r30, 0xBE	; 190
    1c24:	fe 4f       	sbci	r31, 0xFE	; 254
    1c26:	10 82       	st	Z, r1
    1c28:	11 82       	std	Z+1, r1	; 0x01
    1c2a:	12 82       	std	Z+2, r1	; 0x02
    1c2c:	13 82       	std	Z+3, r1	; 0x03
    1c2e:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1c30:	01 96       	adiw	r24, 0x01	; 1
    1c32:	85 30       	cpi	r24, 0x05	; 5
    1c34:	91 05       	cpc	r25, r1
    1c36:	71 f7       	brne	.-36     	; 0x1c14 <getLetter+0x264>
	cube[0][l] = 0x0E;
}
void writeK(int l)
{
		fill(0x00);
	cube[4][l] = 0x09;
    1c38:	fb 01       	movw	r30, r22
    1c3a:	ee 5b       	subi	r30, 0xBE	; 190
    1c3c:	fe 4f       	sbci	r31, 0xFE	; 254
    1c3e:	29 e0       	ldi	r18, 0x09	; 9
    1c40:	24 8b       	std	Z+20, r18	; 0x14
	cube[3][l] = 0x05;
    1c42:	95 e0       	ldi	r25, 0x05	; 5
    1c44:	97 87       	std	Z+15, r25	; 0x0f
	cube[2][l] = 0x03;
    1c46:	83 e0       	ldi	r24, 0x03	; 3
    1c48:	89 c1       	rjmp	.+786    	; 0x1f5c <getLetter+0x5ac>
		case 5: writeF(l);break;
		case 6: writeG(l);break;
		case 7: writeH(l);break;
		case 8: writeI(l);break;
		case 9: writeJ(l);break;
		case 10: writeK(l);break;
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1c4e:	fc 01       	movw	r30, r24
    1c50:	ee 0f       	add	r30, r30
    1c52:	ff 1f       	adc	r31, r31
    1c54:	ee 0f       	add	r30, r30
    1c56:	ff 1f       	adc	r31, r31
    1c58:	e8 0f       	add	r30, r24
    1c5a:	f9 1f       	adc	r31, r25
    1c5c:	ee 5b       	subi	r30, 0xBE	; 190
    1c5e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c60:	10 82       	st	Z, r1
    1c62:	11 82       	std	Z+1, r1	; 0x01
    1c64:	12 82       	std	Z+2, r1	; 0x02
    1c66:	13 82       	std	Z+3, r1	; 0x03
    1c68:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1c6a:	01 96       	adiw	r24, 0x01	; 1
    1c6c:	85 30       	cpi	r24, 0x05	; 5
    1c6e:	91 05       	cpc	r25, r1
    1c70:	71 f7       	brne	.-36     	; 0x1c4e <getLetter+0x29e>
	cube[0][l] = 0x09;
}
void writeL(int l)
{
		fill(0x00);
	cube[4][l] = 0x01;
    1c72:	fb 01       	movw	r30, r22
    1c74:	ee 5b       	subi	r30, 0xBE	; 190
    1c76:	fe 4f       	sbci	r31, 0xFE	; 254
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	0f c1       	rjmp	.+542    	; 0x1e9a <getLetter+0x4ea>
		case 6: writeG(l);break;
		case 7: writeH(l);break;
		case 8: writeI(l);break;
		case 9: writeJ(l);break;
		case 10: writeK(l);break;
		case 11: writeL(l);break;
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1c80:	fc 01       	movw	r30, r24
    1c82:	ee 0f       	add	r30, r30
    1c84:	ff 1f       	adc	r31, r31
    1c86:	ee 0f       	add	r30, r30
    1c88:	ff 1f       	adc	r31, r31
    1c8a:	e8 0f       	add	r30, r24
    1c8c:	f9 1f       	adc	r31, r25
    1c8e:	ee 5b       	subi	r30, 0xBE	; 190
    1c90:	fe 4f       	sbci	r31, 0xFE	; 254
    1c92:	10 82       	st	Z, r1
    1c94:	11 82       	std	Z+1, r1	; 0x01
    1c96:	12 82       	std	Z+2, r1	; 0x02
    1c98:	13 82       	std	Z+3, r1	; 0x03
    1c9a:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1c9c:	01 96       	adiw	r24, 0x01	; 1
    1c9e:	85 30       	cpi	r24, 0x05	; 5
    1ca0:	91 05       	cpc	r25, r1
    1ca2:	71 f7       	brne	.-36     	; 0x1c80 <getLetter+0x2d0>
	cube[0][l] = 0x1F;
}
void writeM(int l)
{
		fill(0x00);
	cube[4][l] = 0x11;
    1ca4:	fb 01       	movw	r30, r22
    1ca6:	ee 5b       	subi	r30, 0xBE	; 190
    1ca8:	fe 4f       	sbci	r31, 0xFE	; 254
    1caa:	91 e1       	ldi	r25, 0x11	; 17
    1cac:	94 8b       	std	Z+20, r25	; 0x14
	cube[3][l] = 0x1B;
    1cae:	8b e1       	ldi	r24, 0x1B	; 27
    1cb0:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x15;
    1cb2:	85 e1       	ldi	r24, 0x15	; 21
    1cb4:	34 cf       	rjmp	.-408    	; 0x1b1e <getLetter+0x16e>
		case 7: writeH(l);break;
		case 8: writeI(l);break;
		case 9: writeJ(l);break;
		case 10: writeK(l);break;
		case 11: writeL(l);break;
		case 12: writeM(l);break;
    1cb6:	80 e0       	ldi	r24, 0x00	; 0
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1cba:	fc 01       	movw	r30, r24
    1cbc:	ee 0f       	add	r30, r30
    1cbe:	ff 1f       	adc	r31, r31
    1cc0:	ee 0f       	add	r30, r30
    1cc2:	ff 1f       	adc	r31, r31
    1cc4:	e8 0f       	add	r30, r24
    1cc6:	f9 1f       	adc	r31, r25
    1cc8:	ee 5b       	subi	r30, 0xBE	; 190
    1cca:	fe 4f       	sbci	r31, 0xFE	; 254
    1ccc:	10 82       	st	Z, r1
    1cce:	11 82       	std	Z+1, r1	; 0x01
    1cd0:	12 82       	std	Z+2, r1	; 0x02
    1cd2:	13 82       	std	Z+3, r1	; 0x03
    1cd4:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1cd6:	01 96       	adiw	r24, 0x01	; 1
    1cd8:	85 30       	cpi	r24, 0x05	; 5
    1cda:	91 05       	cpc	r25, r1
    1cdc:	71 f7       	brne	.-36     	; 0x1cba <getLetter+0x30a>
	cube[0][l] = 0x11;
}
void writeN(int l)
{
		fill(0x00);
	cube[4][l] = 0x11;
    1cde:	fb 01       	movw	r30, r22
    1ce0:	ee 5b       	subi	r30, 0xBE	; 190
    1ce2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ce4:	91 e1       	ldi	r25, 0x11	; 17
    1ce6:	94 8b       	std	Z+20, r25	; 0x14
	cube[3][l] = 0x13;
    1ce8:	83 e1       	ldi	r24, 0x13	; 19
    1cea:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x15;
    1cec:	85 e1       	ldi	r24, 0x15	; 21
    1cee:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x19;
    1cf0:	89 e1       	ldi	r24, 0x19	; 25
    1cf2:	15 c1       	rjmp	.+554    	; 0x1f1e <getLetter+0x56e>
		case 8: writeI(l);break;
		case 9: writeJ(l);break;
		case 10: writeK(l);break;
		case 11: writeL(l);break;
		case 12: writeM(l);break;
		case 13: writeN(l);break;
    1cf4:	80 e0       	ldi	r24, 0x00	; 0
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1cf8:	fc 01       	movw	r30, r24
    1cfa:	ee 0f       	add	r30, r30
    1cfc:	ff 1f       	adc	r31, r31
    1cfe:	ee 0f       	add	r30, r30
    1d00:	ff 1f       	adc	r31, r31
    1d02:	e8 0f       	add	r30, r24
    1d04:	f9 1f       	adc	r31, r25
    1d06:	ee 5b       	subi	r30, 0xBE	; 190
    1d08:	fe 4f       	sbci	r31, 0xFE	; 254
    1d0a:	10 82       	st	Z, r1
    1d0c:	11 82       	std	Z+1, r1	; 0x01
    1d0e:	12 82       	std	Z+2, r1	; 0x02
    1d10:	13 82       	std	Z+3, r1	; 0x03
    1d12:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1d14:	01 96       	adiw	r24, 0x01	; 1
    1d16:	85 30       	cpi	r24, 0x05	; 5
    1d18:	91 05       	cpc	r25, r1
    1d1a:	71 f7       	brne	.-36     	; 0x1cf8 <getLetter+0x348>
	cube[0][l] = 0x11;
}
void writeO(int l)
{
		fill(0x00);
	cube[4][l] = 0x0E;
    1d1c:	fb 01       	movw	r30, r22
    1d1e:	ee 5b       	subi	r30, 0xBE	; 190
    1d20:	fe 4f       	sbci	r31, 0xFE	; 254
    1d22:	9e e0       	ldi	r25, 0x0E	; 14
    1d24:	94 8b       	std	Z+20, r25	; 0x14
	cube[3][l] = 0x11;
    1d26:	81 e1       	ldi	r24, 0x11	; 17
    1d28:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x11;
    1d2a:	82 87       	std	Z+10, r24	; 0x0a
    1d2c:	f8 c0       	rjmp	.+496    	; 0x1f1e <getLetter+0x56e>
		case 9: writeJ(l);break;
		case 10: writeK(l);break;
		case 11: writeL(l);break;
		case 12: writeM(l);break;
		case 13: writeN(l);break;
		case 14: writeO(l);break;
    1d2e:	80 e0       	ldi	r24, 0x00	; 0
    1d30:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1d32:	fc 01       	movw	r30, r24
    1d34:	ee 0f       	add	r30, r30
    1d36:	ff 1f       	adc	r31, r31
    1d38:	ee 0f       	add	r30, r30
    1d3a:	ff 1f       	adc	r31, r31
    1d3c:	e8 0f       	add	r30, r24
    1d3e:	f9 1f       	adc	r31, r25
    1d40:	ee 5b       	subi	r30, 0xBE	; 190
    1d42:	fe 4f       	sbci	r31, 0xFE	; 254
    1d44:	10 82       	st	Z, r1
    1d46:	11 82       	std	Z+1, r1	; 0x01
    1d48:	12 82       	std	Z+2, r1	; 0x02
    1d4a:	13 82       	std	Z+3, r1	; 0x03
    1d4c:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1d4e:	01 96       	adiw	r24, 0x01	; 1
    1d50:	85 30       	cpi	r24, 0x05	; 5
    1d52:	91 05       	cpc	r25, r1
    1d54:	71 f7       	brne	.-36     	; 0x1d32 <getLetter+0x382>
}

void writeP(int l)
{
		fill(0x00);
	cube[4][l] = 0x0F;
    1d56:	fb 01       	movw	r30, r22
    1d58:	ee 5b       	subi	r30, 0xBE	; 190
    1d5a:	fe 4f       	sbci	r31, 0xFE	; 254
    1d5c:	9f e0       	ldi	r25, 0x0F	; 15
    1d5e:	94 8b       	std	Z+20, r25	; 0x14
	cube[3][l] = 0x11;
    1d60:	81 e1       	ldi	r24, 0x11	; 17
    1d62:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x0F;
    1d64:	92 87       	std	Z+10, r25	; 0x0a
	cube[1][l] = 0x01;
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	1a c1       	rjmp	.+564    	; 0x1f9e <getLetter+0x5ee>
		case 10: writeK(l);break;
		case 11: writeL(l);break;
		case 12: writeM(l);break;
		case 13: writeN(l);break;
		case 14: writeO(l);break;
		case 15: writeP(l);break;
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1d6e:	fc 01       	movw	r30, r24
    1d70:	ee 0f       	add	r30, r30
    1d72:	ff 1f       	adc	r31, r31
    1d74:	ee 0f       	add	r30, r30
    1d76:	ff 1f       	adc	r31, r31
    1d78:	e8 0f       	add	r30, r24
    1d7a:	f9 1f       	adc	r31, r25
    1d7c:	ee 5b       	subi	r30, 0xBE	; 190
    1d7e:	fe 4f       	sbci	r31, 0xFE	; 254
    1d80:	10 82       	st	Z, r1
    1d82:	11 82       	std	Z+1, r1	; 0x01
    1d84:	12 82       	std	Z+2, r1	; 0x02
    1d86:	13 82       	std	Z+3, r1	; 0x03
    1d88:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1d8a:	01 96       	adiw	r24, 0x01	; 1
    1d8c:	85 30       	cpi	r24, 0x05	; 5
    1d8e:	91 05       	cpc	r25, r1
    1d90:	71 f7       	brne	.-36     	; 0x1d6e <getLetter+0x3be>
}

void writeQ(int l)
{
		fill(0x00);
	cube[4][l] = 0x06;
    1d92:	fb 01       	movw	r30, r22
    1d94:	ee 5b       	subi	r30, 0xBE	; 190
    1d96:	fe 4f       	sbci	r31, 0xFE	; 254
    1d98:	86 e0       	ldi	r24, 0x06	; 6
    1d9a:	84 8b       	std	Z+20, r24	; 0x14
	cube[3][l] = 0x09;
    1d9c:	89 e0       	ldi	r24, 0x09	; 9
    1d9e:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x09;
    1da0:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x0E;
    1da2:	8e e0       	ldi	r24, 0x0E	; 14
    1da4:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x10;
    1da6:	80 e1       	ldi	r24, 0x10	; 16
    1da8:	fb c0       	rjmp	.+502    	; 0x1fa0 <getLetter+0x5f0>
		case 11: writeL(l);break;
		case 12: writeM(l);break;
		case 13: writeN(l);break;
		case 14: writeO(l);break;
		case 15: writeP(l);break;
		case 16: writeQ(l);break;
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1dae:	fc 01       	movw	r30, r24
    1db0:	ee 0f       	add	r30, r30
    1db2:	ff 1f       	adc	r31, r31
    1db4:	ee 0f       	add	r30, r30
    1db6:	ff 1f       	adc	r31, r31
    1db8:	e8 0f       	add	r30, r24
    1dba:	f9 1f       	adc	r31, r25
    1dbc:	ee 5b       	subi	r30, 0xBE	; 190
    1dbe:	fe 4f       	sbci	r31, 0xFE	; 254
    1dc0:	10 82       	st	Z, r1
    1dc2:	11 82       	std	Z+1, r1	; 0x01
    1dc4:	12 82       	std	Z+2, r1	; 0x02
    1dc6:	13 82       	std	Z+3, r1	; 0x03
    1dc8:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1dca:	01 96       	adiw	r24, 0x01	; 1
    1dcc:	85 30       	cpi	r24, 0x05	; 5
    1dce:	91 05       	cpc	r25, r1
    1dd0:	71 f7       	brne	.-36     	; 0x1dae <getLetter+0x3fe>
	cube[0][l] = 0x10;
}
void writeR(int l)
{
		fill(0x00);
	cube[4][l] = 0x0F;
    1dd2:	fb 01       	movw	r30, r22
    1dd4:	ee 5b       	subi	r30, 0xBE	; 190
    1dd6:	fe 4f       	sbci	r31, 0xFE	; 254
    1dd8:	9f e0       	ldi	r25, 0x0F	; 15
    1dda:	94 8b       	std	Z+20, r25	; 0x14
	cube[3][l] = 0x11;
    1ddc:	81 e1       	ldi	r24, 0x11	; 17
    1dde:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x0F;
    1de0:	92 87       	std	Z+10, r25	; 0x0a
	cube[1][l] = 0x05;
    1de2:	85 e0       	ldi	r24, 0x05	; 5
    1de4:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x09;
    1de6:	89 e0       	ldi	r24, 0x09	; 9
    1de8:	db c0       	rjmp	.+438    	; 0x1fa0 <getLetter+0x5f0>
		case 12: writeM(l);break;
		case 13: writeN(l);break;
		case 14: writeO(l);break;
		case 15: writeP(l);break;
		case 16: writeQ(l);break;
		case 17: writeR(l);break;
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1dee:	fc 01       	movw	r30, r24
    1df0:	ee 0f       	add	r30, r30
    1df2:	ff 1f       	adc	r31, r31
    1df4:	ee 0f       	add	r30, r30
    1df6:	ff 1f       	adc	r31, r31
    1df8:	e8 0f       	add	r30, r24
    1dfa:	f9 1f       	adc	r31, r25
    1dfc:	ee 5b       	subi	r30, 0xBE	; 190
    1dfe:	fe 4f       	sbci	r31, 0xFE	; 254
    1e00:	10 82       	st	Z, r1
    1e02:	11 82       	std	Z+1, r1	; 0x01
    1e04:	12 82       	std	Z+2, r1	; 0x02
    1e06:	13 82       	std	Z+3, r1	; 0x03
    1e08:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1e0a:	01 96       	adiw	r24, 0x01	; 1
    1e0c:	85 30       	cpi	r24, 0x05	; 5
    1e0e:	91 05       	cpc	r25, r1
    1e10:	71 f7       	brne	.-36     	; 0x1dee <getLetter+0x43e>
}

void writeS(int l)
{
	fill(0x00);
	cube[4][l] = 0x1E;
    1e12:	fb 01       	movw	r30, r22
    1e14:	ee 5b       	subi	r30, 0xBE	; 190
    1e16:	fe 4f       	sbci	r31, 0xFE	; 254
    1e18:	8e e1       	ldi	r24, 0x1E	; 30
    1e1a:	84 8b       	std	Z+20, r24	; 0x14
	cube[3][l] = 0x01;
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x0E;
    1e20:	8e e0       	ldi	r24, 0x0E	; 14
    1e22:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x10;
    1e24:	80 e1       	ldi	r24, 0x10	; 16
    1e26:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x0F;
    1e28:	8f e0       	ldi	r24, 0x0F	; 15
    1e2a:	ba c0       	rjmp	.+372    	; 0x1fa0 <getLetter+0x5f0>
		case 13: writeN(l);break;
		case 14: writeO(l);break;
		case 15: writeP(l);break;
		case 16: writeQ(l);break;
		case 17: writeR(l);break;
		case 18: writeS(l);break;
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1e30:	fc 01       	movw	r30, r24
    1e32:	ee 0f       	add	r30, r30
    1e34:	ff 1f       	adc	r31, r31
    1e36:	ee 0f       	add	r30, r30
    1e38:	ff 1f       	adc	r31, r31
    1e3a:	e8 0f       	add	r30, r24
    1e3c:	f9 1f       	adc	r31, r25
    1e3e:	ee 5b       	subi	r30, 0xBE	; 190
    1e40:	fe 4f       	sbci	r31, 0xFE	; 254
    1e42:	10 82       	st	Z, r1
    1e44:	11 82       	std	Z+1, r1	; 0x01
    1e46:	12 82       	std	Z+2, r1	; 0x02
    1e48:	13 82       	std	Z+3, r1	; 0x03
    1e4a:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1e4c:	01 96       	adiw	r24, 0x01	; 1
    1e4e:	85 30       	cpi	r24, 0x05	; 5
    1e50:	91 05       	cpc	r25, r1
    1e52:	71 f7       	brne	.-36     	; 0x1e30 <getLetter+0x480>
}

void writeT(int l)
{
	fill(0x00);
	cube[0][l] = 0x04;
    1e54:	fb 01       	movw	r30, r22
    1e56:	ee 5b       	subi	r30, 0xBE	; 190
    1e58:	fe 4f       	sbci	r31, 0xFE	; 254
    1e5a:	84 e0       	ldi	r24, 0x04	; 4
    1e5c:	80 83       	st	Z, r24
	cube[1][l] = 0x04;
    1e5e:	85 83       	std	Z+5, r24	; 0x05
	cube[2][l] = 0x04;
    1e60:	82 87       	std	Z+10, r24	; 0x0a
	cube[3][l] = 0x04;
    1e62:	87 87       	std	Z+15, r24	; 0x0f
	cube[4][l] = 0x1F;
    1e64:	8f e1       	ldi	r24, 0x1F	; 31
    1e66:	84 8b       	std	Z+20, r24	; 0x14
    1e68:	08 95       	ret
		case 14: writeO(l);break;
		case 15: writeP(l);break;
		case 16: writeQ(l);break;
		case 17: writeR(l);break;
		case 18: writeS(l);break;
		case 19: writeT(l);break;
    1e6a:	80 e0       	ldi	r24, 0x00	; 0
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1e6e:	fc 01       	movw	r30, r24
    1e70:	ee 0f       	add	r30, r30
    1e72:	ff 1f       	adc	r31, r31
    1e74:	ee 0f       	add	r30, r30
    1e76:	ff 1f       	adc	r31, r31
    1e78:	e8 0f       	add	r30, r24
    1e7a:	f9 1f       	adc	r31, r25
    1e7c:	ee 5b       	subi	r30, 0xBE	; 190
    1e7e:	fe 4f       	sbci	r31, 0xFE	; 254
    1e80:	10 82       	st	Z, r1
    1e82:	11 82       	std	Z+1, r1	; 0x01
    1e84:	12 82       	std	Z+2, r1	; 0x02
    1e86:	13 82       	std	Z+3, r1	; 0x03
    1e88:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1e8a:	01 96       	adiw	r24, 0x01	; 1
    1e8c:	85 30       	cpi	r24, 0x05	; 5
    1e8e:	91 05       	cpc	r25, r1
    1e90:	71 f7       	brne	.-36     	; 0x1e6e <getLetter+0x4be>
}

void writeU(int l)
{
		fill(0x00);
	cube[4][l] = 0x11;
    1e92:	fb 01       	movw	r30, r22
    1e94:	ee 5b       	subi	r30, 0xBE	; 190
    1e96:	fe 4f       	sbci	r31, 0xFE	; 254
    1e98:	81 e1       	ldi	r24, 0x11	; 17
    1e9a:	84 8b       	std	Z+20, r24	; 0x14
	cube[3][l] = 0x11;
    1e9c:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x11;
    1e9e:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x11;
    1ea0:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x1F;
    1ea2:	8f e1       	ldi	r24, 0x1F	; 31
    1ea4:	7d c0       	rjmp	.+250    	; 0x1fa0 <getLetter+0x5f0>
		case 15: writeP(l);break;
		case 16: writeQ(l);break;
		case 17: writeR(l);break;
		case 18: writeS(l);break;
		case 19: writeT(l);break;
		case 20: writeU(l);break;
    1ea6:	80 e0       	ldi	r24, 0x00	; 0
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1eaa:	fc 01       	movw	r30, r24
    1eac:	ee 0f       	add	r30, r30
    1eae:	ff 1f       	adc	r31, r31
    1eb0:	ee 0f       	add	r30, r30
    1eb2:	ff 1f       	adc	r31, r31
    1eb4:	e8 0f       	add	r30, r24
    1eb6:	f9 1f       	adc	r31, r25
    1eb8:	ee 5b       	subi	r30, 0xBE	; 190
    1eba:	fe 4f       	sbci	r31, 0xFE	; 254
    1ebc:	10 82       	st	Z, r1
    1ebe:	11 82       	std	Z+1, r1	; 0x01
    1ec0:	12 82       	std	Z+2, r1	; 0x02
    1ec2:	13 82       	std	Z+3, r1	; 0x03
    1ec4:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1ec6:	01 96       	adiw	r24, 0x01	; 1
    1ec8:	85 30       	cpi	r24, 0x05	; 5
    1eca:	91 05       	cpc	r25, r1
    1ecc:	71 f7       	brne	.-36     	; 0x1eaa <getLetter+0x4fa>
	cube[0][l] = 0x11;
}
void writeV(int l)
{
		fill(0x00);
	cube[4][l] = 0x11;
    1ece:	fb 01       	movw	r30, r22
    1ed0:	ee 5b       	subi	r30, 0xBE	; 190
    1ed2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ed4:	81 e1       	ldi	r24, 0x11	; 17
    1ed6:	84 8b       	std	Z+20, r24	; 0x14
	cube[3][l] = 0x11;
    1ed8:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x11;
    1eda:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x0A;
    1edc:	8a e0       	ldi	r24, 0x0A	; 10
    1ede:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x04;
    1ee0:	84 e0       	ldi	r24, 0x04	; 4
    1ee2:	5e c0       	rjmp	.+188    	; 0x1fa0 <getLetter+0x5f0>
		case 16: writeQ(l);break;
		case 17: writeR(l);break;
		case 18: writeS(l);break;
		case 19: writeT(l);break;
		case 20: writeU(l);break;
		case 21: writeV(l);break;
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1ee8:	fc 01       	movw	r30, r24
    1eea:	ee 0f       	add	r30, r30
    1eec:	ff 1f       	adc	r31, r31
    1eee:	ee 0f       	add	r30, r30
    1ef0:	ff 1f       	adc	r31, r31
    1ef2:	e8 0f       	add	r30, r24
    1ef4:	f9 1f       	adc	r31, r25
    1ef6:	ee 5b       	subi	r30, 0xBE	; 190
    1ef8:	fe 4f       	sbci	r31, 0xFE	; 254
    1efa:	10 82       	st	Z, r1
    1efc:	11 82       	std	Z+1, r1	; 0x01
    1efe:	12 82       	std	Z+2, r1	; 0x02
    1f00:	13 82       	std	Z+3, r1	; 0x03
    1f02:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1f04:	01 96       	adiw	r24, 0x01	; 1
    1f06:	85 30       	cpi	r24, 0x05	; 5
    1f08:	91 05       	cpc	r25, r1
    1f0a:	71 f7       	brne	.-36     	; 0x1ee8 <getLetter+0x538>
	cube[0][l] = 0x1F;
}
void writeW(int l)
{
		fill(0x00);
	cube[4][l] = 0x11;
    1f0c:	fb 01       	movw	r30, r22
    1f0e:	ee 5b       	subi	r30, 0xBE	; 190
    1f10:	fe 4f       	sbci	r31, 0xFE	; 254
    1f12:	91 e1       	ldi	r25, 0x11	; 17
    1f14:	94 8b       	std	Z+20, r25	; 0x14
	cube[3][l] = 0x11;
    1f16:	97 87       	std	Z+15, r25	; 0x0f
	cube[2][l] = 0x15;
    1f18:	85 e1       	ldi	r24, 0x15	; 21
    1f1a:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x1B;
    1f1c:	8b e1       	ldi	r24, 0x1B	; 27
    1f1e:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x11;
    1f20:	90 83       	st	Z, r25
    1f22:	08 95       	ret
		case 17: writeR(l);break;
		case 18: writeS(l);break;
		case 19: writeT(l);break;
		case 20: writeU(l);break;
		case 21: writeV(l);break;
		case 22: writeW(l);break;
    1f24:	80 e0       	ldi	r24, 0x00	; 0
    1f26:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1f28:	fc 01       	movw	r30, r24
    1f2a:	ee 0f       	add	r30, r30
    1f2c:	ff 1f       	adc	r31, r31
    1f2e:	ee 0f       	add	r30, r30
    1f30:	ff 1f       	adc	r31, r31
    1f32:	e8 0f       	add	r30, r24
    1f34:	f9 1f       	adc	r31, r25
    1f36:	ee 5b       	subi	r30, 0xBE	; 190
    1f38:	fe 4f       	sbci	r31, 0xFE	; 254
    1f3a:	10 82       	st	Z, r1
    1f3c:	11 82       	std	Z+1, r1	; 0x01
    1f3e:	12 82       	std	Z+2, r1	; 0x02
    1f40:	13 82       	std	Z+3, r1	; 0x03
    1f42:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1f44:	01 96       	adiw	r24, 0x01	; 1
    1f46:	85 30       	cpi	r24, 0x05	; 5
    1f48:	91 05       	cpc	r25, r1
    1f4a:	71 f7       	brne	.-36     	; 0x1f28 <getLetter+0x578>
	cube[0][l] = 0x04;
}
void writeX(int l)
{
		fill(0x00);
	cube[4][l] = 0x11;
    1f4c:	fb 01       	movw	r30, r22
    1f4e:	ee 5b       	subi	r30, 0xBE	; 190
    1f50:	fe 4f       	sbci	r31, 0xFE	; 254
    1f52:	21 e1       	ldi	r18, 0x11	; 17
    1f54:	24 8b       	std	Z+20, r18	; 0x14
	cube[3][l] = 0x0A;
    1f56:	9a e0       	ldi	r25, 0x0A	; 10
    1f58:	97 87       	std	Z+15, r25	; 0x0f
	cube[2][l] = 0x04;
    1f5a:	84 e0       	ldi	r24, 0x04	; 4
    1f5c:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x0A;
    1f5e:	95 83       	std	Z+5, r25	; 0x05
	cube[0][l] = 0x11;
    1f60:	20 83       	st	Z, r18
    1f62:	08 95       	ret
		case 18: writeS(l);break;
		case 19: writeT(l);break;
		case 20: writeU(l);break;
		case 21: writeV(l);break;
		case 22: writeW(l);break;
		case 23: writeX(l);break;
    1f64:	80 e0       	ldi	r24, 0x00	; 0
    1f66:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1f68:	fc 01       	movw	r30, r24
    1f6a:	ee 0f       	add	r30, r30
    1f6c:	ff 1f       	adc	r31, r31
    1f6e:	ee 0f       	add	r30, r30
    1f70:	ff 1f       	adc	r31, r31
    1f72:	e8 0f       	add	r30, r24
    1f74:	f9 1f       	adc	r31, r25
    1f76:	ee 5b       	subi	r30, 0xBE	; 190
    1f78:	fe 4f       	sbci	r31, 0xFE	; 254
    1f7a:	10 82       	st	Z, r1
    1f7c:	11 82       	std	Z+1, r1	; 0x01
    1f7e:	12 82       	std	Z+2, r1	; 0x02
    1f80:	13 82       	std	Z+3, r1	; 0x03
    1f82:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1f84:	01 96       	adiw	r24, 0x01	; 1
    1f86:	85 30       	cpi	r24, 0x05	; 5
    1f88:	91 05       	cpc	r25, r1
    1f8a:	71 f7       	brne	.-36     	; 0x1f68 <getLetter+0x5b8>
}

void writeY(int l)
{
		fill(0x00);
	cube[4][l] = 0x11;
    1f8c:	fb 01       	movw	r30, r22
    1f8e:	ee 5b       	subi	r30, 0xBE	; 190
    1f90:	fe 4f       	sbci	r31, 0xFE	; 254
    1f92:	81 e1       	ldi	r24, 0x11	; 17
    1f94:	84 8b       	std	Z+20, r24	; 0x14
	cube[3][l] = 0x0A;
    1f96:	8a e0       	ldi	r24, 0x0A	; 10
    1f98:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x04;
    1f9a:	84 e0       	ldi	r24, 0x04	; 4
    1f9c:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x04;
    1f9e:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x04;
    1fa0:	80 83       	st	Z, r24
    1fa2:	08 95       	ret
		case 19: writeT(l);break;
		case 20: writeU(l);break;
		case 21: writeV(l);break;
		case 22: writeW(l);break;
		case 23: writeX(l);break;
		case 24: writeY(l);break;
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
    1fa8:	fc 01       	movw	r30, r24
    1faa:	ee 0f       	add	r30, r30
    1fac:	ff 1f       	adc	r31, r31
    1fae:	ee 0f       	add	r30, r30
    1fb0:	ff 1f       	adc	r31, r31
    1fb2:	e8 0f       	add	r30, r24
    1fb4:	f9 1f       	adc	r31, r25
    1fb6:	ee 5b       	subi	r30, 0xBE	; 190
    1fb8:	fe 4f       	sbci	r31, 0xFE	; 254
    1fba:	10 82       	st	Z, r1
    1fbc:	11 82       	std	Z+1, r1	; 0x01
    1fbe:	12 82       	std	Z+2, r1	; 0x02
    1fc0:	13 82       	std	Z+3, r1	; 0x03
    1fc2:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
    1fc4:	01 96       	adiw	r24, 0x01	; 1
    1fc6:	85 30       	cpi	r24, 0x05	; 5
    1fc8:	91 05       	cpc	r25, r1
    1fca:	71 f7       	brne	.-36     	; 0x1fa8 <getLetter+0x5f8>
	cube[0][l] = 0x04;
}
void writeZ(int l)
{
		fill(0x00);
	cube[4][l] = 0x1F;
    1fcc:	fb 01       	movw	r30, r22
    1fce:	ee 5b       	subi	r30, 0xBE	; 190
    1fd0:	fe 4f       	sbci	r31, 0xFE	; 254
    1fd2:	9f e1       	ldi	r25, 0x1F	; 31
    1fd4:	94 8b       	std	Z+20, r25	; 0x14
	cube[3][l] = 0x08;
    1fd6:	88 e0       	ldi	r24, 0x08	; 8
    1fd8:	87 87       	std	Z+15, r24	; 0x0f
	cube[2][l] = 0x04;
    1fda:	84 e0       	ldi	r24, 0x04	; 4
    1fdc:	82 87       	std	Z+10, r24	; 0x0a
	cube[1][l] = 0x02;
    1fde:	82 e0       	ldi	r24, 0x02	; 2
    1fe0:	85 83       	std	Z+5, r24	; 0x05
	cube[0][l] = 0x1F;
    1fe2:	90 83       	st	Z, r25
    1fe4:	08 95       	ret

00001fe6 <letterToInt>:
		case 25: writeZ(l);break;
	}
}

int letterToInt(char letter)
{
    1fe6:	28 2f       	mov	r18, r24
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	21 54       	subi	r18, 0x41	; 65
    1fec:	30 40       	sbci	r19, 0x00	; 0
int i = letter - 'A';
return i;
    1fee:	c9 01       	movw	r24, r18
    1ff0:	08 95       	ret

00001ff2 <moveDot>:
	int z = 4;
	setLED(x,y,z);
}

void moveDot()
{
    1ff2:	ef 92       	push	r14
    1ff4:	ff 92       	push	r15
    1ff6:	0f 93       	push	r16
    1ff8:	1f 93       	push	r17
    1ffa:	cf 93       	push	r28
    1ffc:	df 93       	push	r29
    1ffe:	ee 24       	eor	r14, r14
    2000:	ff 24       	eor	r15, r15
    2002:	2f c0       	rjmp	.+94     	; 0x2062 <moveDot+0x70>
	{
		for(int y=0;y<5;y++)
		{
		for(int z=0;z<5;z++)
			{	
				if(getLED(x,y,z) != 0x00)
    2004:	c7 01       	movw	r24, r14
    2006:	b8 01       	movw	r22, r16
    2008:	ae 01       	movw	r20, r28
    200a:	0e 94 19 06 	call	0xc32	; 0xc32 <getLED>
    200e:	88 23       	and	r24, r24
    2010:	a9 f0       	breq	.+42     	; 0x203c <moveDot+0x4a>
				{
					if(z==0)
    2012:	20 97       	sbiw	r28, 0x00	; 0
    2014:	39 f4       	brne	.+14     	; 0x2024 <moveDot+0x32>
					{
						clrLED(x,y,z);
    2016:	c7 01       	movw	r24, r14
    2018:	b8 01       	movw	r22, r16
    201a:	40 e0       	ldi	r20, 0x00	; 0
    201c:	50 e0       	ldi	r21, 0x00	; 0
    201e:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <clrLED>
    2022:	0c c0       	rjmp	.+24     	; 0x203c <moveDot+0x4a>
					}
					else
					{
						clrLED(x,y,z);
    2024:	c7 01       	movw	r24, r14
    2026:	b8 01       	movw	r22, r16
    2028:	ae 01       	movw	r20, r28
    202a:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <clrLED>
						setLED(x,y,z-1);
    202e:	ae 01       	movw	r20, r28
    2030:	41 50       	subi	r20, 0x01	; 1
    2032:	50 40       	sbci	r21, 0x00	; 0
    2034:	c7 01       	movw	r24, r14
    2036:	b8 01       	movw	r22, r16
    2038:	0e 94 d0 05 	call	0xba0	; 0xba0 <setLED>
{
	for(int x=0;x<5;x++)
	{
		for(int y=0;y<5;y++)
		{
		for(int z=0;z<5;z++)
    203c:	21 96       	adiw	r28, 0x01	; 1
    203e:	c5 30       	cpi	r28, 0x05	; 5
    2040:	d1 05       	cpc	r29, r1
    2042:	01 f7       	brne	.-64     	; 0x2004 <moveDot+0x12>

void moveDot()
{
	for(int x=0;x<5;x++)
	{
		for(int y=0;y<5;y++)
    2044:	0f 5f       	subi	r16, 0xFF	; 255
    2046:	1f 4f       	sbci	r17, 0xFF	; 255
    2048:	05 30       	cpi	r16, 0x05	; 5
    204a:	11 05       	cpc	r17, r1
    204c:	19 f0       	breq	.+6      	; 0x2054 <moveDot+0x62>
    204e:	c0 e0       	ldi	r28, 0x00	; 0
    2050:	d0 e0       	ldi	r29, 0x00	; 0
    2052:	d8 cf       	rjmp	.-80     	; 0x2004 <moveDot+0x12>
	setLED(x,y,z);
}

void moveDot()
{
	for(int x=0;x<5;x++)
    2054:	08 94       	sec
    2056:	e1 1c       	adc	r14, r1
    2058:	f1 1c       	adc	r15, r1
    205a:	85 e0       	ldi	r24, 0x05	; 5
    205c:	e8 16       	cp	r14, r24
    205e:	f1 04       	cpc	r15, r1
    2060:	19 f0       	breq	.+6      	; 0x2068 <moveDot+0x76>
    2062:	00 e0       	ldi	r16, 0x00	; 0
    2064:	10 e0       	ldi	r17, 0x00	; 0
    2066:	f3 cf       	rjmp	.-26     	; 0x204e <moveDot+0x5c>
				
			}
		}
		
	}
    2068:	df 91       	pop	r29
    206a:	cf 91       	pop	r28
    206c:	1f 91       	pop	r17
    206e:	0f 91       	pop	r16
    2070:	ff 90       	pop	r15
    2072:	ef 90       	pop	r14
    2074:	08 95       	ret

00002076 <generateDot>:
		delay_ms(9000);
	}*/
}

void generateDot()
{
    2076:	0f 93       	push	r16
    2078:	1f 93       	push	r17
	//unsigned int iseed = (unsigned int)time(NULL);
	//srand (iseed);
	int x = rand() % 5;
    207a:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <rand>
    207e:	8c 01       	movw	r16, r24
	int y = rand() % 5;
    2080:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <rand>
    2084:	9c 01       	movw	r18, r24
	int z = 4;
	setLED(x,y,z);
    2086:	c8 01       	movw	r24, r16
    2088:	65 e0       	ldi	r22, 0x05	; 5
    208a:	70 e0       	ldi	r23, 0x00	; 0
    208c:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <__divmodhi4>
    2090:	fc 01       	movw	r30, r24
    2092:	c9 01       	movw	r24, r18
    2094:	65 e0       	ldi	r22, 0x05	; 5
    2096:	70 e0       	ldi	r23, 0x00	; 0
    2098:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <__divmodhi4>
    209c:	bc 01       	movw	r22, r24
    209e:	cf 01       	movw	r24, r30
    20a0:	44 e0       	ldi	r20, 0x04	; 4
    20a2:	50 e0       	ldi	r21, 0x00	; 0
    20a4:	0e 94 d0 05 	call	0xba0	; 0xba0 <setLED>
}
    20a8:	1f 91       	pop	r17
    20aa:	0f 91       	pop	r16
    20ac:	08 95       	ret

000020ae <matrix>:
}


void matrix()
{
		fill(0x00);
    20ae:	80 e0       	ldi	r24, 0x00	; 0
    20b0:	0e 94 69 09 	call	0x12d2	; 0x12d2 <fill>
		while(1)
	{

		generateDot();
    20b4:	0e 94 3b 10 	call	0x2076	; 0x2076 <generateDot>

		delay_ms(90);
    20b8:	8a e5       	ldi	r24, 0x5A	; 90
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	0e 94 1c 03 	call	0x638	; 0x638 <delay_ms>
		moveDot();
    20c0:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <moveDot>
    20c4:	f7 cf       	rjmp	.-18     	; 0x20b4 <matrix+0x6>

000020c6 <writeBlank>:
	
}

void writeBlank()
{
		fill(0x00);
    20c6:	80 e0       	ldi	r24, 0x00	; 0
    20c8:	0e 94 69 09 	call	0x12d2	; 0x12d2 <fill>
		delay_ms(900);
    20cc:	84 e8       	ldi	r24, 0x84	; 132
    20ce:	93 e0       	ldi	r25, 0x03	; 3
    20d0:	0e 94 1c 03 	call	0x638	; 0x638 <delay_ms>

}
    20d4:	08 95       	ret

000020d6 <animateE>:


// animate E

void animateE ()
{
    20d6:	ff 92       	push	r15
    20d8:	0f 93       	push	r16
    20da:	1f 93       	push	r17
    20dc:	cf 93       	push	r28
    20de:	df 93       	push	r29
    20e0:	c0 e0       	ldi	r28, 0x00	; 0
    20e2:	d0 e0       	ldi	r29, 0x00	; 0
	for(int z = 0;z<5;z++)
	{
		
			fill(0x00);
			cube[0][z] = 0x1F;
    20e4:	0f e1       	ldi	r16, 0x1F	; 31
			cube[1][z] = 0x01;
    20e6:	11 e0       	ldi	r17, 0x01	; 1
			cube[2][z] = 0x07;
    20e8:	87 e0       	ldi	r24, 0x07	; 7
    20ea:	f8 2e       	mov	r15, r24
void animateE ()
{
	for(int z = 0;z<5;z++)
	{
		
			fill(0x00);
    20ec:	80 e0       	ldi	r24, 0x00	; 0
    20ee:	0e 94 69 09 	call	0x12d2	; 0x12d2 <fill>
			cube[0][z] = 0x1F;
    20f2:	fe 01       	movw	r30, r28
    20f4:	ee 5b       	subi	r30, 0xBE	; 190
    20f6:	fe 4f       	sbci	r31, 0xFE	; 254
    20f8:	00 83       	st	Z, r16
			cube[1][z] = 0x01;
    20fa:	15 83       	std	Z+5, r17	; 0x05
			cube[2][z] = 0x07;
    20fc:	f2 86       	std	Z+10, r15	; 0x0a
			cube[3][z] = 0x01;
    20fe:	17 87       	std	Z+15, r17	; 0x0f
			cube[4][z] = 0x1F;
    2100:	04 8b       	std	Z+20, r16	; 0x14
			//	{
			//		cube[z][y] = cube[z][y-1];
			//	}
			//}
		
		delay_ms(500); 
    2102:	84 ef       	ldi	r24, 0xF4	; 244
    2104:	91 e0       	ldi	r25, 0x01	; 1
    2106:	0e 94 1c 03 	call	0x638	; 0x638 <delay_ms>

// animate E

void animateE ()
{
	for(int z = 0;z<5;z++)
    210a:	21 96       	adiw	r28, 0x01	; 1
    210c:	c5 30       	cpi	r28, 0x05	; 5
    210e:	d1 05       	cpc	r29, r1
    2110:	69 f7       	brne	.-38     	; 0x20ec <animateE+0x16>
			//	}
			//}
		
		delay_ms(500); 
	}
}
    2112:	df 91       	pop	r29
    2114:	cf 91       	pop	r28
    2116:	1f 91       	pop	r17
    2118:	0f 91       	pop	r16
    211a:	ff 90       	pop	r15
    211c:	08 95       	ret

0000211e <effect_spinning_plane>:
	}
}

// Shows an animation of a spinning plane.
void effect_spinning_plane(int direction, int iterations, int delay)
{
    211e:	cf 92       	push	r12
    2120:	df 92       	push	r13
    2122:	ef 92       	push	r14
    2124:	ff 92       	push	r15
    2126:	0f 93       	push	r16
    2128:	1f 93       	push	r17
    212a:	cf 93       	push	r28
    212c:	df 93       	push	r29
    212e:	6b 01       	movw	r12, r22
    2130:	7a 01       	movw	r14, r20
    2132:	c0 e0       	ldi	r28, 0x00	; 0
    2134:	d0 e0       	ldi	r29, 0x00	; 0
    2136:	16 c0       	rjmp	.+44     	; 0x2164 <effect_spinning_plane+0x46>
	for (i=0;i<iterations;i++)
	{
		// Loop cube levels.
		for (z=0;z<5;z++)
		{
			cube[z][0] = pgm_read_byte(&spinning_line[(i)%6][0]);
    2138:	fd 01       	movw	r30, r26
    213a:	ee 0f       	add	r30, r30
    213c:	ff 1f       	adc	r31, r31
    213e:	ee 0f       	add	r30, r30
    2140:	ff 1f       	adc	r31, r31
    2142:	ea 0f       	add	r30, r26
    2144:	fb 1f       	adc	r31, r27
    2146:	ee 5b       	subi	r30, 0xBE	; 190
    2148:	fe 4f       	sbci	r31, 0xFE	; 254
    214a:	00 83       	st	Z, r16
			cube[z][1] = pgm_read_byte(&spinning_line[(i)%6][1]);
    214c:	11 83       	std	Z+1, r17	; 0x01
			cube[z][2] = pgm_read_byte(&spinning_line[(i)%6][2]);
    214e:	22 83       	std	Z+2, r18	; 0x02
			cube[z][3] = pgm_read_byte(&spinning_line[(i)%6][3]);
    2150:	93 83       	std	Z+3, r25	; 0x03
			cube[z][4] = pgm_read_byte(&spinning_line[(i)%6][4]);
    2152:	84 83       	std	Z+4, r24	; 0x04
	int z;		// cube level

	for (i=0;i<iterations;i++)
	{
		// Loop cube levels.
		for (z=0;z<5;z++)
    2154:	11 96       	adiw	r26, 0x01	; 1
    2156:	a5 30       	cpi	r26, 0x05	; 5
    2158:	b1 05       	cpc	r27, r1
    215a:	71 f7       	brne	.-36     	; 0x2138 <effect_spinning_plane+0x1a>
			cube[z][1] = pgm_read_byte(&spinning_line[(i)%6][1]);
			cube[z][2] = pgm_read_byte(&spinning_line[(i)%6][2]);
			cube[z][3] = pgm_read_byte(&spinning_line[(i)%6][3]);
			cube[z][4] = pgm_read_byte(&spinning_line[(i)%6][4]);
		}
		delay_ms(delay);
    215c:	c7 01       	movw	r24, r14
    215e:	0e 94 1c 03 	call	0x638	; 0x638 <delay_ms>
void effect_spinning_plane(int direction, int iterations, int delay)
{
	int i;
	int z;		// cube level

	for (i=0;i<iterations;i++)
    2162:	21 96       	adiw	r28, 0x01	; 1
    2164:	cc 15       	cp	r28, r12
    2166:	dd 05       	cpc	r29, r13
    2168:	34 f5       	brge	.+76     	; 0x21b6 <effect_spinning_plane+0x98>
	{
		// Loop cube levels.
		for (z=0;z<5;z++)
		{
			cube[z][0] = pgm_read_byte(&spinning_line[(i)%6][0]);
    216a:	ce 01       	movw	r24, r28
    216c:	66 e0       	ldi	r22, 0x06	; 6
    216e:	70 e0       	ldi	r23, 0x00	; 0
    2170:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <__divmodhi4>
    2174:	fc 01       	movw	r30, r24
    2176:	ee 0f       	add	r30, r30
    2178:	ff 1f       	adc	r31, r31
    217a:	ee 0f       	add	r30, r30
    217c:	ff 1f       	adc	r31, r31
    217e:	e8 0f       	add	r30, r24
    2180:	f9 1f       	adc	r31, r25
			cube[z][1] = pgm_read_byte(&spinning_line[(i)%6][1]);
    2182:	cf 01       	movw	r24, r30
    2184:	87 57       	subi	r24, 0x77	; 119
    2186:	9f 4f       	sbci	r25, 0xFF	; 255
			cube[z][2] = pgm_read_byte(&spinning_line[(i)%6][2]);
    2188:	9f 01       	movw	r18, r30
    218a:	26 57       	subi	r18, 0x76	; 118
    218c:	3f 4f       	sbci	r19, 0xFF	; 255
			cube[z][3] = pgm_read_byte(&spinning_line[(i)%6][3]);
    218e:	af 01       	movw	r20, r30
    2190:	45 57       	subi	r20, 0x75	; 117
    2192:	5f 4f       	sbci	r21, 0xFF	; 255
			cube[z][4] = pgm_read_byte(&spinning_line[(i)%6][4]);
    2194:	bf 01       	movw	r22, r30
    2196:	64 57       	subi	r22, 0x74	; 116
    2198:	7f 4f       	sbci	r23, 0xFF	; 255
    219a:	a0 e0       	ldi	r26, 0x00	; 0
    219c:	b0 e0       	ldi	r27, 0x00	; 0
	for (i=0;i<iterations;i++)
	{
		// Loop cube levels.
		for (z=0;z<5;z++)
		{
			cube[z][0] = pgm_read_byte(&spinning_line[(i)%6][0]);
    219e:	e8 57       	subi	r30, 0x78	; 120
    21a0:	ff 4f       	sbci	r31, 0xFF	; 255
    21a2:	04 91       	lpm	r16, Z+
			cube[z][1] = pgm_read_byte(&spinning_line[(i)%6][1]);
    21a4:	fc 01       	movw	r30, r24
    21a6:	14 91       	lpm	r17, Z+
			cube[z][2] = pgm_read_byte(&spinning_line[(i)%6][2]);
    21a8:	f9 01       	movw	r30, r18
    21aa:	24 91       	lpm	r18, Z+
			cube[z][3] = pgm_read_byte(&spinning_line[(i)%6][3]);
    21ac:	fa 01       	movw	r30, r20
    21ae:	94 91       	lpm	r25, Z+
			cube[z][4] = pgm_read_byte(&spinning_line[(i)%6][4]);
    21b0:	fb 01       	movw	r30, r22
    21b2:	84 91       	lpm	r24, Z+
    21b4:	c1 cf       	rjmp	.-126    	; 0x2138 <effect_spinning_plane+0x1a>
		}
		delay_ms(delay);
	}
}
    21b6:	df 91       	pop	r29
    21b8:	cf 91       	pop	r28
    21ba:	1f 91       	pop	r17
    21bc:	0f 91       	pop	r16
    21be:	ff 90       	pop	r15
    21c0:	ef 90       	pop	r14
    21c2:	df 90       	pop	r13
    21c4:	cf 90       	pop	r12
    21c6:	08 95       	ret

000021c8 <effect_spiral>:
	{ 0x08, 0x08, 0x04, 0x02, 0x02 },
};

// Shows an animation of a spinning spiral
void effect_spiral(int direction, int iterations, int delay)
{
    21c8:	cf 92       	push	r12
    21ca:	df 92       	push	r13
    21cc:	ef 92       	push	r14
    21ce:	ff 92       	push	r15
    21d0:	0f 93       	push	r16
    21d2:	1f 93       	push	r17
    21d4:	cf 93       	push	r28
    21d6:	df 93       	push	r29
    21d8:	6b 01       	movw	r12, r22
    21da:	7a 01       	movw	r14, r20
    21dc:	00 e0       	ldi	r16, 0x00	; 0
    21de:	10 e0       	ldi	r17, 0x00	; 0
    21e0:	43 c0       	rjmp	.+134    	; 0x2268 <effect_spiral+0xa0>
	int i;
	int z;		// cube level

	for (i=0;i<iterations;i++)
    21e2:	c0 e0       	ldi	r28, 0x00	; 0
    21e4:	d0 e0       	ldi	r29, 0x00	; 0
		// Loop cube levels
		for (z=0;z<5;z++)
		{
			// Read the animation from program memory and put it in the cube buffer.
			// y=0 and y=2 is stored in the upper nibble of the byte, and must be bitshifted into place.
			cube[z][0] = pgm_read_byte(&spinning_line[(i+z)%6][0]);
    21e6:	ce 01       	movw	r24, r28
    21e8:	80 0f       	add	r24, r16
    21ea:	91 1f       	adc	r25, r17
    21ec:	66 e0       	ldi	r22, 0x06	; 6
    21ee:	70 e0       	ldi	r23, 0x00	; 0
    21f0:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <__divmodhi4>
    21f4:	9c 01       	movw	r18, r24
    21f6:	22 0f       	add	r18, r18
    21f8:	33 1f       	adc	r19, r19
    21fa:	22 0f       	add	r18, r18
    21fc:	33 1f       	adc	r19, r19
    21fe:	28 0f       	add	r18, r24
    2200:	39 1f       	adc	r19, r25
    2202:	f9 01       	movw	r30, r18
    2204:	e8 57       	subi	r30, 0x78	; 120
    2206:	ff 4f       	sbci	r31, 0xFF	; 255
    2208:	e4 91       	lpm	r30, Z+
    220a:	de 01       	movw	r26, r28
    220c:	aa 0f       	add	r26, r26
    220e:	bb 1f       	adc	r27, r27
    2210:	aa 0f       	add	r26, r26
    2212:	bb 1f       	adc	r27, r27
    2214:	ac 0f       	add	r26, r28
    2216:	bd 1f       	adc	r27, r29
    2218:	ae 5b       	subi	r26, 0xBE	; 190
    221a:	be 4f       	sbci	r27, 0xFE	; 254
    221c:	ec 93       	st	X, r30
			cube[z][1] = pgm_read_byte(&spinning_line[(i+z)%6][1]);
    221e:	f9 01       	movw	r30, r18
    2220:	e7 57       	subi	r30, 0x77	; 119
    2222:	ff 4f       	sbci	r31, 0xFF	; 255
    2224:	e4 91       	lpm	r30, Z+
    2226:	11 96       	adiw	r26, 0x01	; 1
    2228:	ec 93       	st	X, r30
    222a:	11 97       	sbiw	r26, 0x01	; 1
			cube[z][2] = pgm_read_byte(&spinning_line[(i+z)%6][2]);
    222c:	f9 01       	movw	r30, r18
    222e:	e6 57       	subi	r30, 0x76	; 118
    2230:	ff 4f       	sbci	r31, 0xFF	; 255
    2232:	e4 91       	lpm	r30, Z+
    2234:	12 96       	adiw	r26, 0x02	; 2
    2236:	ec 93       	st	X, r30
    2238:	12 97       	sbiw	r26, 0x02	; 2
			cube[z][3] = pgm_read_byte(&spinning_line[(i+z)%6][3]);
    223a:	f9 01       	movw	r30, r18
    223c:	e5 57       	subi	r30, 0x75	; 117
    223e:	ff 4f       	sbci	r31, 0xFF	; 255
    2240:	e4 91       	lpm	r30, Z+
    2242:	13 96       	adiw	r26, 0x03	; 3
    2244:	ec 93       	st	X, r30
    2246:	13 97       	sbiw	r26, 0x03	; 3
			cube[z][4] = pgm_read_byte(&spinning_line[(i+z)%6][4]);
    2248:	24 57       	subi	r18, 0x74	; 116
    224a:	3f 4f       	sbci	r19, 0xFF	; 255
    224c:	f9 01       	movw	r30, r18
    224e:	84 91       	lpm	r24, Z+
    2250:	14 96       	adiw	r26, 0x04	; 4
    2252:	8c 93       	st	X, r24
	int z;		// cube level

	for (i=0;i<iterations;i++)
	{
		// Loop cube levels
		for (z=0;z<5;z++)
    2254:	21 96       	adiw	r28, 0x01	; 1
    2256:	c5 30       	cpi	r28, 0x05	; 5
    2258:	d1 05       	cpc	r29, r1
    225a:	09 f0       	breq	.+2      	; 0x225e <effect_spiral+0x96>
    225c:	c4 cf       	rjmp	.-120    	; 0x21e6 <effect_spiral+0x1e>
			cube[z][3] = pgm_read_byte(&spinning_line[(i+z)%6][3]);
			cube[z][4] = pgm_read_byte(&spinning_line[(i+z)%6][4]);
			// the +z makes the animation iterate one step for each plane
			// making it into a spiral
		}
		delay_ms(delay);
    225e:	c7 01       	movw	r24, r14
    2260:	0e 94 1c 03 	call	0x638	; 0x638 <delay_ms>
void effect_spiral(int direction, int iterations, int delay)
{
	int i;
	int z;		// cube level

	for (i=0;i<iterations;i++)
    2264:	0f 5f       	subi	r16, 0xFF	; 255
    2266:	1f 4f       	sbci	r17, 0xFF	; 255
    2268:	0c 15       	cp	r16, r12
    226a:	1d 05       	cpc	r17, r13
    226c:	0c f4       	brge	.+2      	; 0x2270 <effect_spiral+0xa8>
    226e:	b9 cf       	rjmp	.-142    	; 0x21e2 <effect_spiral+0x1a>
			// the +z makes the animation iterate one step for each plane
			// making it into a spiral
		}
		delay_ms(delay);
	}
}
    2270:	df 91       	pop	r29
    2272:	cf 91       	pop	r28
    2274:	1f 91       	pop	r17
    2276:	0f 91       	pop	r16
    2278:	ff 90       	pop	r15
    227a:	ef 90       	pop	r14
    227c:	df 90       	pop	r13
    227e:	cf 90       	pop	r12
    2280:	08 95       	ret

00002282 <animateCharacter>:
	
	
}

void animateCharacter(char charletter)
{
    2282:	0f 93       	push	r16
    2284:	1f 93       	push	r17
    2286:	cf 93       	push	r28
    2288:	df 93       	push	r29
	int letter = letterToInt(charletter);
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <letterToInt>
    2290:	8c 01       	movw	r16, r24
    2292:	c0 e0       	ldi	r28, 0x00	; 0
    2294:	d0 e0       	ldi	r29, 0x00	; 0
	int l=0;
	for(l=0;l<4;l++)
	{
		getLetter(letter,l);
    2296:	c8 01       	movw	r24, r16
    2298:	be 01       	movw	r22, r28
    229a:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <getLetter>
		delay_ms(80);
    229e:	80 e5       	ldi	r24, 0x50	; 80
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	0e 94 1c 03 	call	0x638	; 0x638 <delay_ms>

void animateCharacter(char charletter)
{
	int letter = letterToInt(charletter);
	int l=0;
	for(l=0;l<4;l++)
    22a6:	21 96       	adiw	r28, 0x01	; 1
    22a8:	c4 30       	cpi	r28, 0x04	; 4
    22aa:	d1 05       	cpc	r29, r1
    22ac:	a1 f7       	brne	.-24     	; 0x2296 <animateCharacter+0x14>
	{
		getLetter(letter,l);
		delay_ms(80);
	}
		getLetter(letter,l);
    22ae:	c8 01       	movw	r24, r16
    22b0:	64 e0       	ldi	r22, 0x04	; 4
    22b2:	70 e0       	ldi	r23, 0x00	; 0
    22b4:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <getLetter>
		delay_ms(500);
    22b8:	84 ef       	ldi	r24, 0xF4	; 244
    22ba:	91 e0       	ldi	r25, 0x01	; 1
    22bc:	0e 94 1c 03 	call	0x638	; 0x638 <delay_ms>

	
	
}
    22c0:	df 91       	pop	r29
    22c2:	cf 91       	pop	r28
    22c4:	1f 91       	pop	r17
    22c6:	0f 91       	pop	r16
    22c8:	08 95       	ret

000022ca <LCKrakow>:

}

void LCKrakow()
{
	animateCharacter('E');
    22ca:	85 e4       	ldi	r24, 0x45	; 69
    22cc:	0e 94 41 11 	call	0x2282	; 0x2282 <animateCharacter>
	animateCharacter('E');
    22d0:	85 e4       	ldi	r24, 0x45	; 69
    22d2:	0e 94 41 11 	call	0x2282	; 0x2282 <animateCharacter>
	animateCharacter('S');
    22d6:	83 e5       	ldi	r24, 0x53	; 83
    22d8:	0e 94 41 11 	call	0x2282	; 0x2282 <animateCharacter>
	animateCharacter('T');
    22dc:	84 e5       	ldi	r24, 0x54	; 84
    22de:	0e 94 41 11 	call	0x2282	; 0x2282 <animateCharacter>
	animateCharacter('E');
    22e2:	85 e4       	ldi	r24, 0x45	; 69
    22e4:	0e 94 41 11 	call	0x2282	; 0x2282 <animateCharacter>
	animateCharacter('C');
    22e8:	83 e4       	ldi	r24, 0x43	; 67
    22ea:	0e 94 41 11 	call	0x2282	; 0x2282 <animateCharacter>
	writeBlank();
    22ee:	0e 94 63 10 	call	0x20c6	; 0x20c6 <writeBlank>
	animateCharacter('L');
    22f2:	8c e4       	ldi	r24, 0x4C	; 76
    22f4:	0e 94 41 11 	call	0x2282	; 0x2282 <animateCharacter>
	animateCharacter('C');
    22f8:	83 e4       	ldi	r24, 0x43	; 67
    22fa:	0e 94 41 11 	call	0x2282	; 0x2282 <animateCharacter>
	writeBlank();
    22fe:	0e 94 63 10 	call	0x20c6	; 0x20c6 <writeBlank>
	animateCharacter('K');
    2302:	8b e4       	ldi	r24, 0x4B	; 75
    2304:	0e 94 41 11 	call	0x2282	; 0x2282 <animateCharacter>
	animateCharacter('R');
    2308:	82 e5       	ldi	r24, 0x52	; 82
    230a:	0e 94 41 11 	call	0x2282	; 0x2282 <animateCharacter>
	animateCharacter('A');
    230e:	81 e4       	ldi	r24, 0x41	; 65
    2310:	0e 94 41 11 	call	0x2282	; 0x2282 <animateCharacter>
	animateCharacter('K');
    2314:	8b e4       	ldi	r24, 0x4B	; 75
    2316:	0e 94 41 11 	call	0x2282	; 0x2282 <animateCharacter>
	animateCharacter('O');
    231a:	8f e4       	ldi	r24, 0x4F	; 79
    231c:	0e 94 41 11 	call	0x2282	; 0x2282 <animateCharacter>
	animateCharacter('W');
    2320:	87 e5       	ldi	r24, 0x57	; 87
    2322:	0e 94 41 11 	call	0x2282	; 0x2282 <animateCharacter>
}
    2326:	08 95       	ret

00002328 <writeFilRos>:
	start();
}

void writeFilRos()
{
	animateCharacter('F');
    2328:	86 e4       	ldi	r24, 0x46	; 70
    232a:	0e 94 41 11 	call	0x2282	; 0x2282 <animateCharacter>
	animateCharacter('I');
    232e:	89 e4       	ldi	r24, 0x49	; 73
    2330:	0e 94 41 11 	call	0x2282	; 0x2282 <animateCharacter>
	animateCharacter('L');
    2334:	8c e4       	ldi	r24, 0x4C	; 76
    2336:	0e 94 41 11 	call	0x2282	; 0x2282 <animateCharacter>
	animateCharacter('R');
    233a:	82 e5       	ldi	r24, 0x52	; 82
    233c:	0e 94 41 11 	call	0x2282	; 0x2282 <animateCharacter>
	animateCharacter('O');
    2340:	8f e4       	ldi	r24, 0x4F	; 79
    2342:	0e 94 41 11 	call	0x2282	; 0x2282 <animateCharacter>
	animateCharacter('S');
    2346:	83 e5       	ldi	r24, 0x53	; 83
    2348:	0e 94 41 11 	call	0x2282	; 0x2282 <animateCharacter>
	writeBlank();
    234c:	0e 94 63 10 	call	0x20c6	; 0x20c6 <writeBlank>
	animateCharacter('R');
    2350:	82 e5       	ldi	r24, 0x52	; 82
    2352:	0e 94 41 11 	call	0x2282	; 0x2282 <animateCharacter>
	animateCharacter('U');
    2356:	85 e5       	ldi	r24, 0x55	; 85
    2358:	0e 94 41 11 	call	0x2282	; 0x2282 <animateCharacter>
	animateCharacter('L');
    235c:	8c e4       	ldi	r24, 0x4C	; 76
    235e:	0e 94 41 11 	call	0x2282	; 0x2282 <animateCharacter>
	animateCharacter('Z');
    2362:	8a e5       	ldi	r24, 0x5A	; 90
    2364:	0e 94 41 11 	call	0x2282	; 0x2282 <animateCharacter>


}
    2368:	08 95       	ret

0000236a <writeEestec>:
}


void writeEestec()
{
	animateCharacter('E');
    236a:	85 e4       	ldi	r24, 0x45	; 69
    236c:	0e 94 41 11 	call	0x2282	; 0x2282 <animateCharacter>
	animateCharacter('E');
    2370:	85 e4       	ldi	r24, 0x45	; 69
    2372:	0e 94 41 11 	call	0x2282	; 0x2282 <animateCharacter>
	animateCharacter('S');
    2376:	83 e5       	ldi	r24, 0x53	; 83
    2378:	0e 94 41 11 	call	0x2282	; 0x2282 <animateCharacter>
	animateCharacter('T');
    237c:	84 e5       	ldi	r24, 0x54	; 84
    237e:	0e 94 41 11 	call	0x2282	; 0x2282 <animateCharacter>
	animateCharacter('E');
    2382:	85 e4       	ldi	r24, 0x45	; 69
    2384:	0e 94 41 11 	call	0x2282	; 0x2282 <animateCharacter>
	animateCharacter('C');
    2388:	83 e4       	ldi	r24, 0x43	; 67
    238a:	0e 94 41 11 	call	0x2282	; 0x2282 <animateCharacter>
	start();
    238e:	0e 94 0b 05 	call	0xa16	; 0xa16 <start>
}
    2392:	08 95       	ret

00002394 <animateLetter>:
	}

}

void animateLetter(int letter)
{
    2394:	0f 93       	push	r16
    2396:	1f 93       	push	r17
    2398:	cf 93       	push	r28
    239a:	df 93       	push	r29
    239c:	8c 01       	movw	r16, r24
    239e:	c0 e0       	ldi	r28, 0x00	; 0
    23a0:	d0 e0       	ldi	r29, 0x00	; 0
	int l=0;
	for(l=0;l<4;l++)
	{
		getLetter(letter,l);
    23a2:	c8 01       	movw	r24, r16
    23a4:	be 01       	movw	r22, r28
    23a6:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <getLetter>
		delay_ms(80);
    23aa:	80 e5       	ldi	r24, 0x50	; 80
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	0e 94 1c 03 	call	0x638	; 0x638 <delay_ms>
}

void animateLetter(int letter)
{
	int l=0;
	for(l=0;l<4;l++)
    23b2:	21 96       	adiw	r28, 0x01	; 1
    23b4:	c4 30       	cpi	r28, 0x04	; 4
    23b6:	d1 05       	cpc	r29, r1
    23b8:	a1 f7       	brne	.-24     	; 0x23a2 <animateLetter+0xe>
	{
		getLetter(letter,l);
		delay_ms(80);
	}
		getLetter(letter,l);
    23ba:	c8 01       	movw	r24, r16
    23bc:	64 e0       	ldi	r22, 0x04	; 4
    23be:	70 e0       	ldi	r23, 0x00	; 0
    23c0:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <getLetter>
		delay_ms(500);
    23c4:	84 ef       	ldi	r24, 0xF4	; 244
    23c6:	91 e0       	ldi	r25, 0x01	; 1
    23c8:	0e 94 1c 03 	call	0x638	; 0x638 <delay_ms>

	
	
}
    23cc:	df 91       	pop	r29
    23ce:	cf 91       	pop	r28
    23d0:	1f 91       	pop	r17
    23d2:	0f 91       	pop	r16
    23d4:	08 95       	ret

000023d6 <alphabet>:
	}
}


void alphabet()
{
    23d6:	cf 93       	push	r28
    23d8:	df 93       	push	r29
    23da:	c0 e0       	ldi	r28, 0x00	; 0
    23dc:	d0 e0       	ldi	r29, 0x00	; 0
	int letter=0, l = 4;
	for(letter=0;letter<24;letter++)
	{
		getLetter(letter,l);
    23de:	ce 01       	movw	r24, r28
    23e0:	64 e0       	ldi	r22, 0x04	; 4
    23e2:	70 e0       	ldi	r23, 0x00	; 0
    23e4:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <getLetter>
		delay_ms(700); 
    23e8:	8c eb       	ldi	r24, 0xBC	; 188
    23ea:	92 e0       	ldi	r25, 0x02	; 2
    23ec:	0e 94 1c 03 	call	0x638	; 0x638 <delay_ms>


void alphabet()
{
	int letter=0, l = 4;
	for(letter=0;letter<24;letter++)
    23f0:	21 96       	adiw	r28, 0x01	; 1
    23f2:	c8 31       	cpi	r28, 0x18	; 24
    23f4:	d1 05       	cpc	r29, r1
    23f6:	99 f7       	brne	.-26     	; 0x23de <alphabet+0x8>
	{
		getLetter(letter,l);
		delay_ms(700); 
	}

}
    23f8:	df 91       	pop	r29
    23fa:	cf 91       	pop	r28
    23fc:	08 95       	ret

000023fe <eestecAnimation>:
		delay_ms(500); 
	}
}

void eestecAnimation ()
{
    23fe:	0f 93       	push	r16
    2400:	1f 93       	push	r17
    2402:	cf 93       	push	r28
    2404:	df 93       	push	r29
    2406:	c0 e0       	ldi	r28, 0x00	; 0
    2408:	d0 e0       	ldi	r29, 0x00	; 0
    240a:	00 e0       	ldi	r16, 0x00	; 0
    240c:	10 e0       	ldi	r17, 0x00	; 0
int letter=0,l=0;
	while(1)
	{
		if(l==5)
    240e:	05 30       	cpi	r16, 0x05	; 5
    2410:	11 05       	cpc	r17, r1
    2412:	11 f4       	brne	.+4      	; 0x2418 <eestecAnimation+0x1a>
    2414:	00 e0       	ldi	r16, 0x00	; 0
    2416:	10 e0       	ldi	r17, 0x00	; 0
		{
			l=0;
		}
		if(letter == 6)
    2418:	c6 30       	cpi	r28, 0x06	; 6
    241a:	d1 05       	cpc	r29, r1
    241c:	19 f4       	brne	.+6      	; 0x2424 <eestecAnimation+0x26>
    241e:	c0 e0       	ldi	r28, 0x00	; 0
    2420:	d0 e0       	ldi	r29, 0x00	; 0
    2422:	1e c0       	rjmp	.+60     	; 0x2460 <eestecAnimation+0x62>
		{
			letter = 0;
		}
		
		switch(letter)
    2424:	c2 30       	cpi	r28, 0x02	; 2
    2426:	d1 05       	cpc	r29, r1
    2428:	99 f0       	breq	.+38     	; 0x2450 <eestecAnimation+0x52>
    242a:	c3 30       	cpi	r28, 0x03	; 3
    242c:	d1 05       	cpc	r29, r1
    242e:	34 f4       	brge	.+12     	; 0x243c <eestecAnimation+0x3e>
    2430:	20 97       	sbiw	r28, 0x00	; 0
    2432:	b1 f0       	breq	.+44     	; 0x2460 <eestecAnimation+0x62>
    2434:	c1 30       	cpi	r28, 0x01	; 1
    2436:	d1 05       	cpc	r29, r1
    2438:	d1 f4       	brne	.+52     	; 0x246e <eestecAnimation+0x70>
    243a:	12 c0       	rjmp	.+36     	; 0x2460 <eestecAnimation+0x62>
    243c:	c4 30       	cpi	r28, 0x04	; 4
    243e:	d1 05       	cpc	r29, r1
    2440:	79 f0       	breq	.+30     	; 0x2460 <eestecAnimation+0x62>
    2442:	c4 30       	cpi	r28, 0x04	; 4
    2444:	d1 05       	cpc	r29, r1
    2446:	44 f0       	brlt	.+16     	; 0x2458 <eestecAnimation+0x5a>
    2448:	c5 30       	cpi	r28, 0x05	; 5
    244a:	d1 05       	cpc	r29, r1
    244c:	81 f4       	brne	.+32     	; 0x246e <eestecAnimation+0x70>
    244e:	0c c0       	rjmp	.+24     	; 0x2468 <eestecAnimation+0x6a>
		case 1:
			writeE(l);
			break;
			
		case 2:
			writeS(l);
    2450:	c8 01       	movw	r24, r16
    2452:	0e 94 cf 0b 	call	0x179e	; 0x179e <writeS>
    2456:	0b c0       	rjmp	.+22     	; 0x246e <eestecAnimation+0x70>
			break;
			
		case 3:
			writeT(l);
    2458:	c8 01       	movw	r24, r16
    245a:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <writeT>
    245e:	07 c0       	rjmp	.+14     	; 0x246e <eestecAnimation+0x70>
			break;
			
		case 4:
			writeE(l);
    2460:	c8 01       	movw	r24, r16
    2462:	0e 94 00 0a 	call	0x1400	; 0x1400 <writeE>
    2466:	03 c0       	rjmp	.+6      	; 0x246e <eestecAnimation+0x70>
			break;
			
		case 5:
			writeC(l);
    2468:	c8 01       	movw	r24, r16
    246a:	0e 94 c0 09 	call	0x1380	; 0x1380 <writeC>
			break;
		}
		
		letter++;
    246e:	21 96       	adiw	r28, 0x01	; 1
		l++;
    2470:	0f 5f       	subi	r16, 0xFF	; 255
    2472:	1f 4f       	sbci	r17, 0xFF	; 255
		delay_ms(500); 
    2474:	84 ef       	ldi	r24, 0xF4	; 244
    2476:	91 e0       	ldi	r25, 0x01	; 1
    2478:	0e 94 1c 03 	call	0x638	; 0x638 <delay_ms>
    247c:	c8 cf       	rjmp	.-112    	; 0x240e <eestecAnimation+0x10>

0000247e <vfprintf>:
    247e:	ab e0       	ldi	r26, 0x0B	; 11
    2480:	b0 e0       	ldi	r27, 0x00	; 0
    2482:	e5 e4       	ldi	r30, 0x45	; 69
    2484:	f2 e1       	ldi	r31, 0x12	; 18
    2486:	0c 94 a6 16 	jmp	0x2d4c	; 0x2d4c <__prologue_saves__+0x8>
    248a:	5c 01       	movw	r10, r24
    248c:	4b 01       	movw	r8, r22
    248e:	7a 01       	movw	r14, r20
    2490:	fc 01       	movw	r30, r24
    2492:	17 82       	std	Z+7, r1	; 0x07
    2494:	16 82       	std	Z+6, r1	; 0x06
    2496:	83 81       	ldd	r24, Z+3	; 0x03
    2498:	81 fd       	sbrc	r24, 1
    249a:	08 c0       	rjmp	.+16     	; 0x24ac <vfprintf+0x2e>
    249c:	6f ef       	ldi	r22, 0xFF	; 255
    249e:	7f ef       	ldi	r23, 0xFF	; 255
    24a0:	08 c1       	rjmp	.+528    	; 0x26b2 <vfprintf+0x234>
    24a2:	42 e0       	ldi	r20, 0x02	; 2
    24a4:	50 e0       	ldi	r21, 0x00	; 0
    24a6:	e4 0e       	add	r14, r20
    24a8:	f5 1e       	adc	r15, r21
    24aa:	04 c0       	rjmp	.+8      	; 0x24b4 <vfprintf+0x36>
    24ac:	3e 01       	movw	r6, r28
    24ae:	08 94       	sec
    24b0:	61 1c       	adc	r6, r1
    24b2:	71 1c       	adc	r7, r1
    24b4:	f5 01       	movw	r30, r10
    24b6:	d3 80       	ldd	r13, Z+3	; 0x03
    24b8:	f4 01       	movw	r30, r8
    24ba:	d3 fc       	sbrc	r13, 3
    24bc:	85 91       	lpm	r24, Z+
    24be:	d3 fe       	sbrs	r13, 3
    24c0:	81 91       	ld	r24, Z+
    24c2:	4f 01       	movw	r8, r30
    24c4:	88 23       	and	r24, r24
    24c6:	09 f4       	brne	.+2      	; 0x24ca <vfprintf+0x4c>
    24c8:	f1 c0       	rjmp	.+482    	; 0x26ac <vfprintf+0x22e>
    24ca:	85 32       	cpi	r24, 0x25	; 37
    24cc:	59 f4       	brne	.+22     	; 0x24e4 <vfprintf+0x66>
    24ce:	d3 fc       	sbrc	r13, 3
    24d0:	65 91       	lpm	r22, Z+
    24d2:	d3 fe       	sbrs	r13, 3
    24d4:	61 91       	ld	r22, Z+
    24d6:	4f 01       	movw	r8, r30
    24d8:	65 32       	cpi	r22, 0x25	; 37
    24da:	19 f0       	breq	.+6      	; 0x24e2 <vfprintf+0x64>
    24dc:	06 2f       	mov	r16, r22
    24de:	10 e0       	ldi	r17, 0x00	; 0
    24e0:	1b c0       	rjmp	.+54     	; 0x2518 <vfprintf+0x9a>
    24e2:	85 e2       	ldi	r24, 0x25	; 37
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	2b c0       	rjmp	.+86     	; 0x253e <vfprintf+0xc0>
    24e8:	00 23       	and	r16, r16
    24ea:	09 f4       	brne	.+2      	; 0x24ee <vfprintf+0x70>
    24ec:	df c0       	rjmp	.+446    	; 0x26ac <vfprintf+0x22e>
    24ee:	8d ea       	ldi	r24, 0xAD	; 173
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	60 2f       	mov	r22, r16
    24f4:	70 e0       	ldi	r23, 0x00	; 0
    24f6:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <strchr_P>
    24fa:	89 2b       	or	r24, r25
    24fc:	39 f4       	brne	.+14     	; 0x250c <vfprintf+0x8e>
    24fe:	03 32       	cpi	r16, 0x23	; 35
    2500:	11 f4       	brne	.+4      	; 0x2506 <vfprintf+0x88>
    2502:	10 61       	ori	r17, 0x10	; 16
    2504:	03 c0       	rjmp	.+6      	; 0x250c <vfprintf+0x8e>
    2506:	0c 36       	cpi	r16, 0x6C	; 108
    2508:	61 f4       	brne	.+24     	; 0x2522 <vfprintf+0xa4>
    250a:	10 68       	ori	r17, 0x80	; 128
    250c:	f4 01       	movw	r30, r8
    250e:	d3 fc       	sbrc	r13, 3
    2510:	05 91       	lpm	r16, Z+
    2512:	d3 fe       	sbrs	r13, 3
    2514:	01 91       	ld	r16, Z+
    2516:	4f 01       	movw	r8, r30
    2518:	17 ff       	sbrs	r17, 7
    251a:	e6 cf       	rjmp	.-52     	; 0x24e8 <vfprintf+0x6a>
    251c:	00 23       	and	r16, r16
    251e:	09 f4       	brne	.+2      	; 0x2522 <vfprintf+0xa4>
    2520:	c5 c0       	rjmp	.+394    	; 0x26ac <vfprintf+0x22e>
    2522:	86 ea       	ldi	r24, 0xA6	; 166
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	60 2f       	mov	r22, r16
    2528:	70 e0       	ldi	r23, 0x00	; 0
    252a:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <strchr_P>
    252e:	89 2b       	or	r24, r25
    2530:	51 f0       	breq	.+20     	; 0x2546 <vfprintf+0xc8>
    2532:	44 e0       	ldi	r20, 0x04	; 4
    2534:	50 e0       	ldi	r21, 0x00	; 0
    2536:	e4 0e       	add	r14, r20
    2538:	f5 1e       	adc	r15, r21
    253a:	8f e3       	ldi	r24, 0x3F	; 63
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	b5 01       	movw	r22, r10
    2540:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <fputc>
    2544:	b7 cf       	rjmp	.-146    	; 0x24b4 <vfprintf+0x36>
    2546:	03 36       	cpi	r16, 0x63	; 99
    2548:	29 f0       	breq	.+10     	; 0x2554 <vfprintf+0xd6>
    254a:	03 37       	cpi	r16, 0x73	; 115
    254c:	79 f0       	breq	.+30     	; 0x256c <vfprintf+0xee>
    254e:	03 35       	cpi	r16, 0x53	; 83
    2550:	f1 f4       	brne	.+60     	; 0x258e <vfprintf+0x110>
    2552:	0b c0       	rjmp	.+22     	; 0x256a <vfprintf+0xec>
    2554:	87 01       	movw	r16, r14
    2556:	0e 5f       	subi	r16, 0xFE	; 254
    2558:	1f 4f       	sbci	r17, 0xFF	; 255
    255a:	f7 01       	movw	r30, r14
    255c:	80 81       	ld	r24, Z
    255e:	91 81       	ldd	r25, Z+1	; 0x01
    2560:	b5 01       	movw	r22, r10
    2562:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <fputc>
    2566:	78 01       	movw	r14, r16
    2568:	a5 cf       	rjmp	.-182    	; 0x24b4 <vfprintf+0x36>
    256a:	11 60       	ori	r17, 0x01	; 1
    256c:	f7 01       	movw	r30, r14
    256e:	c0 80       	ld	r12, Z
    2570:	d1 80       	ldd	r13, Z+1	; 0x01
    2572:	04 c0       	rjmp	.+8      	; 0x257c <vfprintf+0xfe>
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	b5 01       	movw	r22, r10
    2578:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <fputc>
    257c:	f6 01       	movw	r30, r12
    257e:	10 fd       	sbrc	r17, 0
    2580:	85 91       	lpm	r24, Z+
    2582:	10 ff       	sbrs	r17, 0
    2584:	81 91       	ld	r24, Z+
    2586:	6f 01       	movw	r12, r30
    2588:	88 23       	and	r24, r24
    258a:	a1 f7       	brne	.-24     	; 0x2574 <vfprintf+0xf6>
    258c:	8a cf       	rjmp	.-236    	; 0x24a2 <vfprintf+0x24>
    258e:	04 36       	cpi	r16, 0x64	; 100
    2590:	11 f0       	breq	.+4      	; 0x2596 <vfprintf+0x118>
    2592:	09 36       	cpi	r16, 0x69	; 105
    2594:	39 f5       	brne	.+78     	; 0x25e4 <vfprintf+0x166>
    2596:	17 ff       	sbrs	r17, 7
    2598:	08 c0       	rjmp	.+16     	; 0x25aa <vfprintf+0x12c>
    259a:	f7 01       	movw	r30, r14
    259c:	20 81       	ld	r18, Z
    259e:	31 81       	ldd	r19, Z+1	; 0x01
    25a0:	42 81       	ldd	r20, Z+2	; 0x02
    25a2:	53 81       	ldd	r21, Z+3	; 0x03
    25a4:	84 e0       	ldi	r24, 0x04	; 4
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	0a c0       	rjmp	.+20     	; 0x25be <vfprintf+0x140>
    25aa:	f7 01       	movw	r30, r14
    25ac:	80 81       	ld	r24, Z
    25ae:	91 81       	ldd	r25, Z+1	; 0x01
    25b0:	9c 01       	movw	r18, r24
    25b2:	44 27       	eor	r20, r20
    25b4:	37 fd       	sbrc	r19, 7
    25b6:	40 95       	com	r20
    25b8:	54 2f       	mov	r21, r20
    25ba:	82 e0       	ldi	r24, 0x02	; 2
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	e8 0e       	add	r14, r24
    25c0:	f9 1e       	adc	r15, r25
    25c2:	1f 7e       	andi	r17, 0xEF	; 239
    25c4:	57 ff       	sbrs	r21, 7
    25c6:	08 c0       	rjmp	.+16     	; 0x25d8 <vfprintf+0x15a>
    25c8:	50 95       	com	r21
    25ca:	40 95       	com	r20
    25cc:	30 95       	com	r19
    25ce:	21 95       	neg	r18
    25d0:	3f 4f       	sbci	r19, 0xFF	; 255
    25d2:	4f 4f       	sbci	r20, 0xFF	; 255
    25d4:	5f 4f       	sbci	r21, 0xFF	; 255
    25d6:	10 64       	ori	r17, 0x40	; 64
    25d8:	ca 01       	movw	r24, r20
    25da:	b9 01       	movw	r22, r18
    25dc:	a3 01       	movw	r20, r6
    25de:	2a e0       	ldi	r18, 0x0A	; 10
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	34 c0       	rjmp	.+104    	; 0x264c <vfprintf+0x1ce>
    25e4:	00 37       	cpi	r16, 0x70	; 112
    25e6:	a9 f0       	breq	.+42     	; 0x2612 <vfprintf+0x194>
    25e8:	01 37       	cpi	r16, 0x71	; 113
    25ea:	30 f4       	brcc	.+12     	; 0x25f8 <vfprintf+0x17a>
    25ec:	08 35       	cpi	r16, 0x58	; 88
    25ee:	b1 f0       	breq	.+44     	; 0x261c <vfprintf+0x19e>
    25f0:	0f 36       	cpi	r16, 0x6F	; 111
    25f2:	09 f0       	breq	.+2      	; 0x25f6 <vfprintf+0x178>
    25f4:	5b c0       	rjmp	.+182    	; 0x26ac <vfprintf+0x22e>
    25f6:	06 c0       	rjmp	.+12     	; 0x2604 <vfprintf+0x186>
    25f8:	05 37       	cpi	r16, 0x75	; 117
    25fa:	39 f0       	breq	.+14     	; 0x260a <vfprintf+0x18c>
    25fc:	08 37       	cpi	r16, 0x78	; 120
    25fe:	09 f0       	breq	.+2      	; 0x2602 <vfprintf+0x184>
    2600:	55 c0       	rjmp	.+170    	; 0x26ac <vfprintf+0x22e>
    2602:	08 c0       	rjmp	.+16     	; 0x2614 <vfprintf+0x196>
    2604:	28 e0       	ldi	r18, 0x08	; 8
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	0c c0       	rjmp	.+24     	; 0x2622 <vfprintf+0x1a4>
    260a:	1f 7e       	andi	r17, 0xEF	; 239
    260c:	2a e0       	ldi	r18, 0x0A	; 10
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	08 c0       	rjmp	.+16     	; 0x2622 <vfprintf+0x1a4>
    2612:	10 61       	ori	r17, 0x10	; 16
    2614:	14 62       	ori	r17, 0x24	; 36
    2616:	20 e1       	ldi	r18, 0x10	; 16
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	03 c0       	rjmp	.+6      	; 0x2622 <vfprintf+0x1a4>
    261c:	14 60       	ori	r17, 0x04	; 4
    261e:	20 e1       	ldi	r18, 0x10	; 16
    2620:	32 e0       	ldi	r19, 0x02	; 2
    2622:	17 ff       	sbrs	r17, 7
    2624:	08 c0       	rjmp	.+16     	; 0x2636 <vfprintf+0x1b8>
    2626:	f7 01       	movw	r30, r14
    2628:	60 81       	ld	r22, Z
    262a:	71 81       	ldd	r23, Z+1	; 0x01
    262c:	82 81       	ldd	r24, Z+2	; 0x02
    262e:	93 81       	ldd	r25, Z+3	; 0x03
    2630:	44 e0       	ldi	r20, 0x04	; 4
    2632:	50 e0       	ldi	r21, 0x00	; 0
    2634:	08 c0       	rjmp	.+16     	; 0x2646 <vfprintf+0x1c8>
    2636:	f7 01       	movw	r30, r14
    2638:	80 81       	ld	r24, Z
    263a:	91 81       	ldd	r25, Z+1	; 0x01
    263c:	bc 01       	movw	r22, r24
    263e:	80 e0       	ldi	r24, 0x00	; 0
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	42 e0       	ldi	r20, 0x02	; 2
    2644:	50 e0       	ldi	r21, 0x00	; 0
    2646:	e4 0e       	add	r14, r20
    2648:	f5 1e       	adc	r15, r21
    264a:	a3 01       	movw	r20, r6
    264c:	0e 94 31 16 	call	0x2c62	; 0x2c62 <__ultoa_invert>
    2650:	d8 2e       	mov	r13, r24
    2652:	d6 18       	sub	r13, r6
    2654:	01 2f       	mov	r16, r17
    2656:	10 e0       	ldi	r17, 0x00	; 0
    2658:	06 ff       	sbrs	r16, 6
    265a:	05 c0       	rjmp	.+10     	; 0x2666 <vfprintf+0x1e8>
    265c:	8d e2       	ldi	r24, 0x2D	; 45
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	b5 01       	movw	r22, r10
    2662:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <fputc>
    2666:	04 ff       	sbrs	r16, 4
    2668:	15 c0       	rjmp	.+42     	; 0x2694 <vfprintf+0x216>
    266a:	fe 01       	movw	r30, r28
    266c:	ed 0d       	add	r30, r13
    266e:	f1 1d       	adc	r31, r1
    2670:	80 81       	ld	r24, Z
    2672:	80 33       	cpi	r24, 0x30	; 48
    2674:	79 f0       	breq	.+30     	; 0x2694 <vfprintf+0x216>
    2676:	80 e3       	ldi	r24, 0x30	; 48
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	b5 01       	movw	r22, r10
    267c:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <fputc>
    2680:	02 ff       	sbrs	r16, 2
    2682:	08 c0       	rjmp	.+16     	; 0x2694 <vfprintf+0x216>
    2684:	00 72       	andi	r16, 0x20	; 32
    2686:	10 70       	andi	r17, 0x00	; 0
    2688:	c8 01       	movw	r24, r16
    268a:	88 5a       	subi	r24, 0xA8	; 168
    268c:	9f 4f       	sbci	r25, 0xFF	; 255
    268e:	b5 01       	movw	r22, r10
    2690:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <fputc>
    2694:	da 94       	dec	r13
    2696:	f3 01       	movw	r30, r6
    2698:	ed 0d       	add	r30, r13
    269a:	f1 1d       	adc	r31, r1
    269c:	80 81       	ld	r24, Z
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	b5 01       	movw	r22, r10
    26a2:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <fputc>
    26a6:	dd 20       	and	r13, r13
    26a8:	a9 f7       	brne	.-22     	; 0x2694 <vfprintf+0x216>
    26aa:	04 cf       	rjmp	.-504    	; 0x24b4 <vfprintf+0x36>
    26ac:	f5 01       	movw	r30, r10
    26ae:	66 81       	ldd	r22, Z+6	; 0x06
    26b0:	77 81       	ldd	r23, Z+7	; 0x07
    26b2:	cb 01       	movw	r24, r22
    26b4:	2b 96       	adiw	r28, 0x0b	; 11
    26b6:	ee e0       	ldi	r30, 0x0E	; 14
    26b8:	0c 94 c2 16 	jmp	0x2d84	; 0x2d84 <__epilogue_restores__+0x8>

000026bc <putval>:
    26bc:	fc 01       	movw	r30, r24
    26be:	20 fd       	sbrc	r18, 0
    26c0:	08 c0       	rjmp	.+16     	; 0x26d2 <putval+0x16>
    26c2:	23 fd       	sbrc	r18, 3
    26c4:	05 c0       	rjmp	.+10     	; 0x26d0 <putval+0x14>
    26c6:	22 ff       	sbrs	r18, 2
    26c8:	02 c0       	rjmp	.+4      	; 0x26ce <putval+0x12>
    26ca:	73 83       	std	Z+3, r23	; 0x03
    26cc:	62 83       	std	Z+2, r22	; 0x02
    26ce:	51 83       	std	Z+1, r21	; 0x01
    26d0:	40 83       	st	Z, r20
    26d2:	08 95       	ret

000026d4 <mulacc>:
    26d4:	ef 92       	push	r14
    26d6:	ff 92       	push	r15
    26d8:	0f 93       	push	r16
    26da:	1f 93       	push	r17
    26dc:	44 ff       	sbrs	r20, 4
    26de:	02 c0       	rjmp	.+4      	; 0x26e4 <mulacc+0x10>
    26e0:	33 e0       	ldi	r19, 0x03	; 3
    26e2:	11 c0       	rjmp	.+34     	; 0x2706 <mulacc+0x32>
    26e4:	46 ff       	sbrs	r20, 6
    26e6:	02 c0       	rjmp	.+4      	; 0x26ec <mulacc+0x18>
    26e8:	34 e0       	ldi	r19, 0x04	; 4
    26ea:	0d c0       	rjmp	.+26     	; 0x2706 <mulacc+0x32>
    26ec:	db 01       	movw	r26, r22
    26ee:	fc 01       	movw	r30, r24
    26f0:	aa 0f       	add	r26, r26
    26f2:	bb 1f       	adc	r27, r27
    26f4:	ee 1f       	adc	r30, r30
    26f6:	ff 1f       	adc	r31, r31
    26f8:	10 94       	com	r1
    26fa:	d1 f7       	brne	.-12     	; 0x26f0 <mulacc+0x1c>
    26fc:	6a 0f       	add	r22, r26
    26fe:	7b 1f       	adc	r23, r27
    2700:	8e 1f       	adc	r24, r30
    2702:	9f 1f       	adc	r25, r31
    2704:	31 e0       	ldi	r19, 0x01	; 1
    2706:	66 0f       	add	r22, r22
    2708:	77 1f       	adc	r23, r23
    270a:	88 1f       	adc	r24, r24
    270c:	99 1f       	adc	r25, r25
    270e:	31 50       	subi	r19, 0x01	; 1
    2710:	d1 f7       	brne	.-12     	; 0x2706 <mulacc+0x32>
    2712:	7b 01       	movw	r14, r22
    2714:	8c 01       	movw	r16, r24
    2716:	e2 0e       	add	r14, r18
    2718:	f1 1c       	adc	r15, r1
    271a:	01 1d       	adc	r16, r1
    271c:	11 1d       	adc	r17, r1
    271e:	a8 01       	movw	r20, r16
    2720:	97 01       	movw	r18, r14
    2722:	b7 01       	movw	r22, r14
    2724:	ca 01       	movw	r24, r20
    2726:	1f 91       	pop	r17
    2728:	0f 91       	pop	r16
    272a:	ff 90       	pop	r15
    272c:	ef 90       	pop	r14
    272e:	08 95       	ret

00002730 <skip_spaces>:
    2730:	0f 93       	push	r16
    2732:	1f 93       	push	r17
    2734:	cf 93       	push	r28
    2736:	df 93       	push	r29
    2738:	8c 01       	movw	r16, r24
    273a:	c8 01       	movw	r24, r16
    273c:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <fgetc>
    2740:	ec 01       	movw	r28, r24
    2742:	97 fd       	sbrc	r25, 7
    2744:	08 c0       	rjmp	.+16     	; 0x2756 <skip_spaces+0x26>
    2746:	0e 94 ed 16 	call	0x2dda	; 0x2dda <isspace>
    274a:	89 2b       	or	r24, r25
    274c:	b1 f7       	brne	.-20     	; 0x273a <skip_spaces+0xa>
    274e:	ce 01       	movw	r24, r28
    2750:	b8 01       	movw	r22, r16
    2752:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <ungetc>
    2756:	ce 01       	movw	r24, r28
    2758:	df 91       	pop	r29
    275a:	cf 91       	pop	r28
    275c:	1f 91       	pop	r17
    275e:	0f 91       	pop	r16
    2760:	08 95       	ret

00002762 <conv_int>:
    2762:	a0 e0       	ldi	r26, 0x00	; 0
    2764:	b0 e0       	ldi	r27, 0x00	; 0
    2766:	e7 eb       	ldi	r30, 0xB7	; 183
    2768:	f3 e1       	ldi	r31, 0x13	; 19
    276a:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <__prologue_saves__+0x10>
    276e:	ec 01       	movw	r28, r24
    2770:	c6 2e       	mov	r12, r22
    2772:	5a 01       	movw	r10, r20
    2774:	12 2f       	mov	r17, r18
    2776:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <fgetc>
    277a:	ac 01       	movw	r20, r24
    277c:	8b 32       	cpi	r24, 0x2B	; 43
    277e:	19 f0       	breq	.+6      	; 0x2786 <conv_int+0x24>
    2780:	8d 32       	cpi	r24, 0x2D	; 45
    2782:	51 f4       	brne	.+20     	; 0x2798 <conv_int+0x36>
    2784:	10 68       	ori	r17, 0x80	; 128
    2786:	ca 94       	dec	r12
    2788:	09 f4       	brne	.+2      	; 0x278c <conv_int+0x2a>
    278a:	6d c0       	rjmp	.+218    	; 0x2866 <conv_int+0x104>
    278c:	ce 01       	movw	r24, r28
    278e:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <fgetc>
    2792:	ac 01       	movw	r20, r24
    2794:	97 fd       	sbrc	r25, 7
    2796:	67 c0       	rjmp	.+206    	; 0x2866 <conv_int+0x104>
    2798:	6d ef       	ldi	r22, 0xFD	; 253
    279a:	d6 2e       	mov	r13, r22
    279c:	d1 22       	and	r13, r17
    279e:	8d 2d       	mov	r24, r13
    27a0:	80 73       	andi	r24, 0x30	; 48
    27a2:	01 f5       	brne	.+64     	; 0x27e4 <conv_int+0x82>
    27a4:	40 33       	cpi	r20, 0x30	; 48
    27a6:	f1 f4       	brne	.+60     	; 0x27e4 <conv_int+0x82>
    27a8:	ca 94       	dec	r12
    27aa:	09 f4       	brne	.+2      	; 0x27ae <conv_int+0x4c>
    27ac:	47 c0       	rjmp	.+142    	; 0x283c <conv_int+0xda>
    27ae:	ce 01       	movw	r24, r28
    27b0:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <fgetc>
    27b4:	ac 01       	movw	r20, r24
    27b6:	97 fd       	sbrc	r25, 7
    27b8:	41 c0       	rjmp	.+130    	; 0x283c <conv_int+0xda>
    27ba:	82 e0       	ldi	r24, 0x02	; 2
    27bc:	d8 2a       	or	r13, r24
    27be:	48 37       	cpi	r20, 0x78	; 120
    27c0:	11 f0       	breq	.+4      	; 0x27c6 <conv_int+0x64>
    27c2:	48 35       	cpi	r20, 0x58	; 88
    27c4:	59 f4       	brne	.+22     	; 0x27dc <conv_int+0x7a>
    27c6:	80 e4       	ldi	r24, 0x40	; 64
    27c8:	d8 2a       	or	r13, r24
    27ca:	ca 94       	dec	r12
    27cc:	b9 f1       	breq	.+110    	; 0x283c <conv_int+0xda>
    27ce:	ce 01       	movw	r24, r28
    27d0:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <fgetc>
    27d4:	ac 01       	movw	r20, r24
    27d6:	99 23       	and	r25, r25
    27d8:	2c f4       	brge	.+10     	; 0x27e4 <conv_int+0x82>
    27da:	30 c0       	rjmp	.+96     	; 0x283c <conv_int+0xda>
    27dc:	d6 fc       	sbrc	r13, 6
    27de:	02 c0       	rjmp	.+4      	; 0x27e4 <conv_int+0x82>
    27e0:	80 e1       	ldi	r24, 0x10	; 16
    27e2:	d8 2a       	or	r13, r24
    27e4:	ee 24       	eor	r14, r14
    27e6:	ff 24       	eor	r15, r15
    27e8:	87 01       	movw	r16, r14
    27ea:	24 2f       	mov	r18, r20
    27ec:	20 53       	subi	r18, 0x30	; 48
    27ee:	28 30       	cpi	r18, 0x08	; 8
    27f0:	88 f0       	brcs	.+34     	; 0x2814 <conv_int+0xb2>
    27f2:	d4 fc       	sbrc	r13, 4
    27f4:	09 c0       	rjmp	.+18     	; 0x2808 <conv_int+0xa6>
    27f6:	2a 30       	cpi	r18, 0x0A	; 10
    27f8:	68 f0       	brcs	.+26     	; 0x2814 <conv_int+0xb2>
    27fa:	d6 fe       	sbrs	r13, 6
    27fc:	05 c0       	rjmp	.+10     	; 0x2808 <conv_int+0xa6>
    27fe:	2f 7d       	andi	r18, 0xDF	; 223
    2800:	82 2f       	mov	r24, r18
    2802:	81 51       	subi	r24, 0x11	; 17
    2804:	86 30       	cpi	r24, 0x06	; 6
    2806:	28 f0       	brcs	.+10     	; 0x2812 <conv_int+0xb0>
    2808:	ca 01       	movw	r24, r20
    280a:	be 01       	movw	r22, r28
    280c:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <ungetc>
    2810:	12 c0       	rjmp	.+36     	; 0x2836 <conv_int+0xd4>
    2812:	27 50       	subi	r18, 0x07	; 7
    2814:	c8 01       	movw	r24, r16
    2816:	b7 01       	movw	r22, r14
    2818:	4d 2d       	mov	r20, r13
    281a:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <mulacc>
    281e:	7b 01       	movw	r14, r22
    2820:	8c 01       	movw	r16, r24
    2822:	82 e0       	ldi	r24, 0x02	; 2
    2824:	d8 2a       	or	r13, r24
    2826:	ca 94       	dec	r12
    2828:	61 f0       	breq	.+24     	; 0x2842 <conv_int+0xe0>
    282a:	ce 01       	movw	r24, r28
    282c:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <fgetc>
    2830:	ac 01       	movw	r20, r24
    2832:	97 ff       	sbrs	r25, 7
    2834:	da cf       	rjmp	.-76     	; 0x27ea <conv_int+0x88>
    2836:	d1 fc       	sbrc	r13, 1
    2838:	04 c0       	rjmp	.+8      	; 0x2842 <conv_int+0xe0>
    283a:	15 c0       	rjmp	.+42     	; 0x2866 <conv_int+0x104>
    283c:	ee 24       	eor	r14, r14
    283e:	ff 24       	eor	r15, r15
    2840:	87 01       	movw	r16, r14
    2842:	d7 fe       	sbrs	r13, 7
    2844:	08 c0       	rjmp	.+16     	; 0x2856 <conv_int+0xf4>
    2846:	10 95       	com	r17
    2848:	00 95       	com	r16
    284a:	f0 94       	com	r15
    284c:	e0 94       	com	r14
    284e:	e1 1c       	adc	r14, r1
    2850:	f1 1c       	adc	r15, r1
    2852:	01 1d       	adc	r16, r1
    2854:	11 1d       	adc	r17, r1
    2856:	c5 01       	movw	r24, r10
    2858:	b8 01       	movw	r22, r16
    285a:	a7 01       	movw	r20, r14
    285c:	2d 2d       	mov	r18, r13
    285e:	0e 94 5e 13 	call	0x26bc	; 0x26bc <putval>
    2862:	81 e0       	ldi	r24, 0x01	; 1
    2864:	01 c0       	rjmp	.+2      	; 0x2868 <conv_int+0x106>
    2866:	80 e0       	ldi	r24, 0x00	; 0
    2868:	cd b7       	in	r28, 0x3d	; 61
    286a:	de b7       	in	r29, 0x3e	; 62
    286c:	ea e0       	ldi	r30, 0x0A	; 10
    286e:	0c 94 c6 16 	jmp	0x2d8c	; 0x2d8c <__epilogue_restores__+0x10>

00002872 <vfscanf>:
    2872:	a0 e0       	ldi	r26, 0x00	; 0
    2874:	b0 e0       	ldi	r27, 0x00	; 0
    2876:	ef e3       	ldi	r30, 0x3F	; 63
    2878:	f4 e1       	ldi	r31, 0x14	; 20
    287a:	0c 94 a6 16 	jmp	0x2d4c	; 0x2d4c <__prologue_saves__+0x8>
    287e:	5c 01       	movw	r10, r24
    2880:	6b 01       	movw	r12, r22
    2882:	3a 01       	movw	r6, r20
    2884:	fc 01       	movw	r30, r24
    2886:	17 82       	std	Z+7, r1	; 0x07
    2888:	16 82       	std	Z+6, r1	; 0x06
    288a:	88 24       	eor	r8, r8
    288c:	dd c0       	rjmp	.+442    	; 0x2a48 <vfscanf+0x1d6>
    288e:	81 2f       	mov	r24, r17
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	0e 94 ed 16 	call	0x2dda	; 0x2dda <isspace>
    2896:	89 2b       	or	r24, r25
    2898:	21 f0       	breq	.+8      	; 0x28a2 <vfscanf+0x30>
    289a:	c5 01       	movw	r24, r10
    289c:	0e 94 98 13 	call	0x2730	; 0x2730 <skip_spaces>
    28a0:	d3 c0       	rjmp	.+422    	; 0x2a48 <vfscanf+0x1d6>
    28a2:	15 32       	cpi	r17, 0x25	; 37
    28a4:	49 f4       	brne	.+18     	; 0x28b8 <vfscanf+0x46>
    28a6:	f6 01       	movw	r30, r12
    28a8:	f3 fc       	sbrc	r15, 3
    28aa:	65 91       	lpm	r22, Z+
    28ac:	f3 fe       	sbrs	r15, 3
    28ae:	61 91       	ld	r22, Z+
    28b0:	6f 01       	movw	r12, r30
    28b2:	65 32       	cpi	r22, 0x25	; 37
    28b4:	69 f4       	brne	.+26     	; 0x28d0 <vfscanf+0x5e>
    28b6:	15 e2       	ldi	r17, 0x25	; 37
    28b8:	c5 01       	movw	r24, r10
    28ba:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <fgetc>
    28be:	97 fd       	sbrc	r25, 7
    28c0:	cf c0       	rjmp	.+414    	; 0x2a60 <vfscanf+0x1ee>
    28c2:	18 17       	cp	r17, r24
    28c4:	09 f4       	brne	.+2      	; 0x28c8 <vfscanf+0x56>
    28c6:	c0 c0       	rjmp	.+384    	; 0x2a48 <vfscanf+0x1d6>
    28c8:	b5 01       	movw	r22, r10
    28ca:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <ungetc>
    28ce:	cd c0       	rjmp	.+410    	; 0x2a6a <vfscanf+0x1f8>
    28d0:	6a 32       	cpi	r22, 0x2A	; 42
    28d2:	19 f0       	breq	.+6      	; 0x28da <vfscanf+0x68>
    28d4:	16 2f       	mov	r17, r22
    28d6:	00 e0       	ldi	r16, 0x00	; 0
    28d8:	06 c0       	rjmp	.+12     	; 0x28e6 <vfscanf+0x74>
    28da:	f3 fc       	sbrc	r15, 3
    28dc:	15 91       	lpm	r17, Z+
    28de:	f3 fe       	sbrs	r15, 3
    28e0:	11 91       	ld	r17, Z+
    28e2:	6f 01       	movw	r12, r30
    28e4:	01 e0       	ldi	r16, 0x01	; 1
    28e6:	99 24       	eor	r9, r9
    28e8:	0f c0       	rjmp	.+30     	; 0x2908 <vfscanf+0x96>
    28ea:	02 60       	ori	r16, 0x02	; 2
    28ec:	69 2d       	mov	r22, r9
    28ee:	70 e0       	ldi	r23, 0x00	; 0
    28f0:	80 e0       	ldi	r24, 0x00	; 0
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	40 e2       	ldi	r20, 0x20	; 32
    28f6:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <mulacc>
    28fa:	96 2e       	mov	r9, r22
    28fc:	f6 01       	movw	r30, r12
    28fe:	f3 fc       	sbrc	r15, 3
    2900:	15 91       	lpm	r17, Z+
    2902:	f3 fe       	sbrs	r15, 3
    2904:	11 91       	ld	r17, Z+
    2906:	6f 01       	movw	r12, r30
    2908:	21 2f       	mov	r18, r17
    290a:	20 53       	subi	r18, 0x30	; 48
    290c:	2a 30       	cpi	r18, 0x0A	; 10
    290e:	68 f3       	brcs	.-38     	; 0x28ea <vfscanf+0x78>
    2910:	01 fd       	sbrc	r16, 1
    2912:	03 c0       	rjmp	.+6      	; 0x291a <vfscanf+0xa8>
    2914:	99 24       	eor	r9, r9
    2916:	9a 94       	dec	r9
    2918:	03 c0       	rjmp	.+6      	; 0x2920 <vfscanf+0xae>
    291a:	99 20       	and	r9, r9
    291c:	09 f4       	brne	.+2      	; 0x2920 <vfscanf+0xae>
    291e:	a5 c0       	rjmp	.+330    	; 0x2a6a <vfscanf+0x1f8>
    2920:	18 36       	cpi	r17, 0x68	; 104
    2922:	21 f0       	breq	.+8      	; 0x292c <vfscanf+0xba>
    2924:	1c 36       	cpi	r17, 0x6C	; 108
    2926:	99 f4       	brne	.+38     	; 0x294e <vfscanf+0xdc>
    2928:	f6 01       	movw	r30, r12
    292a:	0b c0       	rjmp	.+22     	; 0x2942 <vfscanf+0xd0>
    292c:	f6 01       	movw	r30, r12
    292e:	f3 fc       	sbrc	r15, 3
    2930:	65 91       	lpm	r22, Z+
    2932:	f3 fe       	sbrs	r15, 3
    2934:	61 91       	ld	r22, Z+
    2936:	68 36       	cpi	r22, 0x68	; 104
    2938:	19 f0       	breq	.+6      	; 0x2940 <vfscanf+0xce>
    293a:	6f 01       	movw	r12, r30
    293c:	16 2f       	mov	r17, r22
    293e:	07 c0       	rjmp	.+14     	; 0x294e <vfscanf+0xdc>
    2940:	08 60       	ori	r16, 0x08	; 8
    2942:	04 60       	ori	r16, 0x04	; 4
    2944:	f3 fc       	sbrc	r15, 3
    2946:	15 91       	lpm	r17, Z+
    2948:	f3 fe       	sbrs	r15, 3
    294a:	11 91       	ld	r17, Z+
    294c:	6f 01       	movw	r12, r30
    294e:	11 23       	and	r17, r17
    2950:	09 f4       	brne	.+2      	; 0x2954 <vfscanf+0xe2>
    2952:	8b c0       	rjmp	.+278    	; 0x2a6a <vfscanf+0x1f8>
    2954:	8d eb       	ldi	r24, 0xBD	; 189
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	61 2f       	mov	r22, r17
    295a:	70 e0       	ldi	r23, 0x00	; 0
    295c:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <strchr_P>
    2960:	89 2b       	or	r24, r25
    2962:	09 f4       	brne	.+2      	; 0x2966 <vfscanf+0xf4>
    2964:	82 c0       	rjmp	.+260    	; 0x2a6a <vfscanf+0x1f8>
    2966:	80 2f       	mov	r24, r16
    2968:	00 ff       	sbrs	r16, 0
    296a:	03 c0       	rjmp	.+6      	; 0x2972 <vfscanf+0x100>
    296c:	ee 24       	eor	r14, r14
    296e:	ff 24       	eor	r15, r15
    2970:	07 c0       	rjmp	.+14     	; 0x2980 <vfscanf+0x10e>
    2972:	f3 01       	movw	r30, r6
    2974:	e0 80       	ld	r14, Z
    2976:	f1 80       	ldd	r15, Z+1	; 0x01
    2978:	22 e0       	ldi	r18, 0x02	; 2
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	62 0e       	add	r6, r18
    297e:	73 1e       	adc	r7, r19
    2980:	1e 36       	cpi	r17, 0x6E	; 110
    2982:	51 f4       	brne	.+20     	; 0x2998 <vfscanf+0x126>
    2984:	f5 01       	movw	r30, r10
    2986:	46 81       	ldd	r20, Z+6	; 0x06
    2988:	57 81       	ldd	r21, Z+7	; 0x07
    298a:	60 e0       	ldi	r22, 0x00	; 0
    298c:	70 e0       	ldi	r23, 0x00	; 0
    298e:	c7 01       	movw	r24, r14
    2990:	20 2f       	mov	r18, r16
    2992:	0e 94 5e 13 	call	0x26bc	; 0x26bc <putval>
    2996:	58 c0       	rjmp	.+176    	; 0x2a48 <vfscanf+0x1d6>
    2998:	13 36       	cpi	r17, 0x63	; 99
    299a:	91 f4       	brne	.+36     	; 0x29c0 <vfscanf+0x14e>
    299c:	81 fd       	sbrc	r24, 1
    299e:	02 c0       	rjmp	.+4      	; 0x29a4 <vfscanf+0x132>
    29a0:	99 24       	eor	r9, r9
    29a2:	93 94       	inc	r9
    29a4:	c5 01       	movw	r24, r10
    29a6:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <fgetc>
    29aa:	97 fd       	sbrc	r25, 7
    29ac:	59 c0       	rjmp	.+178    	; 0x2a60 <vfscanf+0x1ee>
    29ae:	e1 14       	cp	r14, r1
    29b0:	f1 04       	cpc	r15, r1
    29b2:	19 f0       	breq	.+6      	; 0x29ba <vfscanf+0x148>
    29b4:	f7 01       	movw	r30, r14
    29b6:	81 93       	st	Z+, r24
    29b8:	7f 01       	movw	r14, r30
    29ba:	9a 94       	dec	r9
    29bc:	99 f7       	brne	.-26     	; 0x29a4 <vfscanf+0x132>
    29be:	42 c0       	rjmp	.+132    	; 0x2a44 <vfscanf+0x1d2>
    29c0:	c5 01       	movw	r24, r10
    29c2:	0e 94 98 13 	call	0x2730	; 0x2730 <skip_spaces>
    29c6:	97 fd       	sbrc	r25, 7
    29c8:	4b c0       	rjmp	.+150    	; 0x2a60 <vfscanf+0x1ee>
    29ca:	1f 36       	cpi	r17, 0x6F	; 111
    29cc:	59 f1       	breq	.+86     	; 0x2a24 <vfscanf+0x1b2>
    29ce:	10 37       	cpi	r17, 0x70	; 112
    29d0:	28 f4       	brcc	.+10     	; 0x29dc <vfscanf+0x16a>
    29d2:	14 36       	cpi	r17, 0x64	; 100
    29d4:	29 f1       	breq	.+74     	; 0x2a20 <vfscanf+0x1ae>
    29d6:	19 36       	cpi	r17, 0x69	; 105
    29d8:	39 f5       	brne	.+78     	; 0x2a28 <vfscanf+0x1b6>
    29da:	27 c0       	rjmp	.+78     	; 0x2a2a <vfscanf+0x1b8>
    29dc:	13 37       	cpi	r17, 0x73	; 115
    29de:	19 f0       	breq	.+6      	; 0x29e6 <vfscanf+0x174>
    29e0:	15 37       	cpi	r17, 0x75	; 117
    29e2:	11 f5       	brne	.+68     	; 0x2a28 <vfscanf+0x1b6>
    29e4:	1d c0       	rjmp	.+58     	; 0x2a20 <vfscanf+0x1ae>
    29e6:	c5 01       	movw	r24, r10
    29e8:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <fgetc>
    29ec:	ec 01       	movw	r28, r24
    29ee:	97 fd       	sbrc	r25, 7
    29f0:	11 c0       	rjmp	.+34     	; 0x2a14 <vfscanf+0x1a2>
    29f2:	0e 94 ed 16 	call	0x2dda	; 0x2dda <isspace>
    29f6:	89 2b       	or	r24, r25
    29f8:	29 f0       	breq	.+10     	; 0x2a04 <vfscanf+0x192>
    29fa:	ce 01       	movw	r24, r28
    29fc:	b5 01       	movw	r22, r10
    29fe:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <ungetc>
    2a02:	08 c0       	rjmp	.+16     	; 0x2a14 <vfscanf+0x1a2>
    2a04:	e1 14       	cp	r14, r1
    2a06:	f1 04       	cpc	r15, r1
    2a08:	19 f0       	breq	.+6      	; 0x2a10 <vfscanf+0x19e>
    2a0a:	f7 01       	movw	r30, r14
    2a0c:	c1 93       	st	Z+, r28
    2a0e:	7f 01       	movw	r14, r30
    2a10:	9a 94       	dec	r9
    2a12:	49 f7       	brne	.-46     	; 0x29e6 <vfscanf+0x174>
    2a14:	e1 14       	cp	r14, r1
    2a16:	f1 04       	cpc	r15, r1
    2a18:	a9 f0       	breq	.+42     	; 0x2a44 <vfscanf+0x1d2>
    2a1a:	f7 01       	movw	r30, r14
    2a1c:	10 82       	st	Z, r1
    2a1e:	12 c0       	rjmp	.+36     	; 0x2a44 <vfscanf+0x1d2>
    2a20:	00 62       	ori	r16, 0x20	; 32
    2a22:	03 c0       	rjmp	.+6      	; 0x2a2a <vfscanf+0x1b8>
    2a24:	00 61       	ori	r16, 0x10	; 16
    2a26:	01 c0       	rjmp	.+2      	; 0x2a2a <vfscanf+0x1b8>
    2a28:	00 64       	ori	r16, 0x40	; 64
    2a2a:	c5 01       	movw	r24, r10
    2a2c:	69 2d       	mov	r22, r9
    2a2e:	a7 01       	movw	r20, r14
    2a30:	20 2f       	mov	r18, r16
    2a32:	0e 94 b1 13 	call	0x2762	; 0x2762 <conv_int>
    2a36:	88 23       	and	r24, r24
    2a38:	29 f4       	brne	.+10     	; 0x2a44 <vfscanf+0x1d2>
    2a3a:	f5 01       	movw	r30, r10
    2a3c:	83 81       	ldd	r24, Z+3	; 0x03
    2a3e:	80 73       	andi	r24, 0x30	; 48
    2a40:	79 f4       	brne	.+30     	; 0x2a60 <vfscanf+0x1ee>
    2a42:	13 c0       	rjmp	.+38     	; 0x2a6a <vfscanf+0x1f8>
    2a44:	00 ff       	sbrs	r16, 0
    2a46:	83 94       	inc	r8
    2a48:	f5 01       	movw	r30, r10
    2a4a:	f3 80       	ldd	r15, Z+3	; 0x03
    2a4c:	f6 01       	movw	r30, r12
    2a4e:	f3 fc       	sbrc	r15, 3
    2a50:	15 91       	lpm	r17, Z+
    2a52:	f3 fe       	sbrs	r15, 3
    2a54:	11 91       	ld	r17, Z+
    2a56:	6f 01       	movw	r12, r30
    2a58:	11 23       	and	r17, r17
    2a5a:	09 f0       	breq	.+2      	; 0x2a5e <vfscanf+0x1ec>
    2a5c:	18 cf       	rjmp	.-464    	; 0x288e <vfscanf+0x1c>
    2a5e:	05 c0       	rjmp	.+10     	; 0x2a6a <vfscanf+0x1f8>
    2a60:	88 20       	and	r8, r8
    2a62:	19 f4       	brne	.+6      	; 0x2a6a <vfscanf+0x1f8>
    2a64:	2f ef       	ldi	r18, 0xFF	; 255
    2a66:	3f ef       	ldi	r19, 0xFF	; 255
    2a68:	02 c0       	rjmp	.+4      	; 0x2a6e <vfscanf+0x1fc>
    2a6a:	28 2d       	mov	r18, r8
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	c9 01       	movw	r24, r18
    2a70:	cd b7       	in	r28, 0x3d	; 61
    2a72:	de b7       	in	r29, 0x3e	; 62
    2a74:	ee e0       	ldi	r30, 0x0E	; 14
    2a76:	0c 94 c2 16 	jmp	0x2d84	; 0x2d84 <__epilogue_restores__+0x8>

00002a7a <do_rand>:
    2a7a:	a0 e0       	ldi	r26, 0x00	; 0
    2a7c:	b0 e0       	ldi	r27, 0x00	; 0
    2a7e:	e3 e4       	ldi	r30, 0x43	; 67
    2a80:	f5 e1       	ldi	r31, 0x15	; 21
    2a82:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <__prologue_saves__+0x10>
    2a86:	ec 01       	movw	r28, r24
    2a88:	a8 80       	ld	r10, Y
    2a8a:	b9 80       	ldd	r11, Y+1	; 0x01
    2a8c:	ca 80       	ldd	r12, Y+2	; 0x02
    2a8e:	db 80       	ldd	r13, Y+3	; 0x03
    2a90:	a1 14       	cp	r10, r1
    2a92:	b1 04       	cpc	r11, r1
    2a94:	c1 04       	cpc	r12, r1
    2a96:	d1 04       	cpc	r13, r1
    2a98:	41 f4       	brne	.+16     	; 0x2aaa <do_rand+0x30>
    2a9a:	84 e2       	ldi	r24, 0x24	; 36
    2a9c:	a8 2e       	mov	r10, r24
    2a9e:	89 ed       	ldi	r24, 0xD9	; 217
    2aa0:	b8 2e       	mov	r11, r24
    2aa2:	8b e5       	ldi	r24, 0x5B	; 91
    2aa4:	c8 2e       	mov	r12, r24
    2aa6:	87 e0       	ldi	r24, 0x07	; 7
    2aa8:	d8 2e       	mov	r13, r24
    2aaa:	c6 01       	movw	r24, r12
    2aac:	b5 01       	movw	r22, r10
    2aae:	2d e1       	ldi	r18, 0x1D	; 29
    2ab0:	33 ef       	ldi	r19, 0xF3	; 243
    2ab2:	41 e0       	ldi	r20, 0x01	; 1
    2ab4:	50 e0       	ldi	r21, 0x00	; 0
    2ab6:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <__divmodsi4>
    2aba:	27 ea       	ldi	r18, 0xA7	; 167
    2abc:	31 e4       	ldi	r19, 0x41	; 65
    2abe:	40 e0       	ldi	r20, 0x00	; 0
    2ac0:	50 e0       	ldi	r21, 0x00	; 0
    2ac2:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <__mulsi3>
    2ac6:	7b 01       	movw	r14, r22
    2ac8:	8c 01       	movw	r16, r24
    2aca:	c6 01       	movw	r24, r12
    2acc:	b5 01       	movw	r22, r10
    2ace:	2d e1       	ldi	r18, 0x1D	; 29
    2ad0:	33 ef       	ldi	r19, 0xF3	; 243
    2ad2:	41 e0       	ldi	r20, 0x01	; 1
    2ad4:	50 e0       	ldi	r21, 0x00	; 0
    2ad6:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <__divmodsi4>
    2ada:	ca 01       	movw	r24, r20
    2adc:	b9 01       	movw	r22, r18
    2ade:	2c ee       	ldi	r18, 0xEC	; 236
    2ae0:	34 ef       	ldi	r19, 0xF4	; 244
    2ae2:	4f ef       	ldi	r20, 0xFF	; 255
    2ae4:	5f ef       	ldi	r21, 0xFF	; 255
    2ae6:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <__mulsi3>
    2aea:	6e 0d       	add	r22, r14
    2aec:	7f 1d       	adc	r23, r15
    2aee:	80 1f       	adc	r24, r16
    2af0:	91 1f       	adc	r25, r17
    2af2:	97 ff       	sbrs	r25, 7
    2af4:	04 c0       	rjmp	.+8      	; 0x2afe <do_rand+0x84>
    2af6:	61 50       	subi	r22, 0x01	; 1
    2af8:	70 40       	sbci	r23, 0x00	; 0
    2afa:	80 40       	sbci	r24, 0x00	; 0
    2afc:	90 48       	sbci	r25, 0x80	; 128
    2afe:	68 83       	st	Y, r22
    2b00:	79 83       	std	Y+1, r23	; 0x01
    2b02:	8a 83       	std	Y+2, r24	; 0x02
    2b04:	9b 83       	std	Y+3, r25	; 0x03
    2b06:	9b 01       	movw	r18, r22
    2b08:	3f 77       	andi	r19, 0x7F	; 127
    2b0a:	c9 01       	movw	r24, r18
    2b0c:	cd b7       	in	r28, 0x3d	; 61
    2b0e:	de b7       	in	r29, 0x3e	; 62
    2b10:	ea e0       	ldi	r30, 0x0A	; 10
    2b12:	0c 94 c6 16 	jmp	0x2d8c	; 0x2d8c <__epilogue_restores__+0x10>

00002b16 <rand_r>:
    2b16:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <do_rand>
    2b1a:	08 95       	ret

00002b1c <rand>:
    2b1c:	80 e6       	ldi	r24, 0x60	; 96
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <do_rand>
    2b24:	08 95       	ret

00002b26 <srand>:
    2b26:	a0 e0       	ldi	r26, 0x00	; 0
    2b28:	b0 e0       	ldi	r27, 0x00	; 0
    2b2a:	80 93 60 00 	sts	0x0060, r24
    2b2e:	90 93 61 00 	sts	0x0061, r25
    2b32:	a0 93 62 00 	sts	0x0062, r26
    2b36:	b0 93 63 00 	sts	0x0063, r27
    2b3a:	08 95       	ret

00002b3c <strchr_P>:
    2b3c:	fc 01       	movw	r30, r24
    2b3e:	05 90       	lpm	r0, Z+
    2b40:	06 16       	cp	r0, r22
    2b42:	21 f0       	breq	.+8      	; 0x2b4c <strchr_P+0x10>
    2b44:	00 20       	and	r0, r0
    2b46:	d9 f7       	brne	.-10     	; 0x2b3e <strchr_P+0x2>
    2b48:	c0 01       	movw	r24, r0
    2b4a:	08 95       	ret
    2b4c:	31 97       	sbiw	r30, 0x01	; 1
    2b4e:	cf 01       	movw	r24, r30
    2b50:	08 95       	ret

00002b52 <fgetc>:
    2b52:	cf 93       	push	r28
    2b54:	df 93       	push	r29
    2b56:	ec 01       	movw	r28, r24
    2b58:	4b 81       	ldd	r20, Y+3	; 0x03
    2b5a:	40 ff       	sbrs	r20, 0
    2b5c:	1a c0       	rjmp	.+52     	; 0x2b92 <fgetc+0x40>
    2b5e:	46 ff       	sbrs	r20, 6
    2b60:	0a c0       	rjmp	.+20     	; 0x2b76 <fgetc+0x24>
    2b62:	4f 7b       	andi	r20, 0xBF	; 191
    2b64:	4b 83       	std	Y+3, r20	; 0x03
    2b66:	8e 81       	ldd	r24, Y+6	; 0x06
    2b68:	9f 81       	ldd	r25, Y+7	; 0x07
    2b6a:	01 96       	adiw	r24, 0x01	; 1
    2b6c:	9f 83       	std	Y+7, r25	; 0x07
    2b6e:	8e 83       	std	Y+6, r24	; 0x06
    2b70:	8a 81       	ldd	r24, Y+2	; 0x02
    2b72:	28 2f       	mov	r18, r24
    2b74:	2b c0       	rjmp	.+86     	; 0x2bcc <fgetc+0x7a>
    2b76:	42 ff       	sbrs	r20, 2
    2b78:	13 c0       	rjmp	.+38     	; 0x2ba0 <fgetc+0x4e>
    2b7a:	e8 81       	ld	r30, Y
    2b7c:	f9 81       	ldd	r31, Y+1	; 0x01
    2b7e:	80 81       	ld	r24, Z
    2b80:	28 2f       	mov	r18, r24
    2b82:	33 27       	eor	r19, r19
    2b84:	27 fd       	sbrc	r18, 7
    2b86:	30 95       	com	r19
    2b88:	21 15       	cp	r18, r1
    2b8a:	31 05       	cpc	r19, r1
    2b8c:	29 f4       	brne	.+10     	; 0x2b98 <fgetc+0x46>
    2b8e:	40 62       	ori	r20, 0x20	; 32
    2b90:	4b 83       	std	Y+3, r20	; 0x03
    2b92:	2f ef       	ldi	r18, 0xFF	; 255
    2b94:	3f ef       	ldi	r19, 0xFF	; 255
    2b96:	1b c0       	rjmp	.+54     	; 0x2bce <fgetc+0x7c>
    2b98:	31 96       	adiw	r30, 0x01	; 1
    2b9a:	f9 83       	std	Y+1, r31	; 0x01
    2b9c:	e8 83       	st	Y, r30
    2b9e:	11 c0       	rjmp	.+34     	; 0x2bc2 <fgetc+0x70>
    2ba0:	ea 85       	ldd	r30, Y+10	; 0x0a
    2ba2:	fb 85       	ldd	r31, Y+11	; 0x0b
    2ba4:	ce 01       	movw	r24, r28
    2ba6:	09 95       	icall
    2ba8:	9c 01       	movw	r18, r24
    2baa:	97 ff       	sbrs	r25, 7
    2bac:	0a c0       	rjmp	.+20     	; 0x2bc2 <fgetc+0x70>
    2bae:	9b 81       	ldd	r25, Y+3	; 0x03
    2bb0:	2f 5f       	subi	r18, 0xFF	; 255
    2bb2:	3f 4f       	sbci	r19, 0xFF	; 255
    2bb4:	11 f0       	breq	.+4      	; 0x2bba <fgetc+0x68>
    2bb6:	80 e2       	ldi	r24, 0x20	; 32
    2bb8:	01 c0       	rjmp	.+2      	; 0x2bbc <fgetc+0x6a>
    2bba:	80 e1       	ldi	r24, 0x10	; 16
    2bbc:	89 2b       	or	r24, r25
    2bbe:	8b 83       	std	Y+3, r24	; 0x03
    2bc0:	e8 cf       	rjmp	.-48     	; 0x2b92 <fgetc+0x40>
    2bc2:	8e 81       	ldd	r24, Y+6	; 0x06
    2bc4:	9f 81       	ldd	r25, Y+7	; 0x07
    2bc6:	01 96       	adiw	r24, 0x01	; 1
    2bc8:	9f 83       	std	Y+7, r25	; 0x07
    2bca:	8e 83       	std	Y+6, r24	; 0x06
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	c9 01       	movw	r24, r18
    2bd0:	df 91       	pop	r29
    2bd2:	cf 91       	pop	r28
    2bd4:	08 95       	ret

00002bd6 <fputc>:
    2bd6:	0f 93       	push	r16
    2bd8:	1f 93       	push	r17
    2bda:	cf 93       	push	r28
    2bdc:	df 93       	push	r29
    2bde:	8c 01       	movw	r16, r24
    2be0:	eb 01       	movw	r28, r22
    2be2:	8b 81       	ldd	r24, Y+3	; 0x03
    2be4:	81 ff       	sbrs	r24, 1
    2be6:	1b c0       	rjmp	.+54     	; 0x2c1e <fputc+0x48>
    2be8:	82 ff       	sbrs	r24, 2
    2bea:	0d c0       	rjmp	.+26     	; 0x2c06 <fputc+0x30>
    2bec:	2e 81       	ldd	r18, Y+6	; 0x06
    2bee:	3f 81       	ldd	r19, Y+7	; 0x07
    2bf0:	8c 81       	ldd	r24, Y+4	; 0x04
    2bf2:	9d 81       	ldd	r25, Y+5	; 0x05
    2bf4:	28 17       	cp	r18, r24
    2bf6:	39 07       	cpc	r19, r25
    2bf8:	64 f4       	brge	.+24     	; 0x2c12 <fputc+0x3c>
    2bfa:	e8 81       	ld	r30, Y
    2bfc:	f9 81       	ldd	r31, Y+1	; 0x01
    2bfe:	01 93       	st	Z+, r16
    2c00:	f9 83       	std	Y+1, r31	; 0x01
    2c02:	e8 83       	st	Y, r30
    2c04:	06 c0       	rjmp	.+12     	; 0x2c12 <fputc+0x3c>
    2c06:	e8 85       	ldd	r30, Y+8	; 0x08
    2c08:	f9 85       	ldd	r31, Y+9	; 0x09
    2c0a:	80 2f       	mov	r24, r16
    2c0c:	09 95       	icall
    2c0e:	89 2b       	or	r24, r25
    2c10:	31 f4       	brne	.+12     	; 0x2c1e <fputc+0x48>
    2c12:	8e 81       	ldd	r24, Y+6	; 0x06
    2c14:	9f 81       	ldd	r25, Y+7	; 0x07
    2c16:	01 96       	adiw	r24, 0x01	; 1
    2c18:	9f 83       	std	Y+7, r25	; 0x07
    2c1a:	8e 83       	std	Y+6, r24	; 0x06
    2c1c:	02 c0       	rjmp	.+4      	; 0x2c22 <fputc+0x4c>
    2c1e:	0f ef       	ldi	r16, 0xFF	; 255
    2c20:	1f ef       	ldi	r17, 0xFF	; 255
    2c22:	c8 01       	movw	r24, r16
    2c24:	df 91       	pop	r29
    2c26:	cf 91       	pop	r28
    2c28:	1f 91       	pop	r17
    2c2a:	0f 91       	pop	r16
    2c2c:	08 95       	ret

00002c2e <ungetc>:
    2c2e:	9c 01       	movw	r18, r24
    2c30:	fb 01       	movw	r30, r22
    2c32:	83 81       	ldd	r24, Z+3	; 0x03
    2c34:	80 ff       	sbrs	r24, 0
    2c36:	11 c0       	rjmp	.+34     	; 0x2c5a <ungetc+0x2c>
    2c38:	86 fd       	sbrc	r24, 6
    2c3a:	0f c0       	rjmp	.+30     	; 0x2c5a <ungetc+0x2c>
    2c3c:	9f ef       	ldi	r25, 0xFF	; 255
    2c3e:	2f 3f       	cpi	r18, 0xFF	; 255
    2c40:	39 07       	cpc	r19, r25
    2c42:	59 f0       	breq	.+22     	; 0x2c5a <ungetc+0x2c>
    2c44:	22 83       	std	Z+2, r18	; 0x02
    2c46:	80 64       	ori	r24, 0x40	; 64
    2c48:	8f 7d       	andi	r24, 0xDF	; 223
    2c4a:	83 83       	std	Z+3, r24	; 0x03
    2c4c:	86 81       	ldd	r24, Z+6	; 0x06
    2c4e:	97 81       	ldd	r25, Z+7	; 0x07
    2c50:	01 97       	sbiw	r24, 0x01	; 1
    2c52:	97 83       	std	Z+7, r25	; 0x07
    2c54:	86 83       	std	Z+6, r24	; 0x06
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	02 c0       	rjmp	.+4      	; 0x2c5e <ungetc+0x30>
    2c5a:	2f ef       	ldi	r18, 0xFF	; 255
    2c5c:	3f ef       	ldi	r19, 0xFF	; 255
    2c5e:	c9 01       	movw	r24, r18
    2c60:	08 95       	ret

00002c62 <__ultoa_invert>:
    2c62:	fa 01       	movw	r30, r20
    2c64:	aa 27       	eor	r26, r26
    2c66:	28 30       	cpi	r18, 0x08	; 8
    2c68:	51 f1       	breq	.+84     	; 0x2cbe <__ultoa_invert+0x5c>
    2c6a:	20 31       	cpi	r18, 0x10	; 16
    2c6c:	81 f1       	breq	.+96     	; 0x2cce <__ultoa_invert+0x6c>
    2c6e:	e8 94       	clt
    2c70:	6f 93       	push	r22
    2c72:	6e 7f       	andi	r22, 0xFE	; 254
    2c74:	6e 5f       	subi	r22, 0xFE	; 254
    2c76:	7f 4f       	sbci	r23, 0xFF	; 255
    2c78:	8f 4f       	sbci	r24, 0xFF	; 255
    2c7a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c7c:	af 4f       	sbci	r26, 0xFF	; 255
    2c7e:	b1 e0       	ldi	r27, 0x01	; 1
    2c80:	3e d0       	rcall	.+124    	; 0x2cfe <__ultoa_invert+0x9c>
    2c82:	b4 e0       	ldi	r27, 0x04	; 4
    2c84:	3c d0       	rcall	.+120    	; 0x2cfe <__ultoa_invert+0x9c>
    2c86:	67 0f       	add	r22, r23
    2c88:	78 1f       	adc	r23, r24
    2c8a:	89 1f       	adc	r24, r25
    2c8c:	9a 1f       	adc	r25, r26
    2c8e:	a1 1d       	adc	r26, r1
    2c90:	68 0f       	add	r22, r24
    2c92:	79 1f       	adc	r23, r25
    2c94:	8a 1f       	adc	r24, r26
    2c96:	91 1d       	adc	r25, r1
    2c98:	a1 1d       	adc	r26, r1
    2c9a:	6a 0f       	add	r22, r26
    2c9c:	71 1d       	adc	r23, r1
    2c9e:	81 1d       	adc	r24, r1
    2ca0:	91 1d       	adc	r25, r1
    2ca2:	a1 1d       	adc	r26, r1
    2ca4:	20 d0       	rcall	.+64     	; 0x2ce6 <__ultoa_invert+0x84>
    2ca6:	09 f4       	brne	.+2      	; 0x2caa <__ultoa_invert+0x48>
    2ca8:	68 94       	set
    2caa:	3f 91       	pop	r19
    2cac:	2a e0       	ldi	r18, 0x0A	; 10
    2cae:	26 9f       	mul	r18, r22
    2cb0:	11 24       	eor	r1, r1
    2cb2:	30 19       	sub	r19, r0
    2cb4:	30 5d       	subi	r19, 0xD0	; 208
    2cb6:	31 93       	st	Z+, r19
    2cb8:	de f6       	brtc	.-74     	; 0x2c70 <__ultoa_invert+0xe>
    2cba:	cf 01       	movw	r24, r30
    2cbc:	08 95       	ret
    2cbe:	46 2f       	mov	r20, r22
    2cc0:	47 70       	andi	r20, 0x07	; 7
    2cc2:	40 5d       	subi	r20, 0xD0	; 208
    2cc4:	41 93       	st	Z+, r20
    2cc6:	b3 e0       	ldi	r27, 0x03	; 3
    2cc8:	0f d0       	rcall	.+30     	; 0x2ce8 <__ultoa_invert+0x86>
    2cca:	c9 f7       	brne	.-14     	; 0x2cbe <__ultoa_invert+0x5c>
    2ccc:	f6 cf       	rjmp	.-20     	; 0x2cba <__ultoa_invert+0x58>
    2cce:	46 2f       	mov	r20, r22
    2cd0:	4f 70       	andi	r20, 0x0F	; 15
    2cd2:	40 5d       	subi	r20, 0xD0	; 208
    2cd4:	4a 33       	cpi	r20, 0x3A	; 58
    2cd6:	18 f0       	brcs	.+6      	; 0x2cde <__ultoa_invert+0x7c>
    2cd8:	49 5d       	subi	r20, 0xD9	; 217
    2cda:	31 fd       	sbrc	r19, 1
    2cdc:	40 52       	subi	r20, 0x20	; 32
    2cde:	41 93       	st	Z+, r20
    2ce0:	02 d0       	rcall	.+4      	; 0x2ce6 <__ultoa_invert+0x84>
    2ce2:	a9 f7       	brne	.-22     	; 0x2cce <__ultoa_invert+0x6c>
    2ce4:	ea cf       	rjmp	.-44     	; 0x2cba <__ultoa_invert+0x58>
    2ce6:	b4 e0       	ldi	r27, 0x04	; 4
    2ce8:	a6 95       	lsr	r26
    2cea:	97 95       	ror	r25
    2cec:	87 95       	ror	r24
    2cee:	77 95       	ror	r23
    2cf0:	67 95       	ror	r22
    2cf2:	ba 95       	dec	r27
    2cf4:	c9 f7       	brne	.-14     	; 0x2ce8 <__ultoa_invert+0x86>
    2cf6:	00 97       	sbiw	r24, 0x00	; 0
    2cf8:	61 05       	cpc	r22, r1
    2cfa:	71 05       	cpc	r23, r1
    2cfc:	08 95       	ret
    2cfe:	9b 01       	movw	r18, r22
    2d00:	ac 01       	movw	r20, r24
    2d02:	0a 2e       	mov	r0, r26
    2d04:	06 94       	lsr	r0
    2d06:	57 95       	ror	r21
    2d08:	47 95       	ror	r20
    2d0a:	37 95       	ror	r19
    2d0c:	27 95       	ror	r18
    2d0e:	ba 95       	dec	r27
    2d10:	c9 f7       	brne	.-14     	; 0x2d04 <__ultoa_invert+0xa2>
    2d12:	62 0f       	add	r22, r18
    2d14:	73 1f       	adc	r23, r19
    2d16:	84 1f       	adc	r24, r20
    2d18:	95 1f       	adc	r25, r21
    2d1a:	a0 1d       	adc	r26, r0
    2d1c:	08 95       	ret

00002d1e <__divmodhi4>:
    2d1e:	97 fb       	bst	r25, 7
    2d20:	09 2e       	mov	r0, r25
    2d22:	07 26       	eor	r0, r23
    2d24:	0a d0       	rcall	.+20     	; 0x2d3a <__divmodhi4_neg1>
    2d26:	77 fd       	sbrc	r23, 7
    2d28:	04 d0       	rcall	.+8      	; 0x2d32 <__divmodhi4_neg2>
    2d2a:	43 d0       	rcall	.+134    	; 0x2db2 <__udivmodhi4>
    2d2c:	06 d0       	rcall	.+12     	; 0x2d3a <__divmodhi4_neg1>
    2d2e:	00 20       	and	r0, r0
    2d30:	1a f4       	brpl	.+6      	; 0x2d38 <__divmodhi4_exit>

00002d32 <__divmodhi4_neg2>:
    2d32:	70 95       	com	r23
    2d34:	61 95       	neg	r22
    2d36:	7f 4f       	sbci	r23, 0xFF	; 255

00002d38 <__divmodhi4_exit>:
    2d38:	08 95       	ret

00002d3a <__divmodhi4_neg1>:
    2d3a:	f6 f7       	brtc	.-4      	; 0x2d38 <__divmodhi4_exit>
    2d3c:	90 95       	com	r25
    2d3e:	81 95       	neg	r24
    2d40:	9f 4f       	sbci	r25, 0xFF	; 255
    2d42:	08 95       	ret

00002d44 <__prologue_saves__>:
    2d44:	2f 92       	push	r2
    2d46:	3f 92       	push	r3
    2d48:	4f 92       	push	r4
    2d4a:	5f 92       	push	r5
    2d4c:	6f 92       	push	r6
    2d4e:	7f 92       	push	r7
    2d50:	8f 92       	push	r8
    2d52:	9f 92       	push	r9
    2d54:	af 92       	push	r10
    2d56:	bf 92       	push	r11
    2d58:	cf 92       	push	r12
    2d5a:	df 92       	push	r13
    2d5c:	ef 92       	push	r14
    2d5e:	ff 92       	push	r15
    2d60:	0f 93       	push	r16
    2d62:	1f 93       	push	r17
    2d64:	cf 93       	push	r28
    2d66:	df 93       	push	r29
    2d68:	cd b7       	in	r28, 0x3d	; 61
    2d6a:	de b7       	in	r29, 0x3e	; 62
    2d6c:	ca 1b       	sub	r28, r26
    2d6e:	db 0b       	sbc	r29, r27
    2d70:	0f b6       	in	r0, 0x3f	; 63
    2d72:	f8 94       	cli
    2d74:	de bf       	out	0x3e, r29	; 62
    2d76:	0f be       	out	0x3f, r0	; 63
    2d78:	cd bf       	out	0x3d, r28	; 61
    2d7a:	09 94       	ijmp

00002d7c <__epilogue_restores__>:
    2d7c:	2a 88       	ldd	r2, Y+18	; 0x12
    2d7e:	39 88       	ldd	r3, Y+17	; 0x11
    2d80:	48 88       	ldd	r4, Y+16	; 0x10
    2d82:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d84:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d86:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d88:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d8a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d8c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d8e:	b9 84       	ldd	r11, Y+9	; 0x09
    2d90:	c8 84       	ldd	r12, Y+8	; 0x08
    2d92:	df 80       	ldd	r13, Y+7	; 0x07
    2d94:	ee 80       	ldd	r14, Y+6	; 0x06
    2d96:	fd 80       	ldd	r15, Y+5	; 0x05
    2d98:	0c 81       	ldd	r16, Y+4	; 0x04
    2d9a:	1b 81       	ldd	r17, Y+3	; 0x03
    2d9c:	aa 81       	ldd	r26, Y+2	; 0x02
    2d9e:	b9 81       	ldd	r27, Y+1	; 0x01
    2da0:	ce 0f       	add	r28, r30
    2da2:	d1 1d       	adc	r29, r1
    2da4:	0f b6       	in	r0, 0x3f	; 63
    2da6:	f8 94       	cli
    2da8:	de bf       	out	0x3e, r29	; 62
    2daa:	0f be       	out	0x3f, r0	; 63
    2dac:	cd bf       	out	0x3d, r28	; 61
    2dae:	ed 01       	movw	r28, r26
    2db0:	08 95       	ret

00002db2 <__udivmodhi4>:
    2db2:	aa 1b       	sub	r26, r26
    2db4:	bb 1b       	sub	r27, r27
    2db6:	51 e1       	ldi	r21, 0x11	; 17
    2db8:	07 c0       	rjmp	.+14     	; 0x2dc8 <__udivmodhi4_ep>

00002dba <__udivmodhi4_loop>:
    2dba:	aa 1f       	adc	r26, r26
    2dbc:	bb 1f       	adc	r27, r27
    2dbe:	a6 17       	cp	r26, r22
    2dc0:	b7 07       	cpc	r27, r23
    2dc2:	10 f0       	brcs	.+4      	; 0x2dc8 <__udivmodhi4_ep>
    2dc4:	a6 1b       	sub	r26, r22
    2dc6:	b7 0b       	sbc	r27, r23

00002dc8 <__udivmodhi4_ep>:
    2dc8:	88 1f       	adc	r24, r24
    2dca:	99 1f       	adc	r25, r25
    2dcc:	5a 95       	dec	r21
    2dce:	a9 f7       	brne	.-22     	; 0x2dba <__udivmodhi4_loop>
    2dd0:	80 95       	com	r24
    2dd2:	90 95       	com	r25
    2dd4:	bc 01       	movw	r22, r24
    2dd6:	cd 01       	movw	r24, r26
    2dd8:	08 95       	ret

00002dda <isspace>:
    2dda:	91 11       	cpse	r25, r1
    2ddc:	06 c0       	rjmp	.+12     	; 0x2dea <__ctype_isfalse>
    2dde:	80 32       	cpi	r24, 0x20	; 32
    2de0:	19 f0       	breq	.+6      	; 0x2de8 <isspace+0xe>
    2de2:	89 50       	subi	r24, 0x09	; 9
    2de4:	85 50       	subi	r24, 0x05	; 5
    2de6:	d0 f7       	brcc	.-12     	; 0x2ddc <isspace+0x2>
    2de8:	08 95       	ret

00002dea <__ctype_isfalse>:
    2dea:	99 27       	eor	r25, r25
    2dec:	88 27       	eor	r24, r24

00002dee <__ctype_istrue>:
    2dee:	08 95       	ret

00002df0 <__mulsi3>:
    2df0:	62 9f       	mul	r22, r18
    2df2:	d0 01       	movw	r26, r0
    2df4:	73 9f       	mul	r23, r19
    2df6:	f0 01       	movw	r30, r0
    2df8:	82 9f       	mul	r24, r18
    2dfa:	e0 0d       	add	r30, r0
    2dfc:	f1 1d       	adc	r31, r1
    2dfe:	64 9f       	mul	r22, r20
    2e00:	e0 0d       	add	r30, r0
    2e02:	f1 1d       	adc	r31, r1
    2e04:	92 9f       	mul	r25, r18
    2e06:	f0 0d       	add	r31, r0
    2e08:	83 9f       	mul	r24, r19
    2e0a:	f0 0d       	add	r31, r0
    2e0c:	74 9f       	mul	r23, r20
    2e0e:	f0 0d       	add	r31, r0
    2e10:	65 9f       	mul	r22, r21
    2e12:	f0 0d       	add	r31, r0
    2e14:	99 27       	eor	r25, r25
    2e16:	72 9f       	mul	r23, r18
    2e18:	b0 0d       	add	r27, r0
    2e1a:	e1 1d       	adc	r30, r1
    2e1c:	f9 1f       	adc	r31, r25
    2e1e:	63 9f       	mul	r22, r19
    2e20:	b0 0d       	add	r27, r0
    2e22:	e1 1d       	adc	r30, r1
    2e24:	f9 1f       	adc	r31, r25
    2e26:	bd 01       	movw	r22, r26
    2e28:	cf 01       	movw	r24, r30
    2e2a:	11 24       	eor	r1, r1
    2e2c:	08 95       	ret

00002e2e <__divmodsi4>:
    2e2e:	97 fb       	bst	r25, 7
    2e30:	09 2e       	mov	r0, r25
    2e32:	05 26       	eor	r0, r21
    2e34:	0e d0       	rcall	.+28     	; 0x2e52 <__divmodsi4_neg1>
    2e36:	57 fd       	sbrc	r21, 7
    2e38:	04 d0       	rcall	.+8      	; 0x2e42 <__divmodsi4_neg2>
    2e3a:	14 d0       	rcall	.+40     	; 0x2e64 <__udivmodsi4>
    2e3c:	0a d0       	rcall	.+20     	; 0x2e52 <__divmodsi4_neg1>
    2e3e:	00 1c       	adc	r0, r0
    2e40:	38 f4       	brcc	.+14     	; 0x2e50 <__divmodsi4_exit>

00002e42 <__divmodsi4_neg2>:
    2e42:	50 95       	com	r21
    2e44:	40 95       	com	r20
    2e46:	30 95       	com	r19
    2e48:	21 95       	neg	r18
    2e4a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e4c:	4f 4f       	sbci	r20, 0xFF	; 255
    2e4e:	5f 4f       	sbci	r21, 0xFF	; 255

00002e50 <__divmodsi4_exit>:
    2e50:	08 95       	ret

00002e52 <__divmodsi4_neg1>:
    2e52:	f6 f7       	brtc	.-4      	; 0x2e50 <__divmodsi4_exit>
    2e54:	90 95       	com	r25
    2e56:	80 95       	com	r24
    2e58:	70 95       	com	r23
    2e5a:	61 95       	neg	r22
    2e5c:	7f 4f       	sbci	r23, 0xFF	; 255
    2e5e:	8f 4f       	sbci	r24, 0xFF	; 255
    2e60:	9f 4f       	sbci	r25, 0xFF	; 255
    2e62:	08 95       	ret

00002e64 <__udivmodsi4>:
    2e64:	a1 e2       	ldi	r26, 0x21	; 33
    2e66:	1a 2e       	mov	r1, r26
    2e68:	aa 1b       	sub	r26, r26
    2e6a:	bb 1b       	sub	r27, r27
    2e6c:	fd 01       	movw	r30, r26
    2e6e:	0d c0       	rjmp	.+26     	; 0x2e8a <__udivmodsi4_ep>

00002e70 <__udivmodsi4_loop>:
    2e70:	aa 1f       	adc	r26, r26
    2e72:	bb 1f       	adc	r27, r27
    2e74:	ee 1f       	adc	r30, r30
    2e76:	ff 1f       	adc	r31, r31
    2e78:	a2 17       	cp	r26, r18
    2e7a:	b3 07       	cpc	r27, r19
    2e7c:	e4 07       	cpc	r30, r20
    2e7e:	f5 07       	cpc	r31, r21
    2e80:	20 f0       	brcs	.+8      	; 0x2e8a <__udivmodsi4_ep>
    2e82:	a2 1b       	sub	r26, r18
    2e84:	b3 0b       	sbc	r27, r19
    2e86:	e4 0b       	sbc	r30, r20
    2e88:	f5 0b       	sbc	r31, r21

00002e8a <__udivmodsi4_ep>:
    2e8a:	66 1f       	adc	r22, r22
    2e8c:	77 1f       	adc	r23, r23
    2e8e:	88 1f       	adc	r24, r24
    2e90:	99 1f       	adc	r25, r25
    2e92:	1a 94       	dec	r1
    2e94:	69 f7       	brne	.-38     	; 0x2e70 <__udivmodsi4_loop>
    2e96:	60 95       	com	r22
    2e98:	70 95       	com	r23
    2e9a:	80 95       	com	r24
    2e9c:	90 95       	com	r25
    2e9e:	9b 01       	movw	r18, r22
    2ea0:	ac 01       	movw	r20, r24
    2ea2:	bd 01       	movw	r22, r26
    2ea4:	cf 01       	movw	r24, r30
    2ea6:	08 95       	ret

00002ea8 <_exit>:
    2ea8:	f8 94       	cli

00002eaa <__stop_program>:
    2eaa:	ff cf       	rjmp	.-2      	; 0x2eaa <__stop_program>
