
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010e  00800060  00002c34  00002cc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000046  0080016e  0080016e  00002dd6  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00002dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000003da  00000000  00000000  00002e36  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001951  00000000  00000000  00003210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000055f  00000000  00000000  00004b61  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e2f  00000000  00000000  000050c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002d0  00000000  00000000  00005ef0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000336  00000000  00000000  000061c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001670  00000000  00000000  000064f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00007b66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       c:	0c 94 04 01 	jmp	0x208	; 0x208 <__vector_3>
      10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      1c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      28:	0c 94 ba 00 	jmp	0x174	; 0x174 <__vector_10>
      2c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      34:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      48:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      50:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>

00000054 <spinning_line>:
      54:	10 08 04 02 01 00 18 04 03 00 00 03 04 18 00 01     ................
      64:	02 04 08 10 02 02 04 08 08 08 08 04 02 02           ..............

00000072 <__c.1764>:
      72:	45 46 47 65 66 67 00                                EFGefg.

00000079 <__c.1758>:
      79:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

00000089 <__c.1918>:
      89:	63 64 69 6e 6f 70 73 75 78 58 00                    cdinopsuxX.

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf e5       	ldi	r28, 0x5F	; 95
      9a:	d8 e0       	ldi	r29, 0x08	; 8
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e6       	ldi	r26, 0x60	; 96
      a4:	b0 e0       	ldi	r27, 0x00	; 0
      a6:	e4 e3       	ldi	r30, 0x34	; 52
      a8:	fc e2       	ldi	r31, 0x2C	; 44
      aa:	02 c0       	rjmp	.+4      	; 0xb0 <.do_copy_data_start>

000000ac <.do_copy_data_loop>:
      ac:	05 90       	lpm	r0, Z+
      ae:	0d 92       	st	X+, r0

000000b0 <.do_copy_data_start>:
      b0:	ae 36       	cpi	r26, 0x6E	; 110
      b2:	b1 07       	cpc	r27, r17
      b4:	d9 f7       	brne	.-10     	; 0xac <.do_copy_data_loop>

000000b6 <__do_clear_bss>:
      b6:	11 e0       	ldi	r17, 0x01	; 1
      b8:	ae e6       	ldi	r26, 0x6E	; 110
      ba:	b1 e0       	ldi	r27, 0x01	; 1
      bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
      be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
      c0:	a4 3b       	cpi	r26, 0xB4	; 180
      c2:	b1 07       	cpc	r27, r17
      c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
      c6:	0e 94 86 01 	call	0x30c	; 0x30c <main>
      ca:	0c 94 18 16 	jmp	0x2c30	; 0x2c30 <_exit>

000000ce <__bad_interrupt>:
      ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <delay_ms>:
		launch_effect(current_effect);
    }
}

void delay_ms(int delay)
{
      d2:	20 e0       	ldi	r18, 0x00	; 0
      d4:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      d6:	40 ea       	ldi	r20, 0xA0	; 160
      d8:	5f e0       	ldi	r21, 0x0F	; 15
      da:	05 c0       	rjmp	.+10     	; 0xe6 <delay_ms+0x14>
      dc:	fa 01       	movw	r30, r20
      de:	31 97       	sbiw	r30, 0x01	; 1
      e0:	f1 f7       	brne	.-4      	; 0xde <delay_ms+0xc>
	int i;
	for(i = 0 ; i < delay ; i++) _delay_ms(1);
      e2:	2f 5f       	subi	r18, 0xFF	; 255
      e4:	3f 4f       	sbci	r19, 0xFF	; 255
      e6:	28 17       	cp	r18, r24
      e8:	39 07       	cpc	r19, r25
      ea:	c4 f3       	brlt	.-16     	; 0xdc <delay_ms+0xa>
}
      ec:	08 95       	ret

000000ee <cube_ini>:
{
	
	//set Input and Output for data direction
	//output = 1
	//input = 0
	DDRA = 0xff; //set X_PORT for output 00011111
      ee:	8f ef       	ldi	r24, 0xFF	; 255
      f0:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0x00; //set BUTTON_PORT for input and ISP
      f2:	17 ba       	out	0x17, r1	; 23
	DDRC = 0xff; //set Y_PORT for output 00011111
      f4:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xff; //set Z/EN_PORT for output 11111100 and RXD/TXD for serial in (needs to enable with USRB)
      f6:	81 bb       	out	0x11, r24	; 17
	
	X_PORT = 0x00;
      f8:	1b ba       	out	0x1b, r1	; 27
	Y_PORT = 0x00;
      fa:	15 ba       	out	0x15, r1	; 21
	Z_PORT = 0x00;
      fc:	12 ba       	out	0x12, r1	; 18
	//set the intern pull ups where needed
	BUTTON_PORT |= (1 << BUTTON);
      fe:	c2 9a       	sbi	0x18, 2	; 24
	
	// enable LED drivers
	EN_PORT &= ~(1 << EN);
     100:	97 98       	cbi	0x12, 7	; 18

	// define Mask for output register in ISR
	_X_[0] = 0x01;
     102:	41 e0       	ldi	r20, 0x01	; 1
     104:	40 93 8b 01 	sts	0x018B, r20
	_X_[1] = 0x02;
     108:	32 e0       	ldi	r19, 0x02	; 2
     10a:	30 93 8c 01 	sts	0x018C, r19
	_X_[2] = 0x04;
     10e:	24 e0       	ldi	r18, 0x04	; 4
     110:	20 93 8d 01 	sts	0x018D, r18
	_X_[3] = 0x08;
     114:	98 e0       	ldi	r25, 0x08	; 8
     116:	90 93 8e 01 	sts	0x018E, r25
	_X_[4] = 0x10;
     11a:	80 e1       	ldi	r24, 0x10	; 16
     11c:	80 93 8f 01 	sts	0x018F, r24

	_Y_[0] = 0x10;
     120:	80 93 a9 01 	sts	0x01A9, r24
	_Y_[1] = 0x08;
     124:	90 93 aa 01 	sts	0x01AA, r25
	_Y_[2] = 0x04;
     128:	20 93 ab 01 	sts	0x01AB, r18
	_Y_[3] = 0x02;
     12c:	30 93 ac 01 	sts	0x01AC, r19
	_Y_[4] = 0x01;
     130:	40 93 ad 01 	sts	0x01AD, r20

	_Z_[0] = 0x04;
     134:	20 93 af 01 	sts	0x01AF, r18
	_Z_[1] = 0x08;
     138:	90 93 b0 01 	sts	0x01B0, r25
	_Z_[2] = 0x10;
     13c:	80 93 b1 01 	sts	0x01B1, r24
	_Z_[3] = 0x20;
     140:	80 e2       	ldi	r24, 0x20	; 32
     142:	80 93 b2 01 	sts	0x01B2, r24
	_Z_[4] = 0x40;
     146:	80 e4       	ldi	r24, 0x40	; 64
     148:	80 93 b3 01 	sts	0x01B3, r24

	// ##########Initiate timers and external interrupt############

	
	//Frame buffer interrupt Timer Counter Control Register in CTC mode enabled in Timer Interrupt Mask Register
	TCNT0 = 0x00; //initial counter value = 0
     14c:	12 be       	out	0x32, r1	; 50
	TIMSK |= (1 << OCIE0);  //Enable CTC interrupt
     14e:	89 b7       	in	r24, 0x39	; 57
     150:	82 60       	ori	r24, 0x02	; 2
     152:	89 bf       	out	0x39, r24	; 57
	// and the interrupt routine is executed.
	// 16000000/256/10 = 6250 times per second
	// There are 5 rows per layer to update..
	// 16000000/256/10/5/5 = 250 FPS
	
	OCR0 = 10; //Interrupt at counter = 10
     154:	8a e0       	ldi	r24, 0x0A	; 10
     156:	8c bf       	out	0x3c, r24	; 60
	TCCR0 |= (1 << CS02); //prescaler = 256
     158:	83 b7       	in	r24, 0x33	; 51
     15a:	84 60       	ori	r24, 0x04	; 4
     15c:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << WGM01); // Clear Timer on Compare Match (CTC) mode
     15e:	83 b7       	in	r24, 0x33	; 51
     160:	88 60       	ori	r24, 0x08	; 8
     162:	83 bf       	out	0x33, r24	; 51

	//Ext. interrupt on interrupt pin INT2 (PB2) for effect switching
	GICR |= (1 << INT2); // INT2 enable im General Interrupt Control Register
     164:	8b b7       	in	r24, 0x3b	; 59
     166:	80 62       	ori	r24, 0x20	; 32
     168:	8b bf       	out	0x3b, r24	; 59
	MCUCSR &= ~(1 << ISC2); //Execute interrupt with falling edge
     16a:	84 b7       	in	r24, 0x34	; 52
     16c:	8f 7b       	andi	r24, 0xBF	; 191
     16e:	84 bf       	out	0x34, r24	; 52

	//Activate global interrupts
	sei();
     170:	78 94       	sei
}
     172:	08 95       	ret

00000174 <__vector_10>:

//Interrupt Service Routine for Frame Buffer
ISR(TIMER0_COMP_vect)
{
     174:	1f 92       	push	r1
     176:	0f 92       	push	r0
     178:	0f b6       	in	r0, 0x3f	; 63
     17a:	0f 92       	push	r0
     17c:	11 24       	eor	r1, r1
     17e:	2f 93       	push	r18
     180:	8f 93       	push	r24
     182:	9f 93       	push	r25
     184:	ef 93       	push	r30
     186:	ff 93       	push	r31
	

	//Enable the layer
	Z_PORT = _Z_[current_layer];
     188:	e0 91 ae 01 	lds	r30, 0x01AE
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	e1 55       	subi	r30, 0x51	; 81
     190:	fe 4f       	sbci	r31, 0xFE	; 254
     192:	80 81       	ld	r24, Z
     194:	82 bb       	out	0x12, r24	; 18
	
		for(current_Yrow = 0 ; current_Yrow < 5 ; current_Yrow++){	
     196:	10 92 70 01 	sts	0x0170, r1
     19a:	1e c0       	rjmp	.+60     	; 0x1d8 <__vector_10+0x64>
			X_PORT = cube[current_layer][current_Yrow];
     19c:	80 91 ae 01 	lds	r24, 0x01AE
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	20 91 70 01 	lds	r18, 0x0170
     1a6:	fc 01       	movw	r30, r24
     1a8:	ee 0f       	add	r30, r30
     1aa:	ff 1f       	adc	r31, r31
     1ac:	ee 0f       	add	r30, r30
     1ae:	ff 1f       	adc	r31, r31
     1b0:	e8 0f       	add	r30, r24
     1b2:	f9 1f       	adc	r31, r25
     1b4:	e2 0f       	add	r30, r18
     1b6:	f1 1d       	adc	r31, r1
     1b8:	e0 57       	subi	r30, 0x70	; 112
     1ba:	fe 4f       	sbci	r31, 0xFE	; 254
     1bc:	80 81       	ld	r24, Z
     1be:	8b bb       	out	0x1b, r24	; 27
			Y_PORT = _Y_[current_Yrow];
     1c0:	e0 91 70 01 	lds	r30, 0x0170
     1c4:	f0 e0       	ldi	r31, 0x00	; 0
     1c6:	e7 55       	subi	r30, 0x57	; 87
     1c8:	fe 4f       	sbci	r31, 0xFE	; 254
     1ca:	80 81       	ld	r24, Z
     1cc:	85 bb       	out	0x15, r24	; 21
	

	//Enable the layer
	Z_PORT = _Z_[current_layer];
	
		for(current_Yrow = 0 ; current_Yrow < 5 ; current_Yrow++){	
     1ce:	80 91 70 01 	lds	r24, 0x0170
     1d2:	8f 5f       	subi	r24, 0xFF	; 255
     1d4:	80 93 70 01 	sts	0x0170, r24
     1d8:	80 91 70 01 	lds	r24, 0x0170
     1dc:	85 30       	cpi	r24, 0x05	; 5
     1de:	f0 f2       	brcs	.-68     	; 0x19c <__vector_10+0x28>
		}
 
	
	//Running through 1 layer wins vs. updating all layers during an interrupt.
	//Because the ISR comes faster to an end and the cube has a faster update cycle to the buffer.
	if(current_layer++ == 4) current_layer = 0;
     1e0:	80 91 ae 01 	lds	r24, 0x01AE
     1e4:	8f 5f       	subi	r24, 0xFF	; 255
     1e6:	80 93 ae 01 	sts	0x01AE, r24
     1ea:	81 50       	subi	r24, 0x01	; 1
     1ec:	84 30       	cpi	r24, 0x04	; 4
     1ee:	11 f4       	brne	.+4      	; 0x1f4 <__vector_10+0x80>
     1f0:	10 92 ae 01 	sts	0x01AE, r1
}
     1f4:	ff 91       	pop	r31
     1f6:	ef 91       	pop	r30
     1f8:	9f 91       	pop	r25
     1fa:	8f 91       	pop	r24
     1fc:	2f 91       	pop	r18
     1fe:	0f 90       	pop	r0
     200:	0f be       	out	0x3f, r0	; 63
     202:	0f 90       	pop	r0
     204:	1f 90       	pop	r1
     206:	18 95       	reti

00000208 <__vector_3>:

//Interrupt Service Routine for effect switching
ISR(INT2_vect)
{
     208:	1f 92       	push	r1
     20a:	0f 92       	push	r0
     20c:	0f b6       	in	r0, 0x3f	; 63
     20e:	0f 92       	push	r0
     210:	11 24       	eor	r1, r1
     212:	8f 93       	push	r24

	if(current_effect++ == 4) current_effect = 0;
     214:	80 91 8a 01 	lds	r24, 0x018A
     218:	8f 5f       	subi	r24, 0xFF	; 255
     21a:	80 93 8a 01 	sts	0x018A, r24
     21e:	81 50       	subi	r24, 0x01	; 1
     220:	84 30       	cpi	r24, 0x04	; 4
     222:	11 f4       	brne	.+4      	; 0x228 <__vector_3+0x20>
     224:	10 92 8a 01 	sts	0x018A, r1

}
     228:	8f 91       	pop	r24
     22a:	0f 90       	pop	r0
     22c:	0f be       	out	0x3f, r0	; 63
     22e:	0f 90       	pop	r0
     230:	1f 90       	pop	r1
     232:	18 95       	reti

00000234 <launch_effect>:
}

void launch_effect(unsigned char choice)
{

	switch(choice)
     234:	82 30       	cpi	r24, 0x02	; 2
     236:	49 f1       	breq	.+82     	; 0x28a <launch_effect+0x56>
     238:	83 30       	cpi	r24, 0x03	; 3
     23a:	28 f4       	brcc	.+10     	; 0x246 <launch_effect+0x12>
     23c:	88 23       	and	r24, r24
     23e:	51 f0       	breq	.+20     	; 0x254 <launch_effect+0x20>
     240:	81 30       	cpi	r24, 0x01	; 1
     242:	e9 f5       	brne	.+122    	; 0x2be <launch_effect+0x8a>
     244:	19 c0       	rjmp	.+50     	; 0x278 <launch_effect+0x44>
     246:	84 30       	cpi	r24, 0x04	; 4
     248:	91 f1       	breq	.+100    	; 0x2ae <launch_effect+0x7a>
     24a:	84 30       	cpi	r24, 0x04	; 4
     24c:	38 f1       	brcs	.+78     	; 0x29c <launch_effect+0x68>
     24e:	85 30       	cpi	r24, 0x05	; 5
     250:	b1 f5       	brne	.+108    	; 0x2be <launch_effect+0x8a>
     252:	09 c0       	rjmp	.+18     	; 0x266 <launch_effect+0x32>
	{
		case 0:
		effect_everything_bitches(1,10,10);
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	6a e0       	ldi	r22, 0x0A	; 10
     25a:	70 e0       	ldi	r23, 0x00	; 0
     25c:	4a e0       	ldi	r20, 0x0A	; 10
     25e:	50 e0       	ldi	r21, 0x00	; 0
     260:	0e 94 55 0b 	call	0x16aa	; 0x16aa <effect_everything_bitches>
     264:	08 95       	ret
		break;
		
		case 5:
		effect_noise(1,10,10);
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	6a e0       	ldi	r22, 0x0A	; 10
     26c:	70 e0       	ldi	r23, 0x00	; 0
     26e:	4a e0       	ldi	r20, 0x0A	; 10
     270:	50 e0       	ldi	r21, 0x00	; 0
     272:	0e 94 c6 06 	call	0xd8c	; 0xd8c <effect_noise>
     276:	08 95       	ret
		break;

		case 1:
		effect_rings(1,10,0);
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	6a e0       	ldi	r22, 0x0A	; 10
     27e:	70 e0       	ldi	r23, 0x00	; 0
     280:	40 e0       	ldi	r20, 0x00	; 0
     282:	50 e0       	ldi	r21, 0x00	; 0
     284:	0e 94 55 09 	call	0x12aa	; 0x12aa <effect_rings>
     288:	08 95       	ret
		break;
		
		case 2:
		effect_explosion(1,10,0);
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	6a e0       	ldi	r22, 0x0A	; 10
     290:	70 e0       	ldi	r23, 0x00	; 0
     292:	40 e0       	ldi	r20, 0x00	; 0
     294:	50 e0       	ldi	r21, 0x00	; 0
     296:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <effect_explosion>
     29a:	08 95       	ret
		break;
		
		case 3:
		effect_snow(1,10,370);
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	6a e0       	ldi	r22, 0x0A	; 10
     2a2:	70 e0       	ldi	r23, 0x00	; 0
     2a4:	42 e7       	ldi	r20, 0x72	; 114
     2a6:	51 e0       	ldi	r21, 0x01	; 1
     2a8:	0e 94 01 07 	call	0xe02	; 0xe02 <effect_snow>
     2ac:	08 95       	ret
		break;
		
		case 4:
		effect_blink(1,10,10);
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	6a e0       	ldi	r22, 0x0A	; 10
     2b4:	70 e0       	ldi	r23, 0x00	; 0
     2b6:	4a e0       	ldi	r20, 0x0A	; 10
     2b8:	50 e0       	ldi	r21, 0x00	; 0
     2ba:	0e 94 57 06 	call	0xcae	; 0xcae <effect_blink>
     2be:	08 95       	ret

000002c0 <boot_check>:
	if(current_effect++ == 4) current_effect = 0;

}

void boot_check(int delay)
{
     2c0:	cf 93       	push	r28
     2c2:	df 93       	push	r29
     2c4:	ec 01       	movw	r28, r24
	//earn some blink blink for that ;)
	int i;
	
	for(i = 0 ; i < 1 ; i++)
	{
		fill(0x1f);
     2c6:	8f e1       	ldi	r24, 0x1F	; 31
     2c8:	0e 94 30 05 	call	0xa60	; 0xa60 <fill>
     2cc:	20 e0       	ldi	r18, 0x00	; 0
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	40 ea       	ldi	r20, 0xA0	; 160
     2d2:	5f e0       	ldi	r21, 0x0F	; 15
     2d4:	05 c0       	rjmp	.+10     	; 0x2e0 <boot_check+0x20>
     2d6:	ca 01       	movw	r24, r20
     2d8:	01 97       	sbiw	r24, 0x01	; 1
     2da:	f1 f7       	brne	.-4      	; 0x2d8 <boot_check+0x18>
}

void delay_ms(int delay)
{
	int i;
	for(i = 0 ; i < delay ; i++) _delay_ms(1);
     2dc:	2f 5f       	subi	r18, 0xFF	; 255
     2de:	3f 4f       	sbci	r19, 0xFF	; 255
     2e0:	2c 17       	cp	r18, r28
     2e2:	3d 07       	cpc	r19, r29
     2e4:	c4 f3       	brlt	.-16     	; 0x2d6 <boot_check+0x16>
	
	for(i = 0 ; i < 1 ; i++)
	{
		fill(0x1f);
		delay_ms(delay);
		fill(0x00);
     2e6:	80 e0       	ldi	r24, 0x00	; 0
     2e8:	0e 94 30 05 	call	0xa60	; 0xa60 <fill>
     2ec:	20 e0       	ldi	r18, 0x00	; 0
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	40 ea       	ldi	r20, 0xA0	; 160
     2f2:	5f e0       	ldi	r21, 0x0F	; 15
     2f4:	05 c0       	rjmp	.+10     	; 0x300 <boot_check+0x40>
     2f6:	ca 01       	movw	r24, r20
     2f8:	01 97       	sbiw	r24, 0x01	; 1
     2fa:	f1 f7       	brne	.-4      	; 0x2f8 <boot_check+0x38>
}

void delay_ms(int delay)
{
	int i;
	for(i = 0 ; i < delay ; i++) _delay_ms(1);
     2fc:	2f 5f       	subi	r18, 0xFF	; 255
     2fe:	3f 4f       	sbci	r19, 0xFF	; 255
     300:	2c 17       	cp	r18, r28
     302:	3d 07       	cpc	r19, r29
     304:	c4 f3       	brlt	.-16     	; 0x2f6 <boot_check+0x36>
		delay_ms(delay);
		fill(0x00);
		delay_ms(delay);
	}

}
     306:	df 91       	pop	r29
     308:	cf 91       	pop	r28
     30a:	08 95       	ret

0000030c <main>:

int main(void)
{

	//Set the layer and Y row to start drawing at
	current_layer = 0x00;
     30c:	10 92 ae 01 	sts	0x01AE, r1
	current_Yrow = 0x00;
     310:	10 92 70 01 	sts	0x0170, r1
	//Set effect to start with
	current_effect = 0;
     314:	10 92 8a 01 	sts	0x018A, r1
 	
	cube_ini();
     318:	0e 94 77 00 	call	0xee	; 0xee <cube_ini>

	boot_check(500);
     31c:	84 ef       	ldi	r24, 0xF4	; 244
     31e:	91 e0       	ldi	r25, 0x01	; 1
     320:	0e 94 60 01 	call	0x2c0	; 0x2c0 <boot_check>
	
	while(1)
    {
		//setLED(0,0,0);
		launch_effect(current_effect);
     324:	80 91 8a 01 	lds	r24, 0x018A
     328:	0e 94 1a 01 	call	0x234	; 0x234 <launch_effect>
     32c:	fb cf       	rjmp	.-10     	; 0x324 <main+0x18>

0000032e <setLED>:
// Voxel comes from volumetric and pixel. It describes a data point of 3D grid graphic
// Voxel == 1 LED in the 3D cube grid
// Set a voxel (LED) in the cube buffer

void setLED(int x, int y, int z)
{ 
     32e:	dc 01       	movw	r26, r24
}

// This function validates that we are drawing inside the cube.
unsigned char inrange(int x, int y, int z)
{
	if (x >= 0 && x < 5 && y >= 0 && y < 5 && z >= 0 && z < 5){
     330:	85 30       	cpi	r24, 0x05	; 5
     332:	91 05       	cpc	r25, r1
     334:	f8 f4       	brcc	.+62     	; 0x374 <setLED+0x46>
     336:	77 fd       	sbrc	r23, 7
     338:	1d c0       	rjmp	.+58     	; 0x374 <setLED+0x46>
     33a:	65 30       	cpi	r22, 0x05	; 5
     33c:	71 05       	cpc	r23, r1
     33e:	d4 f4       	brge	.+52     	; 0x374 <setLED+0x46>
     340:	57 fd       	sbrc	r21, 7
     342:	18 c0       	rjmp	.+48     	; 0x374 <setLED+0x46>
     344:	45 30       	cpi	r20, 0x05	; 5
     346:	51 05       	cpc	r21, r1
     348:	ac f4       	brge	.+42     	; 0x374 <setLED+0x46>
// Voxel == 1 LED in the 3D cube grid
// Set a voxel (LED) in the cube buffer

void setLED(int x, int y, int z)
{ 
	if (inrange(x, y, z)) cube[z][y] |= (1 << x);
     34a:	fa 01       	movw	r30, r20
     34c:	ee 0f       	add	r30, r30
     34e:	ff 1f       	adc	r31, r31
     350:	ee 0f       	add	r30, r30
     352:	ff 1f       	adc	r31, r31
     354:	e4 0f       	add	r30, r20
     356:	f5 1f       	adc	r31, r21
     358:	e6 0f       	add	r30, r22
     35a:	f7 1f       	adc	r31, r23
     35c:	e0 57       	subi	r30, 0x70	; 112
     35e:	fe 4f       	sbci	r31, 0xFE	; 254
     360:	20 81       	ld	r18, Z
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	02 c0       	rjmp	.+4      	; 0x36c <setLED+0x3e>
     368:	88 0f       	add	r24, r24
     36a:	99 1f       	adc	r25, r25
     36c:	aa 95       	dec	r26
     36e:	e2 f7       	brpl	.-8      	; 0x368 <setLED+0x3a>
     370:	28 2b       	or	r18, r24
     372:	20 83       	st	Z, r18
     374:	08 95       	ret

00000376 <clrLED>:
}

// Clear a voxel (LED) in the cube buffer
void clrLED(int x, int y, int z)
{
     376:	dc 01       	movw	r26, r24
}

// This function validates that we are drawing inside the cube.
unsigned char inrange(int x, int y, int z)
{
	if (x >= 0 && x < 5 && y >= 0 && y < 5 && z >= 0 && z < 5){
     378:	85 30       	cpi	r24, 0x05	; 5
     37a:	91 05       	cpc	r25, r1
     37c:	00 f5       	brcc	.+64     	; 0x3be <clrLED+0x48>
     37e:	77 fd       	sbrc	r23, 7
     380:	1e c0       	rjmp	.+60     	; 0x3be <clrLED+0x48>
     382:	65 30       	cpi	r22, 0x05	; 5
     384:	71 05       	cpc	r23, r1
     386:	dc f4       	brge	.+54     	; 0x3be <clrLED+0x48>
     388:	57 fd       	sbrc	r21, 7
     38a:	19 c0       	rjmp	.+50     	; 0x3be <clrLED+0x48>
     38c:	45 30       	cpi	r20, 0x05	; 5
     38e:	51 05       	cpc	r21, r1
     390:	b4 f4       	brge	.+44     	; 0x3be <clrLED+0x48>
}

// Clear a voxel (LED) in the cube buffer
void clrLED(int x, int y, int z)
{
	if (inrange(x, y, z)) cube[z][y] &= ~(1 << x);
     392:	fa 01       	movw	r30, r20
     394:	ee 0f       	add	r30, r30
     396:	ff 1f       	adc	r31, r31
     398:	ee 0f       	add	r30, r30
     39a:	ff 1f       	adc	r31, r31
     39c:	e4 0f       	add	r30, r20
     39e:	f5 1f       	adc	r31, r21
     3a0:	e6 0f       	add	r30, r22
     3a2:	f7 1f       	adc	r31, r23
     3a4:	e0 57       	subi	r30, 0x70	; 112
     3a6:	fe 4f       	sbci	r31, 0xFE	; 254
     3a8:	20 81       	ld	r18, Z
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <clrLED+0x3e>
     3b0:	88 0f       	add	r24, r24
     3b2:	99 1f       	adc	r25, r25
     3b4:	aa 95       	dec	r26
     3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <clrLED+0x3a>
     3b8:	80 95       	com	r24
     3ba:	82 23       	and	r24, r18
     3bc:	80 83       	st	Z, r24
     3be:	08 95       	ret

000003c0 <getLED>:
}

// Get the current status of a LED
unsigned char getLED(int x, int y, int z)
{
     3c0:	9c 01       	movw	r18, r24
}

// This function validates that we are drawing inside the cube.
unsigned char inrange(int x, int y, int z)
{
	if (x >= 0 && x < 5 && y >= 0 && y < 5 && z >= 0 && z < 5){
     3c2:	85 30       	cpi	r24, 0x05	; 5
     3c4:	91 05       	cpc	r25, r1
     3c6:	f0 f4       	brcc	.+60     	; 0x404 <getLED+0x44>
     3c8:	77 fd       	sbrc	r23, 7
     3ca:	1c c0       	rjmp	.+56     	; 0x404 <getLED+0x44>
     3cc:	65 30       	cpi	r22, 0x05	; 5
     3ce:	71 05       	cpc	r23, r1
     3d0:	cc f4       	brge	.+50     	; 0x404 <getLED+0x44>
     3d2:	57 fd       	sbrc	r21, 7
     3d4:	17 c0       	rjmp	.+46     	; 0x404 <getLED+0x44>
     3d6:	45 30       	cpi	r20, 0x05	; 5
     3d8:	51 05       	cpc	r21, r1
     3da:	a4 f4       	brge	.+40     	; 0x404 <getLED+0x44>

// Get the current status of a LED
unsigned char getLED(int x, int y, int z)
{
	if (inrange(x, y, z)){
		if (cube[z][y] & (1 << x)){
     3dc:	fa 01       	movw	r30, r20
     3de:	ee 0f       	add	r30, r30
     3e0:	ff 1f       	adc	r31, r31
     3e2:	ee 0f       	add	r30, r30
     3e4:	ff 1f       	adc	r31, r31
     3e6:	e4 0f       	add	r30, r20
     3e8:	f5 1f       	adc	r31, r21
     3ea:	e6 0f       	add	r30, r22
     3ec:	f7 1f       	adc	r31, r23
     3ee:	e0 57       	subi	r30, 0x70	; 112
     3f0:	fe 4f       	sbci	r31, 0xFE	; 254
     3f2:	80 81       	ld	r24, Z
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	02 c0       	rjmp	.+4      	; 0x3fc <getLED+0x3c>
     3f8:	95 95       	asr	r25
     3fa:	87 95       	ror	r24
     3fc:	2a 95       	dec	r18
     3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <getLED+0x38>
     400:	81 70       	andi	r24, 0x01	; 1
     402:	08 95       	ret
     404:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	else{
		return 0x00;
	}
}
     406:	08 95       	ret

00000408 <inrange>:

// This function validates that we are drawing inside the cube.
unsigned char inrange(int x, int y, int z)
{
	if (x >= 0 && x < 5 && y >= 0 && y < 5 && z >= 0 && z < 5){
     408:	05 97       	sbiw	r24, 0x05	; 5
     40a:	78 f4       	brcc	.+30     	; 0x42a <inrange+0x22>
     40c:	77 fd       	sbrc	r23, 7
     40e:	0d c0       	rjmp	.+26     	; 0x42a <inrange+0x22>
     410:	65 30       	cpi	r22, 0x05	; 5
     412:	71 05       	cpc	r23, r1
     414:	54 f4       	brge	.+20     	; 0x42a <inrange+0x22>
     416:	57 fd       	sbrc	r21, 7
     418:	08 c0       	rjmp	.+16     	; 0x42a <inrange+0x22>
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	45 30       	cpi	r20, 0x05	; 5
     41e:	51 05       	cpc	r21, r1
     420:	0c f0       	brlt	.+2      	; 0x424 <inrange+0x1c>
     422:	91 e0       	ldi	r25, 0x01	; 1
     424:	81 e0       	ldi	r24, 0x01	; 1
     426:	98 27       	eor	r25, r24
     428:	01 c0       	rjmp	.+2      	; 0x42c <inrange+0x24>
     42a:	90 e0       	ldi	r25, 0x00	; 0
	} 
	else{
		// One of the coordinates was outside the cube.
		return 0x00;
	}
}
     42c:	89 2f       	mov	r24, r25
     42e:	08 95       	ret

00000430 <alterLED>:

// Alter the state of  a voxel in the cube buffer
// This function was made in order to make set and clr versions
// of other functions without writing two almost identical functions
void alterLED(int x, int y, int z, int state)
{
     430:	dc 01       	movw	r26, r24
	if (state == 1){
     432:	21 30       	cpi	r18, 0x01	; 1
     434:	31 05       	cpc	r19, r1
     436:	09 f5       	brne	.+66     	; 0x47a <alterLED+0x4a>
}

// This function validates that we are drawing inside the cube.
unsigned char inrange(int x, int y, int z)
{
	if (x >= 0 && x < 5 && y >= 0 && y < 5 && z >= 0 && z < 5){
     438:	85 30       	cpi	r24, 0x05	; 5
     43a:	91 05       	cpc	r25, r1
     43c:	00 f5       	brcc	.+64     	; 0x47e <alterLED+0x4e>
     43e:	77 fd       	sbrc	r23, 7
     440:	1e c0       	rjmp	.+60     	; 0x47e <alterLED+0x4e>
     442:	65 30       	cpi	r22, 0x05	; 5
     444:	71 05       	cpc	r23, r1
     446:	dc f4       	brge	.+54     	; 0x47e <alterLED+0x4e>
     448:	57 fd       	sbrc	r21, 7
     44a:	19 c0       	rjmp	.+50     	; 0x47e <alterLED+0x4e>
     44c:	45 30       	cpi	r20, 0x05	; 5
     44e:	51 05       	cpc	r21, r1
     450:	b4 f4       	brge	.+44     	; 0x47e <alterLED+0x4e>
// Voxel == 1 LED in the 3D cube grid
// Set a voxel (LED) in the cube buffer

void setLED(int x, int y, int z)
{ 
	if (inrange(x, y, z)) cube[z][y] |= (1 << x);
     452:	fa 01       	movw	r30, r20
     454:	ee 0f       	add	r30, r30
     456:	ff 1f       	adc	r31, r31
     458:	ee 0f       	add	r30, r30
     45a:	ff 1f       	adc	r31, r31
     45c:	e4 0f       	add	r30, r20
     45e:	f5 1f       	adc	r31, r21
     460:	e6 0f       	add	r30, r22
     462:	f7 1f       	adc	r31, r23
     464:	e0 57       	subi	r30, 0x70	; 112
     466:	fe 4f       	sbci	r31, 0xFE	; 254
     468:	80 81       	ld	r24, Z
     46a:	02 c0       	rjmp	.+4      	; 0x470 <alterLED+0x40>
     46c:	22 0f       	add	r18, r18
     46e:	33 1f       	adc	r19, r19
     470:	aa 95       	dec	r26
     472:	e2 f7       	brpl	.-8      	; 0x46c <alterLED+0x3c>
     474:	82 2b       	or	r24, r18
     476:	80 83       	st	Z, r24
     478:	08 95       	ret
{
	if (state == 1){
		setLED(x,y,z);
	} 
	else{
		clrLED(x,y,z);
     47a:	0e 94 bb 01 	call	0x376	; 0x376 <clrLED>
     47e:	08 95       	ret

00000480 <flpLED>:
}

// Flip the state of a LED.
// If the voxel in the buffer is 1, its turned into a 0, and vice versa.
void flpLED(int x, int y, int z)
{
     480:	dc 01       	movw	r26, r24
}

// This function validates that we are drawing inside the cube.
unsigned char inrange(int x, int y, int z)
{
	if (x >= 0 && x < 5 && y >= 0 && y < 5 && z >= 0 && z < 5){
     482:	85 30       	cpi	r24, 0x05	; 5
     484:	91 05       	cpc	r25, r1
     486:	f8 f4       	brcc	.+62     	; 0x4c6 <flpLED+0x46>
     488:	77 fd       	sbrc	r23, 7
     48a:	1d c0       	rjmp	.+58     	; 0x4c6 <flpLED+0x46>
     48c:	65 30       	cpi	r22, 0x05	; 5
     48e:	71 05       	cpc	r23, r1
     490:	d4 f4       	brge	.+52     	; 0x4c6 <flpLED+0x46>
     492:	57 fd       	sbrc	r21, 7
     494:	18 c0       	rjmp	.+48     	; 0x4c6 <flpLED+0x46>
     496:	45 30       	cpi	r20, 0x05	; 5
     498:	51 05       	cpc	r21, r1
     49a:	ac f4       	brge	.+42     	; 0x4c6 <flpLED+0x46>

// Flip the state of a LED.
// If the voxel in the buffer is 1, its turned into a 0, and vice versa.
void flpLED(int x, int y, int z)
{
	if (inrange(x, y, z)) cube[z][y] ^= (1 << x);
     49c:	fa 01       	movw	r30, r20
     49e:	ee 0f       	add	r30, r30
     4a0:	ff 1f       	adc	r31, r31
     4a2:	ee 0f       	add	r30, r30
     4a4:	ff 1f       	adc	r31, r31
     4a6:	e4 0f       	add	r30, r20
     4a8:	f5 1f       	adc	r31, r21
     4aa:	e6 0f       	add	r30, r22
     4ac:	f7 1f       	adc	r31, r23
     4ae:	e0 57       	subi	r30, 0x70	; 112
     4b0:	fe 4f       	sbci	r31, 0xFE	; 254
     4b2:	20 81       	ld	r18, Z
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	02 c0       	rjmp	.+4      	; 0x4be <flpLED+0x3e>
     4ba:	88 0f       	add	r24, r24
     4bc:	99 1f       	adc	r25, r25
     4be:	aa 95       	dec	r26
     4c0:	e2 f7       	brpl	.-8      	; 0x4ba <flpLED+0x3a>
     4c2:	28 27       	eor	r18, r24
     4c4:	20 83       	st	Z, r18
     4c6:	08 95       	ret

000004c8 <setplane_z>:
// i.e. draws a horizonal plane on a given level (z)
void setplane_z (int z)
{
	int y;
	// Loop the 5 rows on the given level and write 1 to the bits.
	for(y = 0 ; y < 5 ; y++) cube[z][y] = 0x1f;
     4c8:	fc 01       	movw	r30, r24
     4ca:	ee 0f       	add	r30, r30
     4cc:	ff 1f       	adc	r31, r31
     4ce:	ee 0f       	add	r30, r30
     4d0:	ff 1f       	adc	r31, r31
     4d2:	e8 0f       	add	r30, r24
     4d4:	f9 1f       	adc	r31, r25
     4d6:	e0 57       	subi	r30, 0x70	; 112
     4d8:	fe 4f       	sbci	r31, 0xFE	; 254
     4da:	8f e1       	ldi	r24, 0x1F	; 31
     4dc:	80 83       	st	Z, r24
     4de:	81 83       	std	Z+1, r24	; 0x01
     4e0:	82 83       	std	Z+2, r24	; 0x02
     4e2:	83 83       	std	Z+3, r24	; 0x03
     4e4:	84 83       	std	Z+4, r24	; 0x04
}
     4e6:	08 95       	ret

000004e8 <clrplane_z>:

// Clears all the leds on X and Y for a given Z
void clrplane_z (int z)
{
	int y;
	for(y = 0 ; y < 5 ; y++) cube[z][y] = 0x00;
     4e8:	fc 01       	movw	r30, r24
     4ea:	ee 0f       	add	r30, r30
     4ec:	ff 1f       	adc	r31, r31
     4ee:	ee 0f       	add	r30, r30
     4f0:	ff 1f       	adc	r31, r31
     4f2:	e8 0f       	add	r30, r24
     4f4:	f9 1f       	adc	r31, r25
     4f6:	e0 57       	subi	r30, 0x70	; 112
     4f8:	fe 4f       	sbci	r31, 0xFE	; 254
     4fa:	10 82       	st	Z, r1
     4fc:	11 82       	std	Z+1, r1	; 0x01
     4fe:	12 82       	std	Z+2, r1	; 0x02
     500:	13 82       	std	Z+3, r1	; 0x03
     502:	14 82       	std	Z+4, r1	; 0x04
}
     504:	08 95       	ret

00000506 <setplane_x>:
	// the actual bits in each row of each layer
	// We loop them all, and set the apropriate bit.
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
			// Set a bit, and shift it inwards to the right X
			cube[z][y] |= (1 << x);
     506:	21 e0       	ldi	r18, 0x01	; 1
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	02 c0       	rjmp	.+4      	; 0x510 <setplane_x+0xa>
     50c:	22 0f       	add	r18, r18
     50e:	33 1f       	adc	r19, r19
     510:	8a 95       	dec	r24
     512:	e2 f7       	brpl	.-8      	; 0x50c <setplane_x+0x6>
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	12 c0       	rjmp	.+36     	; 0x53e <setplane_x+0x38>
     51a:	fd 01       	movw	r30, r26
     51c:	e4 0f       	add	r30, r20
     51e:	f5 1f       	adc	r31, r21
     520:	e0 57       	subi	r30, 0x70	; 112
     522:	fe 4f       	sbci	r31, 0xFE	; 254
     524:	80 81       	ld	r24, Z
     526:	82 2b       	or	r24, r18
     528:	80 83       	st	Z, r24
	int y;
	// Since coordinates along the X axis are
	// the actual bits in each row of each layer
	// We loop them all, and set the apropriate bit.
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
     52a:	4f 5f       	subi	r20, 0xFF	; 255
     52c:	5f 4f       	sbci	r21, 0xFF	; 255
     52e:	45 30       	cpi	r20, 0x05	; 5
     530:	51 05       	cpc	r21, r1
     532:	99 f7       	brne	.-26     	; 0x51a <setplane_x+0x14>
	int z;
	int y;
	// Since coordinates along the X axis are
	// the actual bits in each row of each layer
	// We loop them all, and set the apropriate bit.
	for(z = 0 ; z < 5 ; z++){
     534:	6f 5f       	subi	r22, 0xFF	; 255
     536:	7f 4f       	sbci	r23, 0xFF	; 255
     538:	65 30       	cpi	r22, 0x05	; 5
     53a:	71 05       	cpc	r23, r1
     53c:	51 f0       	breq	.+20     	; 0x552 <setplane_x+0x4c>
     53e:	40 e0       	ldi	r20, 0x00	; 0
     540:	50 e0       	ldi	r21, 0x00	; 0
		for(y = 0 ; y < 5 ; y++){
			// Set a bit, and shift it inwards to the right X
			cube[z][y] |= (1 << x);
     542:	db 01       	movw	r26, r22
     544:	aa 0f       	add	r26, r26
     546:	bb 1f       	adc	r27, r27
     548:	aa 0f       	add	r26, r26
     54a:	bb 1f       	adc	r27, r27
     54c:	a6 0f       	add	r26, r22
     54e:	b7 1f       	adc	r27, r23
     550:	e4 cf       	rjmp	.-56     	; 0x51a <setplane_x+0x14>
     552:	08 95       	ret

00000554 <clrplane_x>:
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
			cube[z][y] &= ~(1 << x);
     554:	21 e0       	ldi	r18, 0x01	; 1
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	02 c0       	rjmp	.+4      	; 0x55e <clrplane_x+0xa>
     55a:	22 0f       	add	r18, r18
     55c:	33 1f       	adc	r19, r19
     55e:	8a 95       	dec	r24
     560:	e2 f7       	brpl	.-8      	; 0x55a <clrplane_x+0x6>
     562:	20 95       	com	r18
     564:	60 e0       	ldi	r22, 0x00	; 0
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	12 c0       	rjmp	.+36     	; 0x58e <clrplane_x+0x3a>
     56a:	fd 01       	movw	r30, r26
     56c:	e4 0f       	add	r30, r20
     56e:	f5 1f       	adc	r31, r21
     570:	e0 57       	subi	r30, 0x70	; 112
     572:	fe 4f       	sbci	r31, 0xFE	; 254
     574:	80 81       	ld	r24, Z
     576:	82 23       	and	r24, r18
     578:	80 83       	st	Z, r24
void clrplane_x (int x)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
     57a:	4f 5f       	subi	r20, 0xFF	; 255
     57c:	5f 4f       	sbci	r21, 0xFF	; 255
     57e:	45 30       	cpi	r20, 0x05	; 5
     580:	51 05       	cpc	r21, r1
     582:	99 f7       	brne	.-26     	; 0x56a <clrplane_x+0x16>
// Clear all the leds on Y and Z for a given X
void clrplane_x (int x)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
     584:	6f 5f       	subi	r22, 0xFF	; 255
     586:	7f 4f       	sbci	r23, 0xFF	; 255
     588:	65 30       	cpi	r22, 0x05	; 5
     58a:	71 05       	cpc	r23, r1
     58c:	51 f0       	breq	.+20     	; 0x5a2 <clrplane_x+0x4e>
     58e:	40 e0       	ldi	r20, 0x00	; 0
     590:	50 e0       	ldi	r21, 0x00	; 0
		for(y = 0 ; y < 5 ; y++){
			cube[z][y] &= ~(1 << x);
     592:	db 01       	movw	r26, r22
     594:	aa 0f       	add	r26, r26
     596:	bb 1f       	adc	r27, r27
     598:	aa 0f       	add	r26, r26
     59a:	bb 1f       	adc	r27, r27
     59c:	a6 0f       	add	r26, r22
     59e:	b7 1f       	adc	r27, r23
     5a0:	e4 cf       	rjmp	.-56     	; 0x56a <clrplane_x+0x16>
     5a2:	08 95       	ret

000005a4 <setplane_y>:

// Sets all the leds on X and Z for a given Y
void setplane_y (int y)
{
	int z;
	for (z = 0 ; z < 5 ; z++) cube[z][y] = 0x1f; 
     5a4:	fc 01       	movw	r30, r24
     5a6:	e0 57       	subi	r30, 0x70	; 112
     5a8:	fe 4f       	sbci	r31, 0xFE	; 254
     5aa:	8f e1       	ldi	r24, 0x1F	; 31
     5ac:	80 83       	st	Z, r24
     5ae:	85 83       	std	Z+5, r24	; 0x05
     5b0:	82 87       	std	Z+10, r24	; 0x0a
     5b2:	87 87       	std	Z+15, r24	; 0x0f
     5b4:	84 8b       	std	Z+20, r24	; 0x14
}
     5b6:	08 95       	ret

000005b8 <clrplane_y>:

// Sets all the leds on X and Z for a given Y
void clrplane_y (int y)
{
	int z;
	for(z = 0 ; z < 5 ; z++) cube[z][y] = 0x00; 
     5b8:	fc 01       	movw	r30, r24
     5ba:	e0 57       	subi	r30, 0x70	; 112
     5bc:	fe 4f       	sbci	r31, 0xFE	; 254
     5be:	10 82       	st	Z, r1
     5c0:	15 82       	std	Z+5, r1	; 0x05
     5c2:	12 86       	std	Z+10, r1	; 0x0a
     5c4:	17 86       	std	Z+15, r1	; 0x0f
     5c6:	14 8a       	std	Z+20, r1	; 0x14
}
     5c8:	08 95       	ret

000005ca <setplane>:

// Set a plane using the functions above
void setplane(unsigned char plane, int i, int state)
{
	if (plane == 'x'){
     5ca:	88 37       	cpi	r24, 0x78	; 120
     5cc:	09 f0       	breq	.+2      	; 0x5d0 <setplane+0x6>
     5ce:	53 c0       	rjmp	.+166    	; 0x676 <setplane+0xac>
		if (state > 0){
     5d0:	14 16       	cp	r1, r20
     5d2:	15 06       	cpc	r1, r21
     5d4:	64 f0       	brlt	.+24     	; 0x5ee <setplane+0x24>
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
			cube[z][y] &= ~(1 << x);
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	02 c0       	rjmp	.+4      	; 0x5e0 <setplane+0x16>
     5dc:	88 0f       	add	r24, r24
     5de:	99 1f       	adc	r25, r25
     5e0:	6a 95       	dec	r22
     5e2:	e2 f7       	brpl	.-8      	; 0x5dc <setplane+0x12>
     5e4:	98 2f       	mov	r25, r24
     5e6:	90 95       	com	r25
     5e8:	40 e0       	ldi	r20, 0x00	; 0
     5ea:	50 e0       	ldi	r21, 0x00	; 0
     5ec:	3a c0       	rjmp	.+116    	; 0x662 <setplane+0x98>
	// the actual bits in each row of each layer
	// We loop them all, and set the apropriate bit.
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
			// Set a bit, and shift it inwards to the right X
			cube[z][y] |= (1 << x);
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <setplane+0x2e>
     5f4:	88 0f       	add	r24, r24
     5f6:	99 1f       	adc	r25, r25
     5f8:	6a 95       	dec	r22
     5fa:	e2 f7       	brpl	.-8      	; 0x5f4 <setplane+0x2a>
     5fc:	98 2f       	mov	r25, r24
     5fe:	40 e0       	ldi	r20, 0x00	; 0
     600:	50 e0       	ldi	r21, 0x00	; 0
     602:	13 c0       	rjmp	.+38     	; 0x62a <setplane+0x60>
     604:	fb 01       	movw	r30, r22
     606:	e2 0f       	add	r30, r18
     608:	f3 1f       	adc	r31, r19
     60a:	e0 57       	subi	r30, 0x70	; 112
     60c:	fe 4f       	sbci	r31, 0xFE	; 254
     60e:	80 81       	ld	r24, Z
     610:	89 2b       	or	r24, r25
     612:	80 83       	st	Z, r24
	int y;
	// Since coordinates along the X axis are
	// the actual bits in each row of each layer
	// We loop them all, and set the apropriate bit.
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
     614:	2f 5f       	subi	r18, 0xFF	; 255
     616:	3f 4f       	sbci	r19, 0xFF	; 255
     618:	25 30       	cpi	r18, 0x05	; 5
     61a:	31 05       	cpc	r19, r1
     61c:	99 f7       	brne	.-26     	; 0x604 <setplane+0x3a>
	int z;
	int y;
	// Since coordinates along the X axis are
	// the actual bits in each row of each layer
	// We loop them all, and set the apropriate bit.
	for(z = 0 ; z < 5 ; z++){
     61e:	4f 5f       	subi	r20, 0xFF	; 255
     620:	5f 4f       	sbci	r21, 0xFF	; 255
     622:	45 30       	cpi	r20, 0x05	; 5
     624:	51 05       	cpc	r21, r1
     626:	09 f4       	brne	.+2      	; 0x62a <setplane+0x60>
     628:	59 c0       	rjmp	.+178    	; 0x6dc <setplane+0x112>
     62a:	20 e0       	ldi	r18, 0x00	; 0
     62c:	30 e0       	ldi	r19, 0x00	; 0
		for(y = 0 ; y < 5 ; y++){
			// Set a bit, and shift it inwards to the right X
			cube[z][y] |= (1 << x);
     62e:	ba 01       	movw	r22, r20
     630:	66 0f       	add	r22, r22
     632:	77 1f       	adc	r23, r23
     634:	66 0f       	add	r22, r22
     636:	77 1f       	adc	r23, r23
     638:	64 0f       	add	r22, r20
     63a:	75 1f       	adc	r23, r21
     63c:	e3 cf       	rjmp	.-58     	; 0x604 <setplane+0x3a>
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
			cube[z][y] &= ~(1 << x);
     63e:	fb 01       	movw	r30, r22
     640:	e2 0f       	add	r30, r18
     642:	f3 1f       	adc	r31, r19
     644:	e0 57       	subi	r30, 0x70	; 112
     646:	fe 4f       	sbci	r31, 0xFE	; 254
     648:	80 81       	ld	r24, Z
     64a:	89 23       	and	r24, r25
     64c:	80 83       	st	Z, r24
void clrplane_x (int x)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
     64e:	2f 5f       	subi	r18, 0xFF	; 255
     650:	3f 4f       	sbci	r19, 0xFF	; 255
     652:	25 30       	cpi	r18, 0x05	; 5
     654:	31 05       	cpc	r19, r1
     656:	99 f7       	brne	.-26     	; 0x63e <setplane+0x74>
// Clear all the leds on Y and Z for a given X
void clrplane_x (int x)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
     658:	4f 5f       	subi	r20, 0xFF	; 255
     65a:	5f 4f       	sbci	r21, 0xFF	; 255
     65c:	45 30       	cpi	r20, 0x05	; 5
     65e:	51 05       	cpc	r21, r1
     660:	e9 f1       	breq	.+122    	; 0x6dc <setplane+0x112>
     662:	20 e0       	ldi	r18, 0x00	; 0
     664:	30 e0       	ldi	r19, 0x00	; 0
		for(y = 0 ; y < 5 ; y++){
			cube[z][y] &= ~(1 << x);
     666:	ba 01       	movw	r22, r20
     668:	66 0f       	add	r22, r22
     66a:	77 1f       	adc	r23, r23
     66c:	66 0f       	add	r22, r22
     66e:	77 1f       	adc	r23, r23
     670:	64 0f       	add	r22, r20
     672:	75 1f       	adc	r23, r21
     674:	e4 cf       	rjmp	.-56     	; 0x63e <setplane+0x74>
		else{
			clrplane_x(i);
		}
	}
	
	if (plane == 'y'){
     676:	89 37       	cpi	r24, 0x79	; 121
     678:	99 f4       	brne	.+38     	; 0x6a0 <setplane+0xd6>
     67a:	fb 01       	movw	r30, r22
     67c:	e0 57       	subi	r30, 0x70	; 112
     67e:	fe 4f       	sbci	r31, 0xFE	; 254
		if (state > 0){
     680:	14 16       	cp	r1, r20
     682:	15 06       	cpc	r1, r21
     684:	3c f4       	brge	.+14     	; 0x694 <setplane+0xca>

// Sets all the leds on X and Z for a given Y
void setplane_y (int y)
{
	int z;
	for (z = 0 ; z < 5 ; z++) cube[z][y] = 0x1f; 
     686:	8f e1       	ldi	r24, 0x1F	; 31
     688:	80 83       	st	Z, r24
     68a:	85 83       	std	Z+5, r24	; 0x05
     68c:	82 87       	std	Z+10, r24	; 0x0a
     68e:	87 87       	std	Z+15, r24	; 0x0f
     690:	84 8b       	std	Z+20, r24	; 0x14
     692:	08 95       	ret

// Sets all the leds on X and Z for a given Y
void clrplane_y (int y)
{
	int z;
	for(z = 0 ; z < 5 ; z++) cube[z][y] = 0x00; 
     694:	10 82       	st	Z, r1
     696:	15 82       	std	Z+5, r1	; 0x05
     698:	12 86       	std	Z+10, r1	; 0x0a
     69a:	17 86       	std	Z+15, r1	; 0x0f
     69c:	14 8a       	std	Z+20, r1	; 0x14
     69e:	08 95       	ret
		else{
			clrplane_y(i);
		}
	}
	
	if (plane == 'z'){
     6a0:	8a 37       	cpi	r24, 0x7A	; 122
     6a2:	e1 f4       	brne	.+56     	; 0x6dc <setplane+0x112>
     6a4:	fb 01       	movw	r30, r22
     6a6:	ee 0f       	add	r30, r30
     6a8:	ff 1f       	adc	r31, r31
     6aa:	ee 0f       	add	r30, r30
     6ac:	ff 1f       	adc	r31, r31
		if (state > 0){
     6ae:	14 16       	cp	r1, r20
     6b0:	15 06       	cpc	r1, r21
     6b2:	5c f4       	brge	.+22     	; 0x6ca <setplane+0x100>
// i.e. draws a horizonal plane on a given level (z)
void setplane_z (int z)
{
	int y;
	// Loop the 5 rows on the given level and write 1 to the bits.
	for(y = 0 ; y < 5 ; y++) cube[z][y] = 0x1f;
     6b4:	e6 0f       	add	r30, r22
     6b6:	f7 1f       	adc	r31, r23
     6b8:	e0 57       	subi	r30, 0x70	; 112
     6ba:	fe 4f       	sbci	r31, 0xFE	; 254
     6bc:	8f e1       	ldi	r24, 0x1F	; 31
     6be:	80 83       	st	Z, r24
     6c0:	81 83       	std	Z+1, r24	; 0x01
     6c2:	82 83       	std	Z+2, r24	; 0x02
     6c4:	83 83       	std	Z+3, r24	; 0x03
     6c6:	84 83       	std	Z+4, r24	; 0x04
     6c8:	08 95       	ret

// Clears all the leds on X and Y for a given Z
void clrplane_z (int z)
{
	int y;
	for(y = 0 ; y < 5 ; y++) cube[z][y] = 0x00;
     6ca:	e6 0f       	add	r30, r22
     6cc:	f7 1f       	adc	r31, r23
     6ce:	e0 57       	subi	r30, 0x70	; 112
     6d0:	fe 4f       	sbci	r31, 0xFE	; 254
     6d2:	10 82       	st	Z, r1
     6d4:	11 82       	std	Z+1, r1	; 0x01
     6d6:	12 82       	std	Z+2, r1	; 0x02
     6d8:	13 82       	std	Z+3, r1	; 0x03
     6da:	14 82       	std	Z+4, r1	; 0x04
     6dc:	08 95       	ret

000006de <line_z>:

// Draw a line along the Z axis
// state=0 clears a line of voxels,
// state=1 sets a line of voxels.
void line_z(int x, int y, int z1, int z2, int state)
{
     6de:	af 92       	push	r10
     6e0:	bf 92       	push	r11
     6e2:	cf 92       	push	r12
     6e4:	df 92       	push	r13
     6e6:	ef 92       	push	r14
     6e8:	ff 92       	push	r15
     6ea:	0f 93       	push	r16
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	5c 01       	movw	r10, r24
     6f4:	6b 01       	movw	r12, r22
     6f6:	79 01       	movw	r14, r18
	
	if (z1>z2){
     6f8:	24 17       	cp	r18, r20
     6fa:	35 07       	cpc	r19, r21
     6fc:	14 f4       	brge	.+4      	; 0x702 <line_z+0x24>
     6fe:	7a 01       	movw	r14, r20
     700:	a9 01       	movw	r20, r18
     702:	ea 01       	movw	r28, r20
     704:	07 c0       	rjmp	.+14     	; 0x714 <line_z+0x36>
		z1= z2;
		z2 = tmp;
	}
	int i;
	for (i=z1;i<=z2;i++){
		alterLED(x,y,i,state);
     706:	c5 01       	movw	r24, r10
     708:	b6 01       	movw	r22, r12
     70a:	ae 01       	movw	r20, r28
     70c:	98 01       	movw	r18, r16
     70e:	0e 94 18 02 	call	0x430	; 0x430 <alterLED>
		tmp = z1;
		z1= z2;
		z2 = tmp;
	}
	int i;
	for (i=z1;i<=z2;i++){
     712:	21 96       	adiw	r28, 0x01	; 1
     714:	ec 16       	cp	r14, r28
     716:	fd 06       	cpc	r15, r29
     718:	b4 f7       	brge	.-20     	; 0x706 <line_z+0x28>
		alterLED(x,y,i,state);
	}
}
     71a:	df 91       	pop	r29
     71c:	cf 91       	pop	r28
     71e:	1f 91       	pop	r17
     720:	0f 91       	pop	r16
     722:	ff 90       	pop	r15
     724:	ef 90       	pop	r14
     726:	df 90       	pop	r13
     728:	cf 90       	pop	r12
     72a:	bf 90       	pop	r11
     72c:	af 90       	pop	r10
     72e:	08 95       	ret

00000730 <line_x>:

// Draw a line along the X axis
void line_x(int z, int y, int x1, int x2, int state)
{
     730:	af 92       	push	r10
     732:	bf 92       	push	r11
     734:	cf 92       	push	r12
     736:	df 92       	push	r13
     738:	ef 92       	push	r14
     73a:	ff 92       	push	r15
     73c:	0f 93       	push	r16
     73e:	1f 93       	push	r17
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
     744:	5c 01       	movw	r10, r24
     746:	6b 01       	movw	r12, r22
     748:	79 01       	movw	r14, r18
	if (x1>x2){
     74a:	24 17       	cp	r18, r20
     74c:	35 07       	cpc	r19, r21
     74e:	14 f4       	brge	.+4      	; 0x754 <line_x+0x24>
     750:	7a 01       	movw	r14, r20
     752:	a9 01       	movw	r20, r18
     754:	ea 01       	movw	r28, r20
     756:	07 c0       	rjmp	.+14     	; 0x766 <line_x+0x36>
		x1= x2;
		x2 = tmp;
	}
	int i;
	for (i=x1;i<=x2;i++){
		alterLED(i,y,z,state);
     758:	ce 01       	movw	r24, r28
     75a:	b6 01       	movw	r22, r12
     75c:	a5 01       	movw	r20, r10
     75e:	98 01       	movw	r18, r16
     760:	0e 94 18 02 	call	0x430	; 0x430 <alterLED>
		tmp = x1;
		x1= x2;
		x2 = tmp;
	}
	int i;
	for (i=x1;i<=x2;i++){
     764:	21 96       	adiw	r28, 0x01	; 1
     766:	ec 16       	cp	r14, r28
     768:	fd 06       	cpc	r15, r29
     76a:	b4 f7       	brge	.-20     	; 0x758 <line_x+0x28>
		alterLED(i,y,z,state);
	}
}
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	1f 91       	pop	r17
     772:	0f 91       	pop	r16
     774:	ff 90       	pop	r15
     776:	ef 90       	pop	r14
     778:	df 90       	pop	r13
     77a:	cf 90       	pop	r12
     77c:	bf 90       	pop	r11
     77e:	af 90       	pop	r10
     780:	08 95       	ret

00000782 <line_y>:

// Draw a line along the Y axis.
void line_y(int z, int x, int y1, int y2, int state)
{
     782:	af 92       	push	r10
     784:	bf 92       	push	r11
     786:	cf 92       	push	r12
     788:	df 92       	push	r13
     78a:	ef 92       	push	r14
     78c:	ff 92       	push	r15
     78e:	0f 93       	push	r16
     790:	1f 93       	push	r17
     792:	cf 93       	push	r28
     794:	df 93       	push	r29
     796:	5c 01       	movw	r10, r24
     798:	6b 01       	movw	r12, r22
     79a:	79 01       	movw	r14, r18
	if (y1>y2){
     79c:	24 17       	cp	r18, r20
     79e:	35 07       	cpc	r19, r21
     7a0:	14 f4       	brge	.+4      	; 0x7a6 <line_y+0x24>
     7a2:	7a 01       	movw	r14, r20
     7a4:	a9 01       	movw	r20, r18
     7a6:	ea 01       	movw	r28, r20
     7a8:	07 c0       	rjmp	.+14     	; 0x7b8 <line_y+0x36>
		y1= y2;
		y2 = tmp;
	}
	int i;
	for (i=y1;i<=y2;i++){
			alterLED(x,i,z,state);
     7aa:	c6 01       	movw	r24, r12
     7ac:	be 01       	movw	r22, r28
     7ae:	a5 01       	movw	r20, r10
     7b0:	98 01       	movw	r18, r16
     7b2:	0e 94 18 02 	call	0x430	; 0x430 <alterLED>
		tmp = y1;
		y1= y2;
		y2 = tmp;
	}
	int i;
	for (i=y1;i<=y2;i++){
     7b6:	21 96       	adiw	r28, 0x01	; 1
     7b8:	ec 16       	cp	r14, r28
     7ba:	fd 06       	cpc	r15, r29
     7bc:	b4 f7       	brge	.-20     	; 0x7aa <line_y+0x28>
			alterLED(x,i,z,state);
	}
}
     7be:	df 91       	pop	r29
     7c0:	cf 91       	pop	r28
     7c2:	1f 91       	pop	r17
     7c4:	0f 91       	pop	r16
     7c6:	ff 90       	pop	r15
     7c8:	ef 90       	pop	r14
     7ca:	df 90       	pop	r13
     7cc:	cf 90       	pop	r12
     7ce:	bf 90       	pop	r11
     7d0:	af 90       	pop	r10
     7d2:	08 95       	ret

000007d4 <drawline_plane>:

// Draws a plane on any diagonal angle
// unsigned char anchor is the plane that is constant. ("x","y", or "z")
void drawline_plane(int x2, int y2, int x1, int y1,unsigned char anchor){
     7d4:	2f 92       	push	r2
     7d6:	3f 92       	push	r3
     7d8:	5f 92       	push	r5
     7da:	6f 92       	push	r6
     7dc:	7f 92       	push	r7
     7de:	8f 92       	push	r8
     7e0:	9f 92       	push	r9
     7e2:	af 92       	push	r10
     7e4:	bf 92       	push	r11
     7e6:	cf 92       	push	r12
     7e8:	df 92       	push	r13
     7ea:	ef 92       	push	r14
     7ec:	ff 92       	push	r15
     7ee:	0f 93       	push	r16
     7f0:	1f 93       	push	r17
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
     7f6:	fc 01       	movw	r30, r24
     7f8:	50 2e       	mov	r5, r16
	int deltax = abs(x2 - x1);        // The difference between the x's
     7fa:	84 1b       	sub	r24, r20
     7fc:	95 0b       	sbc	r25, r21
     7fe:	97 ff       	sbrs	r25, 7
     800:	03 c0       	rjmp	.+6      	; 0x808 <drawline_plane+0x34>
     802:	90 95       	com	r25
     804:	81 95       	neg	r24
     806:	9f 4f       	sbci	r25, 0xFF	; 255
	int deltay = abs(y2 - y1);        // The difference between the y's
     808:	db 01       	movw	r26, r22
     80a:	a2 1b       	sub	r26, r18
     80c:	b3 0b       	sbc	r27, r19
     80e:	b7 ff       	sbrs	r27, 7
     810:	03 c0       	rjmp	.+6      	; 0x818 <drawline_plane+0x44>
     812:	b0 95       	com	r27
     814:	a1 95       	neg	r26
     816:	bf 4f       	sbci	r27, 0xFF	; 255
	int den;
	int num;
	int numadd;
	int numpixels;
	
	if (x2 >= x1){                 // The x-values are increasing
     818:	e4 17       	cp	r30, r20
     81a:	f5 07       	cpc	r31, r21
     81c:	3c f4       	brge	.+14     	; 0x82c <drawline_plane+0x58>
     81e:	66 24       	eor	r6, r6
     820:	6a 94       	dec	r6
     822:	76 2c       	mov	r7, r6
     824:	88 24       	eor	r8, r8
     826:	8a 94       	dec	r8
     828:	98 2c       	mov	r9, r8
     82a:	06 c0       	rjmp	.+12     	; 0x838 <drawline_plane+0x64>
     82c:	01 e0       	ldi	r16, 0x01	; 1
     82e:	60 2e       	mov	r6, r16
     830:	71 2c       	mov	r7, r1
     832:	11 e0       	ldi	r17, 0x01	; 1
     834:	81 2e       	mov	r8, r17
     836:	91 2c       	mov	r9, r1
	else{                          // The x-values are decreasing
		xinc1 = -1;
		xinc2 = -1;
	}
	
	if (y2 >= y1){                 // The y-values are increasing
     838:	62 17       	cp	r22, r18
     83a:	73 07       	cpc	r23, r19
     83c:	3c f4       	brge	.+14     	; 0x84c <drawline_plane+0x78>
     83e:	aa 24       	eor	r10, r10
     840:	aa 94       	dec	r10
     842:	ba 2c       	mov	r11, r10
     844:	cc 24       	eor	r12, r12
     846:	ca 94       	dec	r12
     848:	dc 2c       	mov	r13, r12
     84a:	06 c0       	rjmp	.+12     	; 0x858 <drawline_plane+0x84>
     84c:	f1 e0       	ldi	r31, 0x01	; 1
     84e:	af 2e       	mov	r10, r31
     850:	b1 2c       	mov	r11, r1
     852:	e1 e0       	ldi	r30, 0x01	; 1
     854:	ce 2e       	mov	r12, r30
     856:	d1 2c       	mov	r13, r1
	else{                          // The y-values are decreasing
		yinc1 = -1;
		yinc2 = -1;
	}
	
	if (deltax >= deltay){         // There is at least one x-value for every y-value
     858:	8a 17       	cp	r24, r26
     85a:	9b 07       	cpc	r25, r27
     85c:	5c f0       	brlt	.+22     	; 0x874 <__stack+0x15>
		xinc1 = 0;                  // Don't change the x when numerator >= denominator
		yinc2 = 0;                  // Don't change the y for every iteration
		den = deltax;
		num = deltax / 2;
     85e:	ec 01       	movw	r28, r24
     860:	d5 95       	asr	r29
     862:	c7 95       	ror	r28
     864:	1d 01       	movw	r2, r26
     866:	dc 01       	movw	r26, r24
     868:	7c 01       	movw	r14, r24
     86a:	66 24       	eor	r6, r6
     86c:	77 24       	eor	r7, r7
     86e:	cc 24       	eor	r12, r12
     870:	dd 24       	eor	r13, r13
     872:	09 c0       	rjmp	.+18     	; 0x886 <__stack+0x27>
	}
	else{                          // There is at least one y-value for every x-value
		xinc2 = 0;                  // Don't change the x for every iteration
		yinc1 = 0;                  // Don't change the y when numerator >= denominator
		den = deltay;
		num = deltay / 2;
     874:	ed 01       	movw	r28, r26
     876:	d5 95       	asr	r29
     878:	c7 95       	ror	r28
     87a:	1c 01       	movw	r2, r24
     87c:	7d 01       	movw	r14, r26
     87e:	88 24       	eor	r8, r8
     880:	99 24       	eor	r9, r9
     882:	aa 24       	eor	r10, r10
     884:	bb 24       	eor	r11, r11
     886:	b9 01       	movw	r22, r18
     888:	00 e0       	ldi	r16, 0x00	; 0
     88a:	10 e0       	ldi	r17, 0x00	; 0
		numadd = deltax;
		numpixels = deltay;         // There are more y-values than x-values
	}
	int curpixel;
	for(curpixel = 0 ; curpixel <= numpixels ; curpixel++){
		if (anchor == 'z')
     88c:	8a e7       	ldi	r24, 0x7A	; 122
     88e:	58 16       	cp	r5, r24
     890:	11 f5       	brne	.+68     	; 0x8d6 <__stack+0x77>
}

// This function validates that we are drawing inside the cube.
unsigned char inrange(int x, int y, int z)
{
	if (x >= 0 && x < 5 && y >= 0 && y < 5 && z >= 0 && z < 5){
     892:	45 30       	cpi	r20, 0x05	; 5
     894:	51 05       	cpc	r21, r1
     896:	08 f0       	brcs	.+2      	; 0x89a <__stack+0x3b>
     898:	72 c0       	rjmp	.+228    	; 0x97e <__stack+0x11f>
     89a:	77 fd       	sbrc	r23, 7
     89c:	70 c0       	rjmp	.+224    	; 0x97e <__stack+0x11f>
     89e:	65 30       	cpi	r22, 0x05	; 5
     8a0:	71 05       	cpc	r23, r1
     8a2:	0c f0       	brlt	.+2      	; 0x8a6 <__stack+0x47>
     8a4:	6c c0       	rjmp	.+216    	; 0x97e <__stack+0x11f>
// Voxel == 1 LED in the 3D cube grid
// Set a voxel (LED) in the cube buffer

void setLED(int x, int y, int z)
{ 
	if (inrange(x, y, z)) cube[z][y] |= (1 << x);
     8a6:	fb 01       	movw	r30, r22
     8a8:	e0 57       	subi	r30, 0x70	; 112
     8aa:	fe 4f       	sbci	r31, 0xFE	; 254
     8ac:	24 89       	ldd	r18, Z+20	; 0x14
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	04 2e       	mov	r0, r20
     8b4:	02 c0       	rjmp	.+4      	; 0x8ba <__stack+0x5b>
     8b6:	88 0f       	add	r24, r24
     8b8:	99 1f       	adc	r25, r25
     8ba:	0a 94       	dec	r0
     8bc:	e2 f7       	brpl	.-8      	; 0x8b6 <__stack+0x57>
     8be:	28 2b       	or	r18, r24
     8c0:	24 8b       	std	Z+20, r18	; 0x14
			setLED(x, y, 2);
			setLED(x, y, 1);
			setLED(x, y, 0);
		}
		
		if (anchor == 'x')
     8c2:	27 85       	ldd	r18, Z+15	; 0x0f
     8c4:	28 2b       	or	r18, r24
     8c6:	27 87       	std	Z+15, r18	; 0x0f
     8c8:	22 85       	ldd	r18, Z+10	; 0x0a
     8ca:	28 2b       	or	r18, r24
     8cc:	22 87       	std	Z+10, r18	; 0x0a
     8ce:	25 81       	ldd	r18, Z+5	; 0x05
     8d0:	28 2b       	or	r18, r24
     8d2:	25 83       	std	Z+5, r18	; 0x05
     8d4:	2a c0       	rjmp	.+84     	; 0x92a <__stack+0xcb>
     8d6:	88 e7       	ldi	r24, 0x78	; 120
     8d8:	58 16       	cp	r5, r24
     8da:	51 f5       	brne	.+84     	; 0x930 <__stack+0xd1>
}

// This function validates that we are drawing inside the cube.
unsigned char inrange(int x, int y, int z)
{
	if (x >= 0 && x < 5 && y >= 0 && y < 5 && z >= 0 && z < 5){
     8dc:	45 30       	cpi	r20, 0x05	; 5
     8de:	51 05       	cpc	r21, r1
     8e0:	08 f0       	brcs	.+2      	; 0x8e4 <__stack+0x85>
     8e2:	4d c0       	rjmp	.+154    	; 0x97e <__stack+0x11f>
     8e4:	77 fd       	sbrc	r23, 7
     8e6:	4b c0       	rjmp	.+150    	; 0x97e <__stack+0x11f>
     8e8:	65 30       	cpi	r22, 0x05	; 5
     8ea:	71 05       	cpc	r23, r1
     8ec:	0c f0       	brlt	.+2      	; 0x8f0 <__stack+0x91>
     8ee:	47 c0       	rjmp	.+142    	; 0x97e <__stack+0x11f>
// Voxel == 1 LED in the 3D cube grid
// Set a voxel (LED) in the cube buffer

void setLED(int x, int y, int z)
{ 
	if (inrange(x, y, z)) cube[z][y] |= (1 << x);
     8f0:	fb 01       	movw	r30, r22
     8f2:	ee 0f       	add	r30, r30
     8f4:	ff 1f       	adc	r31, r31
     8f6:	ee 0f       	add	r30, r30
     8f8:	ff 1f       	adc	r31, r31
     8fa:	e6 0f       	add	r30, r22
     8fc:	f7 1f       	adc	r31, r23
     8fe:	e0 57       	subi	r30, 0x70	; 112
     900:	fe 4f       	sbci	r31, 0xFE	; 254
     902:	24 81       	ldd	r18, Z+4	; 0x04
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	04 2e       	mov	r0, r20
     90a:	02 c0       	rjmp	.+4      	; 0x910 <__stack+0xb1>
     90c:	88 0f       	add	r24, r24
     90e:	99 1f       	adc	r25, r25
     910:	0a 94       	dec	r0
     912:	e2 f7       	brpl	.-8      	; 0x90c <__stack+0xad>
     914:	28 2b       	or	r18, r24
     916:	24 83       	std	Z+4, r18	; 0x04
			setLED(x, 2, y);
			setLED(x, 1, y);
			setLED(x, 0, y);
		}
		
		if (anchor == 'y')
     918:	23 81       	ldd	r18, Z+3	; 0x03
     91a:	28 2b       	or	r18, r24
     91c:	23 83       	std	Z+3, r18	; 0x03
     91e:	22 81       	ldd	r18, Z+2	; 0x02
     920:	28 2b       	or	r18, r24
     922:	22 83       	std	Z+2, r18	; 0x02
     924:	21 81       	ldd	r18, Z+1	; 0x01
     926:	28 2b       	or	r18, r24
     928:	21 83       	std	Z+1, r18	; 0x01
     92a:	20 81       	ld	r18, Z
     92c:	82 2b       	or	r24, r18
     92e:	26 c0       	rjmp	.+76     	; 0x97c <__stack+0x11d>
     930:	89 e7       	ldi	r24, 0x79	; 121
     932:	58 16       	cp	r5, r24
     934:	21 f5       	brne	.+72     	; 0x97e <__stack+0x11f>
}

// This function validates that we are drawing inside the cube.
unsigned char inrange(int x, int y, int z)
{
	if (x >= 0 && x < 5 && y >= 0 && y < 5 && z >= 0 && z < 5){
     936:	77 fd       	sbrc	r23, 7
     938:	22 c0       	rjmp	.+68     	; 0x97e <__stack+0x11f>
     93a:	65 30       	cpi	r22, 0x05	; 5
     93c:	71 05       	cpc	r23, r1
     93e:	fc f4       	brge	.+62     	; 0x97e <__stack+0x11f>
     940:	57 fd       	sbrc	r21, 7
     942:	1d c0       	rjmp	.+58     	; 0x97e <__stack+0x11f>
     944:	45 30       	cpi	r20, 0x05	; 5
     946:	51 05       	cpc	r21, r1
     948:	d4 f4       	brge	.+52     	; 0x97e <__stack+0x11f>
// Voxel == 1 LED in the 3D cube grid
// Set a voxel (LED) in the cube buffer

void setLED(int x, int y, int z)
{ 
	if (inrange(x, y, z)) cube[z][y] |= (1 << x);
     94a:	fa 01       	movw	r30, r20
     94c:	ee 0f       	add	r30, r30
     94e:	ff 1f       	adc	r31, r31
     950:	ee 0f       	add	r30, r30
     952:	ff 1f       	adc	r31, r31
     954:	e4 0f       	add	r30, r20
     956:	f5 1f       	adc	r31, r21
     958:	e6 0f       	add	r30, r22
     95a:	f7 1f       	adc	r31, r23
     95c:	e0 57       	subi	r30, 0x70	; 112
     95e:	fe 4f       	sbci	r31, 0xFE	; 254
     960:	80 81       	ld	r24, Z
     962:	80 61       	ori	r24, 0x10	; 16
     964:	80 83       	st	Z, r24
			setLED(2, y, x);
			setLED(1, y, x);
			setLED(0, y, x);
		}
		
		num += numadd;              // Increase the numerator by the top of the fraction
     966:	80 81       	ld	r24, Z
     968:	88 60       	ori	r24, 0x08	; 8
     96a:	80 83       	st	Z, r24
     96c:	80 81       	ld	r24, Z
     96e:	84 60       	ori	r24, 0x04	; 4
     970:	80 83       	st	Z, r24
     972:	80 81       	ld	r24, Z
     974:	82 60       	ori	r24, 0x02	; 2
     976:	80 83       	st	Z, r24
     978:	80 81       	ld	r24, Z
     97a:	81 60       	ori	r24, 0x01	; 1
     97c:	80 83       	st	Z, r24
     97e:	c2 0d       	add	r28, r2
     980:	d3 1d       	adc	r29, r3
		if (num >= den){             // Check if numerator >= denominator
     982:	ce 15       	cp	r28, r14
     984:	df 05       	cpc	r29, r15
     986:	34 f0       	brlt	.+12     	; 0x994 <__stack+0x135>
			num -= den;               // Calculate the new numerator value
     988:	ce 19       	sub	r28, r14
     98a:	df 09       	sbc	r29, r15
			x += xinc1;               // Change the x as appropriate
     98c:	46 0d       	add	r20, r6
     98e:	57 1d       	adc	r21, r7
			y += yinc1;               // Change the y as appropriate
     990:	6a 0d       	add	r22, r10
     992:	7b 1d       	adc	r23, r11
		num = deltay / 2;
		numadd = deltax;
		numpixels = deltay;         // There are more y-values than x-values
	}
	int curpixel;
	for(curpixel = 0 ; curpixel <= numpixels ; curpixel++){
     994:	0f 5f       	subi	r16, 0xFF	; 255
     996:	1f 4f       	sbci	r17, 0xFF	; 255
     998:	a0 17       	cp	r26, r16
     99a:	b1 07       	cpc	r27, r17
     99c:	2c f0       	brlt	.+10     	; 0x9a8 <__stack+0x149>
		if (num >= den){             // Check if numerator >= denominator
			num -= den;               // Calculate the new numerator value
			x += xinc1;               // Change the x as appropriate
			y += yinc1;               // Change the y as appropriate
		}
		x += xinc2;                 // Change the x as appropriate
     99e:	48 0d       	add	r20, r8
     9a0:	59 1d       	adc	r21, r9
		y += yinc2;                 // Change the y as appropriate
     9a2:	6c 0d       	add	r22, r12
     9a4:	7d 1d       	adc	r23, r13
     9a6:	72 cf       	rjmp	.-284    	; 0x88c <__stack+0x2d>
	}
}
     9a8:	df 91       	pop	r29
     9aa:	cf 91       	pop	r28
     9ac:	1f 91       	pop	r17
     9ae:	0f 91       	pop	r16
     9b0:	ff 90       	pop	r15
     9b2:	ef 90       	pop	r14
     9b4:	df 90       	pop	r13
     9b6:	cf 90       	pop	r12
     9b8:	bf 90       	pop	r11
     9ba:	af 90       	pop	r10
     9bc:	9f 90       	pop	r9
     9be:	8f 90       	pop	r8
     9c0:	7f 90       	pop	r7
     9c2:	6f 90       	pop	r6
     9c4:	5f 90       	pop	r5
     9c6:	3f 90       	pop	r3
     9c8:	2f 90       	pop	r2
     9ca:	08 95       	ret

000009cc <tmp2cube>:

// Copy the temp cube onto the real cube
void tmp2cube(void)
{
     9cc:	20 e0       	ldi	r18, 0x00	; 0
     9ce:	30 e0       	ldi	r19, 0x00	; 0
	int y, z;
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
			cube[z][y] = tmpcube[z][y];
     9d0:	f9 01       	movw	r30, r18
     9d2:	ee 0f       	add	r30, r30
     9d4:	ff 1f       	adc	r31, r31
     9d6:	ee 0f       	add	r30, r30
     9d8:	ff 1f       	adc	r31, r31
     9da:	e2 0f       	add	r30, r18
     9dc:	f3 1f       	adc	r31, r19
     9de:	df 01       	movw	r26, r30
     9e0:	af 58       	subi	r26, 0x8F	; 143
     9e2:	be 4f       	sbci	r27, 0xFE	; 254
     9e4:	8c 91       	ld	r24, X
     9e6:	e0 57       	subi	r30, 0x70	; 112
     9e8:	fe 4f       	sbci	r31, 0xFE	; 254
     9ea:	80 83       	st	Z, r24
     9ec:	11 96       	adiw	r26, 0x01	; 1
     9ee:	8c 91       	ld	r24, X
     9f0:	11 97       	sbiw	r26, 0x01	; 1
     9f2:	81 83       	std	Z+1, r24	; 0x01
     9f4:	12 96       	adiw	r26, 0x02	; 2
     9f6:	8c 91       	ld	r24, X
     9f8:	12 97       	sbiw	r26, 0x02	; 2
     9fa:	82 83       	std	Z+2, r24	; 0x02
     9fc:	13 96       	adiw	r26, 0x03	; 3
     9fe:	8c 91       	ld	r24, X
     a00:	13 97       	sbiw	r26, 0x03	; 3
     a02:	83 83       	std	Z+3, r24	; 0x03
     a04:	14 96       	adiw	r26, 0x04	; 4
     a06:	8c 91       	ld	r24, X
     a08:	84 83       	std	Z+4, r24	; 0x04

// Copy the temp cube onto the real cube
void tmp2cube(void)
{
	int y, z;
	for(z = 0 ; z < 5 ; z++){
     a0a:	2f 5f       	subi	r18, 0xFF	; 255
     a0c:	3f 4f       	sbci	r19, 0xFF	; 255
     a0e:	25 30       	cpi	r18, 0x05	; 5
     a10:	31 05       	cpc	r19, r1
     a12:	f1 f6       	brne	.-68     	; 0x9d0 <tmp2cube+0x4>
		for(y = 0 ; y < 5 ; y++){
			cube[z][y] = tmpcube[z][y];
		}
	}
}
     a14:	08 95       	ret

00000a16 <cube2tmp>:

// Copy the cube into the temp buffer
void cube2tmp(void)
{
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
	int y, z;
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
			tmpcube[z][y] = cube[z][y];
     a1a:	f9 01       	movw	r30, r18
     a1c:	ee 0f       	add	r30, r30
     a1e:	ff 1f       	adc	r31, r31
     a20:	ee 0f       	add	r30, r30
     a22:	ff 1f       	adc	r31, r31
     a24:	e2 0f       	add	r30, r18
     a26:	f3 1f       	adc	r31, r19
     a28:	df 01       	movw	r26, r30
     a2a:	a0 57       	subi	r26, 0x70	; 112
     a2c:	be 4f       	sbci	r27, 0xFE	; 254
     a2e:	8c 91       	ld	r24, X
     a30:	ef 58       	subi	r30, 0x8F	; 143
     a32:	fe 4f       	sbci	r31, 0xFE	; 254
     a34:	80 83       	st	Z, r24
     a36:	11 96       	adiw	r26, 0x01	; 1
     a38:	8c 91       	ld	r24, X
     a3a:	11 97       	sbiw	r26, 0x01	; 1
     a3c:	81 83       	std	Z+1, r24	; 0x01
     a3e:	12 96       	adiw	r26, 0x02	; 2
     a40:	8c 91       	ld	r24, X
     a42:	12 97       	sbiw	r26, 0x02	; 2
     a44:	82 83       	std	Z+2, r24	; 0x02
     a46:	13 96       	adiw	r26, 0x03	; 3
     a48:	8c 91       	ld	r24, X
     a4a:	13 97       	sbiw	r26, 0x03	; 3
     a4c:	83 83       	std	Z+3, r24	; 0x03
     a4e:	14 96       	adiw	r26, 0x04	; 4
     a50:	8c 91       	ld	r24, X
     a52:	84 83       	std	Z+4, r24	; 0x04

// Copy the cube into the temp buffer
void cube2tmp(void)
{
	int y, z;
	for(z = 0 ; z < 5 ; z++){
     a54:	2f 5f       	subi	r18, 0xFF	; 255
     a56:	3f 4f       	sbci	r19, 0xFF	; 255
     a58:	25 30       	cpi	r18, 0x05	; 5
     a5a:	31 05       	cpc	r19, r1
     a5c:	f1 f6       	brne	.-68     	; 0xa1a <cube2tmp+0x4>
		for(y = 0 ; y < 5 ; y++){
			tmpcube[z][y] = cube[z][y];
		}
	}
}
     a5e:	08 95       	ret

00000a60 <fill>:

// Fill the cube with a given pattern.
// fill(0x00); clears the cube
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
     a60:	20 e0       	ldi	r18, 0x00	; 0
     a62:	30 e0       	ldi	r19, 0x00	; 0
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
     a64:	f9 01       	movw	r30, r18
     a66:	ee 0f       	add	r30, r30
     a68:	ff 1f       	adc	r31, r31
     a6a:	ee 0f       	add	r30, r30
     a6c:	ff 1f       	adc	r31, r31
     a6e:	e2 0f       	add	r30, r18
     a70:	f3 1f       	adc	r31, r19
     a72:	e0 57       	subi	r30, 0x70	; 112
     a74:	fe 4f       	sbci	r31, 0xFE	; 254
     a76:	80 83       	st	Z, r24
     a78:	81 83       	std	Z+1, r24	; 0x01
     a7a:	82 83       	std	Z+2, r24	; 0x02
     a7c:	83 83       	std	Z+3, r24	; 0x03
     a7e:	84 83       	std	Z+4, r24	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
     a80:	2f 5f       	subi	r18, 0xFF	; 255
     a82:	3f 4f       	sbci	r19, 0xFF	; 255
     a84:	25 30       	cpi	r18, 0x05	; 5
     a86:	31 05       	cpc	r19, r1
     a88:	69 f7       	brne	.-38     	; 0xa64 <fill+0x4>
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
		}
	}
}
     a8a:	08 95       	ret

00000a8c <foo>:
}

//init

void foo(char *a){
}
     a8c:	08 95       	ret

00000a8e <effect_spinning_plane>:
	}
}

// Shows an animation of a spinning plane.
void effect_spinning_plane(int direction, int iterations, int delay)
{
     a8e:	cf 92       	push	r12
     a90:	df 92       	push	r13
     a92:	ef 92       	push	r14
     a94:	ff 92       	push	r15
     a96:	0f 93       	push	r16
     a98:	1f 93       	push	r17
     a9a:	cf 93       	push	r28
     a9c:	df 93       	push	r29
     a9e:	6b 01       	movw	r12, r22
     aa0:	7a 01       	movw	r14, r20
     aa2:	c0 e0       	ldi	r28, 0x00	; 0
     aa4:	d0 e0       	ldi	r29, 0x00	; 0
     aa6:	16 c0       	rjmp	.+44     	; 0xad4 <effect_spinning_plane+0x46>
	for (i=0;i<iterations;i++)
	{
		// Loop cube levels.
		for (z=0;z<5;z++)
		{
			cube[z][0] = pgm_read_byte(&spinning_line[(i)%6][0]);
     aa8:	fd 01       	movw	r30, r26
     aaa:	ee 0f       	add	r30, r30
     aac:	ff 1f       	adc	r31, r31
     aae:	ee 0f       	add	r30, r30
     ab0:	ff 1f       	adc	r31, r31
     ab2:	ea 0f       	add	r30, r26
     ab4:	fb 1f       	adc	r31, r27
     ab6:	e0 57       	subi	r30, 0x70	; 112
     ab8:	fe 4f       	sbci	r31, 0xFE	; 254
     aba:	00 83       	st	Z, r16
			cube[z][1] = pgm_read_byte(&spinning_line[(i)%6][1]);
     abc:	11 83       	std	Z+1, r17	; 0x01
			cube[z][2] = pgm_read_byte(&spinning_line[(i)%6][2]);
     abe:	22 83       	std	Z+2, r18	; 0x02
			cube[z][3] = pgm_read_byte(&spinning_line[(i)%6][3]);
     ac0:	93 83       	std	Z+3, r25	; 0x03
			cube[z][4] = pgm_read_byte(&spinning_line[(i)%6][4]);
     ac2:	84 83       	std	Z+4, r24	; 0x04
	int z;		// cube level

	for (i=0;i<iterations;i++)
	{
		// Loop cube levels.
		for (z=0;z<5;z++)
     ac4:	11 96       	adiw	r26, 0x01	; 1
     ac6:	a5 30       	cpi	r26, 0x05	; 5
     ac8:	b1 05       	cpc	r27, r1
     aca:	71 f7       	brne	.-36     	; 0xaa8 <effect_spinning_plane+0x1a>
			cube[z][1] = pgm_read_byte(&spinning_line[(i)%6][1]);
			cube[z][2] = pgm_read_byte(&spinning_line[(i)%6][2]);
			cube[z][3] = pgm_read_byte(&spinning_line[(i)%6][3]);
			cube[z][4] = pgm_read_byte(&spinning_line[(i)%6][4]);
		}
		delay_ms(delay);
     acc:	c7 01       	movw	r24, r14
     ace:	0e 94 69 00 	call	0xd2	; 0xd2 <delay_ms>
void effect_spinning_plane(int direction, int iterations, int delay)
{
	int i;
	int z;		// cube level

	for (i=0;i<iterations;i++)
     ad2:	21 96       	adiw	r28, 0x01	; 1
     ad4:	cc 15       	cp	r28, r12
     ad6:	dd 05       	cpc	r29, r13
     ad8:	34 f5       	brge	.+76     	; 0xb26 <effect_spinning_plane+0x98>
	{
		// Loop cube levels.
		for (z=0;z<5;z++)
		{
			cube[z][0] = pgm_read_byte(&spinning_line[(i)%6][0]);
     ada:	ce 01       	movw	r24, r28
     adc:	66 e0       	ldi	r22, 0x06	; 6
     ade:	70 e0       	ldi	r23, 0x00	; 0
     ae0:	0e 94 c9 14 	call	0x2992	; 0x2992 <__divmodhi4>
     ae4:	fc 01       	movw	r30, r24
     ae6:	ee 0f       	add	r30, r30
     ae8:	ff 1f       	adc	r31, r31
     aea:	ee 0f       	add	r30, r30
     aec:	ff 1f       	adc	r31, r31
     aee:	e8 0f       	add	r30, r24
     af0:	f9 1f       	adc	r31, r25
			cube[z][1] = pgm_read_byte(&spinning_line[(i)%6][1]);
     af2:	cf 01       	movw	r24, r30
     af4:	8b 5a       	subi	r24, 0xAB	; 171
     af6:	9f 4f       	sbci	r25, 0xFF	; 255
			cube[z][2] = pgm_read_byte(&spinning_line[(i)%6][2]);
     af8:	9f 01       	movw	r18, r30
     afa:	2a 5a       	subi	r18, 0xAA	; 170
     afc:	3f 4f       	sbci	r19, 0xFF	; 255
			cube[z][3] = pgm_read_byte(&spinning_line[(i)%6][3]);
     afe:	af 01       	movw	r20, r30
     b00:	49 5a       	subi	r20, 0xA9	; 169
     b02:	5f 4f       	sbci	r21, 0xFF	; 255
			cube[z][4] = pgm_read_byte(&spinning_line[(i)%6][4]);
     b04:	bf 01       	movw	r22, r30
     b06:	68 5a       	subi	r22, 0xA8	; 168
     b08:	7f 4f       	sbci	r23, 0xFF	; 255
     b0a:	a0 e0       	ldi	r26, 0x00	; 0
     b0c:	b0 e0       	ldi	r27, 0x00	; 0
	for (i=0;i<iterations;i++)
	{
		// Loop cube levels.
		for (z=0;z<5;z++)
		{
			cube[z][0] = pgm_read_byte(&spinning_line[(i)%6][0]);
     b0e:	ec 5a       	subi	r30, 0xAC	; 172
     b10:	ff 4f       	sbci	r31, 0xFF	; 255
     b12:	04 91       	lpm	r16, Z+
			cube[z][1] = pgm_read_byte(&spinning_line[(i)%6][1]);
     b14:	fc 01       	movw	r30, r24
     b16:	14 91       	lpm	r17, Z+
			cube[z][2] = pgm_read_byte(&spinning_line[(i)%6][2]);
     b18:	f9 01       	movw	r30, r18
     b1a:	24 91       	lpm	r18, Z+
			cube[z][3] = pgm_read_byte(&spinning_line[(i)%6][3]);
     b1c:	fa 01       	movw	r30, r20
     b1e:	94 91       	lpm	r25, Z+
			cube[z][4] = pgm_read_byte(&spinning_line[(i)%6][4]);
     b20:	fb 01       	movw	r30, r22
     b22:	84 91       	lpm	r24, Z+
     b24:	c1 cf       	rjmp	.-126    	; 0xaa8 <effect_spinning_plane+0x1a>
		}
		delay_ms(delay);
	}
}
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28
     b2a:	1f 91       	pop	r17
     b2c:	0f 91       	pop	r16
     b2e:	ff 90       	pop	r15
     b30:	ef 90       	pop	r14
     b32:	df 90       	pop	r13
     b34:	cf 90       	pop	r12
     b36:	08 95       	ret

00000b38 <effect_spiral>:
	{ 0x08, 0x08, 0x04, 0x02, 0x02 },
};

// Shows an animation of a spinning spiral
void effect_spiral(int direction, int iterations, int delay)
{
     b38:	cf 92       	push	r12
     b3a:	df 92       	push	r13
     b3c:	ef 92       	push	r14
     b3e:	ff 92       	push	r15
     b40:	0f 93       	push	r16
     b42:	1f 93       	push	r17
     b44:	cf 93       	push	r28
     b46:	df 93       	push	r29
     b48:	6b 01       	movw	r12, r22
     b4a:	7a 01       	movw	r14, r20
     b4c:	00 e0       	ldi	r16, 0x00	; 0
     b4e:	10 e0       	ldi	r17, 0x00	; 0
     b50:	43 c0       	rjmp	.+134    	; 0xbd8 <effect_spiral+0xa0>
	int i;
	int z;		// cube level

	for (i=0;i<iterations;i++)
     b52:	c0 e0       	ldi	r28, 0x00	; 0
     b54:	d0 e0       	ldi	r29, 0x00	; 0
		// Loop cube levels
		for (z=0;z<5;z++)
		{
			// Read the animation from program memory and put it in the cube buffer.
			// y=0 and y=2 is stored in the upper nibble of the byte, and must be bitshifted into place.
			cube[z][0] = pgm_read_byte(&spinning_line[(i+z)%6][0]);
     b56:	ce 01       	movw	r24, r28
     b58:	80 0f       	add	r24, r16
     b5a:	91 1f       	adc	r25, r17
     b5c:	66 e0       	ldi	r22, 0x06	; 6
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	0e 94 c9 14 	call	0x2992	; 0x2992 <__divmodhi4>
     b64:	9c 01       	movw	r18, r24
     b66:	22 0f       	add	r18, r18
     b68:	33 1f       	adc	r19, r19
     b6a:	22 0f       	add	r18, r18
     b6c:	33 1f       	adc	r19, r19
     b6e:	28 0f       	add	r18, r24
     b70:	39 1f       	adc	r19, r25
     b72:	f9 01       	movw	r30, r18
     b74:	ec 5a       	subi	r30, 0xAC	; 172
     b76:	ff 4f       	sbci	r31, 0xFF	; 255
     b78:	e4 91       	lpm	r30, Z+
     b7a:	de 01       	movw	r26, r28
     b7c:	aa 0f       	add	r26, r26
     b7e:	bb 1f       	adc	r27, r27
     b80:	aa 0f       	add	r26, r26
     b82:	bb 1f       	adc	r27, r27
     b84:	ac 0f       	add	r26, r28
     b86:	bd 1f       	adc	r27, r29
     b88:	a0 57       	subi	r26, 0x70	; 112
     b8a:	be 4f       	sbci	r27, 0xFE	; 254
     b8c:	ec 93       	st	X, r30
			cube[z][1] = pgm_read_byte(&spinning_line[(i+z)%6][1]);
     b8e:	f9 01       	movw	r30, r18
     b90:	eb 5a       	subi	r30, 0xAB	; 171
     b92:	ff 4f       	sbci	r31, 0xFF	; 255
     b94:	e4 91       	lpm	r30, Z+
     b96:	11 96       	adiw	r26, 0x01	; 1
     b98:	ec 93       	st	X, r30
     b9a:	11 97       	sbiw	r26, 0x01	; 1
			cube[z][2] = pgm_read_byte(&spinning_line[(i+z)%6][2]);
     b9c:	f9 01       	movw	r30, r18
     b9e:	ea 5a       	subi	r30, 0xAA	; 170
     ba0:	ff 4f       	sbci	r31, 0xFF	; 255
     ba2:	e4 91       	lpm	r30, Z+
     ba4:	12 96       	adiw	r26, 0x02	; 2
     ba6:	ec 93       	st	X, r30
     ba8:	12 97       	sbiw	r26, 0x02	; 2
			cube[z][3] = pgm_read_byte(&spinning_line[(i+z)%6][3]);
     baa:	f9 01       	movw	r30, r18
     bac:	e9 5a       	subi	r30, 0xA9	; 169
     bae:	ff 4f       	sbci	r31, 0xFF	; 255
     bb0:	e4 91       	lpm	r30, Z+
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	ec 93       	st	X, r30
     bb6:	13 97       	sbiw	r26, 0x03	; 3
			cube[z][4] = pgm_read_byte(&spinning_line[(i+z)%6][4]);
     bb8:	28 5a       	subi	r18, 0xA8	; 168
     bba:	3f 4f       	sbci	r19, 0xFF	; 255
     bbc:	f9 01       	movw	r30, r18
     bbe:	84 91       	lpm	r24, Z+
     bc0:	14 96       	adiw	r26, 0x04	; 4
     bc2:	8c 93       	st	X, r24
	int z;		// cube level

	for (i=0;i<iterations;i++)
	{
		// Loop cube levels
		for (z=0;z<5;z++)
     bc4:	21 96       	adiw	r28, 0x01	; 1
     bc6:	c5 30       	cpi	r28, 0x05	; 5
     bc8:	d1 05       	cpc	r29, r1
     bca:	09 f0       	breq	.+2      	; 0xbce <effect_spiral+0x96>
     bcc:	c4 cf       	rjmp	.-120    	; 0xb56 <effect_spiral+0x1e>
			cube[z][3] = pgm_read_byte(&spinning_line[(i+z)%6][3]);
			cube[z][4] = pgm_read_byte(&spinning_line[(i+z)%6][4]);
			// the +z makes the animation iterate one step for each plane
			// making it into a spiral
		}
		delay_ms(delay);
     bce:	c7 01       	movw	r24, r14
     bd0:	0e 94 69 00 	call	0xd2	; 0xd2 <delay_ms>
void effect_spiral(int direction, int iterations, int delay)
{
	int i;
	int z;		// cube level

	for (i=0;i<iterations;i++)
     bd4:	0f 5f       	subi	r16, 0xFF	; 255
     bd6:	1f 4f       	sbci	r17, 0xFF	; 255
     bd8:	0c 15       	cp	r16, r12
     bda:	1d 05       	cpc	r17, r13
     bdc:	0c f4       	brge	.+2      	; 0xbe0 <effect_spiral+0xa8>
     bde:	b9 cf       	rjmp	.-142    	; 0xb52 <effect_spiral+0x1a>
			// the +z makes the animation iterate one step for each plane
			// making it into a spiral
		}
		delay_ms(delay);
	}
}
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	ff 90       	pop	r15
     bea:	ef 90       	pop	r14
     bec:	df 90       	pop	r13
     bee:	cf 90       	pop	r12
     bf0:	08 95       	ret

00000bf2 <effect_wasdf2>:

	
}

void effect_wasdf2(int direction, int iterations, int delay)
{
     bf2:	ef 92       	push	r14
     bf4:	ff 92       	push	r15
     bf6:	0f 93       	push	r16
     bf8:	1f 93       	push	r17
     bfa:	cf 93       	push	r28
     bfc:	df 93       	push	r29
     bfe:	ee 24       	eor	r14, r14
     c00:	ff 24       	eor	r15, r15
     c02:	1f c0       	rjmp	.+62     	; 0xc42 <effect_wasdf2+0x50>
	{
	for (j=0;j<5;j++)
	{
	for (k=0;k<5;k++)
		{
		setLED(i,j,k);
     c04:	c7 01       	movw	r24, r14
     c06:	b8 01       	movw	r22, r16
     c08:	ae 01       	movw	r20, r28
     c0a:	0e 94 97 01 	call	0x32e	; 0x32e <setLED>
		delay_ms(20);
     c0e:	84 e1       	ldi	r24, 0x14	; 20
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	0e 94 69 00 	call	0xd2	; 0xd2 <delay_ms>
		fill(0x00);
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	0e 94 30 05 	call	0xa60	; 0xa60 <fill>
	int i,j,k;
	for (i=0;i<5;i++)
	{
	for (j=0;j<5;j++)
	{
	for (k=0;k<5;k++)
     c1c:	21 96       	adiw	r28, 0x01	; 1
     c1e:	c5 30       	cpi	r28, 0x05	; 5
     c20:	d1 05       	cpc	r29, r1
     c22:	81 f7       	brne	.-32     	; 0xc04 <effect_wasdf2+0x12>
void effect_wasdf2(int direction, int iterations, int delay)
{
	int i,j,k;
	for (i=0;i<5;i++)
	{
	for (j=0;j<5;j++)
     c24:	0f 5f       	subi	r16, 0xFF	; 255
     c26:	1f 4f       	sbci	r17, 0xFF	; 255
     c28:	05 30       	cpi	r16, 0x05	; 5
     c2a:	11 05       	cpc	r17, r1
     c2c:	19 f0       	breq	.+6      	; 0xc34 <effect_wasdf2+0x42>
     c2e:	c0 e0       	ldi	r28, 0x00	; 0
     c30:	d0 e0       	ldi	r29, 0x00	; 0
     c32:	e8 cf       	rjmp	.-48     	; 0xc04 <effect_wasdf2+0x12>
}

void effect_wasdf2(int direction, int iterations, int delay)
{
	int i,j,k;
	for (i=0;i<5;i++)
     c34:	08 94       	sec
     c36:	e1 1c       	adc	r14, r1
     c38:	f1 1c       	adc	r15, r1
     c3a:	85 e0       	ldi	r24, 0x05	; 5
     c3c:	e8 16       	cp	r14, r24
     c3e:	f1 04       	cpc	r15, r1
     c40:	19 f0       	breq	.+6      	; 0xc48 <effect_wasdf2+0x56>
     c42:	00 e0       	ldi	r16, 0x00	; 0
     c44:	10 e0       	ldi	r17, 0x00	; 0
     c46:	f3 cf       	rjmp	.-26     	; 0xc2e <effect_wasdf2+0x3c>
	delay_ms(10);
	fill(0x00);
	delay_ms(10);*/

	
}
     c48:	df 91       	pop	r29
     c4a:	cf 91       	pop	r28
     c4c:	1f 91       	pop	r17
     c4e:	0f 91       	pop	r16
     c50:	ff 90       	pop	r15
     c52:	ef 90       	pop	r14
     c54:	08 95       	ret

00000c56 <dim>:
		bla--;
		if(bla==0) up=1;
		}
}

void dim(int intensity){
     c56:	ef 92       	push	r14
     c58:	ff 92       	push	r15
     c5a:	0f 93       	push	r16
     c5c:	1f 93       	push	r17
     c5e:	cf 93       	push	r28
     c60:	df 93       	push	r29
     c62:	ec 01       	movw	r28, r24
     c64:	00 e0       	ldi	r16, 0x00	; 0
     c66:	10 e0       	ldi	r17, 0x00	; 0
for(int i=0;i<10;i++){
	intensity = intensity%10;
     c68:	6a e0       	ldi	r22, 0x0A	; 10
     c6a:	e6 2e       	mov	r14, r22
     c6c:	f1 2c       	mov	r15, r1
     c6e:	ce 01       	movw	r24, r28
     c70:	6a e0       	ldi	r22, 0x0A	; 10
     c72:	70 e0       	ldi	r23, 0x00	; 0
     c74:	0e 94 c9 14 	call	0x2992	; 0x2992 <__divmodhi4>
     c78:	ec 01       	movw	r28, r24
	fill(0x1f);
     c7a:	8f e1       	ldi	r24, 0x1F	; 31
     c7c:	0e 94 30 05 	call	0xa60	; 0xa60 <fill>
	delay_ms(intensity);
     c80:	ce 01       	movw	r24, r28
     c82:	0e 94 69 00 	call	0xd2	; 0xd2 <delay_ms>
	fill(0x00);
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	0e 94 30 05 	call	0xa60	; 0xa60 <fill>
	delay_ms(10-intensity);
     c8c:	c7 01       	movw	r24, r14
     c8e:	8c 1b       	sub	r24, r28
     c90:	9d 0b       	sbc	r25, r29
     c92:	0e 94 69 00 	call	0xd2	; 0xd2 <delay_ms>
		if(bla==0) up=1;
		}
}

void dim(int intensity){
for(int i=0;i<10;i++){
     c96:	0f 5f       	subi	r16, 0xFF	; 255
     c98:	1f 4f       	sbci	r17, 0xFF	; 255
     c9a:	0a 30       	cpi	r16, 0x0A	; 10
     c9c:	11 05       	cpc	r17, r1
     c9e:	39 f7       	brne	.-50     	; 0xc6e <dim+0x18>
	fill(0x1f);
	delay_ms(intensity);
	fill(0x00);
	delay_ms(10-intensity);
	}
}
     ca0:	df 91       	pop	r29
     ca2:	cf 91       	pop	r28
     ca4:	1f 91       	pop	r17
     ca6:	0f 91       	pop	r16
     ca8:	ff 90       	pop	r15
     caa:	ef 90       	pop	r14
     cac:	08 95       	ret

00000cae <effect_blink>:

int bla=0;
int up=1;
void effect_blink(int direction, int iterations, int delay)
{
	dim(bla);
     cae:	80 91 6e 01 	lds	r24, 0x016E
     cb2:	90 91 6f 01 	lds	r25, 0x016F
     cb6:	0e 94 2b 06 	call	0xc56	; 0xc56 <dim>
	if(up==1) 
     cba:	80 91 60 00 	lds	r24, 0x0060
     cbe:	90 91 61 00 	lds	r25, 0x0061
     cc2:	01 97       	sbiw	r24, 0x01	; 1
     cc4:	79 f4       	brne	.+30     	; 0xce4 <effect_blink+0x36>
		{
		bla++;
     cc6:	80 91 6e 01 	lds	r24, 0x016E
     cca:	90 91 6f 01 	lds	r25, 0x016F
     cce:	01 96       	adiw	r24, 0x01	; 1
     cd0:	90 93 6f 01 	sts	0x016F, r25
     cd4:	80 93 6e 01 	sts	0x016E, r24
		if(bla==9) up=0;
     cd8:	09 97       	sbiw	r24, 0x09	; 9
     cda:	21 f4       	brne	.+8      	; 0xce4 <effect_blink+0x36>
     cdc:	10 92 61 00 	sts	0x0061, r1
     ce0:	10 92 60 00 	sts	0x0060, r1
		}
	if(up==0) 
     ce4:	80 91 60 00 	lds	r24, 0x0060
     ce8:	90 91 61 00 	lds	r25, 0x0061
     cec:	89 2b       	or	r24, r25
     cee:	89 f4       	brne	.+34     	; 0xd12 <effect_blink+0x64>
		{
		bla--;
     cf0:	80 91 6e 01 	lds	r24, 0x016E
     cf4:	90 91 6f 01 	lds	r25, 0x016F
     cf8:	01 97       	sbiw	r24, 0x01	; 1
     cfa:	90 93 6f 01 	sts	0x016F, r25
     cfe:	80 93 6e 01 	sts	0x016E, r24
		if(bla==0) up=1;
     d02:	89 2b       	or	r24, r25
     d04:	31 f4       	brne	.+12     	; 0xd12 <effect_blink+0x64>
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	90 93 61 00 	sts	0x0061, r25
     d0e:	80 93 60 00 	sts	0x0060, r24
     d12:	08 95       	ret

00000d14 <effect_wasdf3>:
	}
	}	
}

void effect_wasdf3(int direction, int iterations, int delay)
{
     d14:	ef 92       	push	r14
     d16:	ff 92       	push	r15
     d18:	0f 93       	push	r16
     d1a:	1f 93       	push	r17
     d1c:	cf 93       	push	r28
     d1e:	df 93       	push	r29
     d20:	ee 24       	eor	r14, r14
     d22:	ff 24       	eor	r15, r15
     d24:	22 c0       	rjmp	.+68     	; 0xd6a <effect_wasdf3+0x56>
	{
	for (j=0;j<5;j++)
	{
	for (k=0;k<5;k++)
		{
		a=random()%2;
     d26:	0e 94 ca 13 	call	0x2794	; 0x2794 <random>
		if(a)
     d2a:	22 e0       	ldi	r18, 0x02	; 2
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	40 e0       	ldi	r20, 0x00	; 0
     d30:	50 e0       	ldi	r21, 0x00	; 0
     d32:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <__divmodsi4>
     d36:	67 2b       	or	r22, r23
     d38:	29 f0       	breq	.+10     	; 0xd44 <effect_wasdf3+0x30>
			setLED(i,j,k);
     d3a:	c7 01       	movw	r24, r14
     d3c:	b8 01       	movw	r22, r16
     d3e:	ae 01       	movw	r20, r28
     d40:	0e 94 97 01 	call	0x32e	; 0x32e <setLED>
		int a;
	for (i=0;i<5;i++)
	{
	for (j=0;j<5;j++)
	{
	for (k=0;k<5;k++)
     d44:	21 96       	adiw	r28, 0x01	; 1
     d46:	c5 30       	cpi	r28, 0x05	; 5
     d48:	d1 05       	cpc	r29, r1
     d4a:	69 f7       	brne	.-38     	; 0xd26 <effect_wasdf3+0x12>
{
		int i,j,k;
		int a;
	for (i=0;i<5;i++)
	{
	for (j=0;j<5;j++)
     d4c:	0f 5f       	subi	r16, 0xFF	; 255
     d4e:	1f 4f       	sbci	r17, 0xFF	; 255
     d50:	05 30       	cpi	r16, 0x05	; 5
     d52:	11 05       	cpc	r17, r1
     d54:	19 f0       	breq	.+6      	; 0xd5c <effect_wasdf3+0x48>
     d56:	c0 e0       	ldi	r28, 0x00	; 0
     d58:	d0 e0       	ldi	r29, 0x00	; 0
     d5a:	e5 cf       	rjmp	.-54     	; 0xd26 <effect_wasdf3+0x12>

void effect_wasdf3(int direction, int iterations, int delay)
{
		int i,j,k;
		int a;
	for (i=0;i<5;i++)
     d5c:	08 94       	sec
     d5e:	e1 1c       	adc	r14, r1
     d60:	f1 1c       	adc	r15, r1
     d62:	85 e0       	ldi	r24, 0x05	; 5
     d64:	e8 16       	cp	r14, r24
     d66:	f1 04       	cpc	r15, r1
     d68:	19 f0       	breq	.+6      	; 0xd70 <effect_wasdf3+0x5c>
     d6a:	00 e0       	ldi	r16, 0x00	; 0
     d6c:	10 e0       	ldi	r17, 0x00	; 0
     d6e:	f3 cf       	rjmp	.-26     	; 0xd56 <effect_wasdf3+0x42>
		if(a)
			setLED(i,j,k);
		}
	}
	}
	delay_ms(1000);
     d70:	88 ee       	ldi	r24, 0xE8	; 232
     d72:	93 e0       	ldi	r25, 0x03	; 3
     d74:	0e 94 69 00 	call	0xd2	; 0xd2 <delay_ms>
	fill(0x00);
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	0e 94 30 05 	call	0xa60	; 0xa60 <fill>

	
}
     d7e:	df 91       	pop	r29
     d80:	cf 91       	pop	r28
     d82:	1f 91       	pop	r17
     d84:	0f 91       	pop	r16
     d86:	ff 90       	pop	r15
     d88:	ef 90       	pop	r14
     d8a:	08 95       	ret

00000d8c <effect_noise>:
				}
	delay_ms(delay);	
}

void effect_noise(int direction, int iterations, int delay)
{
     d8c:	ef 92       	push	r14
     d8e:	ff 92       	push	r15
     d90:	0f 93       	push	r16
     d92:	1f 93       	push	r17
     d94:	cf 93       	push	r28
     d96:	df 93       	push	r29
     d98:	ee 24       	eor	r14, r14
     d9a:	ff 24       	eor	r15, r15
     d9c:	28 c0       	rjmp	.+80     	; 0xdee <effect_noise+0x62>
	for (j=0;j<5;j++)
	{
	for (k=0;k<5;k++)
		{
		
		a=random()%2;
     d9e:	0e 94 ca 13 	call	0x2794	; 0x2794 <random>
		if(a)
     da2:	22 e0       	ldi	r18, 0x02	; 2
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	40 e0       	ldi	r20, 0x00	; 0
     da8:	50 e0       	ldi	r21, 0x00	; 0
     daa:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <__divmodsi4>
     dae:	67 2b       	or	r22, r23
     db0:	31 f0       	breq	.+12     	; 0xdbe <effect_noise+0x32>
			setLED(i,j,k);
     db2:	c7 01       	movw	r24, r14
     db4:	b8 01       	movw	r22, r16
     db6:	ae 01       	movw	r20, r28
     db8:	0e 94 97 01 	call	0x32e	; 0x32e <setLED>
     dbc:	05 c0       	rjmp	.+10     	; 0xdc8 <effect_noise+0x3c>
		else
			clrLED(i,j,k);
     dbe:	c7 01       	movw	r24, r14
     dc0:	b8 01       	movw	r22, r16
     dc2:	ae 01       	movw	r20, r28
     dc4:	0e 94 bb 01 	call	0x376	; 0x376 <clrLED>
		int a;
	for (i=0;i<5;i++)
	{
	for (j=0;j<5;j++)
	{
	for (k=0;k<5;k++)
     dc8:	21 96       	adiw	r28, 0x01	; 1
     dca:	c5 30       	cpi	r28, 0x05	; 5
     dcc:	d1 05       	cpc	r29, r1
     dce:	39 f7       	brne	.-50     	; 0xd9e <effect_noise+0x12>
{
		int i,j,k;
		int a;
	for (i=0;i<5;i++)
	{
	for (j=0;j<5;j++)
     dd0:	0f 5f       	subi	r16, 0xFF	; 255
     dd2:	1f 4f       	sbci	r17, 0xFF	; 255
     dd4:	05 30       	cpi	r16, 0x05	; 5
     dd6:	11 05       	cpc	r17, r1
     dd8:	19 f0       	breq	.+6      	; 0xde0 <effect_noise+0x54>
     dda:	c0 e0       	ldi	r28, 0x00	; 0
     ddc:	d0 e0       	ldi	r29, 0x00	; 0
     dde:	df cf       	rjmp	.-66     	; 0xd9e <effect_noise+0x12>

void effect_noise(int direction, int iterations, int delay)
{
		int i,j,k;
		int a;
	for (i=0;i<5;i++)
     de0:	08 94       	sec
     de2:	e1 1c       	adc	r14, r1
     de4:	f1 1c       	adc	r15, r1
     de6:	85 e0       	ldi	r24, 0x05	; 5
     de8:	e8 16       	cp	r14, r24
     dea:	f1 04       	cpc	r15, r1
     dec:	19 f0       	breq	.+6      	; 0xdf4 <effect_noise+0x68>
     dee:	00 e0       	ldi	r16, 0x00	; 0
     df0:	10 e0       	ldi	r17, 0x00	; 0
     df2:	f3 cf       	rjmp	.-26     	; 0xdda <effect_noise+0x4e>
		else
			clrLED(i,j,k);
		}
	}
	}	
}
     df4:	df 91       	pop	r29
     df6:	cf 91       	pop	r28
     df8:	1f 91       	pop	r17
     dfa:	0f 91       	pop	r16
     dfc:	ff 90       	pop	r15
     dfe:	ef 90       	pop	r14
     e00:	08 95       	ret

00000e02 <effect_snow>:
	delay_ms(10-intensity);
	}
}

void effect_snow(int direction, int iterations, int delay)
{
     e02:	af 92       	push	r10
     e04:	bf 92       	push	r11
     e06:	cf 92       	push	r12
     e08:	df 92       	push	r13
     e0a:	ef 92       	push	r14
     e0c:	ff 92       	push	r15
     e0e:	0f 93       	push	r16
     e10:	1f 93       	push	r17
     e12:	cf 93       	push	r28
     e14:	df 93       	push	r29
     e16:	5a 01       	movw	r10, r20
     e18:	ee 24       	eor	r14, r14
     e1a:	ff 24       	eor	r15, r15
     e1c:	2d c0       	rjmp	.+90     	; 0xe78 <effect_snow+0x76>
     e1e:	e6 01       	movw	r28, r12
	{
	for (j=0;j<5;j++)
	{
	for (k=0;k<4;k++)
		{
			if(getLED(i,j,k+1))
     e20:	6e 01       	movw	r12, r28
     e22:	08 94       	sec
     e24:	c1 1c       	adc	r12, r1
     e26:	d1 1c       	adc	r13, r1
     e28:	c7 01       	movw	r24, r14
     e2a:	b8 01       	movw	r22, r16
     e2c:	a6 01       	movw	r20, r12
     e2e:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <getLED>
     e32:	88 23       	and	r24, r24
     e34:	31 f0       	breq	.+12     	; 0xe42 <effect_snow+0x40>
				setLED(i,j,k);
     e36:	c7 01       	movw	r24, r14
     e38:	b8 01       	movw	r22, r16
     e3a:	ae 01       	movw	r20, r28
     e3c:	0e 94 97 01 	call	0x32e	; 0x32e <setLED>
     e40:	05 c0       	rjmp	.+10     	; 0xe4c <effect_snow+0x4a>
			else
				clrLED(i,j,k);
     e42:	c7 01       	movw	r24, r14
     e44:	b8 01       	movw	r22, r16
     e46:	ae 01       	movw	r20, r28
     e48:	0e 94 bb 01 	call	0x376	; 0x376 <clrLED>
	
	for (i=0;i<5;i++)
	{
	for (j=0;j<5;j++)
	{
	for (k=0;k<4;k++)
     e4c:	84 e0       	ldi	r24, 0x04	; 4
     e4e:	c8 16       	cp	r12, r24
     e50:	d1 04       	cpc	r13, r1
     e52:	29 f7       	brne	.-54     	; 0xe1e <effect_snow+0x1c>
	int i,j,k;
	int a;
	
	for (i=0;i<5;i++)
	{
	for (j=0;j<5;j++)
     e54:	0f 5f       	subi	r16, 0xFF	; 255
     e56:	1f 4f       	sbci	r17, 0xFF	; 255
     e58:	05 30       	cpi	r16, 0x05	; 5
     e5a:	11 05       	cpc	r17, r1
     e5c:	19 f0       	breq	.+6      	; 0xe64 <effect_snow+0x62>
     e5e:	c0 e0       	ldi	r28, 0x00	; 0
     e60:	d0 e0       	ldi	r29, 0x00	; 0
     e62:	de cf       	rjmp	.-68     	; 0xe20 <effect_snow+0x1e>
void effect_snow(int direction, int iterations, int delay)
{
	int i,j,k;
	int a;
	
	for (i=0;i<5;i++)
     e64:	08 94       	sec
     e66:	e1 1c       	adc	r14, r1
     e68:	f1 1c       	adc	r15, r1
     e6a:	85 e0       	ldi	r24, 0x05	; 5
     e6c:	e8 16       	cp	r14, r24
     e6e:	f1 04       	cpc	r15, r1
     e70:	19 f4       	brne	.+6      	; 0xe78 <effect_snow+0x76>
     e72:	00 e0       	ldi	r16, 0x00	; 0
     e74:	10 e0       	ldi	r17, 0x00	; 0
     e76:	23 c0       	rjmp	.+70     	; 0xebe <effect_snow+0xbc>
     e78:	00 e0       	ldi	r16, 0x00	; 0
     e7a:	10 e0       	ldi	r17, 0x00	; 0
     e7c:	f0 cf       	rjmp	.-32     	; 0xe5e <effect_snow+0x5c>
	}
	
	}
		for (i=0;i<5;i++)
		for (j=0;j<5;j++){
				a=random()%8;
     e7e:	0e 94 ca 13 	call	0x2794	; 0x2794 <random>
				if(a==0)
     e82:	28 e0       	ldi	r18, 0x08	; 8
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	40 e0       	ldi	r20, 0x00	; 0
     e88:	50 e0       	ldi	r21, 0x00	; 0
     e8a:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <__divmodsi4>
     e8e:	67 2b       	or	r22, r23
     e90:	39 f4       	brne	.+14     	; 0xea0 <effect_snow+0x9e>
					setLED(i,j,4);
     e92:	c8 01       	movw	r24, r16
     e94:	be 01       	movw	r22, r28
     e96:	44 e0       	ldi	r20, 0x04	; 4
     e98:	50 e0       	ldi	r21, 0x00	; 0
     e9a:	0e 94 97 01 	call	0x32e	; 0x32e <setLED>
     e9e:	06 c0       	rjmp	.+12     	; 0xeac <effect_snow+0xaa>
				else
					clrLED(i,j,4);
     ea0:	c8 01       	movw	r24, r16
     ea2:	be 01       	movw	r22, r28
     ea4:	44 e0       	ldi	r20, 0x04	; 4
     ea6:	50 e0       	ldi	r21, 0x00	; 0
     ea8:	0e 94 bb 01 	call	0x376	; 0x376 <clrLED>
		}
	}
	
	}
		for (i=0;i<5;i++)
		for (j=0;j<5;j++){
     eac:	21 96       	adiw	r28, 0x01	; 1
     eae:	c5 30       	cpi	r28, 0x05	; 5
     eb0:	d1 05       	cpc	r29, r1
     eb2:	29 f7       	brne	.-54     	; 0xe7e <effect_snow+0x7c>
				clrLED(i,j,k);
		}
	}
	
	}
		for (i=0;i<5;i++)
     eb4:	0f 5f       	subi	r16, 0xFF	; 255
     eb6:	1f 4f       	sbci	r17, 0xFF	; 255
     eb8:	05 30       	cpi	r16, 0x05	; 5
     eba:	11 05       	cpc	r17, r1
     ebc:	19 f0       	breq	.+6      	; 0xec4 <effect_snow+0xc2>
     ebe:	c0 e0       	ldi	r28, 0x00	; 0
     ec0:	d0 e0       	ldi	r29, 0x00	; 0
     ec2:	dd cf       	rjmp	.-70     	; 0xe7e <effect_snow+0x7c>
				if(a==0)
					setLED(i,j,4);
				else
					clrLED(i,j,4);
				}
	delay_ms(delay);	
     ec4:	c5 01       	movw	r24, r10
     ec6:	0e 94 69 00 	call	0xd2	; 0xd2 <delay_ms>
}
     eca:	df 91       	pop	r29
     ecc:	cf 91       	pop	r28
     ece:	1f 91       	pop	r17
     ed0:	0f 91       	pop	r16
     ed2:	ff 90       	pop	r15
     ed4:	ef 90       	pop	r14
     ed6:	df 90       	pop	r13
     ed8:	cf 90       	pop	r12
     eda:	bf 90       	pop	r11
     edc:	af 90       	pop	r10
     ede:	08 95       	ret

00000ee0 <shrink>:
	delay_ms(delay);
	}
}

void shrink(char Array[5][5][5], int delay)
{
     ee0:	2f 92       	push	r2
     ee2:	3f 92       	push	r3
     ee4:	4f 92       	push	r4
     ee6:	5f 92       	push	r5
     ee8:	6f 92       	push	r6
     eea:	7f 92       	push	r7
     eec:	8f 92       	push	r8
     eee:	9f 92       	push	r9
     ef0:	af 92       	push	r10
     ef2:	bf 92       	push	r11
     ef4:	cf 92       	push	r12
     ef6:	df 92       	push	r13
     ef8:	ef 92       	push	r14
     efa:	ff 92       	push	r15
     efc:	0f 93       	push	r16
     efe:	1f 93       	push	r17
     f00:	df 93       	push	r29
     f02:	cf 93       	push	r28
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
     f08:	2c 97       	sbiw	r28, 0x0c	; 12
     f0a:	0f b6       	in	r0, 0x3f	; 63
     f0c:	f8 94       	cli
     f0e:	de bf       	out	0x3e, r29	; 62
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	cd bf       	out	0x3d, r28	; 61
     f14:	89 87       	std	Y+9, r24	; 0x09
     f16:	9a 87       	std	Y+10, r25	; 0x0a
     f18:	78 87       	std	Y+8, r23	; 0x08
     f1a:	6f 83       	std	Y+7, r22	; 0x07
     f1c:	0f 2e       	mov	r0, r31
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	8f 2e       	mov	r8, r31
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	9f 2e       	mov	r9, r31
     f26:	f4 e3       	ldi	r31, 0x34	; 52
     f28:	af 2e       	mov	r10, r31
     f2a:	f2 e4       	ldi	r31, 0x42	; 66
     f2c:	bf 2e       	mov	r11, r31
     f2e:	f0 2d       	mov	r31, r0
     f30:	22 24       	eor	r2, r2
     f32:	33 24       	eor	r3, r3
	double a,r=0;
	int i,j,k;
	for(a=45;a>=0;a--)
	{
	r=a/10;
     f34:	c5 01       	movw	r24, r10
     f36:	b4 01       	movw	r22, r8
     f38:	20 e0       	ldi	r18, 0x00	; 0
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	40 e2       	ldi	r20, 0x20	; 32
     f3e:	51 e4       	ldi	r21, 0x41	; 65
     f40:	0e 94 48 10 	call	0x2090	; 0x2090 <__divsf3>
     f44:	69 83       	std	Y+1, r22	; 0x01
     f46:	7a 83       	std	Y+2, r23	; 0x02
     f48:	8b 83       	std	Y+3, r24	; 0x03
     f4a:	9c 83       	std	Y+4, r25	; 0x04
     f4c:	89 85       	ldd	r24, Y+9	; 0x09
     f4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f50:	9c 01       	movw	r18, r24
     f52:	29 01       	movw	r4, r18
     f54:	ee 24       	eor	r14, r14
     f56:	ff 24       	eor	r15, r15
     f58:	65 c0       	rjmp	.+202    	; 0x1024 <shrink+0x144>
     f5a:	8b 85       	ldd	r24, Y+11	; 0x0b
     f5c:	9c 85       	ldd	r25, Y+12	; 0x0c
     f5e:	02 97       	sbiw	r24, 0x02	; 2
	{
	for (j=0;j<5;j++)
	{
	for (k=0;k<5;k++)
		{
		if(sqrt((i-2)*(i-2)+(j-2)*(j-2)+(k-2)*(k-2))<r)
     f60:	88 9f       	mul	r24, r24
     f62:	b0 01       	movw	r22, r0
     f64:	89 9f       	mul	r24, r25
     f66:	70 0d       	add	r23, r0
     f68:	98 9f       	mul	r25, r24
     f6a:	70 0d       	add	r23, r0
     f6c:	11 24       	eor	r1, r1
     f6e:	02 96       	adiw	r24, 0x02	; 2
     f70:	9c 87       	std	Y+12, r25	; 0x0c
     f72:	8b 87       	std	Y+11, r24	; 0x0b
     f74:	66 0d       	add	r22, r6
     f76:	77 1d       	adc	r23, r7
     f78:	88 27       	eor	r24, r24
     f7a:	77 fd       	sbrc	r23, 7
     f7c:	80 95       	com	r24
     f7e:	98 2f       	mov	r25, r24
     f80:	0e 94 24 11 	call	0x2248	; 0x2248 <__floatsisf>
     f84:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <sqrt>
     f88:	29 81       	ldd	r18, Y+1	; 0x01
     f8a:	3a 81       	ldd	r19, Y+2	; 0x02
     f8c:	4b 81       	ldd	r20, Y+3	; 0x03
     f8e:	5c 81       	ldd	r21, Y+4	; 0x04
     f90:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__ltsf2>
     f94:	88 23       	and	r24, r24
     f96:	24 f0       	brlt	.+8      	; 0xfa0 <shrink+0xc0>
			setLED(i,j,k);
		else
			if(Array[i][j][k]==1)
     f98:	f6 01       	movw	r30, r12
     f9a:	80 81       	ld	r24, Z
     f9c:	81 30       	cpi	r24, 0x01	; 1
     f9e:	39 f4       	brne	.+14     	; 0xfae <shrink+0xce>
				setLED(i,j,k);
     fa0:	c7 01       	movw	r24, r14
     fa2:	b8 01       	movw	r22, r16
     fa4:	4b 85       	ldd	r20, Y+11	; 0x0b
     fa6:	5c 85       	ldd	r21, Y+12	; 0x0c
     fa8:	0e 94 97 01 	call	0x32e	; 0x32e <setLED>
     fac:	06 c0       	rjmp	.+12     	; 0xfba <shrink+0xda>
			else
				clrLED(i,j,k);
     fae:	c7 01       	movw	r24, r14
     fb0:	b8 01       	movw	r22, r16
     fb2:	4b 85       	ldd	r20, Y+11	; 0x0b
     fb4:	5c 85       	ldd	r21, Y+12	; 0x0c
     fb6:	0e 94 bb 01 	call	0x376	; 0x376 <clrLED>
	r=a/10;
	for (i=0;i<5;i++)
	{
	for (j=0;j<5;j++)
	{
	for (k=0;k<5;k++)
     fba:	8b 85       	ldd	r24, Y+11	; 0x0b
     fbc:	9c 85       	ldd	r25, Y+12	; 0x0c
     fbe:	01 96       	adiw	r24, 0x01	; 1
     fc0:	9c 87       	std	Y+12, r25	; 0x0c
     fc2:	8b 87       	std	Y+11, r24	; 0x0b
     fc4:	08 94       	sec
     fc6:	c1 1c       	adc	r12, r1
     fc8:	d1 1c       	adc	r13, r1
     fca:	05 97       	sbiw	r24, 0x05	; 5
     fcc:	31 f6       	brne	.-116    	; 0xf5a <shrink+0x7a>
	for(a=45;a>=0;a--)
	{
	r=a/10;
	for (i=0;i<5;i++)
	{
	for (j=0;j<5;j++)
     fce:	0f 5f       	subi	r16, 0xFF	; 255
     fd0:	1f 4f       	sbci	r17, 0xFF	; 255
     fd2:	05 30       	cpi	r16, 0x05	; 5
     fd4:	11 05       	cpc	r17, r1
     fd6:	d9 f0       	breq	.+54     	; 0x100e <shrink+0x12e>
     fd8:	02 50       	subi	r16, 0x02	; 2
     fda:	10 40       	sbci	r17, 0x00	; 0
	{
	for (k=0;k<5;k++)
		{
		if(sqrt((i-2)*(i-2)+(j-2)*(j-2)+(k-2)*(k-2))<r)
     fdc:	00 9f       	mul	r16, r16
     fde:	30 01       	movw	r6, r0
     fe0:	01 9f       	mul	r16, r17
     fe2:	70 0c       	add	r7, r0
     fe4:	10 9f       	mul	r17, r16
     fe6:	70 0c       	add	r7, r0
     fe8:	11 24       	eor	r1, r1
     fea:	0e 5f       	subi	r16, 0xFE	; 254
     fec:	1f 4f       	sbci	r17, 0xFF	; 255
     fee:	ed 81       	ldd	r30, Y+5	; 0x05
     ff0:	fe 81       	ldd	r31, Y+6	; 0x06
     ff2:	6e 0e       	add	r6, r30
     ff4:	7f 1e       	adc	r7, r31
     ff6:	68 01       	movw	r12, r16
     ff8:	cc 0c       	add	r12, r12
     ffa:	dd 1c       	adc	r13, r13
     ffc:	cc 0c       	add	r12, r12
     ffe:	dd 1c       	adc	r13, r13
    1000:	c0 0e       	add	r12, r16
    1002:	d1 1e       	adc	r13, r17
    1004:	c4 0c       	add	r12, r4
    1006:	d5 1c       	adc	r13, r5
    1008:	1c 86       	std	Y+12, r1	; 0x0c
    100a:	1b 86       	std	Y+11, r1	; 0x0b
    100c:	a6 cf       	rjmp	.-180    	; 0xf5a <shrink+0x7a>
	double a,r=0;
	int i,j,k;
	for(a=45;a>=0;a--)
	{
	r=a/10;
	for (i=0;i<5;i++)
    100e:	08 94       	sec
    1010:	e1 1c       	adc	r14, r1
    1012:	f1 1c       	adc	r15, r1
    1014:	89 e1       	ldi	r24, 0x19	; 25
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	48 0e       	add	r4, r24
    101a:	59 1e       	adc	r5, r25
    101c:	95 e0       	ldi	r25, 0x05	; 5
    101e:	e9 16       	cp	r14, r25
    1020:	f1 04       	cpc	r15, r1
    1022:	a1 f0       	breq	.+40     	; 0x104c <shrink+0x16c>
    1024:	ee ef       	ldi	r30, 0xFE	; 254
    1026:	ff ef       	ldi	r31, 0xFF	; 255
    1028:	ee 0e       	add	r14, r30
    102a:	ff 1e       	adc	r15, r31
	{
	for (j=0;j<5;j++)
	{
	for (k=0;k<5;k++)
		{
		if(sqrt((i-2)*(i-2)+(j-2)*(j-2)+(k-2)*(k-2))<r)
    102c:	ee 9c       	mul	r14, r14
    102e:	c0 01       	movw	r24, r0
    1030:	ef 9c       	mul	r14, r15
    1032:	90 0d       	add	r25, r0
    1034:	fe 9c       	mul	r15, r14
    1036:	90 0d       	add	r25, r0
    1038:	11 24       	eor	r1, r1
    103a:	9e 83       	std	Y+6, r25	; 0x06
    103c:	8d 83       	std	Y+5, r24	; 0x05
    103e:	e2 e0       	ldi	r30, 0x02	; 2
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	ee 0e       	add	r14, r30
    1044:	ff 1e       	adc	r15, r31
    1046:	00 e0       	ldi	r16, 0x00	; 0
    1048:	10 e0       	ldi	r17, 0x00	; 0
    104a:	c6 cf       	rjmp	.-116    	; 0xfd8 <shrink+0xf8>
			else
				clrLED(i,j,k);
		}
	}
	}
	delay_ms(delay);
    104c:	8f 81       	ldd	r24, Y+7	; 0x07
    104e:	98 85       	ldd	r25, Y+8	; 0x08
    1050:	0e 94 69 00 	call	0xd2	; 0xd2 <delay_ms>

void shrink(char Array[5][5][5], int delay)
{
	double a,r=0;
	int i,j,k;
	for(a=45;a>=0;a--)
    1054:	c5 01       	movw	r24, r10
    1056:	b4 01       	movw	r22, r8
    1058:	20 e0       	ldi	r18, 0x00	; 0
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	40 e8       	ldi	r20, 0x80	; 128
    105e:	5f e3       	ldi	r21, 0x3F	; 63
    1060:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <__subsf3>
    1064:	4b 01       	movw	r8, r22
    1066:	5c 01       	movw	r10, r24
    1068:	08 94       	sec
    106a:	21 1c       	adc	r2, r1
    106c:	31 1c       	adc	r3, r1
    106e:	fe e2       	ldi	r31, 0x2E	; 46
    1070:	2f 16       	cp	r2, r31
    1072:	31 04       	cpc	r3, r1
    1074:	09 f0       	breq	.+2      	; 0x1078 <shrink+0x198>
    1076:	5e cf       	rjmp	.-324    	; 0xf34 <shrink+0x54>
	}
	}
	delay_ms(delay);
	}	

}
    1078:	2c 96       	adiw	r28, 0x0c	; 12
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	f8 94       	cli
    107e:	de bf       	out	0x3e, r29	; 62
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	cd bf       	out	0x3d, r28	; 61
    1084:	cf 91       	pop	r28
    1086:	df 91       	pop	r29
    1088:	1f 91       	pop	r17
    108a:	0f 91       	pop	r16
    108c:	ff 90       	pop	r15
    108e:	ef 90       	pop	r14
    1090:	df 90       	pop	r13
    1092:	cf 90       	pop	r12
    1094:	bf 90       	pop	r11
    1096:	af 90       	pop	r10
    1098:	9f 90       	pop	r9
    109a:	8f 90       	pop	r8
    109c:	7f 90       	pop	r7
    109e:	6f 90       	pop	r6
    10a0:	5f 90       	pop	r5
    10a2:	4f 90       	pop	r4
    10a4:	3f 90       	pop	r3
    10a6:	2f 90       	pop	r2
    10a8:	08 95       	ret

000010aa <grow2>:
	delay_ms(delay);
	}
}

void grow2(char Array[5][5][5], int delay)
{
    10aa:	2f 92       	push	r2
    10ac:	3f 92       	push	r3
    10ae:	4f 92       	push	r4
    10b0:	5f 92       	push	r5
    10b2:	6f 92       	push	r6
    10b4:	7f 92       	push	r7
    10b6:	8f 92       	push	r8
    10b8:	9f 92       	push	r9
    10ba:	af 92       	push	r10
    10bc:	bf 92       	push	r11
    10be:	cf 92       	push	r12
    10c0:	df 92       	push	r13
    10c2:	ef 92       	push	r14
    10c4:	ff 92       	push	r15
    10c6:	0f 93       	push	r16
    10c8:	1f 93       	push	r17
    10ca:	df 93       	push	r29
    10cc:	cf 93       	push	r28
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
    10d2:	2a 97       	sbiw	r28, 0x0a	; 10
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	f8 94       	cli
    10d8:	de bf       	out	0x3e, r29	; 62
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	cd bf       	out	0x3d, r28	; 61
    10de:	78 87       	std	Y+8, r23	; 0x08
    10e0:	6f 83       	std	Y+7, r22	; 0x07
    10e2:	0f 2e       	mov	r0, r31
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	6f 2e       	mov	r6, r31
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	7f 2e       	mov	r7, r31
    10ec:	f0 e8       	ldi	r31, 0x80	; 128
    10ee:	8f 2e       	mov	r8, r31
    10f0:	f0 e4       	ldi	r31, 0x40	; 64
    10f2:	9f 2e       	mov	r9, r31
    10f4:	f0 2d       	mov	r31, r0
    10f6:	0f 2e       	mov	r0, r31
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	2f 2e       	mov	r2, r31
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	3f 2e       	mov	r3, r31
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	4f 2e       	mov	r4, r31
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	5f 2e       	mov	r5, r31
    1108:	f0 2d       	mov	r31, r0
    110a:	1a 82       	std	Y+2, r1	; 0x02
    110c:	19 82       	std	Y+1, r1	; 0x01
    110e:	b1 c0       	rjmp	.+354    	; 0x1272 <grow2+0x1c8>
    1110:	29 85       	ldd	r18, Y+9	; 0x09
    1112:	3a 85       	ldd	r19, Y+10	; 0x0a
    1114:	22 50       	subi	r18, 0x02	; 2
    1116:	30 40       	sbci	r19, 0x00	; 0
		{
			for (j=0;j<5;j++)
			{
			for (k=0;k<5;k++)
				{
				if(sqrt((i-2)*(i-2)+(j-2)*(j-2)+(k-2)*(k-2))<r)
    1118:	22 9f       	mul	r18, r18
    111a:	b0 01       	movw	r22, r0
    111c:	23 9f       	mul	r18, r19
    111e:	70 0d       	add	r23, r0
    1120:	32 9f       	mul	r19, r18
    1122:	70 0d       	add	r23, r0
    1124:	11 24       	eor	r1, r1
    1126:	2e 5f       	subi	r18, 0xFE	; 254
    1128:	3f 4f       	sbci	r19, 0xFF	; 255
    112a:	3a 87       	std	Y+10, r19	; 0x0a
    112c:	29 87       	std	Y+9, r18	; 0x09
    112e:	8b 81       	ldd	r24, Y+3	; 0x03
    1130:	9c 81       	ldd	r25, Y+4	; 0x04
    1132:	68 0f       	add	r22, r24
    1134:	79 1f       	adc	r23, r25
    1136:	88 27       	eor	r24, r24
    1138:	77 fd       	sbrc	r23, 7
    113a:	80 95       	com	r24
    113c:	98 2f       	mov	r25, r24
    113e:	0e 94 24 11 	call	0x2248	; 0x2248 <__floatsisf>
    1142:	7b 01       	movw	r14, r22
    1144:	8c 01       	movw	r16, r24
    1146:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <sqrt>
    114a:	a2 01       	movw	r20, r4
    114c:	91 01       	movw	r18, r2
    114e:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__ltsf2>
    1152:	88 23       	and	r24, r24
    1154:	3c f4       	brge	.+14     	; 0x1164 <grow2+0xba>
					setLED(i,j,k);
    1156:	c5 01       	movw	r24, r10
    1158:	b6 01       	movw	r22, r12
    115a:	49 85       	ldd	r20, Y+9	; 0x09
    115c:	5a 85       	ldd	r21, Y+10	; 0x0a
    115e:	0e 94 97 01 	call	0x32e	; 0x32e <setLED>
    1162:	06 c0       	rjmp	.+12     	; 0x1170 <grow2+0xc6>
				/*else
					if(Array[i][j][k]==1)
						setLED(i,j,k);*/
					else
						clrLED(i,j,k);
    1164:	c5 01       	movw	r24, r10
    1166:	b6 01       	movw	r22, r12
    1168:	49 85       	ldd	r20, Y+9	; 0x09
    116a:	5a 85       	ldd	r21, Y+10	; 0x0a
    116c:	0e 94 bb 01 	call	0x376	; 0x376 <clrLED>
				if(sqrt((i-2)*(i-2)+(j-2)*(j-2)+(k-2)*(k-2))<r-0.7)
    1170:	c8 01       	movw	r24, r16
    1172:	b7 01       	movw	r22, r14
    1174:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <sqrt>
    1178:	7b 01       	movw	r14, r22
    117a:	8c 01       	movw	r16, r24
    117c:	c2 01       	movw	r24, r4
    117e:	b1 01       	movw	r22, r2
    1180:	23 e3       	ldi	r18, 0x33	; 51
    1182:	33 e3       	ldi	r19, 0x33	; 51
    1184:	43 e3       	ldi	r20, 0x33	; 51
    1186:	5f e3       	ldi	r21, 0x3F	; 63
    1188:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <__subsf3>
    118c:	9b 01       	movw	r18, r22
    118e:	ac 01       	movw	r20, r24
    1190:	c8 01       	movw	r24, r16
    1192:	b7 01       	movw	r22, r14
    1194:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__ltsf2>
    1198:	88 23       	and	r24, r24
    119a:	34 f4       	brge	.+12     	; 0x11a8 <grow2+0xfe>
					clrLED(i,j,k);
    119c:	c5 01       	movw	r24, r10
    119e:	b6 01       	movw	r22, r12
    11a0:	49 85       	ldd	r20, Y+9	; 0x09
    11a2:	5a 85       	ldd	r21, Y+10	; 0x0a
    11a4:	0e 94 bb 01 	call	0x376	; 0x376 <clrLED>
	{
		for (i=0;i<5;i++)
		{
			for (j=0;j<5;j++)
			{
			for (k=0;k<5;k++)
    11a8:	e9 85       	ldd	r30, Y+9	; 0x09
    11aa:	fa 85       	ldd	r31, Y+10	; 0x0a
    11ac:	31 96       	adiw	r30, 0x01	; 1
    11ae:	fa 87       	std	Y+10, r31	; 0x0a
    11b0:	e9 87       	std	Y+9, r30	; 0x09
    11b2:	35 97       	sbiw	r30, 0x05	; 5
    11b4:	09 f0       	breq	.+2      	; 0x11b8 <grow2+0x10e>
    11b6:	ac cf       	rjmp	.-168    	; 0x1110 <grow2+0x66>

	for(a=4;a<36;a++)
	{
		for (i=0;i<5;i++)
		{
			for (j=0;j<5;j++)
    11b8:	08 94       	sec
    11ba:	c1 1c       	adc	r12, r1
    11bc:	d1 1c       	adc	r13, r1
    11be:	f5 e0       	ldi	r31, 0x05	; 5
    11c0:	cf 16       	cp	r12, r31
    11c2:	d1 04       	cpc	r13, r1
    11c4:	c1 f0       	breq	.+48     	; 0x11f6 <grow2+0x14c>
    11c6:	2e ef       	ldi	r18, 0xFE	; 254
    11c8:	3f ef       	ldi	r19, 0xFF	; 255
    11ca:	c2 0e       	add	r12, r18
    11cc:	d3 1e       	adc	r13, r19
			{
			for (k=0;k<5;k++)
				{
				if(sqrt((i-2)*(i-2)+(j-2)*(j-2)+(k-2)*(k-2))<r)
    11ce:	cc 9c       	mul	r12, r12
    11d0:	c0 01       	movw	r24, r0
    11d2:	cd 9c       	mul	r12, r13
    11d4:	90 0d       	add	r25, r0
    11d6:	dc 9c       	mul	r13, r12
    11d8:	90 0d       	add	r25, r0
    11da:	11 24       	eor	r1, r1
    11dc:	e2 e0       	ldi	r30, 0x02	; 2
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	ce 0e       	add	r12, r30
    11e2:	df 1e       	adc	r13, r31
    11e4:	2d 81       	ldd	r18, Y+5	; 0x05
    11e6:	3e 81       	ldd	r19, Y+6	; 0x06
    11e8:	82 0f       	add	r24, r18
    11ea:	93 1f       	adc	r25, r19
    11ec:	9c 83       	std	Y+4, r25	; 0x04
    11ee:	8b 83       	std	Y+3, r24	; 0x03
    11f0:	1a 86       	std	Y+10, r1	; 0x0a
    11f2:	19 86       	std	Y+9, r1	; 0x09
    11f4:	8d cf       	rjmp	.-230    	; 0x1110 <grow2+0x66>
	double a,r=0;
	int i,j,k;

	for(a=4;a<36;a++)
	{
		for (i=0;i<5;i++)
    11f6:	08 94       	sec
    11f8:	a1 1c       	adc	r10, r1
    11fa:	b1 1c       	adc	r11, r1
    11fc:	35 e0       	ldi	r19, 0x05	; 5
    11fe:	a3 16       	cp	r10, r19
    1200:	b1 04       	cpc	r11, r1
    1202:	a1 f0       	breq	.+40     	; 0x122c <grow2+0x182>
    1204:	8e ef       	ldi	r24, 0xFE	; 254
    1206:	9f ef       	ldi	r25, 0xFF	; 255
    1208:	a8 0e       	add	r10, r24
    120a:	b9 1e       	adc	r11, r25
		{
			for (j=0;j<5;j++)
			{
			for (k=0;k<5;k++)
				{
				if(sqrt((i-2)*(i-2)+(j-2)*(j-2)+(k-2)*(k-2))<r)
    120c:	aa 9c       	mul	r10, r10
    120e:	f0 01       	movw	r30, r0
    1210:	ab 9c       	mul	r10, r11
    1212:	f0 0d       	add	r31, r0
    1214:	ba 9c       	mul	r11, r10
    1216:	f0 0d       	add	r31, r0
    1218:	11 24       	eor	r1, r1
    121a:	fe 83       	std	Y+6, r31	; 0x06
    121c:	ed 83       	std	Y+5, r30	; 0x05
    121e:	22 e0       	ldi	r18, 0x02	; 2
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	a2 0e       	add	r10, r18
    1224:	b3 1e       	adc	r11, r19
    1226:	cc 24       	eor	r12, r12
    1228:	dd 24       	eor	r13, r13
    122a:	cd cf       	rjmp	.-102    	; 0x11c6 <grow2+0x11c>
				
				}
			}
		}
	r=a/10;
	delay_ms(delay);
    122c:	8f 81       	ldd	r24, Y+7	; 0x07
    122e:	98 85       	ldd	r25, Y+8	; 0x08
    1230:	0e 94 69 00 	call	0xd2	; 0xd2 <delay_ms>
void grow2(char Array[5][5][5], int delay)
{
	double a,r=0;
	int i,j,k;

	for(a=4;a<36;a++)
    1234:	c4 01       	movw	r24, r8
    1236:	b3 01       	movw	r22, r6
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	40 e8       	ldi	r20, 0x80	; 128
    123e:	5f e3       	ldi	r21, 0x3F	; 63
    1240:	0e 94 1b 10 	call	0x2036	; 0x2036 <__addsf3>
    1244:	7b 01       	movw	r14, r22
    1246:	8c 01       	movw	r16, r24
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	9a 81       	ldd	r25, Y+2	; 0x02
    124c:	01 96       	adiw	r24, 0x01	; 1
    124e:	9a 83       	std	Y+2, r25	; 0x02
    1250:	89 83       	std	Y+1, r24	; 0x01
    1252:	80 97       	sbiw	r24, 0x20	; 32
    1254:	89 f0       	breq	.+34     	; 0x1278 <grow2+0x1ce>
					clrLED(i,j,k);
				
				}
			}
		}
	r=a/10;
    1256:	c4 01       	movw	r24, r8
    1258:	b3 01       	movw	r22, r6
    125a:	20 e0       	ldi	r18, 0x00	; 0
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	40 e2       	ldi	r20, 0x20	; 32
    1260:	51 e4       	ldi	r21, 0x41	; 65
    1262:	0e 94 48 10 	call	0x2090	; 0x2090 <__divsf3>
    1266:	1b 01       	movw	r2, r22
    1268:	2c 01       	movw	r4, r24
    126a:	c7 01       	movw	r24, r14
    126c:	d8 01       	movw	r26, r16
    126e:	3c 01       	movw	r6, r24
    1270:	4d 01       	movw	r8, r26
    1272:	aa 24       	eor	r10, r10
    1274:	bb 24       	eor	r11, r11
    1276:	c6 cf       	rjmp	.-116    	; 0x1204 <grow2+0x15a>
	delay_ms(delay);
	}
}
    1278:	2a 96       	adiw	r28, 0x0a	; 10
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	f8 94       	cli
    127e:	de bf       	out	0x3e, r29	; 62
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	cd bf       	out	0x3d, r28	; 61
    1284:	cf 91       	pop	r28
    1286:	df 91       	pop	r29
    1288:	1f 91       	pop	r17
    128a:	0f 91       	pop	r16
    128c:	ff 90       	pop	r15
    128e:	ef 90       	pop	r14
    1290:	df 90       	pop	r13
    1292:	cf 90       	pop	r12
    1294:	bf 90       	pop	r11
    1296:	af 90       	pop	r10
    1298:	9f 90       	pop	r9
    129a:	8f 90       	pop	r8
    129c:	7f 90       	pop	r7
    129e:	6f 90       	pop	r6
    12a0:	5f 90       	pop	r5
    12a2:	4f 90       	pop	r4
    12a4:	3f 90       	pop	r3
    12a6:	2f 90       	pop	r2
    12a8:	08 95       	ret

000012aa <effect_rings>:
		effect_noise(1,10,10);
		
}

void effect_rings(int direction, int iterations, int delay)
{
    12aa:	df 93       	push	r29
    12ac:	cf 93       	push	r28
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
    12b2:	cd 57       	subi	r28, 0x7D	; 125
    12b4:	d0 40       	sbci	r29, 0x00	; 0
    12b6:	0f b6       	in	r0, 0x3f	; 63
    12b8:	f8 94       	cli
    12ba:	de bf       	out	0x3e, r29	; 62
    12bc:	0f be       	out	0x3f, r0	; 63
    12be:	cd bf       	out	0x3d, r28	; 61
    12c0:	20 e0       	ldi	r18, 0x00	; 0
    12c2:	30 e0       	ldi	r19, 0x00	; 0
	char Array[5][5][5];

	int i,j,k,rand;
	for (i=0;i<5;i++)
    12c4:	a9 e1       	ldi	r26, 0x19	; 25
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	be 01       	movw	r22, r28
    12ca:	6f 5f       	subi	r22, 0xFF	; 255
    12cc:	7f 4f       	sbci	r23, 0xFF	; 255
    12ce:	0f c0       	rjmp	.+30     	; 0x12ee <effect_rings+0x44>
		for (j=0;j<5;j++)
			for (k=0;k<5;k++)
				{
					Array[i][j][k]=0;
    12d0:	10 82       	st	Z, r1
    12d2:	11 82       	std	Z+1, r1	; 0x01
    12d4:	12 82       	std	Z+2, r1	; 0x02
    12d6:	13 82       	std	Z+3, r1	; 0x03
    12d8:	14 82       	std	Z+4, r1	; 0x04
{
	char Array[5][5][5];

	int i,j,k,rand;
	for (i=0;i<5;i++)
		for (j=0;j<5;j++)
    12da:	01 96       	adiw	r24, 0x01	; 1
    12dc:	35 96       	adiw	r30, 0x05	; 5
    12de:	85 30       	cpi	r24, 0x05	; 5
    12e0:	91 05       	cpc	r25, r1
    12e2:	b1 f7       	brne	.-20     	; 0x12d0 <effect_rings+0x26>
void effect_rings(int direction, int iterations, int delay)
{
	char Array[5][5][5];

	int i,j,k,rand;
	for (i=0;i<5;i++)
    12e4:	2f 5f       	subi	r18, 0xFF	; 255
    12e6:	3f 4f       	sbci	r19, 0xFF	; 255
    12e8:	25 30       	cpi	r18, 0x05	; 5
    12ea:	31 05       	cpc	r19, r1
    12ec:	61 f0       	breq	.+24     	; 0x1306 <effect_rings+0x5c>
    12ee:	2a 9f       	mul	r18, r26
    12f0:	f0 01       	movw	r30, r0
    12f2:	2b 9f       	mul	r18, r27
    12f4:	f0 0d       	add	r31, r0
    12f6:	3a 9f       	mul	r19, r26
    12f8:	f0 0d       	add	r31, r0
    12fa:	11 24       	eor	r1, r1
    12fc:	e6 0f       	add	r30, r22
    12fe:	f7 1f       	adc	r31, r23
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	e5 cf       	rjmp	.-54     	; 0x12d0 <effect_rings+0x26>
			for (k=0;k<5;k++)
				{
					Array[i][j][k]=0;
				}
				
	grow2(Array,delay);
    1306:	ce 01       	movw	r24, r28
    1308:	01 96       	adiw	r24, 0x01	; 1
    130a:	ba 01       	movw	r22, r20
    130c:	0e 94 55 08 	call	0x10aa	; 0x10aa <grow2>

}
    1310:	c3 58       	subi	r28, 0x83	; 131
    1312:	df 4f       	sbci	r29, 0xFF	; 255
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	f8 94       	cli
    1318:	de bf       	out	0x3e, r29	; 62
    131a:	0f be       	out	0x3f, r0	; 63
    131c:	cd bf       	out	0x3d, r28	; 61
    131e:	cf 91       	pop	r28
    1320:	df 91       	pop	r29
    1322:	08 95       	ret

00001324 <grow>:


}

void grow(char Array[5][5][5], int delay)
{
    1324:	2f 92       	push	r2
    1326:	3f 92       	push	r3
    1328:	4f 92       	push	r4
    132a:	5f 92       	push	r5
    132c:	6f 92       	push	r6
    132e:	7f 92       	push	r7
    1330:	8f 92       	push	r8
    1332:	9f 92       	push	r9
    1334:	af 92       	push	r10
    1336:	bf 92       	push	r11
    1338:	cf 92       	push	r12
    133a:	df 92       	push	r13
    133c:	ef 92       	push	r14
    133e:	ff 92       	push	r15
    1340:	0f 93       	push	r16
    1342:	1f 93       	push	r17
    1344:	df 93       	push	r29
    1346:	cf 93       	push	r28
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
    134c:	2c 97       	sbiw	r28, 0x0c	; 12
    134e:	0f b6       	in	r0, 0x3f	; 63
    1350:	f8 94       	cli
    1352:	de bf       	out	0x3e, r29	; 62
    1354:	0f be       	out	0x3f, r0	; 63
    1356:	cd bf       	out	0x3d, r28	; 61
    1358:	89 87       	std	Y+9, r24	; 0x09
    135a:	9a 87       	std	Y+10, r25	; 0x0a
    135c:	78 87       	std	Y+8, r23	; 0x08
    135e:	6f 83       	std	Y+7, r22	; 0x07
    1360:	0f 2e       	mov	r0, r31
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	8f 2e       	mov	r8, r31
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	9f 2e       	mov	r9, r31
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	af 2e       	mov	r10, r31
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	bf 2e       	mov	r11, r31
    1372:	f0 2d       	mov	r31, r0
    1374:	89 82       	std	Y+1, r8	; 0x01
    1376:	9a 82       	std	Y+2, r9	; 0x02
    1378:	ab 82       	std	Y+3, r10	; 0x03
    137a:	bc 82       	std	Y+4, r11	; 0x04
    137c:	22 24       	eor	r2, r2
    137e:	33 24       	eor	r3, r3
    1380:	9e c0       	rjmp	.+316    	; 0x14be <grow+0x19a>
    1382:	02 50       	subi	r16, 0x02	; 2
    1384:	10 40       	sbci	r17, 0x00	; 0
	{
	for (j=0;j<5;j++)
	{
	for (k=0;k<5;k++)
		{
		if(sqrt((i-2)*(i-2)+(j-2)*(j-2)+(k-2)*(k-2))<r)
    1386:	00 9f       	mul	r16, r16
    1388:	b0 01       	movw	r22, r0
    138a:	01 9f       	mul	r16, r17
    138c:	70 0d       	add	r23, r0
    138e:	10 9f       	mul	r17, r16
    1390:	70 0d       	add	r23, r0
    1392:	11 24       	eor	r1, r1
    1394:	0e 5f       	subi	r16, 0xFE	; 254
    1396:	1f 4f       	sbci	r17, 0xFF	; 255
    1398:	66 0d       	add	r22, r6
    139a:	77 1d       	adc	r23, r7
    139c:	88 27       	eor	r24, r24
    139e:	77 fd       	sbrc	r23, 7
    13a0:	80 95       	com	r24
    13a2:	98 2f       	mov	r25, r24
    13a4:	0e 94 24 11 	call	0x2248	; 0x2248 <__floatsisf>
    13a8:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <sqrt>
    13ac:	29 81       	ldd	r18, Y+1	; 0x01
    13ae:	3a 81       	ldd	r19, Y+2	; 0x02
    13b0:	4b 81       	ldd	r20, Y+3	; 0x03
    13b2:	5c 81       	ldd	r21, Y+4	; 0x04
    13b4:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__ltsf2>
    13b8:	88 23       	and	r24, r24
    13ba:	24 f0       	brlt	.+8      	; 0x13c4 <grow+0xa0>
			setLED(i,j,k);
		else
			if(Array[i][j][k]==1)
    13bc:	d6 01       	movw	r26, r12
    13be:	8c 91       	ld	r24, X
    13c0:	81 30       	cpi	r24, 0x01	; 1
    13c2:	39 f4       	brne	.+14     	; 0x13d2 <grow+0xae>
				setLED(i,j,k);
    13c4:	c7 01       	movw	r24, r14
    13c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    13c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ca:	a8 01       	movw	r20, r16
    13cc:	0e 94 97 01 	call	0x32e	; 0x32e <setLED>
    13d0:	06 c0       	rjmp	.+12     	; 0x13de <grow+0xba>
			else
				clrLED(i,j,k);
    13d2:	c7 01       	movw	r24, r14
    13d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    13d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    13d8:	a8 01       	movw	r20, r16
    13da:	0e 94 bb 01 	call	0x376	; 0x376 <clrLED>
	{
	for (i=0;i<5;i++)
	{
	for (j=0;j<5;j++)
	{
	for (k=0;k<5;k++)
    13de:	0f 5f       	subi	r16, 0xFF	; 255
    13e0:	1f 4f       	sbci	r17, 0xFF	; 255
    13e2:	08 94       	sec
    13e4:	c1 1c       	adc	r12, r1
    13e6:	d1 1c       	adc	r13, r1
    13e8:	05 30       	cpi	r16, 0x05	; 5
    13ea:	11 05       	cpc	r17, r1
    13ec:	51 f6       	brne	.-108    	; 0x1382 <grow+0x5e>

	for(a=0;a<45;a++)
	{
	for (i=0;i<5;i++)
	{
	for (j=0;j<5;j++)
    13ee:	eb 85       	ldd	r30, Y+11	; 0x0b
    13f0:	fc 85       	ldd	r31, Y+12	; 0x0c
    13f2:	31 96       	adiw	r30, 0x01	; 1
    13f4:	fc 87       	std	Y+12, r31	; 0x0c
    13f6:	eb 87       	std	Y+11, r30	; 0x0b
    13f8:	35 97       	sbiw	r30, 0x05	; 5
    13fa:	e9 f0       	breq	.+58     	; 0x1436 <grow+0x112>
    13fc:	8b 85       	ldd	r24, Y+11	; 0x0b
    13fe:	9c 85       	ldd	r25, Y+12	; 0x0c
    1400:	02 97       	sbiw	r24, 0x02	; 2
	{
	for (k=0;k<5;k++)
		{
		if(sqrt((i-2)*(i-2)+(j-2)*(j-2)+(k-2)*(k-2))<r)
    1402:	88 9f       	mul	r24, r24
    1404:	30 01       	movw	r6, r0
    1406:	89 9f       	mul	r24, r25
    1408:	70 0c       	add	r7, r0
    140a:	98 9f       	mul	r25, r24
    140c:	70 0c       	add	r7, r0
    140e:	11 24       	eor	r1, r1
    1410:	02 96       	adiw	r24, 0x02	; 2
    1412:	9c 87       	std	Y+12, r25	; 0x0c
    1414:	8b 87       	std	Y+11, r24	; 0x0b
    1416:	ad 81       	ldd	r26, Y+5	; 0x05
    1418:	be 81       	ldd	r27, Y+6	; 0x06
    141a:	6a 0e       	add	r6, r26
    141c:	7b 1e       	adc	r7, r27
    141e:	6c 01       	movw	r12, r24
    1420:	cc 0c       	add	r12, r12
    1422:	dd 1c       	adc	r13, r13
    1424:	cc 0c       	add	r12, r12
    1426:	dd 1c       	adc	r13, r13
    1428:	c8 0e       	add	r12, r24
    142a:	d9 1e       	adc	r13, r25
    142c:	c4 0c       	add	r12, r4
    142e:	d5 1c       	adc	r13, r5
    1430:	00 e0       	ldi	r16, 0x00	; 0
    1432:	10 e0       	ldi	r17, 0x00	; 0
    1434:	a6 cf       	rjmp	.-180    	; 0x1382 <grow+0x5e>
	double a,r=0;
	int i,j,k;

	for(a=0;a<45;a++)
	{
	for (i=0;i<5;i++)
    1436:	08 94       	sec
    1438:	e1 1c       	adc	r14, r1
    143a:	f1 1c       	adc	r15, r1
    143c:	e9 e1       	ldi	r30, 0x19	; 25
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	4e 0e       	add	r4, r30
    1442:	5f 1e       	adc	r5, r31
    1444:	f5 e0       	ldi	r31, 0x05	; 5
    1446:	ef 16       	cp	r14, r31
    1448:	f1 04       	cpc	r15, r1
    144a:	a1 f0       	breq	.+40     	; 0x1474 <grow+0x150>
    144c:	8e ef       	ldi	r24, 0xFE	; 254
    144e:	9f ef       	ldi	r25, 0xFF	; 255
    1450:	e8 0e       	add	r14, r24
    1452:	f9 1e       	adc	r15, r25
	{
	for (j=0;j<5;j++)
	{
	for (k=0;k<5;k++)
		{
		if(sqrt((i-2)*(i-2)+(j-2)*(j-2)+(k-2)*(k-2))<r)
    1454:	ee 9c       	mul	r14, r14
    1456:	d0 01       	movw	r26, r0
    1458:	ef 9c       	mul	r14, r15
    145a:	b0 0d       	add	r27, r0
    145c:	fe 9c       	mul	r15, r14
    145e:	b0 0d       	add	r27, r0
    1460:	11 24       	eor	r1, r1
    1462:	be 83       	std	Y+6, r27	; 0x06
    1464:	ad 83       	std	Y+5, r26	; 0x05
    1466:	e2 e0       	ldi	r30, 0x02	; 2
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	ee 0e       	add	r14, r30
    146c:	ff 1e       	adc	r15, r31
    146e:	1c 86       	std	Y+12, r1	; 0x0c
    1470:	1b 86       	std	Y+11, r1	; 0x0b
    1472:	c4 cf       	rjmp	.-120    	; 0x13fc <grow+0xd8>
				clrLED(i,j,k);
		}
	}
	}
	r=a/10;
	delay_ms(delay);
    1474:	8f 81       	ldd	r24, Y+7	; 0x07
    1476:	98 85       	ldd	r25, Y+8	; 0x08
    1478:	0e 94 69 00 	call	0xd2	; 0xd2 <delay_ms>
void grow(char Array[5][5][5], int delay)
{
	double a,r=0;
	int i,j,k;

	for(a=0;a<45;a++)
    147c:	c5 01       	movw	r24, r10
    147e:	b4 01       	movw	r22, r8
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	40 e8       	ldi	r20, 0x80	; 128
    1486:	5f e3       	ldi	r21, 0x3F	; 63
    1488:	0e 94 1b 10 	call	0x2036	; 0x2036 <__addsf3>
    148c:	7b 01       	movw	r14, r22
    148e:	8c 01       	movw	r16, r24
    1490:	08 94       	sec
    1492:	21 1c       	adc	r2, r1
    1494:	31 1c       	adc	r3, r1
    1496:	fd e2       	ldi	r31, 0x2D	; 45
    1498:	2f 16       	cp	r2, r31
    149a:	31 04       	cpc	r3, r1
    149c:	b9 f0       	breq	.+46     	; 0x14cc <grow+0x1a8>
			else
				clrLED(i,j,k);
		}
	}
	}
	r=a/10;
    149e:	c5 01       	movw	r24, r10
    14a0:	b4 01       	movw	r22, r8
    14a2:	20 e0       	ldi	r18, 0x00	; 0
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	40 e2       	ldi	r20, 0x20	; 32
    14a8:	51 e4       	ldi	r21, 0x41	; 65
    14aa:	0e 94 48 10 	call	0x2090	; 0x2090 <__divsf3>
    14ae:	69 83       	std	Y+1, r22	; 0x01
    14b0:	7a 83       	std	Y+2, r23	; 0x02
    14b2:	8b 83       	std	Y+3, r24	; 0x03
    14b4:	9c 83       	std	Y+4, r25	; 0x04
    14b6:	c7 01       	movw	r24, r14
    14b8:	d8 01       	movw	r26, r16
    14ba:	4c 01       	movw	r8, r24
    14bc:	5d 01       	movw	r10, r26
    14be:	89 85       	ldd	r24, Y+9	; 0x09
    14c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14c2:	9c 01       	movw	r18, r24
    14c4:	29 01       	movw	r4, r18
    14c6:	ee 24       	eor	r14, r14
    14c8:	ff 24       	eor	r15, r15
    14ca:	c0 cf       	rjmp	.-128    	; 0x144c <grow+0x128>
	delay_ms(delay);
	}
}
    14cc:	2c 96       	adiw	r28, 0x0c	; 12
    14ce:	0f b6       	in	r0, 0x3f	; 63
    14d0:	f8 94       	cli
    14d2:	de bf       	out	0x3e, r29	; 62
    14d4:	0f be       	out	0x3f, r0	; 63
    14d6:	cd bf       	out	0x3d, r28	; 61
    14d8:	cf 91       	pop	r28
    14da:	df 91       	pop	r29
    14dc:	1f 91       	pop	r17
    14de:	0f 91       	pop	r16
    14e0:	ff 90       	pop	r15
    14e2:	ef 90       	pop	r14
    14e4:	df 90       	pop	r13
    14e6:	cf 90       	pop	r12
    14e8:	bf 90       	pop	r11
    14ea:	af 90       	pop	r10
    14ec:	9f 90       	pop	r9
    14ee:	8f 90       	pop	r8
    14f0:	7f 90       	pop	r7
    14f2:	6f 90       	pop	r6
    14f4:	5f 90       	pop	r5
    14f6:	4f 90       	pop	r4
    14f8:	3f 90       	pop	r3
    14fa:	2f 90       	pop	r2
    14fc:	08 95       	ret

000014fe <effect_explosion>:

}

				
void effect_explosion(int direction, int iterations, int delay)
{
    14fe:	2f 92       	push	r2
    1500:	3f 92       	push	r3
    1502:	4f 92       	push	r4
    1504:	5f 92       	push	r5
    1506:	6f 92       	push	r6
    1508:	7f 92       	push	r7
    150a:	8f 92       	push	r8
    150c:	9f 92       	push	r9
    150e:	af 92       	push	r10
    1510:	bf 92       	push	r11
    1512:	cf 92       	push	r12
    1514:	df 92       	push	r13
    1516:	ef 92       	push	r14
    1518:	ff 92       	push	r15
    151a:	0f 93       	push	r16
    151c:	1f 93       	push	r17
    151e:	df 93       	push	r29
    1520:	cf 93       	push	r28
    1522:	cd b7       	in	r28, 0x3d	; 61
    1524:	de b7       	in	r29, 0x3e	; 62
    1526:	cd 57       	subi	r28, 0x7D	; 125
    1528:	d0 40       	sbci	r29, 0x00	; 0
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	f8 94       	cli
    152e:	de bf       	out	0x3e, r29	; 62
    1530:	0f be       	out	0x3f, r0	; 63
    1532:	cd bf       	out	0x3d, r28	; 61
    1534:	4a 01       	movw	r8, r20
    1536:	20 e0       	ldi	r18, 0x00	; 0
    1538:	30 e0       	ldi	r19, 0x00	; 0
	char Array[5][5][5];

	int i,j,k,rand;
	for (i=0;i<5;i++)
    153a:	69 e1       	ldi	r22, 0x19	; 25
    153c:	70 e0       	ldi	r23, 0x00	; 0
    153e:	ae 01       	movw	r20, r28
    1540:	4f 5f       	subi	r20, 0xFF	; 255
    1542:	5f 4f       	sbci	r21, 0xFF	; 255
    1544:	0f c0       	rjmp	.+30     	; 0x1564 <effect_explosion+0x66>
		for (j=0;j<5;j++)
			for (k=0;k<5;k++)
				{
					Array[i][j][k]=0;
    1546:	10 82       	st	Z, r1
    1548:	11 82       	std	Z+1, r1	; 0x01
    154a:	12 82       	std	Z+2, r1	; 0x02
    154c:	13 82       	std	Z+3, r1	; 0x03
    154e:	14 82       	std	Z+4, r1	; 0x04
{
	char Array[5][5][5];

	int i,j,k,rand;
	for (i=0;i<5;i++)
		for (j=0;j<5;j++)
    1550:	01 96       	adiw	r24, 0x01	; 1
    1552:	35 96       	adiw	r30, 0x05	; 5
    1554:	85 30       	cpi	r24, 0x05	; 5
    1556:	91 05       	cpc	r25, r1
    1558:	b1 f7       	brne	.-20     	; 0x1546 <effect_explosion+0x48>
void effect_explosion(int direction, int iterations, int delay)
{
	char Array[5][5][5];

	int i,j,k,rand;
	for (i=0;i<5;i++)
    155a:	2f 5f       	subi	r18, 0xFF	; 255
    155c:	3f 4f       	sbci	r19, 0xFF	; 255
    155e:	25 30       	cpi	r18, 0x05	; 5
    1560:	31 05       	cpc	r19, r1
    1562:	61 f0       	breq	.+24     	; 0x157c <effect_explosion+0x7e>
    1564:	26 9f       	mul	r18, r22
    1566:	f0 01       	movw	r30, r0
    1568:	27 9f       	mul	r18, r23
    156a:	f0 0d       	add	r31, r0
    156c:	36 9f       	mul	r19, r22
    156e:	f0 0d       	add	r31, r0
    1570:	11 24       	eor	r1, r1
    1572:	e4 0f       	add	r30, r20
    1574:	f5 1f       	adc	r31, r21
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	e5 cf       	rjmp	.-54     	; 0x1546 <effect_explosion+0x48>
			for (k=0;k<5;k++)
				{
					Array[i][j][k]=0;
				}
				
	grow(Array,delay);
    157c:	8e 01       	movw	r16, r28
    157e:	0f 5f       	subi	r16, 0xFF	; 255
    1580:	1f 4f       	sbci	r17, 0xFF	; 255
    1582:	c8 01       	movw	r24, r16
    1584:	b4 01       	movw	r22, r8
    1586:	0e 94 92 09 	call	0x1324	; 0x1324 <grow>
    158a:	aa 24       	eor	r10, r10
    158c:	bb 24       	eor	r11, r11

	
	for (i=0;i<5;i++)
		for (j=0;j<5;j++)
    158e:	a9 e1       	ldi	r26, 0x19	; 25
    1590:	2a 2e       	mov	r2, r26
    1592:	31 2c       	mov	r3, r1
    1594:	28 01       	movw	r4, r16
    1596:	35 c0       	rjmp	.+106    	; 0x1602 <effect_explosion+0x104>
			for (k=0;k<5;k++)
				{
				rand=random()%3;
    1598:	0e 94 ca 13 	call	0x2794	; 0x2794 <random>
				if(rand==0)
    159c:	23 e0       	ldi	r18, 0x03	; 3
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	40 e0       	ldi	r20, 0x00	; 0
    15a2:	50 e0       	ldi	r21, 0x00	; 0
    15a4:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <__divmodsi4>
    15a8:	67 2b       	or	r22, r23
    15aa:	21 f4       	brne	.+8      	; 0x15b4 <effect_explosion+0xb6>
					Array[i][j][k]=1;
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	f8 01       	movw	r30, r16
    15b0:	80 83       	st	Z, r24
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <effect_explosion+0xba>
				else
					Array[i][j][k]=0;
    15b4:	f8 01       	movw	r30, r16
    15b6:	10 82       	st	Z, r1
	grow(Array,delay);

	
	for (i=0;i<5;i++)
		for (j=0;j<5;j++)
			for (k=0;k<5;k++)
    15b8:	08 94       	sec
    15ba:	e1 1c       	adc	r14, r1
    15bc:	f1 1c       	adc	r15, r1
    15be:	0f 5f       	subi	r16, 0xFF	; 255
    15c0:	1f 4f       	sbci	r17, 0xFF	; 255
    15c2:	f5 e0       	ldi	r31, 0x05	; 5
    15c4:	ef 16       	cp	r14, r31
    15c6:	f1 04       	cpc	r15, r1
    15c8:	39 f7       	brne	.-50     	; 0x1598 <effect_explosion+0x9a>
				
	grow(Array,delay);

	
	for (i=0;i<5;i++)
		for (j=0;j<5;j++)
    15ca:	08 94       	sec
    15cc:	c1 1c       	adc	r12, r1
    15ce:	d1 1c       	adc	r13, r1
    15d0:	85 e0       	ldi	r24, 0x05	; 5
    15d2:	c8 16       	cp	r12, r24
    15d4:	d1 04       	cpc	r13, r1
    15d6:	71 f0       	breq	.+28     	; 0x15f4 <effect_explosion+0xf6>
    15d8:	86 01       	movw	r16, r12
    15da:	00 0f       	add	r16, r16
    15dc:	11 1f       	adc	r17, r17
    15de:	00 0f       	add	r16, r16
    15e0:	11 1f       	adc	r17, r17
    15e2:	0c 0d       	add	r16, r12
    15e4:	1d 1d       	adc	r17, r13
    15e6:	06 0d       	add	r16, r6
    15e8:	17 1d       	adc	r17, r7
    15ea:	04 0d       	add	r16, r4
    15ec:	15 1d       	adc	r17, r5
    15ee:	ee 24       	eor	r14, r14
    15f0:	ff 24       	eor	r15, r15
    15f2:	d2 cf       	rjmp	.-92     	; 0x1598 <effect_explosion+0x9a>
				}
				
	grow(Array,delay);

	
	for (i=0;i<5;i++)
    15f4:	08 94       	sec
    15f6:	a1 1c       	adc	r10, r1
    15f8:	b1 1c       	adc	r11, r1
    15fa:	e5 e0       	ldi	r30, 0x05	; 5
    15fc:	ae 16       	cp	r10, r30
    15fe:	b1 04       	cpc	r11, r1
    1600:	51 f0       	breq	.+20     	; 0x1616 <effect_explosion+0x118>
    1602:	cc 24       	eor	r12, r12
    1604:	dd 24       	eor	r13, r13
		for (j=0;j<5;j++)
    1606:	a2 9c       	mul	r10, r2
    1608:	30 01       	movw	r6, r0
    160a:	a3 9c       	mul	r10, r3
    160c:	70 0c       	add	r7, r0
    160e:	b2 9c       	mul	r11, r2
    1610:	70 0c       	add	r7, r0
    1612:	11 24       	eor	r1, r1
    1614:	e1 cf       	rjmp	.-62     	; 0x15d8 <effect_explosion+0xda>
				else
					Array[i][j][k]=0;
				}

	
	shrink(Array,delay);
    1616:	8e 01       	movw	r16, r28
    1618:	0f 5f       	subi	r16, 0xFF	; 255
    161a:	1f 4f       	sbci	r17, 0xFF	; 255
    161c:	c8 01       	movw	r24, r16
    161e:	b4 01       	movw	r22, r8
    1620:	0e 94 70 07 	call	0xee0	; 0xee0 <shrink>
	grow(Array,delay);
    1624:	c8 01       	movw	r24, r16
    1626:	b4 01       	movw	r22, r8
    1628:	0e 94 92 09 	call	0x1324	; 0x1324 <grow>
    162c:	20 e0       	ldi	r18, 0x00	; 0
    162e:	30 e0       	ldi	r19, 0x00	; 0
	
		
	for (i=0;i<5;i++)
    1630:	49 e1       	ldi	r20, 0x19	; 25
    1632:	50 e0       	ldi	r21, 0x00	; 0
    1634:	0f c0       	rjmp	.+30     	; 0x1654 <effect_explosion+0x156>
		for (j=0;j<5;j++)
			for (k=0;k<5;k++)
				{
					Array[i][j][k]=0;
    1636:	10 82       	st	Z, r1
    1638:	11 82       	std	Z+1, r1	; 0x01
    163a:	12 82       	std	Z+2, r1	; 0x02
    163c:	13 82       	std	Z+3, r1	; 0x03
    163e:	14 82       	std	Z+4, r1	; 0x04
	shrink(Array,delay);
	grow(Array,delay);
	
		
	for (i=0;i<5;i++)
		for (j=0;j<5;j++)
    1640:	01 96       	adiw	r24, 0x01	; 1
    1642:	35 96       	adiw	r30, 0x05	; 5
    1644:	85 30       	cpi	r24, 0x05	; 5
    1646:	91 05       	cpc	r25, r1
    1648:	b1 f7       	brne	.-20     	; 0x1636 <effect_explosion+0x138>
	
	shrink(Array,delay);
	grow(Array,delay);
	
		
	for (i=0;i<5;i++)
    164a:	2f 5f       	subi	r18, 0xFF	; 255
    164c:	3f 4f       	sbci	r19, 0xFF	; 255
    164e:	25 30       	cpi	r18, 0x05	; 5
    1650:	31 05       	cpc	r19, r1
    1652:	61 f0       	breq	.+24     	; 0x166c <effect_explosion+0x16e>
    1654:	24 9f       	mul	r18, r20
    1656:	f0 01       	movw	r30, r0
    1658:	25 9f       	mul	r18, r21
    165a:	f0 0d       	add	r31, r0
    165c:	34 9f       	mul	r19, r20
    165e:	f0 0d       	add	r31, r0
    1660:	11 24       	eor	r1, r1
    1662:	e0 0f       	add	r30, r16
    1664:	f1 1f       	adc	r31, r17
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	e5 cf       	rjmp	.-54     	; 0x1636 <effect_explosion+0x138>
			for (k=0;k<5;k++)
				{
					Array[i][j][k]=0;
				}
				
	shrink(Array,delay);
    166c:	ce 01       	movw	r24, r28
    166e:	01 96       	adiw	r24, 0x01	; 1
    1670:	b4 01       	movw	r22, r8
    1672:	0e 94 70 07 	call	0xee0	; 0xee0 <shrink>


}
    1676:	c3 58       	subi	r28, 0x83	; 131
    1678:	df 4f       	sbci	r29, 0xFF	; 255
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	f8 94       	cli
    167e:	de bf       	out	0x3e, r29	; 62
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	cd bf       	out	0x3d, r28	; 61
    1684:	cf 91       	pop	r28
    1686:	df 91       	pop	r29
    1688:	1f 91       	pop	r17
    168a:	0f 91       	pop	r16
    168c:	ff 90       	pop	r15
    168e:	ef 90       	pop	r14
    1690:	df 90       	pop	r13
    1692:	cf 90       	pop	r12
    1694:	bf 90       	pop	r11
    1696:	af 90       	pop	r10
    1698:	9f 90       	pop	r9
    169a:	8f 90       	pop	r8
    169c:	7f 90       	pop	r7
    169e:	6f 90       	pop	r6
    16a0:	5f 90       	pop	r5
    16a2:	4f 90       	pop	r4
    16a4:	3f 90       	pop	r3
    16a6:	2f 90       	pop	r2
    16a8:	08 95       	ret

000016aa <effect_everything_bitches>:

void foo(char *a){
}

void effect_everything_bitches(int direction, int iterations, int delay)
{
    16aa:	cf 93       	push	r28
    16ac:	df 93       	push	r29
    16ae:	c0 e0       	ldi	r28, 0x00	; 0
    16b0:	d0 e0       	ldi	r29, 0x00	; 0
	int i;

	for(i=0;i<4;i++)	
		effect_rings(1,10,0);
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	6a e0       	ldi	r22, 0x0A	; 10
    16b8:	70 e0       	ldi	r23, 0x00	; 0
    16ba:	40 e0       	ldi	r20, 0x00	; 0
    16bc:	50 e0       	ldi	r21, 0x00	; 0
    16be:	0e 94 55 09 	call	0x12aa	; 0x12aa <effect_rings>

void effect_everything_bitches(int direction, int iterations, int delay)
{
	int i;

	for(i=0;i<4;i++)	
    16c2:	21 96       	adiw	r28, 0x01	; 1
    16c4:	c4 30       	cpi	r28, 0x04	; 4
    16c6:	d1 05       	cpc	r29, r1
    16c8:	a1 f7       	brne	.-24     	; 0x16b2 <effect_everything_bitches+0x8>
    16ca:	c0 e0       	ldi	r28, 0x00	; 0
    16cc:	d0 e0       	ldi	r29, 0x00	; 0
		effect_rings(1,10,0);
	for(i=0;i<4;i++)	
		effect_explosion(1,10,0);
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	6a e0       	ldi	r22, 0x0A	; 10
    16d4:	70 e0       	ldi	r23, 0x00	; 0
    16d6:	40 e0       	ldi	r20, 0x00	; 0
    16d8:	50 e0       	ldi	r21, 0x00	; 0
    16da:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <effect_explosion>
{
	int i;

	for(i=0;i<4;i++)	
		effect_rings(1,10,0);
	for(i=0;i<4;i++)	
    16de:	21 96       	adiw	r28, 0x01	; 1
    16e0:	c4 30       	cpi	r28, 0x04	; 4
    16e2:	d1 05       	cpc	r29, r1
    16e4:	a1 f7       	brne	.-24     	; 0x16ce <effect_everything_bitches+0x24>
    16e6:	c0 e0       	ldi	r28, 0x00	; 0
    16e8:	d0 e0       	ldi	r29, 0x00	; 0
		effect_explosion(1,10,0);
	for(i=0;i<16;i++)		
		effect_snow(1,10,385);
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	6a e0       	ldi	r22, 0x0A	; 10
    16f0:	70 e0       	ldi	r23, 0x00	; 0
    16f2:	41 e8       	ldi	r20, 0x81	; 129
    16f4:	51 e0       	ldi	r21, 0x01	; 1
    16f6:	0e 94 01 07 	call	0xe02	; 0xe02 <effect_snow>

	for(i=0;i<4;i++)	
		effect_rings(1,10,0);
	for(i=0;i<4;i++)	
		effect_explosion(1,10,0);
	for(i=0;i<16;i++)		
    16fa:	21 96       	adiw	r28, 0x01	; 1
    16fc:	c0 31       	cpi	r28, 0x10	; 16
    16fe:	d1 05       	cpc	r29, r1
    1700:	a1 f7       	brne	.-24     	; 0x16ea <effect_everything_bitches+0x40>
    1702:	c0 e0       	ldi	r28, 0x00	; 0
    1704:	d0 e0       	ldi	r29, 0x00	; 0
		effect_snow(1,10,385);
	for(i=0;i<64;i++)		
		effect_blink(1,10,10);
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	6a e0       	ldi	r22, 0x0A	; 10
    170c:	70 e0       	ldi	r23, 0x00	; 0
    170e:	4a e0       	ldi	r20, 0x0A	; 10
    1710:	50 e0       	ldi	r21, 0x00	; 0
    1712:	0e 94 57 06 	call	0xcae	; 0xcae <effect_blink>
		effect_rings(1,10,0);
	for(i=0;i<4;i++)	
		effect_explosion(1,10,0);
	for(i=0;i<16;i++)		
		effect_snow(1,10,385);
	for(i=0;i<64;i++)		
    1716:	21 96       	adiw	r28, 0x01	; 1
    1718:	c0 34       	cpi	r28, 0x40	; 64
    171a:	d1 05       	cpc	r29, r1
    171c:	a1 f7       	brne	.-24     	; 0x1706 <effect_everything_bitches+0x5c>
    171e:	c0 e0       	ldi	r28, 0x00	; 0
    1720:	d0 e0       	ldi	r29, 0x00	; 0
		effect_blink(1,10,10);
	for(i=0;i<128;i++)	
		effect_noise(1,10,10);
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	6a e0       	ldi	r22, 0x0A	; 10
    1728:	70 e0       	ldi	r23, 0x00	; 0
    172a:	4a e0       	ldi	r20, 0x0A	; 10
    172c:	50 e0       	ldi	r21, 0x00	; 0
    172e:	0e 94 c6 06 	call	0xd8c	; 0xd8c <effect_noise>
		effect_explosion(1,10,0);
	for(i=0;i<16;i++)		
		effect_snow(1,10,385);
	for(i=0;i<64;i++)		
		effect_blink(1,10,10);
	for(i=0;i<128;i++)	
    1732:	21 96       	adiw	r28, 0x01	; 1
    1734:	c0 38       	cpi	r28, 0x80	; 128
    1736:	d1 05       	cpc	r29, r1
    1738:	a1 f7       	brne	.-24     	; 0x1722 <effect_everything_bitches+0x78>
		effect_noise(1,10,10);
		
}
    173a:	df 91       	pop	r29
    173c:	cf 91       	pop	r28
    173e:	08 95       	ret

00001740 <vfprintf>:
    1740:	ab e0       	ldi	r26, 0x0B	; 11
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	e6 ea       	ldi	r30, 0xA6	; 166
    1746:	fb e0       	ldi	r31, 0x0B	; 11
    1748:	0c 94 fb 14 	jmp	0x29f6	; 0x29f6 <__prologue_saves__+0x8>
    174c:	5c 01       	movw	r10, r24
    174e:	4b 01       	movw	r8, r22
    1750:	7a 01       	movw	r14, r20
    1752:	fc 01       	movw	r30, r24
    1754:	17 82       	std	Z+7, r1	; 0x07
    1756:	16 82       	std	Z+6, r1	; 0x06
    1758:	83 81       	ldd	r24, Z+3	; 0x03
    175a:	81 fd       	sbrc	r24, 1
    175c:	08 c0       	rjmp	.+16     	; 0x176e <vfprintf+0x2e>
    175e:	6f ef       	ldi	r22, 0xFF	; 255
    1760:	7f ef       	ldi	r23, 0xFF	; 255
    1762:	08 c1       	rjmp	.+528    	; 0x1974 <vfprintf+0x234>
    1764:	42 e0       	ldi	r20, 0x02	; 2
    1766:	50 e0       	ldi	r21, 0x00	; 0
    1768:	e4 0e       	add	r14, r20
    176a:	f5 1e       	adc	r15, r21
    176c:	04 c0       	rjmp	.+8      	; 0x1776 <vfprintf+0x36>
    176e:	3e 01       	movw	r6, r28
    1770:	08 94       	sec
    1772:	61 1c       	adc	r6, r1
    1774:	71 1c       	adc	r7, r1
    1776:	f5 01       	movw	r30, r10
    1778:	d3 80       	ldd	r13, Z+3	; 0x03
    177a:	f4 01       	movw	r30, r8
    177c:	d3 fc       	sbrc	r13, 3
    177e:	85 91       	lpm	r24, Z+
    1780:	d3 fe       	sbrs	r13, 3
    1782:	81 91       	ld	r24, Z+
    1784:	4f 01       	movw	r8, r30
    1786:	88 23       	and	r24, r24
    1788:	09 f4       	brne	.+2      	; 0x178c <vfprintf+0x4c>
    178a:	f1 c0       	rjmp	.+482    	; 0x196e <vfprintf+0x22e>
    178c:	85 32       	cpi	r24, 0x25	; 37
    178e:	59 f4       	brne	.+22     	; 0x17a6 <vfprintf+0x66>
    1790:	d3 fc       	sbrc	r13, 3
    1792:	65 91       	lpm	r22, Z+
    1794:	d3 fe       	sbrs	r13, 3
    1796:	61 91       	ld	r22, Z+
    1798:	4f 01       	movw	r8, r30
    179a:	65 32       	cpi	r22, 0x25	; 37
    179c:	19 f0       	breq	.+6      	; 0x17a4 <vfprintf+0x64>
    179e:	06 2f       	mov	r16, r22
    17a0:	10 e0       	ldi	r17, 0x00	; 0
    17a2:	1b c0       	rjmp	.+54     	; 0x17da <vfprintf+0x9a>
    17a4:	85 e2       	ldi	r24, 0x25	; 37
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	2b c0       	rjmp	.+86     	; 0x1800 <vfprintf+0xc0>
    17aa:	00 23       	and	r16, r16
    17ac:	09 f4       	brne	.+2      	; 0x17b0 <vfprintf+0x70>
    17ae:	df c0       	rjmp	.+446    	; 0x196e <vfprintf+0x22e>
    17b0:	89 e7       	ldi	r24, 0x79	; 121
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	60 2f       	mov	r22, r16
    17b6:	70 e0       	ldi	r23, 0x00	; 0
    17b8:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <strchr_P>
    17bc:	89 2b       	or	r24, r25
    17be:	39 f4       	brne	.+14     	; 0x17ce <vfprintf+0x8e>
    17c0:	03 32       	cpi	r16, 0x23	; 35
    17c2:	11 f4       	brne	.+4      	; 0x17c8 <vfprintf+0x88>
    17c4:	10 61       	ori	r17, 0x10	; 16
    17c6:	03 c0       	rjmp	.+6      	; 0x17ce <vfprintf+0x8e>
    17c8:	0c 36       	cpi	r16, 0x6C	; 108
    17ca:	61 f4       	brne	.+24     	; 0x17e4 <vfprintf+0xa4>
    17cc:	10 68       	ori	r17, 0x80	; 128
    17ce:	f4 01       	movw	r30, r8
    17d0:	d3 fc       	sbrc	r13, 3
    17d2:	05 91       	lpm	r16, Z+
    17d4:	d3 fe       	sbrs	r13, 3
    17d6:	01 91       	ld	r16, Z+
    17d8:	4f 01       	movw	r8, r30
    17da:	17 ff       	sbrs	r17, 7
    17dc:	e6 cf       	rjmp	.-52     	; 0x17aa <vfprintf+0x6a>
    17de:	00 23       	and	r16, r16
    17e0:	09 f4       	brne	.+2      	; 0x17e4 <vfprintf+0xa4>
    17e2:	c5 c0       	rjmp	.+394    	; 0x196e <vfprintf+0x22e>
    17e4:	82 e7       	ldi	r24, 0x72	; 114
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	60 2f       	mov	r22, r16
    17ea:	70 e0       	ldi	r23, 0x00	; 0
    17ec:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <strchr_P>
    17f0:	89 2b       	or	r24, r25
    17f2:	51 f0       	breq	.+20     	; 0x1808 <vfprintf+0xc8>
    17f4:	44 e0       	ldi	r20, 0x04	; 4
    17f6:	50 e0       	ldi	r21, 0x00	; 0
    17f8:	e4 0e       	add	r14, r20
    17fa:	f5 1e       	adc	r15, r21
    17fc:	8f e3       	ldi	r24, 0x3F	; 63
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	b5 01       	movw	r22, r10
    1802:	0e 94 25 14 	call	0x284a	; 0x284a <fputc>
    1806:	b7 cf       	rjmp	.-146    	; 0x1776 <vfprintf+0x36>
    1808:	03 36       	cpi	r16, 0x63	; 99
    180a:	29 f0       	breq	.+10     	; 0x1816 <vfprintf+0xd6>
    180c:	03 37       	cpi	r16, 0x73	; 115
    180e:	79 f0       	breq	.+30     	; 0x182e <vfprintf+0xee>
    1810:	03 35       	cpi	r16, 0x53	; 83
    1812:	f1 f4       	brne	.+60     	; 0x1850 <vfprintf+0x110>
    1814:	0b c0       	rjmp	.+22     	; 0x182c <vfprintf+0xec>
    1816:	87 01       	movw	r16, r14
    1818:	0e 5f       	subi	r16, 0xFE	; 254
    181a:	1f 4f       	sbci	r17, 0xFF	; 255
    181c:	f7 01       	movw	r30, r14
    181e:	80 81       	ld	r24, Z
    1820:	91 81       	ldd	r25, Z+1	; 0x01
    1822:	b5 01       	movw	r22, r10
    1824:	0e 94 25 14 	call	0x284a	; 0x284a <fputc>
    1828:	78 01       	movw	r14, r16
    182a:	a5 cf       	rjmp	.-182    	; 0x1776 <vfprintf+0x36>
    182c:	11 60       	ori	r17, 0x01	; 1
    182e:	f7 01       	movw	r30, r14
    1830:	c0 80       	ld	r12, Z
    1832:	d1 80       	ldd	r13, Z+1	; 0x01
    1834:	04 c0       	rjmp	.+8      	; 0x183e <vfprintf+0xfe>
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	b5 01       	movw	r22, r10
    183a:	0e 94 25 14 	call	0x284a	; 0x284a <fputc>
    183e:	f6 01       	movw	r30, r12
    1840:	10 fd       	sbrc	r17, 0
    1842:	85 91       	lpm	r24, Z+
    1844:	10 ff       	sbrs	r17, 0
    1846:	81 91       	ld	r24, Z+
    1848:	6f 01       	movw	r12, r30
    184a:	88 23       	and	r24, r24
    184c:	a1 f7       	brne	.-24     	; 0x1836 <vfprintf+0xf6>
    184e:	8a cf       	rjmp	.-236    	; 0x1764 <vfprintf+0x24>
    1850:	04 36       	cpi	r16, 0x64	; 100
    1852:	11 f0       	breq	.+4      	; 0x1858 <vfprintf+0x118>
    1854:	09 36       	cpi	r16, 0x69	; 105
    1856:	39 f5       	brne	.+78     	; 0x18a6 <vfprintf+0x166>
    1858:	17 ff       	sbrs	r17, 7
    185a:	08 c0       	rjmp	.+16     	; 0x186c <vfprintf+0x12c>
    185c:	f7 01       	movw	r30, r14
    185e:	20 81       	ld	r18, Z
    1860:	31 81       	ldd	r19, Z+1	; 0x01
    1862:	42 81       	ldd	r20, Z+2	; 0x02
    1864:	53 81       	ldd	r21, Z+3	; 0x03
    1866:	84 e0       	ldi	r24, 0x04	; 4
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	0a c0       	rjmp	.+20     	; 0x1880 <vfprintf+0x140>
    186c:	f7 01       	movw	r30, r14
    186e:	80 81       	ld	r24, Z
    1870:	91 81       	ldd	r25, Z+1	; 0x01
    1872:	9c 01       	movw	r18, r24
    1874:	44 27       	eor	r20, r20
    1876:	37 fd       	sbrc	r19, 7
    1878:	40 95       	com	r20
    187a:	54 2f       	mov	r21, r20
    187c:	82 e0       	ldi	r24, 0x02	; 2
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	e8 0e       	add	r14, r24
    1882:	f9 1e       	adc	r15, r25
    1884:	1f 7e       	andi	r17, 0xEF	; 239
    1886:	57 ff       	sbrs	r21, 7
    1888:	08 c0       	rjmp	.+16     	; 0x189a <vfprintf+0x15a>
    188a:	50 95       	com	r21
    188c:	40 95       	com	r20
    188e:	30 95       	com	r19
    1890:	21 95       	neg	r18
    1892:	3f 4f       	sbci	r19, 0xFF	; 255
    1894:	4f 4f       	sbci	r20, 0xFF	; 255
    1896:	5f 4f       	sbci	r21, 0xFF	; 255
    1898:	10 64       	ori	r17, 0x40	; 64
    189a:	ca 01       	movw	r24, r20
    189c:	b9 01       	movw	r22, r18
    189e:	a3 01       	movw	r20, r6
    18a0:	2a e0       	ldi	r18, 0x0A	; 10
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	34 c0       	rjmp	.+104    	; 0x190e <vfprintf+0x1ce>
    18a6:	00 37       	cpi	r16, 0x70	; 112
    18a8:	a9 f0       	breq	.+42     	; 0x18d4 <vfprintf+0x194>
    18aa:	01 37       	cpi	r16, 0x71	; 113
    18ac:	30 f4       	brcc	.+12     	; 0x18ba <vfprintf+0x17a>
    18ae:	08 35       	cpi	r16, 0x58	; 88
    18b0:	b1 f0       	breq	.+44     	; 0x18de <vfprintf+0x19e>
    18b2:	0f 36       	cpi	r16, 0x6F	; 111
    18b4:	09 f0       	breq	.+2      	; 0x18b8 <vfprintf+0x178>
    18b6:	5b c0       	rjmp	.+182    	; 0x196e <vfprintf+0x22e>
    18b8:	06 c0       	rjmp	.+12     	; 0x18c6 <vfprintf+0x186>
    18ba:	05 37       	cpi	r16, 0x75	; 117
    18bc:	39 f0       	breq	.+14     	; 0x18cc <vfprintf+0x18c>
    18be:	08 37       	cpi	r16, 0x78	; 120
    18c0:	09 f0       	breq	.+2      	; 0x18c4 <vfprintf+0x184>
    18c2:	55 c0       	rjmp	.+170    	; 0x196e <vfprintf+0x22e>
    18c4:	08 c0       	rjmp	.+16     	; 0x18d6 <vfprintf+0x196>
    18c6:	28 e0       	ldi	r18, 0x08	; 8
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	0c c0       	rjmp	.+24     	; 0x18e4 <vfprintf+0x1a4>
    18cc:	1f 7e       	andi	r17, 0xEF	; 239
    18ce:	2a e0       	ldi	r18, 0x0A	; 10
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	08 c0       	rjmp	.+16     	; 0x18e4 <vfprintf+0x1a4>
    18d4:	10 61       	ori	r17, 0x10	; 16
    18d6:	14 62       	ori	r17, 0x24	; 36
    18d8:	20 e1       	ldi	r18, 0x10	; 16
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	03 c0       	rjmp	.+6      	; 0x18e4 <vfprintf+0x1a4>
    18de:	14 60       	ori	r17, 0x04	; 4
    18e0:	20 e1       	ldi	r18, 0x10	; 16
    18e2:	32 e0       	ldi	r19, 0x02	; 2
    18e4:	17 ff       	sbrs	r17, 7
    18e6:	08 c0       	rjmp	.+16     	; 0x18f8 <vfprintf+0x1b8>
    18e8:	f7 01       	movw	r30, r14
    18ea:	60 81       	ld	r22, Z
    18ec:	71 81       	ldd	r23, Z+1	; 0x01
    18ee:	82 81       	ldd	r24, Z+2	; 0x02
    18f0:	93 81       	ldd	r25, Z+3	; 0x03
    18f2:	44 e0       	ldi	r20, 0x04	; 4
    18f4:	50 e0       	ldi	r21, 0x00	; 0
    18f6:	08 c0       	rjmp	.+16     	; 0x1908 <vfprintf+0x1c8>
    18f8:	f7 01       	movw	r30, r14
    18fa:	80 81       	ld	r24, Z
    18fc:	91 81       	ldd	r25, Z+1	; 0x01
    18fe:	bc 01       	movw	r22, r24
    1900:	80 e0       	ldi	r24, 0x00	; 0
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	42 e0       	ldi	r20, 0x02	; 2
    1906:	50 e0       	ldi	r21, 0x00	; 0
    1908:	e4 0e       	add	r14, r20
    190a:	f5 1e       	adc	r15, r21
    190c:	a3 01       	movw	r20, r6
    190e:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <__ultoa_invert>
    1912:	d8 2e       	mov	r13, r24
    1914:	d6 18       	sub	r13, r6
    1916:	01 2f       	mov	r16, r17
    1918:	10 e0       	ldi	r17, 0x00	; 0
    191a:	06 ff       	sbrs	r16, 6
    191c:	05 c0       	rjmp	.+10     	; 0x1928 <vfprintf+0x1e8>
    191e:	8d e2       	ldi	r24, 0x2D	; 45
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	b5 01       	movw	r22, r10
    1924:	0e 94 25 14 	call	0x284a	; 0x284a <fputc>
    1928:	04 ff       	sbrs	r16, 4
    192a:	15 c0       	rjmp	.+42     	; 0x1956 <vfprintf+0x216>
    192c:	fe 01       	movw	r30, r28
    192e:	ed 0d       	add	r30, r13
    1930:	f1 1d       	adc	r31, r1
    1932:	80 81       	ld	r24, Z
    1934:	80 33       	cpi	r24, 0x30	; 48
    1936:	79 f0       	breq	.+30     	; 0x1956 <vfprintf+0x216>
    1938:	80 e3       	ldi	r24, 0x30	; 48
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	b5 01       	movw	r22, r10
    193e:	0e 94 25 14 	call	0x284a	; 0x284a <fputc>
    1942:	02 ff       	sbrs	r16, 2
    1944:	08 c0       	rjmp	.+16     	; 0x1956 <vfprintf+0x216>
    1946:	00 72       	andi	r16, 0x20	; 32
    1948:	10 70       	andi	r17, 0x00	; 0
    194a:	c8 01       	movw	r24, r16
    194c:	88 5a       	subi	r24, 0xA8	; 168
    194e:	9f 4f       	sbci	r25, 0xFF	; 255
    1950:	b5 01       	movw	r22, r10
    1952:	0e 94 25 14 	call	0x284a	; 0x284a <fputc>
    1956:	da 94       	dec	r13
    1958:	f3 01       	movw	r30, r6
    195a:	ed 0d       	add	r30, r13
    195c:	f1 1d       	adc	r31, r1
    195e:	80 81       	ld	r24, Z
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	b5 01       	movw	r22, r10
    1964:	0e 94 25 14 	call	0x284a	; 0x284a <fputc>
    1968:	dd 20       	and	r13, r13
    196a:	a9 f7       	brne	.-22     	; 0x1956 <vfprintf+0x216>
    196c:	04 cf       	rjmp	.-504    	; 0x1776 <vfprintf+0x36>
    196e:	f5 01       	movw	r30, r10
    1970:	66 81       	ldd	r22, Z+6	; 0x06
    1972:	77 81       	ldd	r23, Z+7	; 0x07
    1974:	cb 01       	movw	r24, r22
    1976:	2b 96       	adiw	r28, 0x0b	; 11
    1978:	ee e0       	ldi	r30, 0x0E	; 14
    197a:	0c 94 17 15 	jmp	0x2a2e	; 0x2a2e <__epilogue_restores__+0x8>

0000197e <putval>:
    197e:	fc 01       	movw	r30, r24
    1980:	20 fd       	sbrc	r18, 0
    1982:	08 c0       	rjmp	.+16     	; 0x1994 <putval+0x16>
    1984:	23 fd       	sbrc	r18, 3
    1986:	05 c0       	rjmp	.+10     	; 0x1992 <putval+0x14>
    1988:	22 ff       	sbrs	r18, 2
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <putval+0x12>
    198c:	73 83       	std	Z+3, r23	; 0x03
    198e:	62 83       	std	Z+2, r22	; 0x02
    1990:	51 83       	std	Z+1, r21	; 0x01
    1992:	40 83       	st	Z, r20
    1994:	08 95       	ret

00001996 <mulacc>:
    1996:	ef 92       	push	r14
    1998:	ff 92       	push	r15
    199a:	0f 93       	push	r16
    199c:	1f 93       	push	r17
    199e:	44 ff       	sbrs	r20, 4
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <mulacc+0x10>
    19a2:	33 e0       	ldi	r19, 0x03	; 3
    19a4:	11 c0       	rjmp	.+34     	; 0x19c8 <mulacc+0x32>
    19a6:	46 ff       	sbrs	r20, 6
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <mulacc+0x18>
    19aa:	34 e0       	ldi	r19, 0x04	; 4
    19ac:	0d c0       	rjmp	.+26     	; 0x19c8 <mulacc+0x32>
    19ae:	db 01       	movw	r26, r22
    19b0:	fc 01       	movw	r30, r24
    19b2:	aa 0f       	add	r26, r26
    19b4:	bb 1f       	adc	r27, r27
    19b6:	ee 1f       	adc	r30, r30
    19b8:	ff 1f       	adc	r31, r31
    19ba:	10 94       	com	r1
    19bc:	d1 f7       	brne	.-12     	; 0x19b2 <mulacc+0x1c>
    19be:	6a 0f       	add	r22, r26
    19c0:	7b 1f       	adc	r23, r27
    19c2:	8e 1f       	adc	r24, r30
    19c4:	9f 1f       	adc	r25, r31
    19c6:	31 e0       	ldi	r19, 0x01	; 1
    19c8:	66 0f       	add	r22, r22
    19ca:	77 1f       	adc	r23, r23
    19cc:	88 1f       	adc	r24, r24
    19ce:	99 1f       	adc	r25, r25
    19d0:	31 50       	subi	r19, 0x01	; 1
    19d2:	d1 f7       	brne	.-12     	; 0x19c8 <mulacc+0x32>
    19d4:	7b 01       	movw	r14, r22
    19d6:	8c 01       	movw	r16, r24
    19d8:	e2 0e       	add	r14, r18
    19da:	f1 1c       	adc	r15, r1
    19dc:	01 1d       	adc	r16, r1
    19de:	11 1d       	adc	r17, r1
    19e0:	a8 01       	movw	r20, r16
    19e2:	97 01       	movw	r18, r14
    19e4:	b7 01       	movw	r22, r14
    19e6:	ca 01       	movw	r24, r20
    19e8:	1f 91       	pop	r17
    19ea:	0f 91       	pop	r16
    19ec:	ff 90       	pop	r15
    19ee:	ef 90       	pop	r14
    19f0:	08 95       	ret

000019f2 <skip_spaces>:
    19f2:	0f 93       	push	r16
    19f4:	1f 93       	push	r17
    19f6:	cf 93       	push	r28
    19f8:	df 93       	push	r29
    19fa:	8c 01       	movw	r16, r24
    19fc:	c8 01       	movw	r24, r16
    19fe:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <fgetc>
    1a02:	ec 01       	movw	r28, r24
    1a04:	97 fd       	sbrc	r25, 7
    1a06:	08 c0       	rjmp	.+16     	; 0x1a18 <skip_spaces+0x26>
    1a08:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <isspace>
    1a0c:	89 2b       	or	r24, r25
    1a0e:	b1 f7       	brne	.-20     	; 0x19fc <skip_spaces+0xa>
    1a10:	ce 01       	movw	r24, r28
    1a12:	b8 01       	movw	r22, r16
    1a14:	0e 94 51 14 	call	0x28a2	; 0x28a2 <ungetc>
    1a18:	ce 01       	movw	r24, r28
    1a1a:	df 91       	pop	r29
    1a1c:	cf 91       	pop	r28
    1a1e:	1f 91       	pop	r17
    1a20:	0f 91       	pop	r16
    1a22:	08 95       	ret

00001a24 <conv_int>:
    1a24:	a0 e0       	ldi	r26, 0x00	; 0
    1a26:	b0 e0       	ldi	r27, 0x00	; 0
    1a28:	e8 e1       	ldi	r30, 0x18	; 24
    1a2a:	fd e0       	ldi	r31, 0x0D	; 13
    1a2c:	0c 94 ff 14 	jmp	0x29fe	; 0x29fe <__prologue_saves__+0x10>
    1a30:	ec 01       	movw	r28, r24
    1a32:	c6 2e       	mov	r12, r22
    1a34:	5a 01       	movw	r10, r20
    1a36:	12 2f       	mov	r17, r18
    1a38:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <fgetc>
    1a3c:	ac 01       	movw	r20, r24
    1a3e:	8b 32       	cpi	r24, 0x2B	; 43
    1a40:	19 f0       	breq	.+6      	; 0x1a48 <conv_int+0x24>
    1a42:	8d 32       	cpi	r24, 0x2D	; 45
    1a44:	51 f4       	brne	.+20     	; 0x1a5a <conv_int+0x36>
    1a46:	10 68       	ori	r17, 0x80	; 128
    1a48:	ca 94       	dec	r12
    1a4a:	09 f4       	brne	.+2      	; 0x1a4e <conv_int+0x2a>
    1a4c:	6d c0       	rjmp	.+218    	; 0x1b28 <conv_int+0x104>
    1a4e:	ce 01       	movw	r24, r28
    1a50:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <fgetc>
    1a54:	ac 01       	movw	r20, r24
    1a56:	97 fd       	sbrc	r25, 7
    1a58:	67 c0       	rjmp	.+206    	; 0x1b28 <conv_int+0x104>
    1a5a:	6d ef       	ldi	r22, 0xFD	; 253
    1a5c:	d6 2e       	mov	r13, r22
    1a5e:	d1 22       	and	r13, r17
    1a60:	8d 2d       	mov	r24, r13
    1a62:	80 73       	andi	r24, 0x30	; 48
    1a64:	01 f5       	brne	.+64     	; 0x1aa6 <conv_int+0x82>
    1a66:	40 33       	cpi	r20, 0x30	; 48
    1a68:	f1 f4       	brne	.+60     	; 0x1aa6 <conv_int+0x82>
    1a6a:	ca 94       	dec	r12
    1a6c:	09 f4       	brne	.+2      	; 0x1a70 <conv_int+0x4c>
    1a6e:	47 c0       	rjmp	.+142    	; 0x1afe <conv_int+0xda>
    1a70:	ce 01       	movw	r24, r28
    1a72:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <fgetc>
    1a76:	ac 01       	movw	r20, r24
    1a78:	97 fd       	sbrc	r25, 7
    1a7a:	41 c0       	rjmp	.+130    	; 0x1afe <conv_int+0xda>
    1a7c:	82 e0       	ldi	r24, 0x02	; 2
    1a7e:	d8 2a       	or	r13, r24
    1a80:	48 37       	cpi	r20, 0x78	; 120
    1a82:	11 f0       	breq	.+4      	; 0x1a88 <conv_int+0x64>
    1a84:	48 35       	cpi	r20, 0x58	; 88
    1a86:	59 f4       	brne	.+22     	; 0x1a9e <conv_int+0x7a>
    1a88:	80 e4       	ldi	r24, 0x40	; 64
    1a8a:	d8 2a       	or	r13, r24
    1a8c:	ca 94       	dec	r12
    1a8e:	b9 f1       	breq	.+110    	; 0x1afe <conv_int+0xda>
    1a90:	ce 01       	movw	r24, r28
    1a92:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <fgetc>
    1a96:	ac 01       	movw	r20, r24
    1a98:	99 23       	and	r25, r25
    1a9a:	2c f4       	brge	.+10     	; 0x1aa6 <conv_int+0x82>
    1a9c:	30 c0       	rjmp	.+96     	; 0x1afe <conv_int+0xda>
    1a9e:	d6 fc       	sbrc	r13, 6
    1aa0:	02 c0       	rjmp	.+4      	; 0x1aa6 <conv_int+0x82>
    1aa2:	80 e1       	ldi	r24, 0x10	; 16
    1aa4:	d8 2a       	or	r13, r24
    1aa6:	ee 24       	eor	r14, r14
    1aa8:	ff 24       	eor	r15, r15
    1aaa:	87 01       	movw	r16, r14
    1aac:	24 2f       	mov	r18, r20
    1aae:	20 53       	subi	r18, 0x30	; 48
    1ab0:	28 30       	cpi	r18, 0x08	; 8
    1ab2:	88 f0       	brcs	.+34     	; 0x1ad6 <conv_int+0xb2>
    1ab4:	d4 fc       	sbrc	r13, 4
    1ab6:	09 c0       	rjmp	.+18     	; 0x1aca <conv_int+0xa6>
    1ab8:	2a 30       	cpi	r18, 0x0A	; 10
    1aba:	68 f0       	brcs	.+26     	; 0x1ad6 <conv_int+0xb2>
    1abc:	d6 fe       	sbrs	r13, 6
    1abe:	05 c0       	rjmp	.+10     	; 0x1aca <conv_int+0xa6>
    1ac0:	2f 7d       	andi	r18, 0xDF	; 223
    1ac2:	82 2f       	mov	r24, r18
    1ac4:	81 51       	subi	r24, 0x11	; 17
    1ac6:	86 30       	cpi	r24, 0x06	; 6
    1ac8:	28 f0       	brcs	.+10     	; 0x1ad4 <conv_int+0xb0>
    1aca:	ca 01       	movw	r24, r20
    1acc:	be 01       	movw	r22, r28
    1ace:	0e 94 51 14 	call	0x28a2	; 0x28a2 <ungetc>
    1ad2:	12 c0       	rjmp	.+36     	; 0x1af8 <conv_int+0xd4>
    1ad4:	27 50       	subi	r18, 0x07	; 7
    1ad6:	c8 01       	movw	r24, r16
    1ad8:	b7 01       	movw	r22, r14
    1ada:	4d 2d       	mov	r20, r13
    1adc:	0e 94 cb 0c 	call	0x1996	; 0x1996 <mulacc>
    1ae0:	7b 01       	movw	r14, r22
    1ae2:	8c 01       	movw	r16, r24
    1ae4:	82 e0       	ldi	r24, 0x02	; 2
    1ae6:	d8 2a       	or	r13, r24
    1ae8:	ca 94       	dec	r12
    1aea:	61 f0       	breq	.+24     	; 0x1b04 <conv_int+0xe0>
    1aec:	ce 01       	movw	r24, r28
    1aee:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <fgetc>
    1af2:	ac 01       	movw	r20, r24
    1af4:	97 ff       	sbrs	r25, 7
    1af6:	da cf       	rjmp	.-76     	; 0x1aac <conv_int+0x88>
    1af8:	d1 fc       	sbrc	r13, 1
    1afa:	04 c0       	rjmp	.+8      	; 0x1b04 <conv_int+0xe0>
    1afc:	15 c0       	rjmp	.+42     	; 0x1b28 <conv_int+0x104>
    1afe:	ee 24       	eor	r14, r14
    1b00:	ff 24       	eor	r15, r15
    1b02:	87 01       	movw	r16, r14
    1b04:	d7 fe       	sbrs	r13, 7
    1b06:	08 c0       	rjmp	.+16     	; 0x1b18 <conv_int+0xf4>
    1b08:	10 95       	com	r17
    1b0a:	00 95       	com	r16
    1b0c:	f0 94       	com	r15
    1b0e:	e0 94       	com	r14
    1b10:	e1 1c       	adc	r14, r1
    1b12:	f1 1c       	adc	r15, r1
    1b14:	01 1d       	adc	r16, r1
    1b16:	11 1d       	adc	r17, r1
    1b18:	c5 01       	movw	r24, r10
    1b1a:	b8 01       	movw	r22, r16
    1b1c:	a7 01       	movw	r20, r14
    1b1e:	2d 2d       	mov	r18, r13
    1b20:	0e 94 bf 0c 	call	0x197e	; 0x197e <putval>
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	01 c0       	rjmp	.+2      	; 0x1b2a <conv_int+0x106>
    1b28:	80 e0       	ldi	r24, 0x00	; 0
    1b2a:	cd b7       	in	r28, 0x3d	; 61
    1b2c:	de b7       	in	r29, 0x3e	; 62
    1b2e:	ea e0       	ldi	r30, 0x0A	; 10
    1b30:	0c 94 1b 15 	jmp	0x2a36	; 0x2a36 <__epilogue_restores__+0x10>

00001b34 <vfscanf>:
    1b34:	a0 e0       	ldi	r26, 0x00	; 0
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	e0 ea       	ldi	r30, 0xA0	; 160
    1b3a:	fd e0       	ldi	r31, 0x0D	; 13
    1b3c:	0c 94 fb 14 	jmp	0x29f6	; 0x29f6 <__prologue_saves__+0x8>
    1b40:	5c 01       	movw	r10, r24
    1b42:	6b 01       	movw	r12, r22
    1b44:	3a 01       	movw	r6, r20
    1b46:	fc 01       	movw	r30, r24
    1b48:	17 82       	std	Z+7, r1	; 0x07
    1b4a:	16 82       	std	Z+6, r1	; 0x06
    1b4c:	88 24       	eor	r8, r8
    1b4e:	dd c0       	rjmp	.+442    	; 0x1d0a <vfscanf+0x1d6>
    1b50:	81 2f       	mov	r24, r17
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <isspace>
    1b58:	89 2b       	or	r24, r25
    1b5a:	21 f0       	breq	.+8      	; 0x1b64 <vfscanf+0x30>
    1b5c:	c5 01       	movw	r24, r10
    1b5e:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <skip_spaces>
    1b62:	d3 c0       	rjmp	.+422    	; 0x1d0a <vfscanf+0x1d6>
    1b64:	15 32       	cpi	r17, 0x25	; 37
    1b66:	49 f4       	brne	.+18     	; 0x1b7a <vfscanf+0x46>
    1b68:	f6 01       	movw	r30, r12
    1b6a:	f3 fc       	sbrc	r15, 3
    1b6c:	65 91       	lpm	r22, Z+
    1b6e:	f3 fe       	sbrs	r15, 3
    1b70:	61 91       	ld	r22, Z+
    1b72:	6f 01       	movw	r12, r30
    1b74:	65 32       	cpi	r22, 0x25	; 37
    1b76:	69 f4       	brne	.+26     	; 0x1b92 <vfscanf+0x5e>
    1b78:	15 e2       	ldi	r17, 0x25	; 37
    1b7a:	c5 01       	movw	r24, r10
    1b7c:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <fgetc>
    1b80:	97 fd       	sbrc	r25, 7
    1b82:	cf c0       	rjmp	.+414    	; 0x1d22 <vfscanf+0x1ee>
    1b84:	18 17       	cp	r17, r24
    1b86:	09 f4       	brne	.+2      	; 0x1b8a <vfscanf+0x56>
    1b88:	c0 c0       	rjmp	.+384    	; 0x1d0a <vfscanf+0x1d6>
    1b8a:	b5 01       	movw	r22, r10
    1b8c:	0e 94 51 14 	call	0x28a2	; 0x28a2 <ungetc>
    1b90:	cd c0       	rjmp	.+410    	; 0x1d2c <vfscanf+0x1f8>
    1b92:	6a 32       	cpi	r22, 0x2A	; 42
    1b94:	19 f0       	breq	.+6      	; 0x1b9c <vfscanf+0x68>
    1b96:	16 2f       	mov	r17, r22
    1b98:	00 e0       	ldi	r16, 0x00	; 0
    1b9a:	06 c0       	rjmp	.+12     	; 0x1ba8 <vfscanf+0x74>
    1b9c:	f3 fc       	sbrc	r15, 3
    1b9e:	15 91       	lpm	r17, Z+
    1ba0:	f3 fe       	sbrs	r15, 3
    1ba2:	11 91       	ld	r17, Z+
    1ba4:	6f 01       	movw	r12, r30
    1ba6:	01 e0       	ldi	r16, 0x01	; 1
    1ba8:	99 24       	eor	r9, r9
    1baa:	0f c0       	rjmp	.+30     	; 0x1bca <vfscanf+0x96>
    1bac:	02 60       	ori	r16, 0x02	; 2
    1bae:	69 2d       	mov	r22, r9
    1bb0:	70 e0       	ldi	r23, 0x00	; 0
    1bb2:	80 e0       	ldi	r24, 0x00	; 0
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	40 e2       	ldi	r20, 0x20	; 32
    1bb8:	0e 94 cb 0c 	call	0x1996	; 0x1996 <mulacc>
    1bbc:	96 2e       	mov	r9, r22
    1bbe:	f6 01       	movw	r30, r12
    1bc0:	f3 fc       	sbrc	r15, 3
    1bc2:	15 91       	lpm	r17, Z+
    1bc4:	f3 fe       	sbrs	r15, 3
    1bc6:	11 91       	ld	r17, Z+
    1bc8:	6f 01       	movw	r12, r30
    1bca:	21 2f       	mov	r18, r17
    1bcc:	20 53       	subi	r18, 0x30	; 48
    1bce:	2a 30       	cpi	r18, 0x0A	; 10
    1bd0:	68 f3       	brcs	.-38     	; 0x1bac <vfscanf+0x78>
    1bd2:	01 fd       	sbrc	r16, 1
    1bd4:	03 c0       	rjmp	.+6      	; 0x1bdc <vfscanf+0xa8>
    1bd6:	99 24       	eor	r9, r9
    1bd8:	9a 94       	dec	r9
    1bda:	03 c0       	rjmp	.+6      	; 0x1be2 <vfscanf+0xae>
    1bdc:	99 20       	and	r9, r9
    1bde:	09 f4       	brne	.+2      	; 0x1be2 <vfscanf+0xae>
    1be0:	a5 c0       	rjmp	.+330    	; 0x1d2c <vfscanf+0x1f8>
    1be2:	18 36       	cpi	r17, 0x68	; 104
    1be4:	21 f0       	breq	.+8      	; 0x1bee <vfscanf+0xba>
    1be6:	1c 36       	cpi	r17, 0x6C	; 108
    1be8:	99 f4       	brne	.+38     	; 0x1c10 <vfscanf+0xdc>
    1bea:	f6 01       	movw	r30, r12
    1bec:	0b c0       	rjmp	.+22     	; 0x1c04 <vfscanf+0xd0>
    1bee:	f6 01       	movw	r30, r12
    1bf0:	f3 fc       	sbrc	r15, 3
    1bf2:	65 91       	lpm	r22, Z+
    1bf4:	f3 fe       	sbrs	r15, 3
    1bf6:	61 91       	ld	r22, Z+
    1bf8:	68 36       	cpi	r22, 0x68	; 104
    1bfa:	19 f0       	breq	.+6      	; 0x1c02 <vfscanf+0xce>
    1bfc:	6f 01       	movw	r12, r30
    1bfe:	16 2f       	mov	r17, r22
    1c00:	07 c0       	rjmp	.+14     	; 0x1c10 <vfscanf+0xdc>
    1c02:	08 60       	ori	r16, 0x08	; 8
    1c04:	04 60       	ori	r16, 0x04	; 4
    1c06:	f3 fc       	sbrc	r15, 3
    1c08:	15 91       	lpm	r17, Z+
    1c0a:	f3 fe       	sbrs	r15, 3
    1c0c:	11 91       	ld	r17, Z+
    1c0e:	6f 01       	movw	r12, r30
    1c10:	11 23       	and	r17, r17
    1c12:	09 f4       	brne	.+2      	; 0x1c16 <vfscanf+0xe2>
    1c14:	8b c0       	rjmp	.+278    	; 0x1d2c <vfscanf+0x1f8>
    1c16:	89 e8       	ldi	r24, 0x89	; 137
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	61 2f       	mov	r22, r17
    1c1c:	70 e0       	ldi	r23, 0x00	; 0
    1c1e:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <strchr_P>
    1c22:	89 2b       	or	r24, r25
    1c24:	09 f4       	brne	.+2      	; 0x1c28 <vfscanf+0xf4>
    1c26:	82 c0       	rjmp	.+260    	; 0x1d2c <vfscanf+0x1f8>
    1c28:	80 2f       	mov	r24, r16
    1c2a:	00 ff       	sbrs	r16, 0
    1c2c:	03 c0       	rjmp	.+6      	; 0x1c34 <vfscanf+0x100>
    1c2e:	ee 24       	eor	r14, r14
    1c30:	ff 24       	eor	r15, r15
    1c32:	07 c0       	rjmp	.+14     	; 0x1c42 <vfscanf+0x10e>
    1c34:	f3 01       	movw	r30, r6
    1c36:	e0 80       	ld	r14, Z
    1c38:	f1 80       	ldd	r15, Z+1	; 0x01
    1c3a:	22 e0       	ldi	r18, 0x02	; 2
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	62 0e       	add	r6, r18
    1c40:	73 1e       	adc	r7, r19
    1c42:	1e 36       	cpi	r17, 0x6E	; 110
    1c44:	51 f4       	brne	.+20     	; 0x1c5a <vfscanf+0x126>
    1c46:	f5 01       	movw	r30, r10
    1c48:	46 81       	ldd	r20, Z+6	; 0x06
    1c4a:	57 81       	ldd	r21, Z+7	; 0x07
    1c4c:	60 e0       	ldi	r22, 0x00	; 0
    1c4e:	70 e0       	ldi	r23, 0x00	; 0
    1c50:	c7 01       	movw	r24, r14
    1c52:	20 2f       	mov	r18, r16
    1c54:	0e 94 bf 0c 	call	0x197e	; 0x197e <putval>
    1c58:	58 c0       	rjmp	.+176    	; 0x1d0a <vfscanf+0x1d6>
    1c5a:	13 36       	cpi	r17, 0x63	; 99
    1c5c:	91 f4       	brne	.+36     	; 0x1c82 <vfscanf+0x14e>
    1c5e:	81 fd       	sbrc	r24, 1
    1c60:	02 c0       	rjmp	.+4      	; 0x1c66 <vfscanf+0x132>
    1c62:	99 24       	eor	r9, r9
    1c64:	93 94       	inc	r9
    1c66:	c5 01       	movw	r24, r10
    1c68:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <fgetc>
    1c6c:	97 fd       	sbrc	r25, 7
    1c6e:	59 c0       	rjmp	.+178    	; 0x1d22 <vfscanf+0x1ee>
    1c70:	e1 14       	cp	r14, r1
    1c72:	f1 04       	cpc	r15, r1
    1c74:	19 f0       	breq	.+6      	; 0x1c7c <vfscanf+0x148>
    1c76:	f7 01       	movw	r30, r14
    1c78:	81 93       	st	Z+, r24
    1c7a:	7f 01       	movw	r14, r30
    1c7c:	9a 94       	dec	r9
    1c7e:	99 f7       	brne	.-26     	; 0x1c66 <vfscanf+0x132>
    1c80:	42 c0       	rjmp	.+132    	; 0x1d06 <vfscanf+0x1d2>
    1c82:	c5 01       	movw	r24, r10
    1c84:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <skip_spaces>
    1c88:	97 fd       	sbrc	r25, 7
    1c8a:	4b c0       	rjmp	.+150    	; 0x1d22 <vfscanf+0x1ee>
    1c8c:	1f 36       	cpi	r17, 0x6F	; 111
    1c8e:	59 f1       	breq	.+86     	; 0x1ce6 <vfscanf+0x1b2>
    1c90:	10 37       	cpi	r17, 0x70	; 112
    1c92:	28 f4       	brcc	.+10     	; 0x1c9e <vfscanf+0x16a>
    1c94:	14 36       	cpi	r17, 0x64	; 100
    1c96:	29 f1       	breq	.+74     	; 0x1ce2 <vfscanf+0x1ae>
    1c98:	19 36       	cpi	r17, 0x69	; 105
    1c9a:	39 f5       	brne	.+78     	; 0x1cea <vfscanf+0x1b6>
    1c9c:	27 c0       	rjmp	.+78     	; 0x1cec <vfscanf+0x1b8>
    1c9e:	13 37       	cpi	r17, 0x73	; 115
    1ca0:	19 f0       	breq	.+6      	; 0x1ca8 <vfscanf+0x174>
    1ca2:	15 37       	cpi	r17, 0x75	; 117
    1ca4:	11 f5       	brne	.+68     	; 0x1cea <vfscanf+0x1b6>
    1ca6:	1d c0       	rjmp	.+58     	; 0x1ce2 <vfscanf+0x1ae>
    1ca8:	c5 01       	movw	r24, r10
    1caa:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <fgetc>
    1cae:	ec 01       	movw	r28, r24
    1cb0:	97 fd       	sbrc	r25, 7
    1cb2:	11 c0       	rjmp	.+34     	; 0x1cd6 <vfscanf+0x1a2>
    1cb4:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <isspace>
    1cb8:	89 2b       	or	r24, r25
    1cba:	29 f0       	breq	.+10     	; 0x1cc6 <vfscanf+0x192>
    1cbc:	ce 01       	movw	r24, r28
    1cbe:	b5 01       	movw	r22, r10
    1cc0:	0e 94 51 14 	call	0x28a2	; 0x28a2 <ungetc>
    1cc4:	08 c0       	rjmp	.+16     	; 0x1cd6 <vfscanf+0x1a2>
    1cc6:	e1 14       	cp	r14, r1
    1cc8:	f1 04       	cpc	r15, r1
    1cca:	19 f0       	breq	.+6      	; 0x1cd2 <vfscanf+0x19e>
    1ccc:	f7 01       	movw	r30, r14
    1cce:	c1 93       	st	Z+, r28
    1cd0:	7f 01       	movw	r14, r30
    1cd2:	9a 94       	dec	r9
    1cd4:	49 f7       	brne	.-46     	; 0x1ca8 <vfscanf+0x174>
    1cd6:	e1 14       	cp	r14, r1
    1cd8:	f1 04       	cpc	r15, r1
    1cda:	a9 f0       	breq	.+42     	; 0x1d06 <vfscanf+0x1d2>
    1cdc:	f7 01       	movw	r30, r14
    1cde:	10 82       	st	Z, r1
    1ce0:	12 c0       	rjmp	.+36     	; 0x1d06 <vfscanf+0x1d2>
    1ce2:	00 62       	ori	r16, 0x20	; 32
    1ce4:	03 c0       	rjmp	.+6      	; 0x1cec <vfscanf+0x1b8>
    1ce6:	00 61       	ori	r16, 0x10	; 16
    1ce8:	01 c0       	rjmp	.+2      	; 0x1cec <vfscanf+0x1b8>
    1cea:	00 64       	ori	r16, 0x40	; 64
    1cec:	c5 01       	movw	r24, r10
    1cee:	69 2d       	mov	r22, r9
    1cf0:	a7 01       	movw	r20, r14
    1cf2:	20 2f       	mov	r18, r16
    1cf4:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <conv_int>
    1cf8:	88 23       	and	r24, r24
    1cfa:	29 f4       	brne	.+10     	; 0x1d06 <vfscanf+0x1d2>
    1cfc:	f5 01       	movw	r30, r10
    1cfe:	83 81       	ldd	r24, Z+3	; 0x03
    1d00:	80 73       	andi	r24, 0x30	; 48
    1d02:	79 f4       	brne	.+30     	; 0x1d22 <vfscanf+0x1ee>
    1d04:	13 c0       	rjmp	.+38     	; 0x1d2c <vfscanf+0x1f8>
    1d06:	00 ff       	sbrs	r16, 0
    1d08:	83 94       	inc	r8
    1d0a:	f5 01       	movw	r30, r10
    1d0c:	f3 80       	ldd	r15, Z+3	; 0x03
    1d0e:	f6 01       	movw	r30, r12
    1d10:	f3 fc       	sbrc	r15, 3
    1d12:	15 91       	lpm	r17, Z+
    1d14:	f3 fe       	sbrs	r15, 3
    1d16:	11 91       	ld	r17, Z+
    1d18:	6f 01       	movw	r12, r30
    1d1a:	11 23       	and	r17, r17
    1d1c:	09 f0       	breq	.+2      	; 0x1d20 <vfscanf+0x1ec>
    1d1e:	18 cf       	rjmp	.-464    	; 0x1b50 <vfscanf+0x1c>
    1d20:	05 c0       	rjmp	.+10     	; 0x1d2c <vfscanf+0x1f8>
    1d22:	88 20       	and	r8, r8
    1d24:	19 f4       	brne	.+6      	; 0x1d2c <vfscanf+0x1f8>
    1d26:	2f ef       	ldi	r18, 0xFF	; 255
    1d28:	3f ef       	ldi	r19, 0xFF	; 255
    1d2a:	02 c0       	rjmp	.+4      	; 0x1d30 <vfscanf+0x1fc>
    1d2c:	28 2d       	mov	r18, r8
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	c9 01       	movw	r24, r18
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
    1d36:	ee e0       	ldi	r30, 0x0E	; 14
    1d38:	0c 94 17 15 	jmp	0x2a2e	; 0x2a2e <__epilogue_restores__+0x8>

00001d3c <_fpadd_parts>:
    1d3c:	a0 e0       	ldi	r26, 0x00	; 0
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	e4 ea       	ldi	r30, 0xA4	; 164
    1d42:	fe e0       	ldi	r31, 0x0E	; 14
    1d44:	0c 94 f7 14 	jmp	0x29ee	; 0x29ee <__prologue_saves__>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	2b 01       	movw	r4, r22
    1d4c:	fa 01       	movw	r30, r20
    1d4e:	9c 91       	ld	r25, X
    1d50:	92 30       	cpi	r25, 0x02	; 2
    1d52:	08 f4       	brcc	.+2      	; 0x1d56 <_fpadd_parts+0x1a>
    1d54:	39 c1       	rjmp	.+626    	; 0x1fc8 <_fpadd_parts+0x28c>
    1d56:	eb 01       	movw	r28, r22
    1d58:	88 81       	ld	r24, Y
    1d5a:	82 30       	cpi	r24, 0x02	; 2
    1d5c:	08 f4       	brcc	.+2      	; 0x1d60 <_fpadd_parts+0x24>
    1d5e:	33 c1       	rjmp	.+614    	; 0x1fc6 <_fpadd_parts+0x28a>
    1d60:	94 30       	cpi	r25, 0x04	; 4
    1d62:	69 f4       	brne	.+26     	; 0x1d7e <_fpadd_parts+0x42>
    1d64:	84 30       	cpi	r24, 0x04	; 4
    1d66:	09 f0       	breq	.+2      	; 0x1d6a <_fpadd_parts+0x2e>
    1d68:	2f c1       	rjmp	.+606    	; 0x1fc8 <_fpadd_parts+0x28c>
    1d6a:	11 96       	adiw	r26, 0x01	; 1
    1d6c:	9c 91       	ld	r25, X
    1d6e:	11 97       	sbiw	r26, 0x01	; 1
    1d70:	89 81       	ldd	r24, Y+1	; 0x01
    1d72:	98 17       	cp	r25, r24
    1d74:	09 f4       	brne	.+2      	; 0x1d78 <_fpadd_parts+0x3c>
    1d76:	28 c1       	rjmp	.+592    	; 0x1fc8 <_fpadd_parts+0x28c>
    1d78:	a2 e6       	ldi	r26, 0x62	; 98
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
    1d7c:	25 c1       	rjmp	.+586    	; 0x1fc8 <_fpadd_parts+0x28c>
    1d7e:	84 30       	cpi	r24, 0x04	; 4
    1d80:	09 f4       	brne	.+2      	; 0x1d84 <_fpadd_parts+0x48>
    1d82:	21 c1       	rjmp	.+578    	; 0x1fc6 <_fpadd_parts+0x28a>
    1d84:	82 30       	cpi	r24, 0x02	; 2
    1d86:	a9 f4       	brne	.+42     	; 0x1db2 <_fpadd_parts+0x76>
    1d88:	92 30       	cpi	r25, 0x02	; 2
    1d8a:	09 f0       	breq	.+2      	; 0x1d8e <_fpadd_parts+0x52>
    1d8c:	1d c1       	rjmp	.+570    	; 0x1fc8 <_fpadd_parts+0x28c>
    1d8e:	9a 01       	movw	r18, r20
    1d90:	ad 01       	movw	r20, r26
    1d92:	88 e0       	ldi	r24, 0x08	; 8
    1d94:	ea 01       	movw	r28, r20
    1d96:	09 90       	ld	r0, Y+
    1d98:	ae 01       	movw	r20, r28
    1d9a:	e9 01       	movw	r28, r18
    1d9c:	09 92       	st	Y+, r0
    1d9e:	9e 01       	movw	r18, r28
    1da0:	81 50       	subi	r24, 0x01	; 1
    1da2:	c1 f7       	brne	.-16     	; 0x1d94 <_fpadd_parts+0x58>
    1da4:	e2 01       	movw	r28, r4
    1da6:	89 81       	ldd	r24, Y+1	; 0x01
    1da8:	11 96       	adiw	r26, 0x01	; 1
    1daa:	9c 91       	ld	r25, X
    1dac:	89 23       	and	r24, r25
    1dae:	81 83       	std	Z+1, r24	; 0x01
    1db0:	08 c1       	rjmp	.+528    	; 0x1fc2 <_fpadd_parts+0x286>
    1db2:	92 30       	cpi	r25, 0x02	; 2
    1db4:	09 f4       	brne	.+2      	; 0x1db8 <_fpadd_parts+0x7c>
    1db6:	07 c1       	rjmp	.+526    	; 0x1fc6 <_fpadd_parts+0x28a>
    1db8:	12 96       	adiw	r26, 0x02	; 2
    1dba:	2d 90       	ld	r2, X+
    1dbc:	3c 90       	ld	r3, X
    1dbe:	13 97       	sbiw	r26, 0x03	; 3
    1dc0:	eb 01       	movw	r28, r22
    1dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc4:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc6:	14 96       	adiw	r26, 0x04	; 4
    1dc8:	ad 90       	ld	r10, X+
    1dca:	bd 90       	ld	r11, X+
    1dcc:	cd 90       	ld	r12, X+
    1dce:	dc 90       	ld	r13, X
    1dd0:	17 97       	sbiw	r26, 0x07	; 7
    1dd2:	ec 80       	ldd	r14, Y+4	; 0x04
    1dd4:	fd 80       	ldd	r15, Y+5	; 0x05
    1dd6:	0e 81       	ldd	r16, Y+6	; 0x06
    1dd8:	1f 81       	ldd	r17, Y+7	; 0x07
    1dda:	91 01       	movw	r18, r2
    1ddc:	28 1b       	sub	r18, r24
    1dde:	39 0b       	sbc	r19, r25
    1de0:	b9 01       	movw	r22, r18
    1de2:	37 ff       	sbrs	r19, 7
    1de4:	04 c0       	rjmp	.+8      	; 0x1dee <_fpadd_parts+0xb2>
    1de6:	66 27       	eor	r22, r22
    1de8:	77 27       	eor	r23, r23
    1dea:	62 1b       	sub	r22, r18
    1dec:	73 0b       	sbc	r23, r19
    1dee:	60 32       	cpi	r22, 0x20	; 32
    1df0:	71 05       	cpc	r23, r1
    1df2:	0c f0       	brlt	.+2      	; 0x1df6 <_fpadd_parts+0xba>
    1df4:	61 c0       	rjmp	.+194    	; 0x1eb8 <_fpadd_parts+0x17c>
    1df6:	12 16       	cp	r1, r18
    1df8:	13 06       	cpc	r1, r19
    1dfa:	6c f5       	brge	.+90     	; 0x1e56 <_fpadd_parts+0x11a>
    1dfc:	37 01       	movw	r6, r14
    1dfe:	48 01       	movw	r8, r16
    1e00:	06 2e       	mov	r0, r22
    1e02:	04 c0       	rjmp	.+8      	; 0x1e0c <_fpadd_parts+0xd0>
    1e04:	96 94       	lsr	r9
    1e06:	87 94       	ror	r8
    1e08:	77 94       	ror	r7
    1e0a:	67 94       	ror	r6
    1e0c:	0a 94       	dec	r0
    1e0e:	d2 f7       	brpl	.-12     	; 0x1e04 <_fpadd_parts+0xc8>
    1e10:	21 e0       	ldi	r18, 0x01	; 1
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	40 e0       	ldi	r20, 0x00	; 0
    1e16:	50 e0       	ldi	r21, 0x00	; 0
    1e18:	04 c0       	rjmp	.+8      	; 0x1e22 <_fpadd_parts+0xe6>
    1e1a:	22 0f       	add	r18, r18
    1e1c:	33 1f       	adc	r19, r19
    1e1e:	44 1f       	adc	r20, r20
    1e20:	55 1f       	adc	r21, r21
    1e22:	6a 95       	dec	r22
    1e24:	d2 f7       	brpl	.-12     	; 0x1e1a <_fpadd_parts+0xde>
    1e26:	21 50       	subi	r18, 0x01	; 1
    1e28:	30 40       	sbci	r19, 0x00	; 0
    1e2a:	40 40       	sbci	r20, 0x00	; 0
    1e2c:	50 40       	sbci	r21, 0x00	; 0
    1e2e:	2e 21       	and	r18, r14
    1e30:	3f 21       	and	r19, r15
    1e32:	40 23       	and	r20, r16
    1e34:	51 23       	and	r21, r17
    1e36:	21 15       	cp	r18, r1
    1e38:	31 05       	cpc	r19, r1
    1e3a:	41 05       	cpc	r20, r1
    1e3c:	51 05       	cpc	r21, r1
    1e3e:	21 f0       	breq	.+8      	; 0x1e48 <_fpadd_parts+0x10c>
    1e40:	21 e0       	ldi	r18, 0x01	; 1
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	40 e0       	ldi	r20, 0x00	; 0
    1e46:	50 e0       	ldi	r21, 0x00	; 0
    1e48:	79 01       	movw	r14, r18
    1e4a:	8a 01       	movw	r16, r20
    1e4c:	e6 28       	or	r14, r6
    1e4e:	f7 28       	or	r15, r7
    1e50:	08 29       	or	r16, r8
    1e52:	19 29       	or	r17, r9
    1e54:	3c c0       	rjmp	.+120    	; 0x1ece <_fpadd_parts+0x192>
    1e56:	23 2b       	or	r18, r19
    1e58:	d1 f1       	breq	.+116    	; 0x1ece <_fpadd_parts+0x192>
    1e5a:	26 0e       	add	r2, r22
    1e5c:	37 1e       	adc	r3, r23
    1e5e:	35 01       	movw	r6, r10
    1e60:	46 01       	movw	r8, r12
    1e62:	06 2e       	mov	r0, r22
    1e64:	04 c0       	rjmp	.+8      	; 0x1e6e <_fpadd_parts+0x132>
    1e66:	96 94       	lsr	r9
    1e68:	87 94       	ror	r8
    1e6a:	77 94       	ror	r7
    1e6c:	67 94       	ror	r6
    1e6e:	0a 94       	dec	r0
    1e70:	d2 f7       	brpl	.-12     	; 0x1e66 <_fpadd_parts+0x12a>
    1e72:	21 e0       	ldi	r18, 0x01	; 1
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	40 e0       	ldi	r20, 0x00	; 0
    1e78:	50 e0       	ldi	r21, 0x00	; 0
    1e7a:	04 c0       	rjmp	.+8      	; 0x1e84 <_fpadd_parts+0x148>
    1e7c:	22 0f       	add	r18, r18
    1e7e:	33 1f       	adc	r19, r19
    1e80:	44 1f       	adc	r20, r20
    1e82:	55 1f       	adc	r21, r21
    1e84:	6a 95       	dec	r22
    1e86:	d2 f7       	brpl	.-12     	; 0x1e7c <_fpadd_parts+0x140>
    1e88:	21 50       	subi	r18, 0x01	; 1
    1e8a:	30 40       	sbci	r19, 0x00	; 0
    1e8c:	40 40       	sbci	r20, 0x00	; 0
    1e8e:	50 40       	sbci	r21, 0x00	; 0
    1e90:	2a 21       	and	r18, r10
    1e92:	3b 21       	and	r19, r11
    1e94:	4c 21       	and	r20, r12
    1e96:	5d 21       	and	r21, r13
    1e98:	21 15       	cp	r18, r1
    1e9a:	31 05       	cpc	r19, r1
    1e9c:	41 05       	cpc	r20, r1
    1e9e:	51 05       	cpc	r21, r1
    1ea0:	21 f0       	breq	.+8      	; 0x1eaa <_fpadd_parts+0x16e>
    1ea2:	21 e0       	ldi	r18, 0x01	; 1
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	40 e0       	ldi	r20, 0x00	; 0
    1ea8:	50 e0       	ldi	r21, 0x00	; 0
    1eaa:	59 01       	movw	r10, r18
    1eac:	6a 01       	movw	r12, r20
    1eae:	a6 28       	or	r10, r6
    1eb0:	b7 28       	or	r11, r7
    1eb2:	c8 28       	or	r12, r8
    1eb4:	d9 28       	or	r13, r9
    1eb6:	0b c0       	rjmp	.+22     	; 0x1ece <_fpadd_parts+0x192>
    1eb8:	82 15       	cp	r24, r2
    1eba:	93 05       	cpc	r25, r3
    1ebc:	2c f0       	brlt	.+10     	; 0x1ec8 <_fpadd_parts+0x18c>
    1ebe:	1c 01       	movw	r2, r24
    1ec0:	aa 24       	eor	r10, r10
    1ec2:	bb 24       	eor	r11, r11
    1ec4:	65 01       	movw	r12, r10
    1ec6:	03 c0       	rjmp	.+6      	; 0x1ece <_fpadd_parts+0x192>
    1ec8:	ee 24       	eor	r14, r14
    1eca:	ff 24       	eor	r15, r15
    1ecc:	87 01       	movw	r16, r14
    1ece:	11 96       	adiw	r26, 0x01	; 1
    1ed0:	9c 91       	ld	r25, X
    1ed2:	d2 01       	movw	r26, r4
    1ed4:	11 96       	adiw	r26, 0x01	; 1
    1ed6:	8c 91       	ld	r24, X
    1ed8:	98 17       	cp	r25, r24
    1eda:	09 f4       	brne	.+2      	; 0x1ede <_fpadd_parts+0x1a2>
    1edc:	45 c0       	rjmp	.+138    	; 0x1f68 <_fpadd_parts+0x22c>
    1ede:	99 23       	and	r25, r25
    1ee0:	39 f0       	breq	.+14     	; 0x1ef0 <_fpadd_parts+0x1b4>
    1ee2:	a8 01       	movw	r20, r16
    1ee4:	97 01       	movw	r18, r14
    1ee6:	2a 19       	sub	r18, r10
    1ee8:	3b 09       	sbc	r19, r11
    1eea:	4c 09       	sbc	r20, r12
    1eec:	5d 09       	sbc	r21, r13
    1eee:	06 c0       	rjmp	.+12     	; 0x1efc <_fpadd_parts+0x1c0>
    1ef0:	a6 01       	movw	r20, r12
    1ef2:	95 01       	movw	r18, r10
    1ef4:	2e 19       	sub	r18, r14
    1ef6:	3f 09       	sbc	r19, r15
    1ef8:	40 0b       	sbc	r20, r16
    1efa:	51 0b       	sbc	r21, r17
    1efc:	57 fd       	sbrc	r21, 7
    1efe:	08 c0       	rjmp	.+16     	; 0x1f10 <_fpadd_parts+0x1d4>
    1f00:	11 82       	std	Z+1, r1	; 0x01
    1f02:	33 82       	std	Z+3, r3	; 0x03
    1f04:	22 82       	std	Z+2, r2	; 0x02
    1f06:	24 83       	std	Z+4, r18	; 0x04
    1f08:	35 83       	std	Z+5, r19	; 0x05
    1f0a:	46 83       	std	Z+6, r20	; 0x06
    1f0c:	57 83       	std	Z+7, r21	; 0x07
    1f0e:	1d c0       	rjmp	.+58     	; 0x1f4a <_fpadd_parts+0x20e>
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	81 83       	std	Z+1, r24	; 0x01
    1f14:	33 82       	std	Z+3, r3	; 0x03
    1f16:	22 82       	std	Z+2, r2	; 0x02
    1f18:	88 27       	eor	r24, r24
    1f1a:	99 27       	eor	r25, r25
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	82 1b       	sub	r24, r18
    1f20:	93 0b       	sbc	r25, r19
    1f22:	a4 0b       	sbc	r26, r20
    1f24:	b5 0b       	sbc	r27, r21
    1f26:	84 83       	std	Z+4, r24	; 0x04
    1f28:	95 83       	std	Z+5, r25	; 0x05
    1f2a:	a6 83       	std	Z+6, r26	; 0x06
    1f2c:	b7 83       	std	Z+7, r27	; 0x07
    1f2e:	0d c0       	rjmp	.+26     	; 0x1f4a <_fpadd_parts+0x20e>
    1f30:	22 0f       	add	r18, r18
    1f32:	33 1f       	adc	r19, r19
    1f34:	44 1f       	adc	r20, r20
    1f36:	55 1f       	adc	r21, r21
    1f38:	24 83       	std	Z+4, r18	; 0x04
    1f3a:	35 83       	std	Z+5, r19	; 0x05
    1f3c:	46 83       	std	Z+6, r20	; 0x06
    1f3e:	57 83       	std	Z+7, r21	; 0x07
    1f40:	82 81       	ldd	r24, Z+2	; 0x02
    1f42:	93 81       	ldd	r25, Z+3	; 0x03
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	93 83       	std	Z+3, r25	; 0x03
    1f48:	82 83       	std	Z+2, r24	; 0x02
    1f4a:	24 81       	ldd	r18, Z+4	; 0x04
    1f4c:	35 81       	ldd	r19, Z+5	; 0x05
    1f4e:	46 81       	ldd	r20, Z+6	; 0x06
    1f50:	57 81       	ldd	r21, Z+7	; 0x07
    1f52:	da 01       	movw	r26, r20
    1f54:	c9 01       	movw	r24, r18
    1f56:	01 97       	sbiw	r24, 0x01	; 1
    1f58:	a1 09       	sbc	r26, r1
    1f5a:	b1 09       	sbc	r27, r1
    1f5c:	8f 5f       	subi	r24, 0xFF	; 255
    1f5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f60:	af 4f       	sbci	r26, 0xFF	; 255
    1f62:	bf 43       	sbci	r27, 0x3F	; 63
    1f64:	28 f3       	brcs	.-54     	; 0x1f30 <_fpadd_parts+0x1f4>
    1f66:	0b c0       	rjmp	.+22     	; 0x1f7e <_fpadd_parts+0x242>
    1f68:	91 83       	std	Z+1, r25	; 0x01
    1f6a:	33 82       	std	Z+3, r3	; 0x03
    1f6c:	22 82       	std	Z+2, r2	; 0x02
    1f6e:	ea 0c       	add	r14, r10
    1f70:	fb 1c       	adc	r15, r11
    1f72:	0c 1d       	adc	r16, r12
    1f74:	1d 1d       	adc	r17, r13
    1f76:	e4 82       	std	Z+4, r14	; 0x04
    1f78:	f5 82       	std	Z+5, r15	; 0x05
    1f7a:	06 83       	std	Z+6, r16	; 0x06
    1f7c:	17 83       	std	Z+7, r17	; 0x07
    1f7e:	83 e0       	ldi	r24, 0x03	; 3
    1f80:	80 83       	st	Z, r24
    1f82:	24 81       	ldd	r18, Z+4	; 0x04
    1f84:	35 81       	ldd	r19, Z+5	; 0x05
    1f86:	46 81       	ldd	r20, Z+6	; 0x06
    1f88:	57 81       	ldd	r21, Z+7	; 0x07
    1f8a:	57 ff       	sbrs	r21, 7
    1f8c:	1a c0       	rjmp	.+52     	; 0x1fc2 <_fpadd_parts+0x286>
    1f8e:	c9 01       	movw	r24, r18
    1f90:	aa 27       	eor	r26, r26
    1f92:	97 fd       	sbrc	r25, 7
    1f94:	a0 95       	com	r26
    1f96:	ba 2f       	mov	r27, r26
    1f98:	81 70       	andi	r24, 0x01	; 1
    1f9a:	90 70       	andi	r25, 0x00	; 0
    1f9c:	a0 70       	andi	r26, 0x00	; 0
    1f9e:	b0 70       	andi	r27, 0x00	; 0
    1fa0:	56 95       	lsr	r21
    1fa2:	47 95       	ror	r20
    1fa4:	37 95       	ror	r19
    1fa6:	27 95       	ror	r18
    1fa8:	82 2b       	or	r24, r18
    1faa:	93 2b       	or	r25, r19
    1fac:	a4 2b       	or	r26, r20
    1fae:	b5 2b       	or	r27, r21
    1fb0:	84 83       	std	Z+4, r24	; 0x04
    1fb2:	95 83       	std	Z+5, r25	; 0x05
    1fb4:	a6 83       	std	Z+6, r26	; 0x06
    1fb6:	b7 83       	std	Z+7, r27	; 0x07
    1fb8:	82 81       	ldd	r24, Z+2	; 0x02
    1fba:	93 81       	ldd	r25, Z+3	; 0x03
    1fbc:	01 96       	adiw	r24, 0x01	; 1
    1fbe:	93 83       	std	Z+3, r25	; 0x03
    1fc0:	82 83       	std	Z+2, r24	; 0x02
    1fc2:	df 01       	movw	r26, r30
    1fc4:	01 c0       	rjmp	.+2      	; 0x1fc8 <_fpadd_parts+0x28c>
    1fc6:	d2 01       	movw	r26, r4
    1fc8:	cd 01       	movw	r24, r26
    1fca:	cd b7       	in	r28, 0x3d	; 61
    1fcc:	de b7       	in	r29, 0x3e	; 62
    1fce:	e2 e1       	ldi	r30, 0x12	; 18
    1fd0:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <__epilogue_restores__>

00001fd4 <__subsf3>:
    1fd4:	a0 e2       	ldi	r26, 0x20	; 32
    1fd6:	b0 e0       	ldi	r27, 0x00	; 0
    1fd8:	e0 ef       	ldi	r30, 0xF0	; 240
    1fda:	ff e0       	ldi	r31, 0x0F	; 15
    1fdc:	0c 94 03 15 	jmp	0x2a06	; 0x2a06 <__prologue_saves__+0x18>
    1fe0:	69 83       	std	Y+1, r22	; 0x01
    1fe2:	7a 83       	std	Y+2, r23	; 0x02
    1fe4:	8b 83       	std	Y+3, r24	; 0x03
    1fe6:	9c 83       	std	Y+4, r25	; 0x04
    1fe8:	2d 83       	std	Y+5, r18	; 0x05
    1fea:	3e 83       	std	Y+6, r19	; 0x06
    1fec:	4f 83       	std	Y+7, r20	; 0x07
    1fee:	58 87       	std	Y+8, r21	; 0x08
    1ff0:	e9 e0       	ldi	r30, 0x09	; 9
    1ff2:	ee 2e       	mov	r14, r30
    1ff4:	f1 2c       	mov	r15, r1
    1ff6:	ec 0e       	add	r14, r28
    1ff8:	fd 1e       	adc	r15, r29
    1ffa:	ce 01       	movw	r24, r28
    1ffc:	01 96       	adiw	r24, 0x01	; 1
    1ffe:	b7 01       	movw	r22, r14
    2000:	0e 94 a6 12 	call	0x254c	; 0x254c <__unpack_f>
    2004:	8e 01       	movw	r16, r28
    2006:	0f 5e       	subi	r16, 0xEF	; 239
    2008:	1f 4f       	sbci	r17, 0xFF	; 255
    200a:	ce 01       	movw	r24, r28
    200c:	05 96       	adiw	r24, 0x05	; 5
    200e:	b8 01       	movw	r22, r16
    2010:	0e 94 a6 12 	call	0x254c	; 0x254c <__unpack_f>
    2014:	8a 89       	ldd	r24, Y+18	; 0x12
    2016:	91 e0       	ldi	r25, 0x01	; 1
    2018:	89 27       	eor	r24, r25
    201a:	8a 8b       	std	Y+18, r24	; 0x12
    201c:	c7 01       	movw	r24, r14
    201e:	b8 01       	movw	r22, r16
    2020:	ae 01       	movw	r20, r28
    2022:	47 5e       	subi	r20, 0xE7	; 231
    2024:	5f 4f       	sbci	r21, 0xFF	; 255
    2026:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <_fpadd_parts>
    202a:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__pack_f>
    202e:	a0 96       	adiw	r28, 0x20	; 32
    2030:	e6 e0       	ldi	r30, 0x06	; 6
    2032:	0c 94 1f 15 	jmp	0x2a3e	; 0x2a3e <__epilogue_restores__+0x18>

00002036 <__addsf3>:
    2036:	a0 e2       	ldi	r26, 0x20	; 32
    2038:	b0 e0       	ldi	r27, 0x00	; 0
    203a:	e1 e2       	ldi	r30, 0x21	; 33
    203c:	f0 e1       	ldi	r31, 0x10	; 16
    203e:	0c 94 03 15 	jmp	0x2a06	; 0x2a06 <__prologue_saves__+0x18>
    2042:	69 83       	std	Y+1, r22	; 0x01
    2044:	7a 83       	std	Y+2, r23	; 0x02
    2046:	8b 83       	std	Y+3, r24	; 0x03
    2048:	9c 83       	std	Y+4, r25	; 0x04
    204a:	2d 83       	std	Y+5, r18	; 0x05
    204c:	3e 83       	std	Y+6, r19	; 0x06
    204e:	4f 83       	std	Y+7, r20	; 0x07
    2050:	58 87       	std	Y+8, r21	; 0x08
    2052:	f9 e0       	ldi	r31, 0x09	; 9
    2054:	ef 2e       	mov	r14, r31
    2056:	f1 2c       	mov	r15, r1
    2058:	ec 0e       	add	r14, r28
    205a:	fd 1e       	adc	r15, r29
    205c:	ce 01       	movw	r24, r28
    205e:	01 96       	adiw	r24, 0x01	; 1
    2060:	b7 01       	movw	r22, r14
    2062:	0e 94 a6 12 	call	0x254c	; 0x254c <__unpack_f>
    2066:	8e 01       	movw	r16, r28
    2068:	0f 5e       	subi	r16, 0xEF	; 239
    206a:	1f 4f       	sbci	r17, 0xFF	; 255
    206c:	ce 01       	movw	r24, r28
    206e:	05 96       	adiw	r24, 0x05	; 5
    2070:	b8 01       	movw	r22, r16
    2072:	0e 94 a6 12 	call	0x254c	; 0x254c <__unpack_f>
    2076:	c7 01       	movw	r24, r14
    2078:	b8 01       	movw	r22, r16
    207a:	ae 01       	movw	r20, r28
    207c:	47 5e       	subi	r20, 0xE7	; 231
    207e:	5f 4f       	sbci	r21, 0xFF	; 255
    2080:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <_fpadd_parts>
    2084:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__pack_f>
    2088:	a0 96       	adiw	r28, 0x20	; 32
    208a:	e6 e0       	ldi	r30, 0x06	; 6
    208c:	0c 94 1f 15 	jmp	0x2a3e	; 0x2a3e <__epilogue_restores__+0x18>

00002090 <__divsf3>:
    2090:	a8 e1       	ldi	r26, 0x18	; 24
    2092:	b0 e0       	ldi	r27, 0x00	; 0
    2094:	ee e4       	ldi	r30, 0x4E	; 78
    2096:	f0 e1       	ldi	r31, 0x10	; 16
    2098:	0c 94 ff 14 	jmp	0x29fe	; 0x29fe <__prologue_saves__+0x10>
    209c:	69 83       	std	Y+1, r22	; 0x01
    209e:	7a 83       	std	Y+2, r23	; 0x02
    20a0:	8b 83       	std	Y+3, r24	; 0x03
    20a2:	9c 83       	std	Y+4, r25	; 0x04
    20a4:	2d 83       	std	Y+5, r18	; 0x05
    20a6:	3e 83       	std	Y+6, r19	; 0x06
    20a8:	4f 83       	std	Y+7, r20	; 0x07
    20aa:	58 87       	std	Y+8, r21	; 0x08
    20ac:	b9 e0       	ldi	r27, 0x09	; 9
    20ae:	eb 2e       	mov	r14, r27
    20b0:	f1 2c       	mov	r15, r1
    20b2:	ec 0e       	add	r14, r28
    20b4:	fd 1e       	adc	r15, r29
    20b6:	ce 01       	movw	r24, r28
    20b8:	01 96       	adiw	r24, 0x01	; 1
    20ba:	b7 01       	movw	r22, r14
    20bc:	0e 94 a6 12 	call	0x254c	; 0x254c <__unpack_f>
    20c0:	8e 01       	movw	r16, r28
    20c2:	0f 5e       	subi	r16, 0xEF	; 239
    20c4:	1f 4f       	sbci	r17, 0xFF	; 255
    20c6:	ce 01       	movw	r24, r28
    20c8:	05 96       	adiw	r24, 0x05	; 5
    20ca:	b8 01       	movw	r22, r16
    20cc:	0e 94 a6 12 	call	0x254c	; 0x254c <__unpack_f>
    20d0:	29 85       	ldd	r18, Y+9	; 0x09
    20d2:	22 30       	cpi	r18, 0x02	; 2
    20d4:	08 f4       	brcc	.+2      	; 0x20d8 <__divsf3+0x48>
    20d6:	7e c0       	rjmp	.+252    	; 0x21d4 <__divsf3+0x144>
    20d8:	39 89       	ldd	r19, Y+17	; 0x11
    20da:	32 30       	cpi	r19, 0x02	; 2
    20dc:	10 f4       	brcc	.+4      	; 0x20e2 <__divsf3+0x52>
    20de:	b8 01       	movw	r22, r16
    20e0:	7c c0       	rjmp	.+248    	; 0x21da <__divsf3+0x14a>
    20e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    20e4:	9a 89       	ldd	r25, Y+18	; 0x12
    20e6:	89 27       	eor	r24, r25
    20e8:	8a 87       	std	Y+10, r24	; 0x0a
    20ea:	24 30       	cpi	r18, 0x04	; 4
    20ec:	11 f0       	breq	.+4      	; 0x20f2 <__divsf3+0x62>
    20ee:	22 30       	cpi	r18, 0x02	; 2
    20f0:	31 f4       	brne	.+12     	; 0x20fe <__divsf3+0x6e>
    20f2:	23 17       	cp	r18, r19
    20f4:	09 f0       	breq	.+2      	; 0x20f8 <__divsf3+0x68>
    20f6:	6e c0       	rjmp	.+220    	; 0x21d4 <__divsf3+0x144>
    20f8:	62 e6       	ldi	r22, 0x62	; 98
    20fa:	70 e0       	ldi	r23, 0x00	; 0
    20fc:	6e c0       	rjmp	.+220    	; 0x21da <__divsf3+0x14a>
    20fe:	34 30       	cpi	r19, 0x04	; 4
    2100:	39 f4       	brne	.+14     	; 0x2110 <__divsf3+0x80>
    2102:	1d 86       	std	Y+13, r1	; 0x0d
    2104:	1e 86       	std	Y+14, r1	; 0x0e
    2106:	1f 86       	std	Y+15, r1	; 0x0f
    2108:	18 8a       	std	Y+16, r1	; 0x10
    210a:	1c 86       	std	Y+12, r1	; 0x0c
    210c:	1b 86       	std	Y+11, r1	; 0x0b
    210e:	04 c0       	rjmp	.+8      	; 0x2118 <__divsf3+0x88>
    2110:	32 30       	cpi	r19, 0x02	; 2
    2112:	21 f4       	brne	.+8      	; 0x211c <__divsf3+0x8c>
    2114:	84 e0       	ldi	r24, 0x04	; 4
    2116:	89 87       	std	Y+9, r24	; 0x09
    2118:	b7 01       	movw	r22, r14
    211a:	5f c0       	rjmp	.+190    	; 0x21da <__divsf3+0x14a>
    211c:	2b 85       	ldd	r18, Y+11	; 0x0b
    211e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2120:	8b 89       	ldd	r24, Y+19	; 0x13
    2122:	9c 89       	ldd	r25, Y+20	; 0x14
    2124:	28 1b       	sub	r18, r24
    2126:	39 0b       	sbc	r19, r25
    2128:	3c 87       	std	Y+12, r19	; 0x0c
    212a:	2b 87       	std	Y+11, r18	; 0x0b
    212c:	ed 84       	ldd	r14, Y+13	; 0x0d
    212e:	fe 84       	ldd	r15, Y+14	; 0x0e
    2130:	0f 85       	ldd	r16, Y+15	; 0x0f
    2132:	18 89       	ldd	r17, Y+16	; 0x10
    2134:	ad 88       	ldd	r10, Y+21	; 0x15
    2136:	be 88       	ldd	r11, Y+22	; 0x16
    2138:	cf 88       	ldd	r12, Y+23	; 0x17
    213a:	d8 8c       	ldd	r13, Y+24	; 0x18
    213c:	ea 14       	cp	r14, r10
    213e:	fb 04       	cpc	r15, r11
    2140:	0c 05       	cpc	r16, r12
    2142:	1d 05       	cpc	r17, r13
    2144:	40 f4       	brcc	.+16     	; 0x2156 <__divsf3+0xc6>
    2146:	ee 0c       	add	r14, r14
    2148:	ff 1c       	adc	r15, r15
    214a:	00 1f       	adc	r16, r16
    214c:	11 1f       	adc	r17, r17
    214e:	21 50       	subi	r18, 0x01	; 1
    2150:	30 40       	sbci	r19, 0x00	; 0
    2152:	3c 87       	std	Y+12, r19	; 0x0c
    2154:	2b 87       	std	Y+11, r18	; 0x0b
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	40 e0       	ldi	r20, 0x00	; 0
    215c:	50 e0       	ldi	r21, 0x00	; 0
    215e:	80 e0       	ldi	r24, 0x00	; 0
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	a0 e0       	ldi	r26, 0x00	; 0
    2164:	b0 e4       	ldi	r27, 0x40	; 64
    2166:	60 e0       	ldi	r22, 0x00	; 0
    2168:	70 e0       	ldi	r23, 0x00	; 0
    216a:	ea 14       	cp	r14, r10
    216c:	fb 04       	cpc	r15, r11
    216e:	0c 05       	cpc	r16, r12
    2170:	1d 05       	cpc	r17, r13
    2172:	40 f0       	brcs	.+16     	; 0x2184 <__divsf3+0xf4>
    2174:	28 2b       	or	r18, r24
    2176:	39 2b       	or	r19, r25
    2178:	4a 2b       	or	r20, r26
    217a:	5b 2b       	or	r21, r27
    217c:	ea 18       	sub	r14, r10
    217e:	fb 08       	sbc	r15, r11
    2180:	0c 09       	sbc	r16, r12
    2182:	1d 09       	sbc	r17, r13
    2184:	b6 95       	lsr	r27
    2186:	a7 95       	ror	r26
    2188:	97 95       	ror	r25
    218a:	87 95       	ror	r24
    218c:	ee 0c       	add	r14, r14
    218e:	ff 1c       	adc	r15, r15
    2190:	00 1f       	adc	r16, r16
    2192:	11 1f       	adc	r17, r17
    2194:	6f 5f       	subi	r22, 0xFF	; 255
    2196:	7f 4f       	sbci	r23, 0xFF	; 255
    2198:	6f 31       	cpi	r22, 0x1F	; 31
    219a:	71 05       	cpc	r23, r1
    219c:	31 f7       	brne	.-52     	; 0x216a <__divsf3+0xda>
    219e:	da 01       	movw	r26, r20
    21a0:	c9 01       	movw	r24, r18
    21a2:	8f 77       	andi	r24, 0x7F	; 127
    21a4:	90 70       	andi	r25, 0x00	; 0
    21a6:	a0 70       	andi	r26, 0x00	; 0
    21a8:	b0 70       	andi	r27, 0x00	; 0
    21aa:	80 34       	cpi	r24, 0x40	; 64
    21ac:	91 05       	cpc	r25, r1
    21ae:	a1 05       	cpc	r26, r1
    21b0:	b1 05       	cpc	r27, r1
    21b2:	61 f4       	brne	.+24     	; 0x21cc <__divsf3+0x13c>
    21b4:	27 fd       	sbrc	r18, 7
    21b6:	0a c0       	rjmp	.+20     	; 0x21cc <__divsf3+0x13c>
    21b8:	e1 14       	cp	r14, r1
    21ba:	f1 04       	cpc	r15, r1
    21bc:	01 05       	cpc	r16, r1
    21be:	11 05       	cpc	r17, r1
    21c0:	29 f0       	breq	.+10     	; 0x21cc <__divsf3+0x13c>
    21c2:	20 5c       	subi	r18, 0xC0	; 192
    21c4:	3f 4f       	sbci	r19, 0xFF	; 255
    21c6:	4f 4f       	sbci	r20, 0xFF	; 255
    21c8:	5f 4f       	sbci	r21, 0xFF	; 255
    21ca:	20 78       	andi	r18, 0x80	; 128
    21cc:	2d 87       	std	Y+13, r18	; 0x0d
    21ce:	3e 87       	std	Y+14, r19	; 0x0e
    21d0:	4f 87       	std	Y+15, r20	; 0x0f
    21d2:	58 8b       	std	Y+16, r21	; 0x10
    21d4:	be 01       	movw	r22, r28
    21d6:	67 5f       	subi	r22, 0xF7	; 247
    21d8:	7f 4f       	sbci	r23, 0xFF	; 255
    21da:	cb 01       	movw	r24, r22
    21dc:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__pack_f>
    21e0:	68 96       	adiw	r28, 0x18	; 24
    21e2:	ea e0       	ldi	r30, 0x0A	; 10
    21e4:	0c 94 1b 15 	jmp	0x2a36	; 0x2a36 <__epilogue_restores__+0x10>

000021e8 <__ltsf2>:
    21e8:	a8 e1       	ldi	r26, 0x18	; 24
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	ea ef       	ldi	r30, 0xFA	; 250
    21ee:	f0 e1       	ldi	r31, 0x10	; 16
    21f0:	0c 94 03 15 	jmp	0x2a06	; 0x2a06 <__prologue_saves__+0x18>
    21f4:	69 83       	std	Y+1, r22	; 0x01
    21f6:	7a 83       	std	Y+2, r23	; 0x02
    21f8:	8b 83       	std	Y+3, r24	; 0x03
    21fa:	9c 83       	std	Y+4, r25	; 0x04
    21fc:	2d 83       	std	Y+5, r18	; 0x05
    21fe:	3e 83       	std	Y+6, r19	; 0x06
    2200:	4f 83       	std	Y+7, r20	; 0x07
    2202:	58 87       	std	Y+8, r21	; 0x08
    2204:	89 e0       	ldi	r24, 0x09	; 9
    2206:	e8 2e       	mov	r14, r24
    2208:	f1 2c       	mov	r15, r1
    220a:	ec 0e       	add	r14, r28
    220c:	fd 1e       	adc	r15, r29
    220e:	ce 01       	movw	r24, r28
    2210:	01 96       	adiw	r24, 0x01	; 1
    2212:	b7 01       	movw	r22, r14
    2214:	0e 94 a6 12 	call	0x254c	; 0x254c <__unpack_f>
    2218:	8e 01       	movw	r16, r28
    221a:	0f 5e       	subi	r16, 0xEF	; 239
    221c:	1f 4f       	sbci	r17, 0xFF	; 255
    221e:	ce 01       	movw	r24, r28
    2220:	05 96       	adiw	r24, 0x05	; 5
    2222:	b8 01       	movw	r22, r16
    2224:	0e 94 a6 12 	call	0x254c	; 0x254c <__unpack_f>
    2228:	89 85       	ldd	r24, Y+9	; 0x09
    222a:	82 30       	cpi	r24, 0x02	; 2
    222c:	40 f0       	brcs	.+16     	; 0x223e <__ltsf2+0x56>
    222e:	89 89       	ldd	r24, Y+17	; 0x11
    2230:	82 30       	cpi	r24, 0x02	; 2
    2232:	28 f0       	brcs	.+10     	; 0x223e <__ltsf2+0x56>
    2234:	c7 01       	movw	r24, r14
    2236:	b8 01       	movw	r22, r16
    2238:	0e 94 1e 13 	call	0x263c	; 0x263c <__fpcmp_parts_f>
    223c:	01 c0       	rjmp	.+2      	; 0x2240 <__ltsf2+0x58>
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	68 96       	adiw	r28, 0x18	; 24
    2242:	e6 e0       	ldi	r30, 0x06	; 6
    2244:	0c 94 1f 15 	jmp	0x2a3e	; 0x2a3e <__epilogue_restores__+0x18>

00002248 <__floatsisf>:
    2248:	a8 e0       	ldi	r26, 0x08	; 8
    224a:	b0 e0       	ldi	r27, 0x00	; 0
    224c:	ea e2       	ldi	r30, 0x2A	; 42
    224e:	f1 e1       	ldi	r31, 0x11	; 17
    2250:	0c 94 00 15 	jmp	0x2a00	; 0x2a00 <__prologue_saves__+0x12>
    2254:	9b 01       	movw	r18, r22
    2256:	ac 01       	movw	r20, r24
    2258:	83 e0       	ldi	r24, 0x03	; 3
    225a:	89 83       	std	Y+1, r24	; 0x01
    225c:	da 01       	movw	r26, r20
    225e:	c9 01       	movw	r24, r18
    2260:	88 27       	eor	r24, r24
    2262:	b7 fd       	sbrc	r27, 7
    2264:	83 95       	inc	r24
    2266:	99 27       	eor	r25, r25
    2268:	aa 27       	eor	r26, r26
    226a:	bb 27       	eor	r27, r27
    226c:	b8 2e       	mov	r11, r24
    226e:	21 15       	cp	r18, r1
    2270:	31 05       	cpc	r19, r1
    2272:	41 05       	cpc	r20, r1
    2274:	51 05       	cpc	r21, r1
    2276:	19 f4       	brne	.+6      	; 0x227e <__floatsisf+0x36>
    2278:	82 e0       	ldi	r24, 0x02	; 2
    227a:	89 83       	std	Y+1, r24	; 0x01
    227c:	3a c0       	rjmp	.+116    	; 0x22f2 <__floatsisf+0xaa>
    227e:	88 23       	and	r24, r24
    2280:	a9 f0       	breq	.+42     	; 0x22ac <__floatsisf+0x64>
    2282:	20 30       	cpi	r18, 0x00	; 0
    2284:	80 e0       	ldi	r24, 0x00	; 0
    2286:	38 07       	cpc	r19, r24
    2288:	80 e0       	ldi	r24, 0x00	; 0
    228a:	48 07       	cpc	r20, r24
    228c:	80 e8       	ldi	r24, 0x80	; 128
    228e:	58 07       	cpc	r21, r24
    2290:	29 f4       	brne	.+10     	; 0x229c <__floatsisf+0x54>
    2292:	60 e0       	ldi	r22, 0x00	; 0
    2294:	70 e0       	ldi	r23, 0x00	; 0
    2296:	80 e0       	ldi	r24, 0x00	; 0
    2298:	9f ec       	ldi	r25, 0xCF	; 207
    229a:	30 c0       	rjmp	.+96     	; 0x22fc <__floatsisf+0xb4>
    229c:	ee 24       	eor	r14, r14
    229e:	ff 24       	eor	r15, r15
    22a0:	87 01       	movw	r16, r14
    22a2:	e2 1a       	sub	r14, r18
    22a4:	f3 0a       	sbc	r15, r19
    22a6:	04 0b       	sbc	r16, r20
    22a8:	15 0b       	sbc	r17, r21
    22aa:	02 c0       	rjmp	.+4      	; 0x22b0 <__floatsisf+0x68>
    22ac:	79 01       	movw	r14, r18
    22ae:	8a 01       	movw	r16, r20
    22b0:	8e e1       	ldi	r24, 0x1E	; 30
    22b2:	c8 2e       	mov	r12, r24
    22b4:	d1 2c       	mov	r13, r1
    22b6:	dc 82       	std	Y+4, r13	; 0x04
    22b8:	cb 82       	std	Y+3, r12	; 0x03
    22ba:	ed 82       	std	Y+5, r14	; 0x05
    22bc:	fe 82       	std	Y+6, r15	; 0x06
    22be:	0f 83       	std	Y+7, r16	; 0x07
    22c0:	18 87       	std	Y+8, r17	; 0x08
    22c2:	c8 01       	movw	r24, r16
    22c4:	b7 01       	movw	r22, r14
    22c6:	0e 94 82 11 	call	0x2304	; 0x2304 <__clzsi2>
    22ca:	01 97       	sbiw	r24, 0x01	; 1
    22cc:	18 16       	cp	r1, r24
    22ce:	19 06       	cpc	r1, r25
    22d0:	84 f4       	brge	.+32     	; 0x22f2 <__floatsisf+0xaa>
    22d2:	08 2e       	mov	r0, r24
    22d4:	04 c0       	rjmp	.+8      	; 0x22de <__floatsisf+0x96>
    22d6:	ee 0c       	add	r14, r14
    22d8:	ff 1c       	adc	r15, r15
    22da:	00 1f       	adc	r16, r16
    22dc:	11 1f       	adc	r17, r17
    22de:	0a 94       	dec	r0
    22e0:	d2 f7       	brpl	.-12     	; 0x22d6 <__floatsisf+0x8e>
    22e2:	ed 82       	std	Y+5, r14	; 0x05
    22e4:	fe 82       	std	Y+6, r15	; 0x06
    22e6:	0f 83       	std	Y+7, r16	; 0x07
    22e8:	18 87       	std	Y+8, r17	; 0x08
    22ea:	c8 1a       	sub	r12, r24
    22ec:	d9 0a       	sbc	r13, r25
    22ee:	dc 82       	std	Y+4, r13	; 0x04
    22f0:	cb 82       	std	Y+3, r12	; 0x03
    22f2:	ba 82       	std	Y+2, r11	; 0x02
    22f4:	ce 01       	movw	r24, r28
    22f6:	01 96       	adiw	r24, 0x01	; 1
    22f8:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__pack_f>
    22fc:	28 96       	adiw	r28, 0x08	; 8
    22fe:	e9 e0       	ldi	r30, 0x09	; 9
    2300:	0c 94 1c 15 	jmp	0x2a38	; 0x2a38 <__epilogue_restores__+0x12>

00002304 <__clzsi2>:
    2304:	ef 92       	push	r14
    2306:	ff 92       	push	r15
    2308:	0f 93       	push	r16
    230a:	1f 93       	push	r17
    230c:	7b 01       	movw	r14, r22
    230e:	8c 01       	movw	r16, r24
    2310:	80 e0       	ldi	r24, 0x00	; 0
    2312:	e8 16       	cp	r14, r24
    2314:	80 e0       	ldi	r24, 0x00	; 0
    2316:	f8 06       	cpc	r15, r24
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	08 07       	cpc	r16, r24
    231c:	80 e0       	ldi	r24, 0x00	; 0
    231e:	18 07       	cpc	r17, r24
    2320:	88 f4       	brcc	.+34     	; 0x2344 <__clzsi2+0x40>
    2322:	8f ef       	ldi	r24, 0xFF	; 255
    2324:	e8 16       	cp	r14, r24
    2326:	f1 04       	cpc	r15, r1
    2328:	01 05       	cpc	r16, r1
    232a:	11 05       	cpc	r17, r1
    232c:	31 f0       	breq	.+12     	; 0x233a <__clzsi2+0x36>
    232e:	28 f0       	brcs	.+10     	; 0x233a <__clzsi2+0x36>
    2330:	88 e0       	ldi	r24, 0x08	; 8
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	a0 e0       	ldi	r26, 0x00	; 0
    2336:	b0 e0       	ldi	r27, 0x00	; 0
    2338:	17 c0       	rjmp	.+46     	; 0x2368 <__clzsi2+0x64>
    233a:	80 e0       	ldi	r24, 0x00	; 0
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	a0 e0       	ldi	r26, 0x00	; 0
    2340:	b0 e0       	ldi	r27, 0x00	; 0
    2342:	12 c0       	rjmp	.+36     	; 0x2368 <__clzsi2+0x64>
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	e8 16       	cp	r14, r24
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	f8 06       	cpc	r15, r24
    234c:	80 e0       	ldi	r24, 0x00	; 0
    234e:	08 07       	cpc	r16, r24
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	18 07       	cpc	r17, r24
    2354:	28 f0       	brcs	.+10     	; 0x2360 <__clzsi2+0x5c>
    2356:	88 e1       	ldi	r24, 0x18	; 24
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	a0 e0       	ldi	r26, 0x00	; 0
    235c:	b0 e0       	ldi	r27, 0x00	; 0
    235e:	04 c0       	rjmp	.+8      	; 0x2368 <__clzsi2+0x64>
    2360:	80 e1       	ldi	r24, 0x10	; 16
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	a0 e0       	ldi	r26, 0x00	; 0
    2366:	b0 e0       	ldi	r27, 0x00	; 0
    2368:	20 e2       	ldi	r18, 0x20	; 32
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	40 e0       	ldi	r20, 0x00	; 0
    236e:	50 e0       	ldi	r21, 0x00	; 0
    2370:	28 1b       	sub	r18, r24
    2372:	39 0b       	sbc	r19, r25
    2374:	4a 0b       	sbc	r20, r26
    2376:	5b 0b       	sbc	r21, r27
    2378:	04 c0       	rjmp	.+8      	; 0x2382 <__clzsi2+0x7e>
    237a:	16 95       	lsr	r17
    237c:	07 95       	ror	r16
    237e:	f7 94       	ror	r15
    2380:	e7 94       	ror	r14
    2382:	8a 95       	dec	r24
    2384:	d2 f7       	brpl	.-12     	; 0x237a <__clzsi2+0x76>
    2386:	f7 01       	movw	r30, r14
    2388:	e6 59       	subi	r30, 0x96	; 150
    238a:	ff 4f       	sbci	r31, 0xFF	; 255
    238c:	80 81       	ld	r24, Z
    238e:	28 1b       	sub	r18, r24
    2390:	31 09       	sbc	r19, r1
    2392:	41 09       	sbc	r20, r1
    2394:	51 09       	sbc	r21, r1
    2396:	c9 01       	movw	r24, r18
    2398:	1f 91       	pop	r17
    239a:	0f 91       	pop	r16
    239c:	ff 90       	pop	r15
    239e:	ef 90       	pop	r14
    23a0:	08 95       	ret

000023a2 <__pack_f>:
    23a2:	df 92       	push	r13
    23a4:	ef 92       	push	r14
    23a6:	ff 92       	push	r15
    23a8:	0f 93       	push	r16
    23aa:	1f 93       	push	r17
    23ac:	fc 01       	movw	r30, r24
    23ae:	e4 80       	ldd	r14, Z+4	; 0x04
    23b0:	f5 80       	ldd	r15, Z+5	; 0x05
    23b2:	06 81       	ldd	r16, Z+6	; 0x06
    23b4:	17 81       	ldd	r17, Z+7	; 0x07
    23b6:	d1 80       	ldd	r13, Z+1	; 0x01
    23b8:	80 81       	ld	r24, Z
    23ba:	82 30       	cpi	r24, 0x02	; 2
    23bc:	48 f4       	brcc	.+18     	; 0x23d0 <__pack_f+0x2e>
    23be:	80 e0       	ldi	r24, 0x00	; 0
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	a0 e1       	ldi	r26, 0x10	; 16
    23c4:	b0 e0       	ldi	r27, 0x00	; 0
    23c6:	e8 2a       	or	r14, r24
    23c8:	f9 2a       	or	r15, r25
    23ca:	0a 2b       	or	r16, r26
    23cc:	1b 2b       	or	r17, r27
    23ce:	a5 c0       	rjmp	.+330    	; 0x251a <__pack_f+0x178>
    23d0:	84 30       	cpi	r24, 0x04	; 4
    23d2:	09 f4       	brne	.+2      	; 0x23d6 <__pack_f+0x34>
    23d4:	9f c0       	rjmp	.+318    	; 0x2514 <__pack_f+0x172>
    23d6:	82 30       	cpi	r24, 0x02	; 2
    23d8:	21 f4       	brne	.+8      	; 0x23e2 <__pack_f+0x40>
    23da:	ee 24       	eor	r14, r14
    23dc:	ff 24       	eor	r15, r15
    23de:	87 01       	movw	r16, r14
    23e0:	05 c0       	rjmp	.+10     	; 0x23ec <__pack_f+0x4a>
    23e2:	e1 14       	cp	r14, r1
    23e4:	f1 04       	cpc	r15, r1
    23e6:	01 05       	cpc	r16, r1
    23e8:	11 05       	cpc	r17, r1
    23ea:	19 f4       	brne	.+6      	; 0x23f2 <__pack_f+0x50>
    23ec:	e0 e0       	ldi	r30, 0x00	; 0
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	96 c0       	rjmp	.+300    	; 0x251e <__pack_f+0x17c>
    23f2:	62 81       	ldd	r22, Z+2	; 0x02
    23f4:	73 81       	ldd	r23, Z+3	; 0x03
    23f6:	9f ef       	ldi	r25, 0xFF	; 255
    23f8:	62 38       	cpi	r22, 0x82	; 130
    23fa:	79 07       	cpc	r23, r25
    23fc:	0c f0       	brlt	.+2      	; 0x2400 <__pack_f+0x5e>
    23fe:	5b c0       	rjmp	.+182    	; 0x24b6 <__pack_f+0x114>
    2400:	22 e8       	ldi	r18, 0x82	; 130
    2402:	3f ef       	ldi	r19, 0xFF	; 255
    2404:	26 1b       	sub	r18, r22
    2406:	37 0b       	sbc	r19, r23
    2408:	2a 31       	cpi	r18, 0x1A	; 26
    240a:	31 05       	cpc	r19, r1
    240c:	2c f0       	brlt	.+10     	; 0x2418 <__pack_f+0x76>
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	40 e0       	ldi	r20, 0x00	; 0
    2414:	50 e0       	ldi	r21, 0x00	; 0
    2416:	2a c0       	rjmp	.+84     	; 0x246c <__pack_f+0xca>
    2418:	b8 01       	movw	r22, r16
    241a:	a7 01       	movw	r20, r14
    241c:	02 2e       	mov	r0, r18
    241e:	04 c0       	rjmp	.+8      	; 0x2428 <__pack_f+0x86>
    2420:	76 95       	lsr	r23
    2422:	67 95       	ror	r22
    2424:	57 95       	ror	r21
    2426:	47 95       	ror	r20
    2428:	0a 94       	dec	r0
    242a:	d2 f7       	brpl	.-12     	; 0x2420 <__pack_f+0x7e>
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	a0 e0       	ldi	r26, 0x00	; 0
    2432:	b0 e0       	ldi	r27, 0x00	; 0
    2434:	04 c0       	rjmp	.+8      	; 0x243e <__pack_f+0x9c>
    2436:	88 0f       	add	r24, r24
    2438:	99 1f       	adc	r25, r25
    243a:	aa 1f       	adc	r26, r26
    243c:	bb 1f       	adc	r27, r27
    243e:	2a 95       	dec	r18
    2440:	d2 f7       	brpl	.-12     	; 0x2436 <__pack_f+0x94>
    2442:	01 97       	sbiw	r24, 0x01	; 1
    2444:	a1 09       	sbc	r26, r1
    2446:	b1 09       	sbc	r27, r1
    2448:	8e 21       	and	r24, r14
    244a:	9f 21       	and	r25, r15
    244c:	a0 23       	and	r26, r16
    244e:	b1 23       	and	r27, r17
    2450:	00 97       	sbiw	r24, 0x00	; 0
    2452:	a1 05       	cpc	r26, r1
    2454:	b1 05       	cpc	r27, r1
    2456:	21 f0       	breq	.+8      	; 0x2460 <__pack_f+0xbe>
    2458:	81 e0       	ldi	r24, 0x01	; 1
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	a0 e0       	ldi	r26, 0x00	; 0
    245e:	b0 e0       	ldi	r27, 0x00	; 0
    2460:	9a 01       	movw	r18, r20
    2462:	ab 01       	movw	r20, r22
    2464:	28 2b       	or	r18, r24
    2466:	39 2b       	or	r19, r25
    2468:	4a 2b       	or	r20, r26
    246a:	5b 2b       	or	r21, r27
    246c:	da 01       	movw	r26, r20
    246e:	c9 01       	movw	r24, r18
    2470:	8f 77       	andi	r24, 0x7F	; 127
    2472:	90 70       	andi	r25, 0x00	; 0
    2474:	a0 70       	andi	r26, 0x00	; 0
    2476:	b0 70       	andi	r27, 0x00	; 0
    2478:	80 34       	cpi	r24, 0x40	; 64
    247a:	91 05       	cpc	r25, r1
    247c:	a1 05       	cpc	r26, r1
    247e:	b1 05       	cpc	r27, r1
    2480:	39 f4       	brne	.+14     	; 0x2490 <__pack_f+0xee>
    2482:	27 ff       	sbrs	r18, 7
    2484:	09 c0       	rjmp	.+18     	; 0x2498 <__pack_f+0xf6>
    2486:	20 5c       	subi	r18, 0xC0	; 192
    2488:	3f 4f       	sbci	r19, 0xFF	; 255
    248a:	4f 4f       	sbci	r20, 0xFF	; 255
    248c:	5f 4f       	sbci	r21, 0xFF	; 255
    248e:	04 c0       	rjmp	.+8      	; 0x2498 <__pack_f+0xf6>
    2490:	21 5c       	subi	r18, 0xC1	; 193
    2492:	3f 4f       	sbci	r19, 0xFF	; 255
    2494:	4f 4f       	sbci	r20, 0xFF	; 255
    2496:	5f 4f       	sbci	r21, 0xFF	; 255
    2498:	e0 e0       	ldi	r30, 0x00	; 0
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	20 30       	cpi	r18, 0x00	; 0
    249e:	a0 e0       	ldi	r26, 0x00	; 0
    24a0:	3a 07       	cpc	r19, r26
    24a2:	a0 e0       	ldi	r26, 0x00	; 0
    24a4:	4a 07       	cpc	r20, r26
    24a6:	a0 e4       	ldi	r26, 0x40	; 64
    24a8:	5a 07       	cpc	r21, r26
    24aa:	10 f0       	brcs	.+4      	; 0x24b0 <__pack_f+0x10e>
    24ac:	e1 e0       	ldi	r30, 0x01	; 1
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	79 01       	movw	r14, r18
    24b2:	8a 01       	movw	r16, r20
    24b4:	27 c0       	rjmp	.+78     	; 0x2504 <__pack_f+0x162>
    24b6:	60 38       	cpi	r22, 0x80	; 128
    24b8:	71 05       	cpc	r23, r1
    24ba:	64 f5       	brge	.+88     	; 0x2514 <__pack_f+0x172>
    24bc:	fb 01       	movw	r30, r22
    24be:	e1 58       	subi	r30, 0x81	; 129
    24c0:	ff 4f       	sbci	r31, 0xFF	; 255
    24c2:	d8 01       	movw	r26, r16
    24c4:	c7 01       	movw	r24, r14
    24c6:	8f 77       	andi	r24, 0x7F	; 127
    24c8:	90 70       	andi	r25, 0x00	; 0
    24ca:	a0 70       	andi	r26, 0x00	; 0
    24cc:	b0 70       	andi	r27, 0x00	; 0
    24ce:	80 34       	cpi	r24, 0x40	; 64
    24d0:	91 05       	cpc	r25, r1
    24d2:	a1 05       	cpc	r26, r1
    24d4:	b1 05       	cpc	r27, r1
    24d6:	39 f4       	brne	.+14     	; 0x24e6 <__pack_f+0x144>
    24d8:	e7 fe       	sbrs	r14, 7
    24da:	0d c0       	rjmp	.+26     	; 0x24f6 <__pack_f+0x154>
    24dc:	80 e4       	ldi	r24, 0x40	; 64
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	a0 e0       	ldi	r26, 0x00	; 0
    24e2:	b0 e0       	ldi	r27, 0x00	; 0
    24e4:	04 c0       	rjmp	.+8      	; 0x24ee <__pack_f+0x14c>
    24e6:	8f e3       	ldi	r24, 0x3F	; 63
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	a0 e0       	ldi	r26, 0x00	; 0
    24ec:	b0 e0       	ldi	r27, 0x00	; 0
    24ee:	e8 0e       	add	r14, r24
    24f0:	f9 1e       	adc	r15, r25
    24f2:	0a 1f       	adc	r16, r26
    24f4:	1b 1f       	adc	r17, r27
    24f6:	17 ff       	sbrs	r17, 7
    24f8:	05 c0       	rjmp	.+10     	; 0x2504 <__pack_f+0x162>
    24fa:	16 95       	lsr	r17
    24fc:	07 95       	ror	r16
    24fe:	f7 94       	ror	r15
    2500:	e7 94       	ror	r14
    2502:	31 96       	adiw	r30, 0x01	; 1
    2504:	87 e0       	ldi	r24, 0x07	; 7
    2506:	16 95       	lsr	r17
    2508:	07 95       	ror	r16
    250a:	f7 94       	ror	r15
    250c:	e7 94       	ror	r14
    250e:	8a 95       	dec	r24
    2510:	d1 f7       	brne	.-12     	; 0x2506 <__pack_f+0x164>
    2512:	05 c0       	rjmp	.+10     	; 0x251e <__pack_f+0x17c>
    2514:	ee 24       	eor	r14, r14
    2516:	ff 24       	eor	r15, r15
    2518:	87 01       	movw	r16, r14
    251a:	ef ef       	ldi	r30, 0xFF	; 255
    251c:	f0 e0       	ldi	r31, 0x00	; 0
    251e:	6e 2f       	mov	r22, r30
    2520:	67 95       	ror	r22
    2522:	66 27       	eor	r22, r22
    2524:	67 95       	ror	r22
    2526:	90 2f       	mov	r25, r16
    2528:	9f 77       	andi	r25, 0x7F	; 127
    252a:	d7 94       	ror	r13
    252c:	dd 24       	eor	r13, r13
    252e:	d7 94       	ror	r13
    2530:	8e 2f       	mov	r24, r30
    2532:	86 95       	lsr	r24
    2534:	49 2f       	mov	r20, r25
    2536:	46 2b       	or	r20, r22
    2538:	58 2f       	mov	r21, r24
    253a:	5d 29       	or	r21, r13
    253c:	b7 01       	movw	r22, r14
    253e:	ca 01       	movw	r24, r20
    2540:	1f 91       	pop	r17
    2542:	0f 91       	pop	r16
    2544:	ff 90       	pop	r15
    2546:	ef 90       	pop	r14
    2548:	df 90       	pop	r13
    254a:	08 95       	ret

0000254c <__unpack_f>:
    254c:	fc 01       	movw	r30, r24
    254e:	db 01       	movw	r26, r22
    2550:	40 81       	ld	r20, Z
    2552:	51 81       	ldd	r21, Z+1	; 0x01
    2554:	22 81       	ldd	r18, Z+2	; 0x02
    2556:	62 2f       	mov	r22, r18
    2558:	6f 77       	andi	r22, 0x7F	; 127
    255a:	70 e0       	ldi	r23, 0x00	; 0
    255c:	22 1f       	adc	r18, r18
    255e:	22 27       	eor	r18, r18
    2560:	22 1f       	adc	r18, r18
    2562:	93 81       	ldd	r25, Z+3	; 0x03
    2564:	89 2f       	mov	r24, r25
    2566:	88 0f       	add	r24, r24
    2568:	82 2b       	or	r24, r18
    256a:	28 2f       	mov	r18, r24
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	99 1f       	adc	r25, r25
    2570:	99 27       	eor	r25, r25
    2572:	99 1f       	adc	r25, r25
    2574:	11 96       	adiw	r26, 0x01	; 1
    2576:	9c 93       	st	X, r25
    2578:	11 97       	sbiw	r26, 0x01	; 1
    257a:	21 15       	cp	r18, r1
    257c:	31 05       	cpc	r19, r1
    257e:	a9 f5       	brne	.+106    	; 0x25ea <__unpack_f+0x9e>
    2580:	41 15       	cp	r20, r1
    2582:	51 05       	cpc	r21, r1
    2584:	61 05       	cpc	r22, r1
    2586:	71 05       	cpc	r23, r1
    2588:	11 f4       	brne	.+4      	; 0x258e <__unpack_f+0x42>
    258a:	82 e0       	ldi	r24, 0x02	; 2
    258c:	37 c0       	rjmp	.+110    	; 0x25fc <__unpack_f+0xb0>
    258e:	82 e8       	ldi	r24, 0x82	; 130
    2590:	9f ef       	ldi	r25, 0xFF	; 255
    2592:	13 96       	adiw	r26, 0x03	; 3
    2594:	9c 93       	st	X, r25
    2596:	8e 93       	st	-X, r24
    2598:	12 97       	sbiw	r26, 0x02	; 2
    259a:	9a 01       	movw	r18, r20
    259c:	ab 01       	movw	r20, r22
    259e:	67 e0       	ldi	r22, 0x07	; 7
    25a0:	22 0f       	add	r18, r18
    25a2:	33 1f       	adc	r19, r19
    25a4:	44 1f       	adc	r20, r20
    25a6:	55 1f       	adc	r21, r21
    25a8:	6a 95       	dec	r22
    25aa:	d1 f7       	brne	.-12     	; 0x25a0 <__unpack_f+0x54>
    25ac:	83 e0       	ldi	r24, 0x03	; 3
    25ae:	8c 93       	st	X, r24
    25b0:	0d c0       	rjmp	.+26     	; 0x25cc <__unpack_f+0x80>
    25b2:	22 0f       	add	r18, r18
    25b4:	33 1f       	adc	r19, r19
    25b6:	44 1f       	adc	r20, r20
    25b8:	55 1f       	adc	r21, r21
    25ba:	12 96       	adiw	r26, 0x02	; 2
    25bc:	8d 91       	ld	r24, X+
    25be:	9c 91       	ld	r25, X
    25c0:	13 97       	sbiw	r26, 0x03	; 3
    25c2:	01 97       	sbiw	r24, 0x01	; 1
    25c4:	13 96       	adiw	r26, 0x03	; 3
    25c6:	9c 93       	st	X, r25
    25c8:	8e 93       	st	-X, r24
    25ca:	12 97       	sbiw	r26, 0x02	; 2
    25cc:	20 30       	cpi	r18, 0x00	; 0
    25ce:	80 e0       	ldi	r24, 0x00	; 0
    25d0:	38 07       	cpc	r19, r24
    25d2:	80 e0       	ldi	r24, 0x00	; 0
    25d4:	48 07       	cpc	r20, r24
    25d6:	80 e4       	ldi	r24, 0x40	; 64
    25d8:	58 07       	cpc	r21, r24
    25da:	58 f3       	brcs	.-42     	; 0x25b2 <__unpack_f+0x66>
    25dc:	14 96       	adiw	r26, 0x04	; 4
    25de:	2d 93       	st	X+, r18
    25e0:	3d 93       	st	X+, r19
    25e2:	4d 93       	st	X+, r20
    25e4:	5c 93       	st	X, r21
    25e6:	17 97       	sbiw	r26, 0x07	; 7
    25e8:	08 95       	ret
    25ea:	2f 3f       	cpi	r18, 0xFF	; 255
    25ec:	31 05       	cpc	r19, r1
    25ee:	79 f4       	brne	.+30     	; 0x260e <__unpack_f+0xc2>
    25f0:	41 15       	cp	r20, r1
    25f2:	51 05       	cpc	r21, r1
    25f4:	61 05       	cpc	r22, r1
    25f6:	71 05       	cpc	r23, r1
    25f8:	19 f4       	brne	.+6      	; 0x2600 <__unpack_f+0xb4>
    25fa:	84 e0       	ldi	r24, 0x04	; 4
    25fc:	8c 93       	st	X, r24
    25fe:	08 95       	ret
    2600:	64 ff       	sbrs	r22, 4
    2602:	03 c0       	rjmp	.+6      	; 0x260a <__unpack_f+0xbe>
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	8c 93       	st	X, r24
    2608:	12 c0       	rjmp	.+36     	; 0x262e <__unpack_f+0xe2>
    260a:	1c 92       	st	X, r1
    260c:	10 c0       	rjmp	.+32     	; 0x262e <__unpack_f+0xe2>
    260e:	2f 57       	subi	r18, 0x7F	; 127
    2610:	30 40       	sbci	r19, 0x00	; 0
    2612:	13 96       	adiw	r26, 0x03	; 3
    2614:	3c 93       	st	X, r19
    2616:	2e 93       	st	-X, r18
    2618:	12 97       	sbiw	r26, 0x02	; 2
    261a:	83 e0       	ldi	r24, 0x03	; 3
    261c:	8c 93       	st	X, r24
    261e:	87 e0       	ldi	r24, 0x07	; 7
    2620:	44 0f       	add	r20, r20
    2622:	55 1f       	adc	r21, r21
    2624:	66 1f       	adc	r22, r22
    2626:	77 1f       	adc	r23, r23
    2628:	8a 95       	dec	r24
    262a:	d1 f7       	brne	.-12     	; 0x2620 <__unpack_f+0xd4>
    262c:	70 64       	ori	r23, 0x40	; 64
    262e:	14 96       	adiw	r26, 0x04	; 4
    2630:	4d 93       	st	X+, r20
    2632:	5d 93       	st	X+, r21
    2634:	6d 93       	st	X+, r22
    2636:	7c 93       	st	X, r23
    2638:	17 97       	sbiw	r26, 0x07	; 7
    263a:	08 95       	ret

0000263c <__fpcmp_parts_f>:
    263c:	1f 93       	push	r17
    263e:	dc 01       	movw	r26, r24
    2640:	fb 01       	movw	r30, r22
    2642:	9c 91       	ld	r25, X
    2644:	92 30       	cpi	r25, 0x02	; 2
    2646:	08 f4       	brcc	.+2      	; 0x264a <__fpcmp_parts_f+0xe>
    2648:	47 c0       	rjmp	.+142    	; 0x26d8 <__fpcmp_parts_f+0x9c>
    264a:	80 81       	ld	r24, Z
    264c:	82 30       	cpi	r24, 0x02	; 2
    264e:	08 f4       	brcc	.+2      	; 0x2652 <__fpcmp_parts_f+0x16>
    2650:	43 c0       	rjmp	.+134    	; 0x26d8 <__fpcmp_parts_f+0x9c>
    2652:	94 30       	cpi	r25, 0x04	; 4
    2654:	51 f4       	brne	.+20     	; 0x266a <__fpcmp_parts_f+0x2e>
    2656:	11 96       	adiw	r26, 0x01	; 1
    2658:	1c 91       	ld	r17, X
    265a:	84 30       	cpi	r24, 0x04	; 4
    265c:	99 f5       	brne	.+102    	; 0x26c4 <__fpcmp_parts_f+0x88>
    265e:	81 81       	ldd	r24, Z+1	; 0x01
    2660:	68 2f       	mov	r22, r24
    2662:	70 e0       	ldi	r23, 0x00	; 0
    2664:	61 1b       	sub	r22, r17
    2666:	71 09       	sbc	r23, r1
    2668:	3f c0       	rjmp	.+126    	; 0x26e8 <__fpcmp_parts_f+0xac>
    266a:	84 30       	cpi	r24, 0x04	; 4
    266c:	21 f0       	breq	.+8      	; 0x2676 <__fpcmp_parts_f+0x3a>
    266e:	92 30       	cpi	r25, 0x02	; 2
    2670:	31 f4       	brne	.+12     	; 0x267e <__fpcmp_parts_f+0x42>
    2672:	82 30       	cpi	r24, 0x02	; 2
    2674:	b9 f1       	breq	.+110    	; 0x26e4 <__fpcmp_parts_f+0xa8>
    2676:	81 81       	ldd	r24, Z+1	; 0x01
    2678:	88 23       	and	r24, r24
    267a:	89 f1       	breq	.+98     	; 0x26de <__fpcmp_parts_f+0xa2>
    267c:	2d c0       	rjmp	.+90     	; 0x26d8 <__fpcmp_parts_f+0x9c>
    267e:	11 96       	adiw	r26, 0x01	; 1
    2680:	1c 91       	ld	r17, X
    2682:	11 97       	sbiw	r26, 0x01	; 1
    2684:	82 30       	cpi	r24, 0x02	; 2
    2686:	f1 f0       	breq	.+60     	; 0x26c4 <__fpcmp_parts_f+0x88>
    2688:	81 81       	ldd	r24, Z+1	; 0x01
    268a:	18 17       	cp	r17, r24
    268c:	d9 f4       	brne	.+54     	; 0x26c4 <__fpcmp_parts_f+0x88>
    268e:	12 96       	adiw	r26, 0x02	; 2
    2690:	2d 91       	ld	r18, X+
    2692:	3c 91       	ld	r19, X
    2694:	13 97       	sbiw	r26, 0x03	; 3
    2696:	82 81       	ldd	r24, Z+2	; 0x02
    2698:	93 81       	ldd	r25, Z+3	; 0x03
    269a:	82 17       	cp	r24, r18
    269c:	93 07       	cpc	r25, r19
    269e:	94 f0       	brlt	.+36     	; 0x26c4 <__fpcmp_parts_f+0x88>
    26a0:	28 17       	cp	r18, r24
    26a2:	39 07       	cpc	r19, r25
    26a4:	bc f0       	brlt	.+46     	; 0x26d4 <__fpcmp_parts_f+0x98>
    26a6:	14 96       	adiw	r26, 0x04	; 4
    26a8:	8d 91       	ld	r24, X+
    26aa:	9d 91       	ld	r25, X+
    26ac:	0d 90       	ld	r0, X+
    26ae:	bc 91       	ld	r27, X
    26b0:	a0 2d       	mov	r26, r0
    26b2:	24 81       	ldd	r18, Z+4	; 0x04
    26b4:	35 81       	ldd	r19, Z+5	; 0x05
    26b6:	46 81       	ldd	r20, Z+6	; 0x06
    26b8:	57 81       	ldd	r21, Z+7	; 0x07
    26ba:	28 17       	cp	r18, r24
    26bc:	39 07       	cpc	r19, r25
    26be:	4a 07       	cpc	r20, r26
    26c0:	5b 07       	cpc	r21, r27
    26c2:	18 f4       	brcc	.+6      	; 0x26ca <__fpcmp_parts_f+0x8e>
    26c4:	11 23       	and	r17, r17
    26c6:	41 f0       	breq	.+16     	; 0x26d8 <__fpcmp_parts_f+0x9c>
    26c8:	0a c0       	rjmp	.+20     	; 0x26de <__fpcmp_parts_f+0xa2>
    26ca:	82 17       	cp	r24, r18
    26cc:	93 07       	cpc	r25, r19
    26ce:	a4 07       	cpc	r26, r20
    26d0:	b5 07       	cpc	r27, r21
    26d2:	40 f4       	brcc	.+16     	; 0x26e4 <__fpcmp_parts_f+0xa8>
    26d4:	11 23       	and	r17, r17
    26d6:	19 f0       	breq	.+6      	; 0x26de <__fpcmp_parts_f+0xa2>
    26d8:	61 e0       	ldi	r22, 0x01	; 1
    26da:	70 e0       	ldi	r23, 0x00	; 0
    26dc:	05 c0       	rjmp	.+10     	; 0x26e8 <__fpcmp_parts_f+0xac>
    26de:	6f ef       	ldi	r22, 0xFF	; 255
    26e0:	7f ef       	ldi	r23, 0xFF	; 255
    26e2:	02 c0       	rjmp	.+4      	; 0x26e8 <__fpcmp_parts_f+0xac>
    26e4:	60 e0       	ldi	r22, 0x00	; 0
    26e6:	70 e0       	ldi	r23, 0x00	; 0
    26e8:	cb 01       	movw	r24, r22
    26ea:	1f 91       	pop	r17
    26ec:	08 95       	ret

000026ee <do_random>:
    26ee:	a0 e0       	ldi	r26, 0x00	; 0
    26f0:	b0 e0       	ldi	r27, 0x00	; 0
    26f2:	ed e7       	ldi	r30, 0x7D	; 125
    26f4:	f3 e1       	ldi	r31, 0x13	; 19
    26f6:	0c 94 ff 14 	jmp	0x29fe	; 0x29fe <__prologue_saves__+0x10>
    26fa:	ec 01       	movw	r28, r24
    26fc:	a8 80       	ld	r10, Y
    26fe:	b9 80       	ldd	r11, Y+1	; 0x01
    2700:	ca 80       	ldd	r12, Y+2	; 0x02
    2702:	db 80       	ldd	r13, Y+3	; 0x03
    2704:	a1 14       	cp	r10, r1
    2706:	b1 04       	cpc	r11, r1
    2708:	c1 04       	cpc	r12, r1
    270a:	d1 04       	cpc	r13, r1
    270c:	41 f4       	brne	.+16     	; 0x271e <do_random+0x30>
    270e:	84 e2       	ldi	r24, 0x24	; 36
    2710:	a8 2e       	mov	r10, r24
    2712:	89 ed       	ldi	r24, 0xD9	; 217
    2714:	b8 2e       	mov	r11, r24
    2716:	8b e5       	ldi	r24, 0x5B	; 91
    2718:	c8 2e       	mov	r12, r24
    271a:	87 e0       	ldi	r24, 0x07	; 7
    271c:	d8 2e       	mov	r13, r24
    271e:	c6 01       	movw	r24, r12
    2720:	b5 01       	movw	r22, r10
    2722:	2d e1       	ldi	r18, 0x1D	; 29
    2724:	33 ef       	ldi	r19, 0xF3	; 243
    2726:	41 e0       	ldi	r20, 0x01	; 1
    2728:	50 e0       	ldi	r21, 0x00	; 0
    272a:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <__divmodsi4>
    272e:	27 ea       	ldi	r18, 0xA7	; 167
    2730:	31 e4       	ldi	r19, 0x41	; 65
    2732:	40 e0       	ldi	r20, 0x00	; 0
    2734:	50 e0       	ldi	r21, 0x00	; 0
    2736:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <__mulsi3>
    273a:	7b 01       	movw	r14, r22
    273c:	8c 01       	movw	r16, r24
    273e:	c6 01       	movw	r24, r12
    2740:	b5 01       	movw	r22, r10
    2742:	2d e1       	ldi	r18, 0x1D	; 29
    2744:	33 ef       	ldi	r19, 0xF3	; 243
    2746:	41 e0       	ldi	r20, 0x01	; 1
    2748:	50 e0       	ldi	r21, 0x00	; 0
    274a:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <__divmodsi4>
    274e:	ca 01       	movw	r24, r20
    2750:	b9 01       	movw	r22, r18
    2752:	2c ee       	ldi	r18, 0xEC	; 236
    2754:	34 ef       	ldi	r19, 0xF4	; 244
    2756:	4f ef       	ldi	r20, 0xFF	; 255
    2758:	5f ef       	ldi	r21, 0xFF	; 255
    275a:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <__mulsi3>
    275e:	6e 0d       	add	r22, r14
    2760:	7f 1d       	adc	r23, r15
    2762:	80 1f       	adc	r24, r16
    2764:	91 1f       	adc	r25, r17
    2766:	97 ff       	sbrs	r25, 7
    2768:	04 c0       	rjmp	.+8      	; 0x2772 <do_random+0x84>
    276a:	61 50       	subi	r22, 0x01	; 1
    276c:	70 40       	sbci	r23, 0x00	; 0
    276e:	80 40       	sbci	r24, 0x00	; 0
    2770:	90 48       	sbci	r25, 0x80	; 128
    2772:	68 83       	st	Y, r22
    2774:	79 83       	std	Y+1, r23	; 0x01
    2776:	8a 83       	std	Y+2, r24	; 0x02
    2778:	9b 83       	std	Y+3, r25	; 0x03
    277a:	9b 01       	movw	r18, r22
    277c:	ac 01       	movw	r20, r24
    277e:	5f 77       	andi	r21, 0x7F	; 127
    2780:	b9 01       	movw	r22, r18
    2782:	ca 01       	movw	r24, r20
    2784:	cd b7       	in	r28, 0x3d	; 61
    2786:	de b7       	in	r29, 0x3e	; 62
    2788:	ea e0       	ldi	r30, 0x0A	; 10
    278a:	0c 94 1b 15 	jmp	0x2a36	; 0x2a36 <__epilogue_restores__+0x10>

0000278e <random_r>:
    278e:	0e 94 77 13 	call	0x26ee	; 0x26ee <do_random>
    2792:	08 95       	ret

00002794 <random>:
    2794:	8a e6       	ldi	r24, 0x6A	; 106
    2796:	91 e0       	ldi	r25, 0x01	; 1
    2798:	0e 94 77 13 	call	0x26ee	; 0x26ee <do_random>
    279c:	08 95       	ret

0000279e <srandom>:
    279e:	60 93 6a 01 	sts	0x016A, r22
    27a2:	70 93 6b 01 	sts	0x016B, r23
    27a6:	80 93 6c 01 	sts	0x016C, r24
    27aa:	90 93 6d 01 	sts	0x016D, r25
    27ae:	08 95       	ret

000027b0 <strchr_P>:
    27b0:	fc 01       	movw	r30, r24
    27b2:	05 90       	lpm	r0, Z+
    27b4:	06 16       	cp	r0, r22
    27b6:	21 f0       	breq	.+8      	; 0x27c0 <strchr_P+0x10>
    27b8:	00 20       	and	r0, r0
    27ba:	d9 f7       	brne	.-10     	; 0x27b2 <strchr_P+0x2>
    27bc:	c0 01       	movw	r24, r0
    27be:	08 95       	ret
    27c0:	31 97       	sbiw	r30, 0x01	; 1
    27c2:	cf 01       	movw	r24, r30
    27c4:	08 95       	ret

000027c6 <fgetc>:
    27c6:	cf 93       	push	r28
    27c8:	df 93       	push	r29
    27ca:	ec 01       	movw	r28, r24
    27cc:	4b 81       	ldd	r20, Y+3	; 0x03
    27ce:	40 ff       	sbrs	r20, 0
    27d0:	1a c0       	rjmp	.+52     	; 0x2806 <fgetc+0x40>
    27d2:	46 ff       	sbrs	r20, 6
    27d4:	0a c0       	rjmp	.+20     	; 0x27ea <fgetc+0x24>
    27d6:	4f 7b       	andi	r20, 0xBF	; 191
    27d8:	4b 83       	std	Y+3, r20	; 0x03
    27da:	8e 81       	ldd	r24, Y+6	; 0x06
    27dc:	9f 81       	ldd	r25, Y+7	; 0x07
    27de:	01 96       	adiw	r24, 0x01	; 1
    27e0:	9f 83       	std	Y+7, r25	; 0x07
    27e2:	8e 83       	std	Y+6, r24	; 0x06
    27e4:	8a 81       	ldd	r24, Y+2	; 0x02
    27e6:	28 2f       	mov	r18, r24
    27e8:	2b c0       	rjmp	.+86     	; 0x2840 <fgetc+0x7a>
    27ea:	42 ff       	sbrs	r20, 2
    27ec:	13 c0       	rjmp	.+38     	; 0x2814 <fgetc+0x4e>
    27ee:	e8 81       	ld	r30, Y
    27f0:	f9 81       	ldd	r31, Y+1	; 0x01
    27f2:	80 81       	ld	r24, Z
    27f4:	28 2f       	mov	r18, r24
    27f6:	33 27       	eor	r19, r19
    27f8:	27 fd       	sbrc	r18, 7
    27fa:	30 95       	com	r19
    27fc:	21 15       	cp	r18, r1
    27fe:	31 05       	cpc	r19, r1
    2800:	29 f4       	brne	.+10     	; 0x280c <fgetc+0x46>
    2802:	40 62       	ori	r20, 0x20	; 32
    2804:	4b 83       	std	Y+3, r20	; 0x03
    2806:	2f ef       	ldi	r18, 0xFF	; 255
    2808:	3f ef       	ldi	r19, 0xFF	; 255
    280a:	1b c0       	rjmp	.+54     	; 0x2842 <fgetc+0x7c>
    280c:	31 96       	adiw	r30, 0x01	; 1
    280e:	f9 83       	std	Y+1, r31	; 0x01
    2810:	e8 83       	st	Y, r30
    2812:	11 c0       	rjmp	.+34     	; 0x2836 <fgetc+0x70>
    2814:	ea 85       	ldd	r30, Y+10	; 0x0a
    2816:	fb 85       	ldd	r31, Y+11	; 0x0b
    2818:	ce 01       	movw	r24, r28
    281a:	09 95       	icall
    281c:	9c 01       	movw	r18, r24
    281e:	97 ff       	sbrs	r25, 7
    2820:	0a c0       	rjmp	.+20     	; 0x2836 <fgetc+0x70>
    2822:	9b 81       	ldd	r25, Y+3	; 0x03
    2824:	2f 5f       	subi	r18, 0xFF	; 255
    2826:	3f 4f       	sbci	r19, 0xFF	; 255
    2828:	11 f0       	breq	.+4      	; 0x282e <fgetc+0x68>
    282a:	80 e2       	ldi	r24, 0x20	; 32
    282c:	01 c0       	rjmp	.+2      	; 0x2830 <fgetc+0x6a>
    282e:	80 e1       	ldi	r24, 0x10	; 16
    2830:	89 2b       	or	r24, r25
    2832:	8b 83       	std	Y+3, r24	; 0x03
    2834:	e8 cf       	rjmp	.-48     	; 0x2806 <fgetc+0x40>
    2836:	8e 81       	ldd	r24, Y+6	; 0x06
    2838:	9f 81       	ldd	r25, Y+7	; 0x07
    283a:	01 96       	adiw	r24, 0x01	; 1
    283c:	9f 83       	std	Y+7, r25	; 0x07
    283e:	8e 83       	std	Y+6, r24	; 0x06
    2840:	30 e0       	ldi	r19, 0x00	; 0
    2842:	c9 01       	movw	r24, r18
    2844:	df 91       	pop	r29
    2846:	cf 91       	pop	r28
    2848:	08 95       	ret

0000284a <fputc>:
    284a:	0f 93       	push	r16
    284c:	1f 93       	push	r17
    284e:	cf 93       	push	r28
    2850:	df 93       	push	r29
    2852:	8c 01       	movw	r16, r24
    2854:	eb 01       	movw	r28, r22
    2856:	8b 81       	ldd	r24, Y+3	; 0x03
    2858:	81 ff       	sbrs	r24, 1
    285a:	1b c0       	rjmp	.+54     	; 0x2892 <fputc+0x48>
    285c:	82 ff       	sbrs	r24, 2
    285e:	0d c0       	rjmp	.+26     	; 0x287a <fputc+0x30>
    2860:	2e 81       	ldd	r18, Y+6	; 0x06
    2862:	3f 81       	ldd	r19, Y+7	; 0x07
    2864:	8c 81       	ldd	r24, Y+4	; 0x04
    2866:	9d 81       	ldd	r25, Y+5	; 0x05
    2868:	28 17       	cp	r18, r24
    286a:	39 07       	cpc	r19, r25
    286c:	64 f4       	brge	.+24     	; 0x2886 <fputc+0x3c>
    286e:	e8 81       	ld	r30, Y
    2870:	f9 81       	ldd	r31, Y+1	; 0x01
    2872:	01 93       	st	Z+, r16
    2874:	f9 83       	std	Y+1, r31	; 0x01
    2876:	e8 83       	st	Y, r30
    2878:	06 c0       	rjmp	.+12     	; 0x2886 <fputc+0x3c>
    287a:	e8 85       	ldd	r30, Y+8	; 0x08
    287c:	f9 85       	ldd	r31, Y+9	; 0x09
    287e:	80 2f       	mov	r24, r16
    2880:	09 95       	icall
    2882:	89 2b       	or	r24, r25
    2884:	31 f4       	brne	.+12     	; 0x2892 <fputc+0x48>
    2886:	8e 81       	ldd	r24, Y+6	; 0x06
    2888:	9f 81       	ldd	r25, Y+7	; 0x07
    288a:	01 96       	adiw	r24, 0x01	; 1
    288c:	9f 83       	std	Y+7, r25	; 0x07
    288e:	8e 83       	std	Y+6, r24	; 0x06
    2890:	02 c0       	rjmp	.+4      	; 0x2896 <fputc+0x4c>
    2892:	0f ef       	ldi	r16, 0xFF	; 255
    2894:	1f ef       	ldi	r17, 0xFF	; 255
    2896:	c8 01       	movw	r24, r16
    2898:	df 91       	pop	r29
    289a:	cf 91       	pop	r28
    289c:	1f 91       	pop	r17
    289e:	0f 91       	pop	r16
    28a0:	08 95       	ret

000028a2 <ungetc>:
    28a2:	9c 01       	movw	r18, r24
    28a4:	fb 01       	movw	r30, r22
    28a6:	83 81       	ldd	r24, Z+3	; 0x03
    28a8:	80 ff       	sbrs	r24, 0
    28aa:	11 c0       	rjmp	.+34     	; 0x28ce <ungetc+0x2c>
    28ac:	86 fd       	sbrc	r24, 6
    28ae:	0f c0       	rjmp	.+30     	; 0x28ce <ungetc+0x2c>
    28b0:	9f ef       	ldi	r25, 0xFF	; 255
    28b2:	2f 3f       	cpi	r18, 0xFF	; 255
    28b4:	39 07       	cpc	r19, r25
    28b6:	59 f0       	breq	.+22     	; 0x28ce <ungetc+0x2c>
    28b8:	22 83       	std	Z+2, r18	; 0x02
    28ba:	80 64       	ori	r24, 0x40	; 64
    28bc:	8f 7d       	andi	r24, 0xDF	; 223
    28be:	83 83       	std	Z+3, r24	; 0x03
    28c0:	86 81       	ldd	r24, Z+6	; 0x06
    28c2:	97 81       	ldd	r25, Z+7	; 0x07
    28c4:	01 97       	sbiw	r24, 0x01	; 1
    28c6:	97 83       	std	Z+7, r25	; 0x07
    28c8:	86 83       	std	Z+6, r24	; 0x06
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	02 c0       	rjmp	.+4      	; 0x28d2 <ungetc+0x30>
    28ce:	2f ef       	ldi	r18, 0xFF	; 255
    28d0:	3f ef       	ldi	r19, 0xFF	; 255
    28d2:	c9 01       	movw	r24, r18
    28d4:	08 95       	ret

000028d6 <__ultoa_invert>:
    28d6:	fa 01       	movw	r30, r20
    28d8:	aa 27       	eor	r26, r26
    28da:	28 30       	cpi	r18, 0x08	; 8
    28dc:	51 f1       	breq	.+84     	; 0x2932 <__ultoa_invert+0x5c>
    28de:	20 31       	cpi	r18, 0x10	; 16
    28e0:	81 f1       	breq	.+96     	; 0x2942 <__ultoa_invert+0x6c>
    28e2:	e8 94       	clt
    28e4:	6f 93       	push	r22
    28e6:	6e 7f       	andi	r22, 0xFE	; 254
    28e8:	6e 5f       	subi	r22, 0xFE	; 254
    28ea:	7f 4f       	sbci	r23, 0xFF	; 255
    28ec:	8f 4f       	sbci	r24, 0xFF	; 255
    28ee:	9f 4f       	sbci	r25, 0xFF	; 255
    28f0:	af 4f       	sbci	r26, 0xFF	; 255
    28f2:	b1 e0       	ldi	r27, 0x01	; 1
    28f4:	3e d0       	rcall	.+124    	; 0x2972 <__ultoa_invert+0x9c>
    28f6:	b4 e0       	ldi	r27, 0x04	; 4
    28f8:	3c d0       	rcall	.+120    	; 0x2972 <__ultoa_invert+0x9c>
    28fa:	67 0f       	add	r22, r23
    28fc:	78 1f       	adc	r23, r24
    28fe:	89 1f       	adc	r24, r25
    2900:	9a 1f       	adc	r25, r26
    2902:	a1 1d       	adc	r26, r1
    2904:	68 0f       	add	r22, r24
    2906:	79 1f       	adc	r23, r25
    2908:	8a 1f       	adc	r24, r26
    290a:	91 1d       	adc	r25, r1
    290c:	a1 1d       	adc	r26, r1
    290e:	6a 0f       	add	r22, r26
    2910:	71 1d       	adc	r23, r1
    2912:	81 1d       	adc	r24, r1
    2914:	91 1d       	adc	r25, r1
    2916:	a1 1d       	adc	r26, r1
    2918:	20 d0       	rcall	.+64     	; 0x295a <__ultoa_invert+0x84>
    291a:	09 f4       	brne	.+2      	; 0x291e <__ultoa_invert+0x48>
    291c:	68 94       	set
    291e:	3f 91       	pop	r19
    2920:	2a e0       	ldi	r18, 0x0A	; 10
    2922:	26 9f       	mul	r18, r22
    2924:	11 24       	eor	r1, r1
    2926:	30 19       	sub	r19, r0
    2928:	30 5d       	subi	r19, 0xD0	; 208
    292a:	31 93       	st	Z+, r19
    292c:	de f6       	brtc	.-74     	; 0x28e4 <__ultoa_invert+0xe>
    292e:	cf 01       	movw	r24, r30
    2930:	08 95       	ret
    2932:	46 2f       	mov	r20, r22
    2934:	47 70       	andi	r20, 0x07	; 7
    2936:	40 5d       	subi	r20, 0xD0	; 208
    2938:	41 93       	st	Z+, r20
    293a:	b3 e0       	ldi	r27, 0x03	; 3
    293c:	0f d0       	rcall	.+30     	; 0x295c <__ultoa_invert+0x86>
    293e:	c9 f7       	brne	.-14     	; 0x2932 <__ultoa_invert+0x5c>
    2940:	f6 cf       	rjmp	.-20     	; 0x292e <__ultoa_invert+0x58>
    2942:	46 2f       	mov	r20, r22
    2944:	4f 70       	andi	r20, 0x0F	; 15
    2946:	40 5d       	subi	r20, 0xD0	; 208
    2948:	4a 33       	cpi	r20, 0x3A	; 58
    294a:	18 f0       	brcs	.+6      	; 0x2952 <__ultoa_invert+0x7c>
    294c:	49 5d       	subi	r20, 0xD9	; 217
    294e:	31 fd       	sbrc	r19, 1
    2950:	40 52       	subi	r20, 0x20	; 32
    2952:	41 93       	st	Z+, r20
    2954:	02 d0       	rcall	.+4      	; 0x295a <__ultoa_invert+0x84>
    2956:	a9 f7       	brne	.-22     	; 0x2942 <__ultoa_invert+0x6c>
    2958:	ea cf       	rjmp	.-44     	; 0x292e <__ultoa_invert+0x58>
    295a:	b4 e0       	ldi	r27, 0x04	; 4
    295c:	a6 95       	lsr	r26
    295e:	97 95       	ror	r25
    2960:	87 95       	ror	r24
    2962:	77 95       	ror	r23
    2964:	67 95       	ror	r22
    2966:	ba 95       	dec	r27
    2968:	c9 f7       	brne	.-14     	; 0x295c <__ultoa_invert+0x86>
    296a:	00 97       	sbiw	r24, 0x00	; 0
    296c:	61 05       	cpc	r22, r1
    296e:	71 05       	cpc	r23, r1
    2970:	08 95       	ret
    2972:	9b 01       	movw	r18, r22
    2974:	ac 01       	movw	r20, r24
    2976:	0a 2e       	mov	r0, r26
    2978:	06 94       	lsr	r0
    297a:	57 95       	ror	r21
    297c:	47 95       	ror	r20
    297e:	37 95       	ror	r19
    2980:	27 95       	ror	r18
    2982:	ba 95       	dec	r27
    2984:	c9 f7       	brne	.-14     	; 0x2978 <__ultoa_invert+0xa2>
    2986:	62 0f       	add	r22, r18
    2988:	73 1f       	adc	r23, r19
    298a:	84 1f       	adc	r24, r20
    298c:	95 1f       	adc	r25, r21
    298e:	a0 1d       	adc	r26, r0
    2990:	08 95       	ret

00002992 <__divmodhi4>:
    2992:	97 fb       	bst	r25, 7
    2994:	09 2e       	mov	r0, r25
    2996:	07 26       	eor	r0, r23
    2998:	0a d0       	rcall	.+20     	; 0x29ae <__divmodhi4_neg1>
    299a:	77 fd       	sbrc	r23, 7
    299c:	04 d0       	rcall	.+8      	; 0x29a6 <__divmodhi4_neg2>
    299e:	5e d0       	rcall	.+188    	; 0x2a5c <__udivmodhi4>
    29a0:	06 d0       	rcall	.+12     	; 0x29ae <__divmodhi4_neg1>
    29a2:	00 20       	and	r0, r0
    29a4:	1a f4       	brpl	.+6      	; 0x29ac <__divmodhi4_exit>

000029a6 <__divmodhi4_neg2>:
    29a6:	70 95       	com	r23
    29a8:	61 95       	neg	r22
    29aa:	7f 4f       	sbci	r23, 0xFF	; 255

000029ac <__divmodhi4_exit>:
    29ac:	08 95       	ret

000029ae <__divmodhi4_neg1>:
    29ae:	f6 f7       	brtc	.-4      	; 0x29ac <__divmodhi4_exit>
    29b0:	90 95       	com	r25
    29b2:	81 95       	neg	r24
    29b4:	9f 4f       	sbci	r25, 0xFF	; 255
    29b6:	08 95       	ret

000029b8 <__divmodsi4>:
    29b8:	97 fb       	bst	r25, 7
    29ba:	09 2e       	mov	r0, r25
    29bc:	05 26       	eor	r0, r21
    29be:	0e d0       	rcall	.+28     	; 0x29dc <__divmodsi4_neg1>
    29c0:	57 fd       	sbrc	r21, 7
    29c2:	04 d0       	rcall	.+8      	; 0x29cc <__divmodsi4_neg2>
    29c4:	5f d0       	rcall	.+190    	; 0x2a84 <__udivmodsi4>
    29c6:	0a d0       	rcall	.+20     	; 0x29dc <__divmodsi4_neg1>
    29c8:	00 1c       	adc	r0, r0
    29ca:	38 f4       	brcc	.+14     	; 0x29da <__divmodsi4_exit>

000029cc <__divmodsi4_neg2>:
    29cc:	50 95       	com	r21
    29ce:	40 95       	com	r20
    29d0:	30 95       	com	r19
    29d2:	21 95       	neg	r18
    29d4:	3f 4f       	sbci	r19, 0xFF	; 255
    29d6:	4f 4f       	sbci	r20, 0xFF	; 255
    29d8:	5f 4f       	sbci	r21, 0xFF	; 255

000029da <__divmodsi4_exit>:
    29da:	08 95       	ret

000029dc <__divmodsi4_neg1>:
    29dc:	f6 f7       	brtc	.-4      	; 0x29da <__divmodsi4_exit>
    29de:	90 95       	com	r25
    29e0:	80 95       	com	r24
    29e2:	70 95       	com	r23
    29e4:	61 95       	neg	r22
    29e6:	7f 4f       	sbci	r23, 0xFF	; 255
    29e8:	8f 4f       	sbci	r24, 0xFF	; 255
    29ea:	9f 4f       	sbci	r25, 0xFF	; 255
    29ec:	08 95       	ret

000029ee <__prologue_saves__>:
    29ee:	2f 92       	push	r2
    29f0:	3f 92       	push	r3
    29f2:	4f 92       	push	r4
    29f4:	5f 92       	push	r5
    29f6:	6f 92       	push	r6
    29f8:	7f 92       	push	r7
    29fa:	8f 92       	push	r8
    29fc:	9f 92       	push	r9
    29fe:	af 92       	push	r10
    2a00:	bf 92       	push	r11
    2a02:	cf 92       	push	r12
    2a04:	df 92       	push	r13
    2a06:	ef 92       	push	r14
    2a08:	ff 92       	push	r15
    2a0a:	0f 93       	push	r16
    2a0c:	1f 93       	push	r17
    2a0e:	cf 93       	push	r28
    2a10:	df 93       	push	r29
    2a12:	cd b7       	in	r28, 0x3d	; 61
    2a14:	de b7       	in	r29, 0x3e	; 62
    2a16:	ca 1b       	sub	r28, r26
    2a18:	db 0b       	sbc	r29, r27
    2a1a:	0f b6       	in	r0, 0x3f	; 63
    2a1c:	f8 94       	cli
    2a1e:	de bf       	out	0x3e, r29	; 62
    2a20:	0f be       	out	0x3f, r0	; 63
    2a22:	cd bf       	out	0x3d, r28	; 61
    2a24:	09 94       	ijmp

00002a26 <__epilogue_restores__>:
    2a26:	2a 88       	ldd	r2, Y+18	; 0x12
    2a28:	39 88       	ldd	r3, Y+17	; 0x11
    2a2a:	48 88       	ldd	r4, Y+16	; 0x10
    2a2c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a2e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a30:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a32:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a34:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a36:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a38:	b9 84       	ldd	r11, Y+9	; 0x09
    2a3a:	c8 84       	ldd	r12, Y+8	; 0x08
    2a3c:	df 80       	ldd	r13, Y+7	; 0x07
    2a3e:	ee 80       	ldd	r14, Y+6	; 0x06
    2a40:	fd 80       	ldd	r15, Y+5	; 0x05
    2a42:	0c 81       	ldd	r16, Y+4	; 0x04
    2a44:	1b 81       	ldd	r17, Y+3	; 0x03
    2a46:	aa 81       	ldd	r26, Y+2	; 0x02
    2a48:	b9 81       	ldd	r27, Y+1	; 0x01
    2a4a:	ce 0f       	add	r28, r30
    2a4c:	d1 1d       	adc	r29, r1
    2a4e:	0f b6       	in	r0, 0x3f	; 63
    2a50:	f8 94       	cli
    2a52:	de bf       	out	0x3e, r29	; 62
    2a54:	0f be       	out	0x3f, r0	; 63
    2a56:	cd bf       	out	0x3d, r28	; 61
    2a58:	ed 01       	movw	r28, r26
    2a5a:	08 95       	ret

00002a5c <__udivmodhi4>:
    2a5c:	aa 1b       	sub	r26, r26
    2a5e:	bb 1b       	sub	r27, r27
    2a60:	51 e1       	ldi	r21, 0x11	; 17
    2a62:	07 c0       	rjmp	.+14     	; 0x2a72 <__udivmodhi4_ep>

00002a64 <__udivmodhi4_loop>:
    2a64:	aa 1f       	adc	r26, r26
    2a66:	bb 1f       	adc	r27, r27
    2a68:	a6 17       	cp	r26, r22
    2a6a:	b7 07       	cpc	r27, r23
    2a6c:	10 f0       	brcs	.+4      	; 0x2a72 <__udivmodhi4_ep>
    2a6e:	a6 1b       	sub	r26, r22
    2a70:	b7 0b       	sbc	r27, r23

00002a72 <__udivmodhi4_ep>:
    2a72:	88 1f       	adc	r24, r24
    2a74:	99 1f       	adc	r25, r25
    2a76:	5a 95       	dec	r21
    2a78:	a9 f7       	brne	.-22     	; 0x2a64 <__udivmodhi4_loop>
    2a7a:	80 95       	com	r24
    2a7c:	90 95       	com	r25
    2a7e:	bc 01       	movw	r22, r24
    2a80:	cd 01       	movw	r24, r26
    2a82:	08 95       	ret

00002a84 <__udivmodsi4>:
    2a84:	a1 e2       	ldi	r26, 0x21	; 33
    2a86:	1a 2e       	mov	r1, r26
    2a88:	aa 1b       	sub	r26, r26
    2a8a:	bb 1b       	sub	r27, r27
    2a8c:	fd 01       	movw	r30, r26
    2a8e:	0d c0       	rjmp	.+26     	; 0x2aaa <__udivmodsi4_ep>

00002a90 <__udivmodsi4_loop>:
    2a90:	aa 1f       	adc	r26, r26
    2a92:	bb 1f       	adc	r27, r27
    2a94:	ee 1f       	adc	r30, r30
    2a96:	ff 1f       	adc	r31, r31
    2a98:	a2 17       	cp	r26, r18
    2a9a:	b3 07       	cpc	r27, r19
    2a9c:	e4 07       	cpc	r30, r20
    2a9e:	f5 07       	cpc	r31, r21
    2aa0:	20 f0       	brcs	.+8      	; 0x2aaa <__udivmodsi4_ep>
    2aa2:	a2 1b       	sub	r26, r18
    2aa4:	b3 0b       	sbc	r27, r19
    2aa6:	e4 0b       	sbc	r30, r20
    2aa8:	f5 0b       	sbc	r31, r21

00002aaa <__udivmodsi4_ep>:
    2aaa:	66 1f       	adc	r22, r22
    2aac:	77 1f       	adc	r23, r23
    2aae:	88 1f       	adc	r24, r24
    2ab0:	99 1f       	adc	r25, r25
    2ab2:	1a 94       	dec	r1
    2ab4:	69 f7       	brne	.-38     	; 0x2a90 <__udivmodsi4_loop>
    2ab6:	60 95       	com	r22
    2ab8:	70 95       	com	r23
    2aba:	80 95       	com	r24
    2abc:	90 95       	com	r25
    2abe:	9b 01       	movw	r18, r22
    2ac0:	ac 01       	movw	r20, r24
    2ac2:	bd 01       	movw	r22, r26
    2ac4:	cf 01       	movw	r24, r30
    2ac6:	08 95       	ret

00002ac8 <isspace>:
    2ac8:	91 11       	cpse	r25, r1
    2aca:	54 c0       	rjmp	.+168    	; 0x2b74 <__ctype_isfalse>
    2acc:	80 32       	cpi	r24, 0x20	; 32
    2ace:	19 f0       	breq	.+6      	; 0x2ad6 <isspace+0xe>
    2ad0:	89 50       	subi	r24, 0x09	; 9
    2ad2:	85 50       	subi	r24, 0x05	; 5
    2ad4:	d0 f7       	brcc	.-12     	; 0x2aca <isspace+0x2>
    2ad6:	08 95       	ret
    2ad8:	11 f4       	brne	.+4      	; 0x2ade <isspace+0x16>
    2ada:	0e f4       	brtc	.+2      	; 0x2ade <isspace+0x16>
    2adc:	5e c0       	rjmp	.+188    	; 0x2b9a <__fp_nan>
    2ade:	4d c0       	rjmp	.+154    	; 0x2b7a <__fp_mpack>

00002ae0 <sqrt>:
    2ae0:	6e d0       	rcall	.+220    	; 0x2bbe <__fp_splitA>
    2ae2:	d0 f3       	brcs	.-12     	; 0x2ad8 <isspace+0x10>
    2ae4:	99 23       	and	r25, r25
    2ae6:	d9 f3       	breq	.-10     	; 0x2ade <isspace+0x16>
    2ae8:	ce f3       	brts	.-14     	; 0x2adc <isspace+0x14>
    2aea:	9f 57       	subi	r25, 0x7F	; 127
    2aec:	55 0b       	sbc	r21, r21
    2aee:	87 ff       	sbrs	r24, 7
    2af0:	57 d0       	rcall	.+174    	; 0x2ba0 <__fp_norm2>
    2af2:	56 95       	lsr	r21
    2af4:	97 95       	ror	r25
    2af6:	b0 e0       	ldi	r27, 0x00	; 0
    2af8:	20 f4       	brcc	.+8      	; 0x2b02 <sqrt+0x22>
    2afa:	66 0f       	add	r22, r22
    2afc:	77 1f       	adc	r23, r23
    2afe:	88 1f       	adc	r24, r24
    2b00:	bb 1f       	adc	r27, r27
    2b02:	1f 93       	push	r17
    2b04:	0f 93       	push	r16
    2b06:	00 24       	eor	r0, r0
    2b08:	90 01       	movw	r18, r0
    2b0a:	a0 01       	movw	r20, r0
    2b0c:	80 01       	movw	r16, r0
    2b0e:	f0 01       	movw	r30, r0
    2b10:	a0 e8       	ldi	r26, 0x80	; 128
    2b12:	0e 0f       	add	r16, r30
    2b14:	1f 1f       	adc	r17, r31
    2b16:	0a 1e       	adc	r0, r26
    2b18:	51 1d       	adc	r21, r1
    2b1a:	60 1b       	sub	r22, r16
    2b1c:	71 0b       	sbc	r23, r17
    2b1e:	80 09       	sbc	r24, r0
    2b20:	b5 0b       	sbc	r27, r21
    2b22:	48 f4       	brcc	.+18     	; 0x2b36 <sqrt+0x56>
    2b24:	60 0f       	add	r22, r16
    2b26:	71 1f       	adc	r23, r17
    2b28:	80 1d       	adc	r24, r0
    2b2a:	b5 1f       	adc	r27, r21
    2b2c:	0e 1b       	sub	r16, r30
    2b2e:	1f 0b       	sbc	r17, r31
    2b30:	0a 0a       	sbc	r0, r26
    2b32:	51 09       	sbc	r21, r1
    2b34:	07 c0       	rjmp	.+14     	; 0x2b44 <sqrt+0x64>
    2b36:	2e 0f       	add	r18, r30
    2b38:	3f 1f       	adc	r19, r31
    2b3a:	4a 1f       	adc	r20, r26
    2b3c:	0e 0f       	add	r16, r30
    2b3e:	1f 1f       	adc	r17, r31
    2b40:	0a 1e       	adc	r0, r26
    2b42:	51 1d       	adc	r21, r1
    2b44:	66 0f       	add	r22, r22
    2b46:	77 1f       	adc	r23, r23
    2b48:	88 1f       	adc	r24, r24
    2b4a:	bb 1f       	adc	r27, r27
    2b4c:	a6 95       	lsr	r26
    2b4e:	f7 95       	ror	r31
    2b50:	e7 95       	ror	r30
    2b52:	f8 f6       	brcc	.-66     	; 0x2b12 <sqrt+0x32>
    2b54:	06 17       	cp	r16, r22
    2b56:	17 07       	cpc	r17, r23
    2b58:	08 06       	cpc	r0, r24
    2b5a:	5b 07       	cpc	r21, r27
    2b5c:	21 1d       	adc	r18, r1
    2b5e:	31 1d       	adc	r19, r1
    2b60:	41 1d       	adc	r20, r1
    2b62:	0f 91       	pop	r16
    2b64:	1f 91       	pop	r17
    2b66:	b9 01       	movw	r22, r18
    2b68:	84 2f       	mov	r24, r20
    2b6a:	91 58       	subi	r25, 0x81	; 129
    2b6c:	88 0f       	add	r24, r24
    2b6e:	96 95       	lsr	r25
    2b70:	87 95       	ror	r24
    2b72:	08 95       	ret

00002b74 <__ctype_isfalse>:
    2b74:	99 27       	eor	r25, r25
    2b76:	88 27       	eor	r24, r24

00002b78 <__ctype_istrue>:
    2b78:	08 95       	ret

00002b7a <__fp_mpack>:
    2b7a:	9f 3f       	cpi	r25, 0xFF	; 255
    2b7c:	49 f0       	breq	.+18     	; 0x2b90 <__fp_mpack+0x16>
    2b7e:	91 50       	subi	r25, 0x01	; 1
    2b80:	28 f4       	brcc	.+10     	; 0x2b8c <__fp_mpack+0x12>
    2b82:	86 95       	lsr	r24
    2b84:	77 95       	ror	r23
    2b86:	67 95       	ror	r22
    2b88:	b7 95       	ror	r27
    2b8a:	9f 5f       	subi	r25, 0xFF	; 255
    2b8c:	80 38       	cpi	r24, 0x80	; 128
    2b8e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b90:	88 0f       	add	r24, r24
    2b92:	96 95       	lsr	r25
    2b94:	87 95       	ror	r24
    2b96:	97 f9       	bld	r25, 7
    2b98:	08 95       	ret

00002b9a <__fp_nan>:
    2b9a:	9f ef       	ldi	r25, 0xFF	; 255
    2b9c:	80 ec       	ldi	r24, 0xC0	; 192
    2b9e:	08 95       	ret

00002ba0 <__fp_norm2>:
    2ba0:	91 50       	subi	r25, 0x01	; 1
    2ba2:	50 40       	sbci	r21, 0x00	; 0
    2ba4:	66 0f       	add	r22, r22
    2ba6:	77 1f       	adc	r23, r23
    2ba8:	88 1f       	adc	r24, r24
    2baa:	d2 f7       	brpl	.-12     	; 0x2ba0 <__fp_norm2>
    2bac:	08 95       	ret

00002bae <__fp_split3>:
    2bae:	57 fd       	sbrc	r21, 7
    2bb0:	90 58       	subi	r25, 0x80	; 128
    2bb2:	44 0f       	add	r20, r20
    2bb4:	55 1f       	adc	r21, r21
    2bb6:	59 f0       	breq	.+22     	; 0x2bce <__fp_splitA+0x10>
    2bb8:	5f 3f       	cpi	r21, 0xFF	; 255
    2bba:	71 f0       	breq	.+28     	; 0x2bd8 <__fp_splitA+0x1a>
    2bbc:	47 95       	ror	r20

00002bbe <__fp_splitA>:
    2bbe:	88 0f       	add	r24, r24
    2bc0:	97 fb       	bst	r25, 7
    2bc2:	99 1f       	adc	r25, r25
    2bc4:	61 f0       	breq	.+24     	; 0x2bde <__fp_splitA+0x20>
    2bc6:	9f 3f       	cpi	r25, 0xFF	; 255
    2bc8:	79 f0       	breq	.+30     	; 0x2be8 <__fp_splitA+0x2a>
    2bca:	87 95       	ror	r24
    2bcc:	08 95       	ret
    2bce:	12 16       	cp	r1, r18
    2bd0:	13 06       	cpc	r1, r19
    2bd2:	14 06       	cpc	r1, r20
    2bd4:	55 1f       	adc	r21, r21
    2bd6:	f2 cf       	rjmp	.-28     	; 0x2bbc <__fp_split3+0xe>
    2bd8:	46 95       	lsr	r20
    2bda:	f1 df       	rcall	.-30     	; 0x2bbe <__fp_splitA>
    2bdc:	08 c0       	rjmp	.+16     	; 0x2bee <__fp_splitA+0x30>
    2bde:	16 16       	cp	r1, r22
    2be0:	17 06       	cpc	r1, r23
    2be2:	18 06       	cpc	r1, r24
    2be4:	99 1f       	adc	r25, r25
    2be6:	f1 cf       	rjmp	.-30     	; 0x2bca <__fp_splitA+0xc>
    2be8:	86 95       	lsr	r24
    2bea:	71 05       	cpc	r23, r1
    2bec:	61 05       	cpc	r22, r1
    2bee:	08 94       	sec
    2bf0:	08 95       	ret

00002bf2 <__mulsi3>:
    2bf2:	62 9f       	mul	r22, r18
    2bf4:	d0 01       	movw	r26, r0
    2bf6:	73 9f       	mul	r23, r19
    2bf8:	f0 01       	movw	r30, r0
    2bfa:	82 9f       	mul	r24, r18
    2bfc:	e0 0d       	add	r30, r0
    2bfe:	f1 1d       	adc	r31, r1
    2c00:	64 9f       	mul	r22, r20
    2c02:	e0 0d       	add	r30, r0
    2c04:	f1 1d       	adc	r31, r1
    2c06:	92 9f       	mul	r25, r18
    2c08:	f0 0d       	add	r31, r0
    2c0a:	83 9f       	mul	r24, r19
    2c0c:	f0 0d       	add	r31, r0
    2c0e:	74 9f       	mul	r23, r20
    2c10:	f0 0d       	add	r31, r0
    2c12:	65 9f       	mul	r22, r21
    2c14:	f0 0d       	add	r31, r0
    2c16:	99 27       	eor	r25, r25
    2c18:	72 9f       	mul	r23, r18
    2c1a:	b0 0d       	add	r27, r0
    2c1c:	e1 1d       	adc	r30, r1
    2c1e:	f9 1f       	adc	r31, r25
    2c20:	63 9f       	mul	r22, r19
    2c22:	b0 0d       	add	r27, r0
    2c24:	e1 1d       	adc	r30, r1
    2c26:	f9 1f       	adc	r31, r25
    2c28:	bd 01       	movw	r22, r26
    2c2a:	cf 01       	movw	r24, r30
    2c2c:	11 24       	eor	r1, r1
    2c2e:	08 95       	ret

00002c30 <_exit>:
    2c30:	f8 94       	cli

00002c32 <__stop_program>:
    2c32:	ff cf       	rjmp	.-2      	; 0x2c32 <__stop_program>
