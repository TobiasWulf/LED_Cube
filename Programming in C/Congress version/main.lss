
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005808  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000132  00800060  00005808  0000589c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004c  00800192  00800192  000059ce  2**0
                  ALLOC
  3 .stab         000013c8  00000000  00000000  000059d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000003cb  00000000  00000000  00006d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000290  00000000  00000000  00007163  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000a7e  00000000  00000000  000073f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004a1e  00000000  00000000  00007e71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001937  00000000  00000000  0000c88f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000050c1  00000000  00000000  0000e1c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000ae0  00000000  00000000  00013288  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000c46  00000000  00000000  00013d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005085  00000000  00000000  000149ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000005e5  00000000  00000000  00019a33  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000238  00000000  00000000  0001a018  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__ctors_end>
       4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
       8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
       c:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__vector_3>
      10:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      14:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      18:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      1c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      20:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      24:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      28:	0c 94 21 01 	jmp	0x242	; 0x242 <__vector_10>
      2c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      30:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      34:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      38:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      3c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      40:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      44:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      48:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      4c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      50:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      54:	b2 01       	movw	r22, r4
      56:	b5 01       	movw	r22, r10
      58:	bf 01       	movw	r22, r30
      5a:	d7 01       	movw	r26, r14
      5c:	e0 01       	movw	r28, r0
      5e:	e9 01       	movw	r28, r18
      60:	f4 01       	movw	r30, r8
      62:	fd 01       	movw	r30, r26
      64:	00 02       	muls	r16, r16
      66:	13 02       	muls	r17, r19
      68:	50 02       	muls	r21, r16
      6a:	6a 02       	muls	r22, r26
      6c:	6d 02       	muls	r22, r29
      6e:	76 02       	muls	r23, r22
      70:	7f 02       	muls	r23, r31
      72:	88 02       	muls	r24, r24
      74:	91 02       	muls	r25, r17
      76:	9a 02       	muls	r25, r26
      78:	0d 08       	sbc	r0, r13
      7a:	10 08       	sbc	r1, r0
      7c:	13 08       	sbc	r1, r3
      7e:	16 08       	sbc	r1, r6
      80:	19 08       	sbc	r1, r9
      82:	1c 08       	sbc	r1, r12
      84:	1f 08       	sbc	r1, r15
      86:	22 08       	sbc	r2, r2
      88:	25 08       	sbc	r2, r5
      8a:	28 08       	sbc	r2, r8
      8c:	2b 08       	sbc	r2, r11
      8e:	2e 08       	sbc	r2, r14
      90:	31 08       	sbc	r3, r1
      92:	34 08       	sbc	r3, r4
      94:	37 08       	sbc	r3, r7
      96:	3a 08       	sbc	r3, r10
      98:	3d 08       	sbc	r3, r13
      9a:	40 08       	sbc	r4, r0
      9c:	43 08       	sbc	r4, r3
      9e:	46 08       	sbc	r4, r6
      a0:	49 08       	sbc	r4, r9
      a2:	4c 08       	sbc	r4, r12
      a4:	4f 08       	sbc	r4, r15
      a6:	52 08       	sbc	r5, r2
      a8:	55 08       	sbc	r5, r5
      aa:	58 08       	sbc	r5, r8
      ac:	ce 16       	cp	r12, r30
      ae:	e0 16       	cp	r14, r16
      b0:	e0 16       	cp	r14, r16
      b2:	e0 16       	cp	r14, r16
      b4:	e0 16       	cp	r14, r16
      b6:	e0 16       	cp	r14, r16
      b8:	cb 16       	cp	r12, r27
      ba:	d1 16       	cp	r13, r17
      bc:	d4 16       	cp	r13, r20
      be:	e0 16       	cp	r14, r16
      c0:	e0 16       	cp	r14, r16
      c2:	dd 16       	cp	r13, r29
      c4:	e0 16       	cp	r14, r16
      c6:	da 16       	cp	r13, r26
      c8:	e0 16       	cp	r14, r16
      ca:	e0 16       	cp	r14, r16
      cc:	e0 16       	cp	r14, r16
      ce:	e0 16       	cp	r14, r16
      d0:	e0 16       	cp	r14, r16
      d2:	e0 16       	cp	r14, r16
      d4:	e0 16       	cp	r14, r16
      d6:	e0 16       	cp	r14, r16
      d8:	e0 16       	cp	r14, r16
      da:	e0 16       	cp	r14, r16
      dc:	e0 16       	cp	r14, r16
      de:	e0 16       	cp	r14, r16
      e0:	e0 16       	cp	r14, r16
      e2:	e0 16       	cp	r14, r16
      e4:	d7 16       	cp	r13, r23
      e6:	e0 16       	cp	r14, r16
      e8:	c8 16       	cp	r12, r24
      ea:	e0 16       	cp	r14, r16
      ec:	7a 16       	cp	r7, r26
      ee:	7d 16       	cp	r7, r29
      f0:	80 16       	cp	r8, r16
      f2:	83 16       	cp	r8, r19
      f4:	86 16       	cp	r8, r22
      f6:	89 16       	cp	r8, r25
      f8:	8c 16       	cp	r8, r28
      fa:	8f 16       	cp	r8, r31
      fc:	92 16       	cp	r9, r18
      fe:	95 16       	cp	r9, r21
     100:	98 16       	cp	r9, r24
     102:	9b 16       	cp	r9, r27
     104:	9e 16       	cp	r9, r30
     106:	a1 16       	cp	r10, r17
     108:	a4 16       	cp	r10, r20
     10a:	a7 16       	cp	r10, r23
     10c:	aa 16       	cp	r10, r26
     10e:	ad 16       	cp	r10, r29
     110:	b0 16       	cp	r11, r16
     112:	b3 16       	cp	r11, r19
     114:	b6 16       	cp	r11, r22
     116:	b9 16       	cp	r11, r25
     118:	bc 16       	cp	r11, r28
     11a:	bf 16       	cp	r11, r31
     11c:	c2 16       	cp	r12, r18
     11e:	c5 16       	cp	r12, r21

00000120 <spinning_line>:
     120:	10 08 04 02 01 00 18 04 03 00 00 03 04 18 00 01     ................
     130:	02 04 08 10 02 02 04 08 08 08 08 04 02 02           ..............

0000013e <__c.1903>:
     13e:	45 46 47 65 66 67 00                                EFGefg.

00000145 <__c.1897>:
     145:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

00000155 <__c.2030>:
     155:	63 64 69 6e 6f 70 73 75 78 58 00                    cdinopsuxX.

00000160 <__ctors_end>:
     160:	11 24       	eor	r1, r1
     162:	1f be       	out	0x3f, r1	; 63
     164:	cf e5       	ldi	r28, 0x5F	; 95
     166:	d8 e0       	ldi	r29, 0x08	; 8
     168:	de bf       	out	0x3e, r29	; 62
     16a:	cd bf       	out	0x3d, r28	; 61

0000016c <__do_copy_data>:
     16c:	11 e0       	ldi	r17, 0x01	; 1
     16e:	a0 e6       	ldi	r26, 0x60	; 96
     170:	b0 e0       	ldi	r27, 0x00	; 0
     172:	e8 e0       	ldi	r30, 0x08	; 8
     174:	f8 e5       	ldi	r31, 0x58	; 88
     176:	02 c0       	rjmp	.+4      	; 0x17c <__do_copy_data+0x10>
     178:	05 90       	lpm	r0, Z+
     17a:	0d 92       	st	X+, r0
     17c:	a2 39       	cpi	r26, 0x92	; 146
     17e:	b1 07       	cpc	r27, r17
     180:	d9 f7       	brne	.-10     	; 0x178 <__do_copy_data+0xc>

00000182 <__do_clear_bss>:
     182:	11 e0       	ldi	r17, 0x01	; 1
     184:	a2 e9       	ldi	r26, 0x92	; 146
     186:	b1 e0       	ldi	r27, 0x01	; 1
     188:	01 c0       	rjmp	.+2      	; 0x18c <.do_clear_bss_start>

0000018a <.do_clear_bss_loop>:
     18a:	1d 92       	st	X+, r1

0000018c <.do_clear_bss_start>:
     18c:	ae 3d       	cpi	r26, 0xDE	; 222
     18e:	b1 07       	cpc	r27, r17
     190:	e1 f7       	brne	.-8      	; 0x18a <.do_clear_bss_loop>
     192:	0e 94 ad 02 	call	0x55a	; 0x55a <main>
     196:	0c 94 02 2c 	jmp	0x5804	; 0x5804 <_exit>

0000019a <__bad_interrupt>:
     19a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000019e <delay_ms>:
}

void delay_ms(int delay)
{
	int i;
	for(i = 0 ; i < delay ; i++) _delay_ms(1);
     19e:	20 e0       	ldi	r18, 0x00	; 0
     1a0:	30 e0       	ldi	r19, 0x00	; 0
     1a2:	08 c0       	rjmp	.+16     	; 0x1b4 <delay_ms+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1a4:	ef e9       	ldi	r30, 0x9F	; 159
     1a6:	ff e0       	ldi	r31, 0x0F	; 15
     1a8:	31 97       	sbiw	r30, 0x01	; 1
     1aa:	f1 f7       	brne	.-4      	; 0x1a8 <delay_ms+0xa>
     1ac:	00 c0       	rjmp	.+0      	; 0x1ae <delay_ms+0x10>
     1ae:	00 00       	nop
     1b0:	2f 5f       	subi	r18, 0xFF	; 255
     1b2:	3f 4f       	sbci	r19, 0xFF	; 255
     1b4:	28 17       	cp	r18, r24
     1b6:	39 07       	cpc	r19, r25
     1b8:	ac f3       	brlt	.-22     	; 0x1a4 <delay_ms+0x6>
}
     1ba:	08 95       	ret

000001bc <cube_ini>:
{
	
	//set Input and Output for data direction
	//output = 1
	//input = 0
	DDRA = 0xff; //set X_PORT for output 00011111
     1bc:	8f ef       	ldi	r24, 0xFF	; 255
     1be:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0x00; //set BUTTON_PORT for input and ISP
     1c0:	17 ba       	out	0x17, r1	; 23
	DDRC = 0xff; //set Y_PORT for output 00011111
     1c2:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xff; //set Z/EN_PORT for output 11111100 and RXD/TXD for serial in (needs to enable with USRB)
     1c4:	81 bb       	out	0x11, r24	; 17
	
	X_PORT = 0x00;
     1c6:	1b ba       	out	0x1b, r1	; 27
	Y_PORT = 0x00;
     1c8:	15 ba       	out	0x15, r1	; 21
	Z_PORT = 0x00;
     1ca:	12 ba       	out	0x12, r1	; 18
	//set the intern pull ups where needed
	BUTTON_PORT |= (1 << BUTTON);
     1cc:	c2 9a       	sbi	0x18, 2	; 24
	
	// enable LED drivers
	EN_PORT &= ~(1 << EN);
     1ce:	97 98       	cbi	0x12, 7	; 18

	// define Mask for output register in ISR
	_X_[0] = 0x01;
     1d0:	31 e0       	ldi	r19, 0x01	; 1
     1d2:	30 93 b5 01 	sts	0x01B5, r19
	_X_[1] = 0x02;
     1d6:	42 e0       	ldi	r20, 0x02	; 2
     1d8:	40 93 b6 01 	sts	0x01B6, r20
	_X_[2] = 0x04;
     1dc:	24 e0       	ldi	r18, 0x04	; 4
     1de:	20 93 b7 01 	sts	0x01B7, r18
	_X_[3] = 0x08;
     1e2:	98 e0       	ldi	r25, 0x08	; 8
     1e4:	90 93 b8 01 	sts	0x01B8, r25
	_X_[4] = 0x10;
     1e8:	80 e1       	ldi	r24, 0x10	; 16
     1ea:	80 93 b9 01 	sts	0x01B9, r24

	_Y_[0] = 0x10;
     1ee:	80 93 d3 01 	sts	0x01D3, r24
	_Y_[1] = 0x08;
     1f2:	90 93 d4 01 	sts	0x01D4, r25
	_Y_[2] = 0x04;
     1f6:	20 93 d5 01 	sts	0x01D5, r18
	_Y_[3] = 0x02;
     1fa:	40 93 d6 01 	sts	0x01D6, r20
	_Y_[4] = 0x01;
     1fe:	30 93 d7 01 	sts	0x01D7, r19

	_Z_[0] = 0x04;
     202:	20 93 d9 01 	sts	0x01D9, r18
	_Z_[1] = 0x08;
     206:	90 93 da 01 	sts	0x01DA, r25
	_Z_[2] = 0x10;
     20a:	80 93 db 01 	sts	0x01DB, r24
	_Z_[3] = 0x20;
     20e:	80 e2       	ldi	r24, 0x20	; 32
     210:	80 93 dc 01 	sts	0x01DC, r24
	_Z_[4] = 0x40;
     214:	80 e4       	ldi	r24, 0x40	; 64
     216:	80 93 dd 01 	sts	0x01DD, r24

	// ##########Initiate timers and external interrupt############

	
	//Frame buffer interrupt Timer Counter Control Register in CTC mode enabled in Timer Interrupt Mask Register
	TCNT0 = 0x00; //initial counter value = 0
     21a:	12 be       	out	0x32, r1	; 50
	TIMSK |= (1 << OCIE0);  //Enable CTC interrupt
     21c:	89 b7       	in	r24, 0x39	; 57
     21e:	82 60       	ori	r24, 0x02	; 2
     220:	89 bf       	out	0x39, r24	; 57
	// and the interrupt routine is executed.
	// 16000000/256/10 = 6250 times per second
	// There are 5 rows per layer to update..
	// 16000000/256/10/5/5 = 250 FPS
	
	OCR0 = 10; //Interrupt at counter = 10
     222:	8a e0       	ldi	r24, 0x0A	; 10
     224:	8c bf       	out	0x3c, r24	; 60
	TCCR0 |= (1 << CS02); //prescaler = 256
     226:	83 b7       	in	r24, 0x33	; 51
     228:	84 60       	ori	r24, 0x04	; 4
     22a:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << WGM01); // Clear Timer on Compare Match (CTC) mode
     22c:	83 b7       	in	r24, 0x33	; 51
     22e:	88 60       	ori	r24, 0x08	; 8
     230:	83 bf       	out	0x33, r24	; 51

	//Ext. interrupt on interrupt pin INT2 (PB2) for effect switching
	GICR |= (1 << INT2); // INT2 enable im General Interrupt Control Register
     232:	8b b7       	in	r24, 0x3b	; 59
     234:	80 62       	ori	r24, 0x20	; 32
     236:	8b bf       	out	0x3b, r24	; 59
	MCUCSR &= ~(1 << ISC2); //Execute interrupt with falling edge
     238:	84 b7       	in	r24, 0x34	; 52
     23a:	8f 7b       	andi	r24, 0xBF	; 191
     23c:	84 bf       	out	0x34, r24	; 52

	//Activate global interrupts
	sei();
     23e:	78 94       	sei
}
     240:	08 95       	ret

00000242 <__vector_10>:

//Interrupt Service Routine for Frame Buffer
ISR(TIMER0_COMP_vect)
{
     242:	1f 92       	push	r1
     244:	0f 92       	push	r0
     246:	0f b6       	in	r0, 0x3f	; 63
     248:	0f 92       	push	r0
     24a:	11 24       	eor	r1, r1
     24c:	2f 93       	push	r18
     24e:	8f 93       	push	r24
     250:	9f 93       	push	r25
     252:	ef 93       	push	r30
     254:	ff 93       	push	r31
	

	//Enable the layer
	Z_PORT = _Z_[current_layer];
     256:	e0 91 d8 01 	lds	r30, 0x01D8
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	e7 52       	subi	r30, 0x27	; 39
     25e:	fe 4f       	sbci	r31, 0xFE	; 254
     260:	80 81       	ld	r24, Z
     262:	82 bb       	out	0x12, r24	; 18
	
		for(current_Yrow = 0 ; current_Yrow < 5 ; current_Yrow++){	
     264:	10 92 9a 01 	sts	0x019A, r1
     268:	1e c0       	rjmp	.+60     	; 0x2a6 <__vector_10+0x64>
			X_PORT = cube[current_layer][current_Yrow];
     26a:	80 91 d8 01 	lds	r24, 0x01D8
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	20 91 9a 01 	lds	r18, 0x019A
     274:	fc 01       	movw	r30, r24
     276:	ee 0f       	add	r30, r30
     278:	ff 1f       	adc	r31, r31
     27a:	ee 0f       	add	r30, r30
     27c:	ff 1f       	adc	r31, r31
     27e:	e8 0f       	add	r30, r24
     280:	f9 1f       	adc	r31, r25
     282:	e2 0f       	add	r30, r18
     284:	f1 1d       	adc	r31, r1
     286:	e6 54       	subi	r30, 0x46	; 70
     288:	fe 4f       	sbci	r31, 0xFE	; 254
     28a:	80 81       	ld	r24, Z
     28c:	8b bb       	out	0x1b, r24	; 27
			Y_PORT = _Y_[current_Yrow];
     28e:	e0 91 9a 01 	lds	r30, 0x019A
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	ed 52       	subi	r30, 0x2D	; 45
     296:	fe 4f       	sbci	r31, 0xFE	; 254
     298:	80 81       	ld	r24, Z
     29a:	85 bb       	out	0x15, r24	; 21
	

	//Enable the layer
	Z_PORT = _Z_[current_layer];
	
		for(current_Yrow = 0 ; current_Yrow < 5 ; current_Yrow++){	
     29c:	80 91 9a 01 	lds	r24, 0x019A
     2a0:	8f 5f       	subi	r24, 0xFF	; 255
     2a2:	80 93 9a 01 	sts	0x019A, r24
     2a6:	80 91 9a 01 	lds	r24, 0x019A
     2aa:	85 30       	cpi	r24, 0x05	; 5
     2ac:	f0 f2       	brcs	.-68     	; 0x26a <__vector_10+0x28>
		}
 
	
	//Running through 1 layer wins vs. updating all layers during an interrupt.
	//Because the ISR comes faster to an end and the cube has a faster update cycle to the buffer.
	if(current_layer++ == 4) current_layer = 0;
     2ae:	80 91 d8 01 	lds	r24, 0x01D8
     2b2:	98 2f       	mov	r25, r24
     2b4:	9f 5f       	subi	r25, 0xFF	; 255
     2b6:	90 93 d8 01 	sts	0x01D8, r25
     2ba:	84 30       	cpi	r24, 0x04	; 4
     2bc:	11 f4       	brne	.+4      	; 0x2c2 <__vector_10+0x80>
     2be:	10 92 d8 01 	sts	0x01D8, r1
}
     2c2:	ff 91       	pop	r31
     2c4:	ef 91       	pop	r30
     2c6:	9f 91       	pop	r25
     2c8:	8f 91       	pop	r24
     2ca:	2f 91       	pop	r18
     2cc:	0f 90       	pop	r0
     2ce:	0f be       	out	0x3f, r0	; 63
     2d0:	0f 90       	pop	r0
     2d2:	1f 90       	pop	r1
     2d4:	18 95       	reti

000002d6 <__vector_3>:

//Interrupt Service Routine for effect switching
ISR(INT2_vect)
{
     2d6:	1f 92       	push	r1
     2d8:	0f 92       	push	r0
     2da:	0f b6       	in	r0, 0x3f	; 63
     2dc:	0f 92       	push	r0
     2de:	11 24       	eor	r1, r1
     2e0:	8f 93       	push	r24
     2e2:	9f 93       	push	r25

	if(current_effect++ == 17) current_effect = 0;
     2e4:	80 91 b4 01 	lds	r24, 0x01B4
     2e8:	98 2f       	mov	r25, r24
     2ea:	9f 5f       	subi	r25, 0xFF	; 255
     2ec:	90 93 b4 01 	sts	0x01B4, r25
     2f0:	81 31       	cpi	r24, 0x11	; 17
     2f2:	11 f4       	brne	.+4      	; 0x2f8 <__vector_3+0x22>
     2f4:	10 92 b4 01 	sts	0x01B4, r1

}
     2f8:	9f 91       	pop	r25
     2fa:	8f 91       	pop	r24
     2fc:	0f 90       	pop	r0
     2fe:	0f be       	out	0x3f, r0	; 63
     300:	0f 90       	pop	r0
     302:	1f 90       	pop	r1
     304:	18 95       	reti

00000306 <boot_check>:

void boot_check(int delay)
{
     306:	cf 93       	push	r28
     308:	df 93       	push	r29
     30a:	ec 01       	movw	r28, r24
	fill(0x1f);
     30c:	8f e1       	ldi	r24, 0x1F	; 31
     30e:	0e 94 16 06 	call	0xc2c	; 0xc2c <fill>
	delay_ms(delay);
     312:	ce 01       	movw	r24, r28
     314:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
	
}
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	08 95       	ret

0000031e <launch_effect>:

void launch_effect(unsigned char choice)
{
     31e:	0f 93       	push	r16
     320:	1f 93       	push	r17
     322:	df 93       	push	r29
     324:	cf 93       	push	r28
     326:	cd b7       	in	r28, 0x3d	; 61
     328:	de b7       	in	r29, 0x3e	; 62
     32a:	6e 97       	sbiw	r28, 0x1e	; 30
     32c:	0f b6       	in	r0, 0x3f	; 63
     32e:	f8 94       	cli
     330:	de bf       	out	0x3e, r29	; 62
     332:	0f be       	out	0x3f, r0	; 63
     334:	cd bf       	out	0x3d, r28	; 61
	char eestec[30]= "EESTEC WHAT'S YOUR PROFESSION?";
     336:	fe 01       	movw	r30, r28
     338:	31 96       	adiw	r30, 0x01	; 1
     33a:	a0 e6       	ldi	r26, 0x60	; 96
     33c:	b0 e0       	ldi	r27, 0x00	; 0
     33e:	9e e1       	ldi	r25, 0x1E	; 30
     340:	0d 90       	ld	r0, X+
     342:	01 92       	st	Z+, r0
     344:	91 50       	subi	r25, 0x01	; 1
     346:	e1 f7       	brne	.-8      	; 0x340 <launch_effect+0x22>
	int i;
	
	switch (choice)
     348:	e8 2f       	mov	r30, r24
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	e2 31       	cpi	r30, 0x12	; 18
     34e:	f1 05       	cpc	r31, r1
     350:	08 f0       	brcs	.+2      	; 0x354 <launch_effect+0x36>
     352:	f8 c0       	rjmp	.+496    	; 0x544 <launch_effect+0x226>
     354:	e6 5d       	subi	r30, 0xD6	; 214
     356:	ff 4f       	sbci	r31, 0xFF	; 255
     358:	ee 0f       	add	r30, r30
     35a:	ff 1f       	adc	r31, r31
     35c:	05 90       	lpm	r0, Z+
     35e:	f4 91       	lpm	r31, Z+
     360:	e0 2d       	mov	r30, r0
     362:	09 94       	ijmp
	{
		case 0:
			LCHamburg();
     364:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <LCHamburg>
			break;
     368:	ed c0       	rjmp	.+474    	; 0x544 <launch_effect+0x226>
void launch_effect(unsigned char choice)
{
	char eestec[30]= "EESTEC WHAT'S YOUR PROFESSION?";
	int i;
	
	switch (choice)
     36a:	0e e1       	ldi	r16, 0x1E	; 30
     36c:	10 e0       	ldi	r17, 0x00	; 0
			LCHamburg();
			break;
		// Lights all the layers one by one
		case 1:
			for(i=0;i<30;i++)
			loadbar(40);
     36e:	88 e2       	ldi	r24, 0x28	; 40
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	0e 94 3d 14 	call	0x287a	; 0x287a <loadbar>
     376:	01 50       	subi	r16, 0x01	; 1
     378:	10 40       	sbci	r17, 0x00	; 0
		case 0:
			LCHamburg();
			break;
		// Lights all the layers one by one
		case 1:
			for(i=0;i<30;i++)
     37a:	c9 f7       	brne	.-14     	; 0x36e <launch_effect+0x50>
     37c:	e3 c0       	rjmp	.+454    	; 0x544 <launch_effect+0x226>
			break;
		
		// Randomly fill the cube
		// Randomly empty the cube
		case 2:
			fill(0x00);
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	0e 94 16 06 	call	0xc2c	; 0xc2c <fill>
			random_filler(100,1,50,1);
     384:	84 e6       	ldi	r24, 0x64	; 100
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	61 e0       	ldi	r22, 0x01	; 1
     38a:	70 e0       	ldi	r23, 0x00	; 0
     38c:	42 e3       	ldi	r20, 0x32	; 50
     38e:	50 e0       	ldi	r21, 0x00	; 0
     390:	21 e0       	ldi	r18, 0x01	; 1
     392:	30 e0       	ldi	r19, 0x00	; 0
     394:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <random_filler>
			random_filler(100,1,50,0);
     398:	84 e6       	ldi	r24, 0x64	; 100
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	61 e0       	ldi	r22, 0x01	; 1
     39e:	70 e0       	ldi	r23, 0x00	; 0
     3a0:	42 e3       	ldi	r20, 0x32	; 50
     3a2:	50 e0       	ldi	r21, 0x00	; 0
     3a4:	20 e0       	ldi	r18, 0x00	; 0
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <random_filler>
			break;
     3ac:	cb c0       	rjmp	.+406    	; 0x544 <launch_effect+0x226>
		
		// Send voxels randomly back and forth the Z axis
		case 3:
			sendvoxels_rand_z(150,50,20);
     3ae:	86 e9       	ldi	r24, 0x96	; 150
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	62 e3       	ldi	r22, 0x32	; 50
     3b4:	70 e0       	ldi	r23, 0x00	; 0
     3b6:	44 e1       	ldi	r20, 0x14	; 20
     3b8:	50 e0       	ldi	r21, 0x00	; 0
     3ba:	0e 94 8e 12 	call	0x251c	; 0x251c <sendvoxels_rand_z>
			break;
     3be:	c2 c0       	rjmp	.+388    	; 0x544 <launch_effect+0x226>
			
		// Spinning spiral
		case 4:
			effect_spiral(100,75,100);
     3c0:	84 e6       	ldi	r24, 0x64	; 100
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	6b e4       	ldi	r22, 0x4B	; 75
     3c6:	70 e0       	ldi	r23, 0x00	; 0
     3c8:	44 e6       	ldi	r20, 0x64	; 100
     3ca:	50 e0       	ldi	r21, 0x00	; 0
     3cc:	0e 94 b4 10 	call	0x2168	; 0x2168 <effect_spiral>
			break;
     3d0:	b9 c0       	rjmp	.+370    	; 0x544 <launch_effect+0x226>
			
		// Random raindrops
		case 5:
			effect_rain(20,25,100,25);
     3d2:	84 e1       	ldi	r24, 0x14	; 20
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	69 e1       	ldi	r22, 0x19	; 25
     3d8:	70 e0       	ldi	r23, 0x00	; 0
     3da:	44 e6       	ldi	r20, 0x64	; 100
     3dc:	50 e0       	ldi	r21, 0x00	; 0
     3de:	29 e1       	ldi	r18, 0x19	; 25
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	0e 94 6d 11 	call	0x22da	; 0x22da <effect_rain>
			break;
     3e6:	ae c0       	rjmp	.+348    	; 0x544 <launch_effect+0x226>
					
		// Spinning plane
		case 6:
			effect_spinning_plane(1,50,50);
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	62 e3       	ldi	r22, 0x32	; 50
     3ee:	70 e0       	ldi	r23, 0x00	; 0
     3f0:	42 e3       	ldi	r20, 0x32	; 50
     3f2:	50 e0       	ldi	r21, 0x00	; 0
     3f4:	0e 94 14 11 	call	0x2228	; 0x2228 <effect_spinning_plane>
			break;
     3f8:	a5 c0       	rjmp	.+330    	; 0x544 <launch_effect+0x226>
		
		// set x number of random voxels, delay, unset them.
		// x increases from 1 to 20 and back to 1.
		case 7:
			random_2();
     3fa:	0e 94 5f 13 	call	0x26be	; 0x26be <random_2>
			break;
     3fe:	a2 c0       	rjmp	.+324    	; 0x544 <launch_effect+0x226>
		
		// Set all 125 voxels in a random order.
		// Unset all 125 voxels in a random order.
		case 8:
			random_filler2(100,1);
     400:	84 e6       	ldi	r24, 0x64	; 100
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	61 e0       	ldi	r22, 0x01	; 1
     406:	70 e0       	ldi	r23, 0x00	; 0
     408:	0e 94 d5 13 	call	0x27aa	; 0x27aa <random_filler2>
			delay_ms(2000);
     40c:	80 ed       	ldi	r24, 0xD0	; 208
     40e:	97 e0       	ldi	r25, 0x07	; 7
     410:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
			random_filler2(100,0);
     414:	84 e6       	ldi	r24, 0x64	; 100
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	60 e0       	ldi	r22, 0x00	; 0
     41a:	70 e0       	ldi	r23, 0x00	; 0
     41c:	0e 94 d5 13 	call	0x27aa	; 0x27aa <random_filler2>
			delay_ms(1000);
     420:	88 ee       	ldi	r24, 0xE8	; 232
     422:	93 e0       	ldi	r25, 0x03	; 3
     424:	3a c0       	rjmp	.+116    	; 0x49a <launch_effect+0x17c>
			break;
			
		// bounce a plane up and down all the directions.
		case 9:
			flyplane('z',1,200);
     426:	8a e7       	ldi	r24, 0x7A	; 122
     428:	61 e0       	ldi	r22, 0x01	; 1
     42a:	48 ec       	ldi	r20, 0xC8	; 200
     42c:	50 e0       	ldi	r21, 0x00	; 0
     42e:	0e 94 83 14 	call	0x2906	; 0x2906 <flyplane>
			delay_ms(300);
     432:	8c e2       	ldi	r24, 0x2C	; 44
     434:	91 e0       	ldi	r25, 0x01	; 1
     436:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
			flyplane('y',1,200);
     43a:	89 e7       	ldi	r24, 0x79	; 121
     43c:	61 e0       	ldi	r22, 0x01	; 1
     43e:	48 ec       	ldi	r20, 0xC8	; 200
     440:	50 e0       	ldi	r21, 0x00	; 0
     442:	0e 94 83 14 	call	0x2906	; 0x2906 <flyplane>
			delay_ms(300);
     446:	8c e2       	ldi	r24, 0x2C	; 44
     448:	91 e0       	ldi	r25, 0x01	; 1
     44a:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
			flyplane('x',1,200);
     44e:	88 e7       	ldi	r24, 0x78	; 120
     450:	61 e0       	ldi	r22, 0x01	; 1
     452:	48 ec       	ldi	r20, 0xC8	; 200
     454:	50 e0       	ldi	r21, 0x00	; 0
     456:	0e 94 83 14 	call	0x2906	; 0x2906 <flyplane>
			delay_ms(300);
     45a:	8c e2       	ldi	r24, 0x2C	; 44
     45c:	91 e0       	ldi	r25, 0x01	; 1
     45e:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
			flyplane('z',0,200);
     462:	8a e7       	ldi	r24, 0x7A	; 122
     464:	60 e0       	ldi	r22, 0x00	; 0
     466:	48 ec       	ldi	r20, 0xC8	; 200
     468:	50 e0       	ldi	r21, 0x00	; 0
     46a:	0e 94 83 14 	call	0x2906	; 0x2906 <flyplane>
			delay_ms(300);
     46e:	8c e2       	ldi	r24, 0x2C	; 44
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
			flyplane('y',0,200);
     476:	89 e7       	ldi	r24, 0x79	; 121
     478:	60 e0       	ldi	r22, 0x00	; 0
     47a:	48 ec       	ldi	r20, 0xC8	; 200
     47c:	50 e0       	ldi	r21, 0x00	; 0
     47e:	0e 94 83 14 	call	0x2906	; 0x2906 <flyplane>
			delay_ms(300);
     482:	8c e2       	ldi	r24, 0x2C	; 44
     484:	91 e0       	ldi	r25, 0x01	; 1
     486:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
			flyplane('x',0,200);
     48a:	88 e7       	ldi	r24, 0x78	; 120
     48c:	60 e0       	ldi	r22, 0x00	; 0
     48e:	48 ec       	ldi	r20, 0xC8	; 200
     490:	50 e0       	ldi	r21, 0x00	; 0
     492:	0e 94 83 14 	call	0x2906	; 0x2906 <flyplane>
			delay_ms(300);
     496:	8c e2       	ldi	r24, 0x2C	; 44
     498:	91 e0       	ldi	r25, 0x01	; 1
     49a:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
			break;
     49e:	52 c0       	rjmp	.+164    	; 0x544 <launch_effect+0x226>
			
		// Fade in and out at low framerate
		case 10:
			writer(eestec,30);
     4a0:	ce 01       	movw	r24, r28
     4a2:	01 96       	adiw	r24, 0x01	; 1
     4a4:	6e e1       	ldi	r22, 0x1E	; 30
     4a6:	70 e0       	ldi	r23, 0x00	; 0
     4a8:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <writer>
     4ac:	03 e0       	ldi	r16, 0x03	; 3
     4ae:	10 e0       	ldi	r17, 0x00	; 0
		for(int i = 0 ; i < 3 ; i++)
		{
			fill(0x1f);
     4b0:	8f e1       	ldi	r24, 0x1F	; 31
     4b2:	0e 94 16 06 	call	0xc2c	; 0xc2c <fill>
			delay_ms(500);
     4b6:	84 ef       	ldi	r24, 0xF4	; 244
     4b8:	91 e0       	ldi	r25, 0x01	; 1
     4ba:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
			fill(0x00);
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	0e 94 16 06 	call	0xc2c	; 0xc2c <fill>
			delay_ms(500);
     4c4:	84 ef       	ldi	r24, 0xF4	; 244
     4c6:	91 e0       	ldi	r25, 0x01	; 1
     4c8:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
     4cc:	01 50       	subi	r16, 0x01	; 1
     4ce:	10 40       	sbci	r17, 0x00	; 0
			break;
			
		// Fade in and out at low framerate
		case 10:
			writer(eestec,30);
		for(int i = 0 ; i < 3 ; i++)
     4d0:	79 f7       	brne	.-34     	; 0x4b0 <launch_effect+0x192>
     4d2:	38 c0       	rjmp	.+112    	; 0x544 <launch_effect+0x226>
			delay_ms(500);
		}
			break;
		
		case 11:
			Sejla_Damir();
     4d4:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <Sejla_Damir>
			break;
     4d8:	35 c0       	rjmp	.+106    	; 0x544 <launch_effect+0x226>
			
		case 12:
		effect_everything_bitches(1,10,10);
     4da:	81 e0       	ldi	r24, 0x01	; 1
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	6a e0       	ldi	r22, 0x0A	; 10
     4e0:	70 e0       	ldi	r23, 0x00	; 0
     4e2:	4a e0       	ldi	r20, 0x0A	; 10
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	0e 94 55 20 	call	0x40aa	; 0x40aa <effect_everything_bitches>
		break;
     4ea:	2c c0       	rjmp	.+88     	; 0x544 <launch_effect+0x226>
		
		case 13:
		effect_noise(1,10,10);
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	6a e0       	ldi	r22, 0x0A	; 10
     4f2:	70 e0       	ldi	r23, 0x00	; 0
     4f4:	4a e0       	ldi	r20, 0x0A	; 10
     4f6:	50 e0       	ldi	r21, 0x00	; 0
     4f8:	0e 94 0e 20 	call	0x401c	; 0x401c <effect_noise>
		break;
     4fc:	23 c0       	rjmp	.+70     	; 0x544 <launch_effect+0x226>

		case 14:
		effect_rings(1,10,0);
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	6a e0       	ldi	r22, 0x0A	; 10
     504:	70 e0       	ldi	r23, 0x00	; 0
     506:	40 e0       	ldi	r20, 0x00	; 0
     508:	50 e0       	ldi	r21, 0x00	; 0
     50a:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <effect_rings>
		break;
     50e:	1a c0       	rjmp	.+52     	; 0x544 <launch_effect+0x226>
		
		case 15:
		effect_explosion(1,10,0);
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	6a e0       	ldi	r22, 0x0A	; 10
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	40 e0       	ldi	r20, 0x00	; 0
     51a:	50 e0       	ldi	r21, 0x00	; 0
     51c:	0e 94 62 1e 	call	0x3cc4	; 0x3cc4 <effect_explosion>
		break;
     520:	11 c0       	rjmp	.+34     	; 0x544 <launch_effect+0x226>
		
		case 16:
		effect_snow(1,10,370);
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	6a e0       	ldi	r22, 0x0A	; 10
     528:	70 e0       	ldi	r23, 0x00	; 0
     52a:	42 e7       	ldi	r20, 0x72	; 114
     52c:	51 e0       	ldi	r21, 0x01	; 1
     52e:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <effect_snow>
		break;
     532:	08 c0       	rjmp	.+16     	; 0x544 <launch_effect+0x226>
		
		case 17:
		effect_blink(1,10,10);
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	6a e0       	ldi	r22, 0x0A	; 10
     53a:	70 e0       	ldi	r23, 0x00	; 0
     53c:	4a e0       	ldi	r20, 0x0A	; 10
     53e:	50 e0       	ldi	r21, 0x00	; 0
     540:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <effect_blink>
		break;
	
	}
}
     544:	6e 96       	adiw	r28, 0x1e	; 30
     546:	0f b6       	in	r0, 0x3f	; 63
     548:	f8 94       	cli
     54a:	de bf       	out	0x3e, r29	; 62
     54c:	0f be       	out	0x3f, r0	; 63
     54e:	cd bf       	out	0x3d, r28	; 61
     550:	cf 91       	pop	r28
     552:	df 91       	pop	r29
     554:	1f 91       	pop	r17
     556:	0f 91       	pop	r16
     558:	08 95       	ret

0000055a <main>:
int main(void)
{


	//Set the layer and Y row to start drawing at
	current_layer = 0x00;
     55a:	10 92 d8 01 	sts	0x01D8, r1
	current_Yrow = 0x00;
     55e:	10 92 9a 01 	sts	0x019A, r1
	//Set effect to start with
	current_effect = 0;
     562:	10 92 b4 01 	sts	0x01B4, r1
 	
	cube_ini();
     566:	0e 94 de 00 	call	0x1bc	; 0x1bc <cube_ini>

	boot_check(100);
     56a:	84 e6       	ldi	r24, 0x64	; 100
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	0e 94 83 01 	call	0x306	; 0x306 <boot_check>
	
	while(1)
    {	
		for(current_effect=0;current_effect<18;current_effect++)
     572:	10 92 b4 01 	sts	0x01B4, r1
     576:	07 c0       	rjmp	.+14     	; 0x586 <main+0x2c>
			launch_effect(current_effect);
     578:	0e 94 8f 01 	call	0x31e	; 0x31e <launch_effect>

	boot_check(100);
	
	while(1)
    {	
		for(current_effect=0;current_effect<18;current_effect++)
     57c:	80 91 b4 01 	lds	r24, 0x01B4
     580:	8f 5f       	subi	r24, 0xFF	; 255
     582:	80 93 b4 01 	sts	0x01B4, r24
     586:	80 91 b4 01 	lds	r24, 0x01B4
     58a:	82 31       	cpi	r24, 0x12	; 18
     58c:	a8 f3       	brcs	.-22     	; 0x578 <main+0x1e>
     58e:	f1 cf       	rjmp	.-30     	; 0x572 <main+0x18>

00000590 <fill.clone.0>:
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
     594:	fc 01       	movw	r30, r24
     596:	ee 0f       	add	r30, r30
     598:	ff 1f       	adc	r31, r31
     59a:	ee 0f       	add	r30, r30
     59c:	ff 1f       	adc	r31, r31
     59e:	e8 0f       	add	r30, r24
     5a0:	f9 1f       	adc	r31, r25
     5a2:	e6 54       	subi	r30, 0x46	; 70
     5a4:	fe 4f       	sbci	r31, 0xFE	; 254
     5a6:	10 82       	st	Z, r1
     5a8:	11 82       	std	Z+1, r1	; 0x01
     5aa:	12 82       	std	Z+2, r1	; 0x02
     5ac:	13 82       	std	Z+3, r1	; 0x03
     5ae:	14 82       	std	Z+4, r1	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
     5b0:	01 96       	adiw	r24, 0x01	; 1
     5b2:	85 30       	cpi	r24, 0x05	; 5
     5b4:	91 05       	cpc	r25, r1
     5b6:	71 f7       	brne	.-36     	; 0x594 <fill.clone.0+0x4>
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
		}
	}
}
     5b8:	08 95       	ret

000005ba <inrange>:
}

// This function validates that we are drawing inside the cube.
unsigned char inrange(int x, int y, int z)
{
	if (x >= 0 && x < 5 && y >= 0 && y < 5 && z >= 0 && z < 5){
     5ba:	85 30       	cpi	r24, 0x05	; 5
     5bc:	91 05       	cpc	r25, r1
     5be:	58 f4       	brcc	.+22     	; 0x5d6 <inrange+0x1c>
     5c0:	77 fd       	sbrc	r23, 7
     5c2:	09 c0       	rjmp	.+18     	; 0x5d6 <inrange+0x1c>
     5c4:	65 30       	cpi	r22, 0x05	; 5
     5c6:	71 05       	cpc	r23, r1
     5c8:	34 f4       	brge	.+12     	; 0x5d6 <inrange+0x1c>
     5ca:	57 fd       	sbrc	r21, 7
     5cc:	06 c0       	rjmp	.+12     	; 0x5da <inrange+0x20>
		return 0x00;
	}
}

// This function validates that we are drawing inside the cube.
unsigned char inrange(int x, int y, int z)
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	45 30       	cpi	r20, 0x05	; 5
     5d2:	51 05       	cpc	r21, r1
     5d4:	1c f0       	brlt	.+6      	; 0x5dc <inrange+0x22>
	if (x >= 0 && x < 5 && y >= 0 && y < 5 && z >= 0 && z < 5){
		return 0x01;
	} 
	else{
		// One of the coordinates was outside the cube.
		return 0x00;
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	08 95       	ret
     5da:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     5dc:	08 95       	ret

000005de <getLED>:
	if (inrange(x, y, z)) cube[z][y] &= ~(1 << x);
}

// Get the current status of a LED
unsigned char getLED(int x, int y, int z)
{
     5de:	ff 92       	push	r15
     5e0:	0f 93       	push	r16
     5e2:	1f 93       	push	r17
     5e4:	cf 93       	push	r28
     5e6:	df 93       	push	r29
     5e8:	f8 2e       	mov	r15, r24
     5ea:	8b 01       	movw	r16, r22
     5ec:	ea 01       	movw	r28, r20
	if (inrange(x, y, z)){
     5ee:	0e 94 dd 02 	call	0x5ba	; 0x5ba <inrange>
     5f2:	88 23       	and	r24, r24
     5f4:	a1 f0       	breq	.+40     	; 0x61e <getLED+0x40>
		if (cube[z][y] & (1 << x)){
     5f6:	fe 01       	movw	r30, r28
     5f8:	ee 0f       	add	r30, r30
     5fa:	ff 1f       	adc	r31, r31
     5fc:	ee 0f       	add	r30, r30
     5fe:	ff 1f       	adc	r31, r31
     600:	ec 0f       	add	r30, r28
     602:	fd 1f       	adc	r31, r29
     604:	e0 0f       	add	r30, r16
     606:	f1 1f       	adc	r31, r17
     608:	e6 54       	subi	r30, 0x46	; 70
     60a:	fe 4f       	sbci	r31, 0xFE	; 254
     60c:	80 81       	ld	r24, Z
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	02 c0       	rjmp	.+4      	; 0x616 <getLED+0x38>
     612:	95 95       	asr	r25
     614:	87 95       	ror	r24
     616:	fa 94       	dec	r15
     618:	e2 f7       	brpl	.-8      	; 0x612 <getLED+0x34>
			return 0x01;
     61a:	81 70       	andi	r24, 0x01	; 1
     61c:	01 c0       	rjmp	.+2      	; 0x620 <getLED+0x42>
		else{
			return 0x00;
		}
	}
	else{
		return 0x00;
     61e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     620:	df 91       	pop	r29
     622:	cf 91       	pop	r28
     624:	1f 91       	pop	r17
     626:	0f 91       	pop	r16
     628:	ff 90       	pop	r15
     62a:	08 95       	ret

0000062c <clrLED>:
	if (inrange(x, y, z)) cube[z][y] |= (1 << x);
}

// Clear a voxel (LED) in the cube buffer
void clrLED(int x, int y, int z)
{
     62c:	ff 92       	push	r15
     62e:	0f 93       	push	r16
     630:	1f 93       	push	r17
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
     636:	f8 2e       	mov	r15, r24
     638:	8b 01       	movw	r16, r22
     63a:	ea 01       	movw	r28, r20
	if (inrange(x, y, z)) cube[z][y] &= ~(1 << x);
     63c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <inrange>
     640:	88 23       	and	r24, r24
     642:	b1 f0       	breq	.+44     	; 0x670 <clrLED+0x44>
     644:	fe 01       	movw	r30, r28
     646:	ee 0f       	add	r30, r30
     648:	ff 1f       	adc	r31, r31
     64a:	ee 0f       	add	r30, r30
     64c:	ff 1f       	adc	r31, r31
     64e:	ec 0f       	add	r30, r28
     650:	fd 1f       	adc	r31, r29
     652:	e0 0f       	add	r30, r16
     654:	f1 1f       	adc	r31, r17
     656:	e6 54       	subi	r30, 0x46	; 70
     658:	fe 4f       	sbci	r31, 0xFE	; 254
     65a:	20 81       	ld	r18, Z
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	02 c0       	rjmp	.+4      	; 0x666 <clrLED+0x3a>
     662:	88 0f       	add	r24, r24
     664:	99 1f       	adc	r25, r25
     666:	fa 94       	dec	r15
     668:	e2 f7       	brpl	.-8      	; 0x662 <clrLED+0x36>
     66a:	80 95       	com	r24
     66c:	82 23       	and	r24, r18
     66e:	80 83       	st	Z, r24
}
     670:	df 91       	pop	r29
     672:	cf 91       	pop	r28
     674:	1f 91       	pop	r17
     676:	0f 91       	pop	r16
     678:	ff 90       	pop	r15
     67a:	08 95       	ret

0000067c <setLED>:
// Voxel comes from volumetric and pixel. It describes a data point of 3D grid graphic
// Voxel == 1 LED in the 3D cube grid
// Set a voxel (LED) in the cube buffer

void setLED(int x, int y, int z)
{ 
     67c:	ff 92       	push	r15
     67e:	0f 93       	push	r16
     680:	1f 93       	push	r17
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
     686:	f8 2e       	mov	r15, r24
     688:	8b 01       	movw	r16, r22
     68a:	ea 01       	movw	r28, r20
	if (inrange(x, y, z)) cube[z][y] |= (1 << x);
     68c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <inrange>
     690:	88 23       	and	r24, r24
     692:	a9 f0       	breq	.+42     	; 0x6be <setLED+0x42>
     694:	fe 01       	movw	r30, r28
     696:	ee 0f       	add	r30, r30
     698:	ff 1f       	adc	r31, r31
     69a:	ee 0f       	add	r30, r30
     69c:	ff 1f       	adc	r31, r31
     69e:	ec 0f       	add	r30, r28
     6a0:	fd 1f       	adc	r31, r29
     6a2:	e0 0f       	add	r30, r16
     6a4:	f1 1f       	adc	r31, r17
     6a6:	e6 54       	subi	r30, 0x46	; 70
     6a8:	fe 4f       	sbci	r31, 0xFE	; 254
     6aa:	20 81       	ld	r18, Z
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <setLED+0x3a>
     6b2:	88 0f       	add	r24, r24
     6b4:	99 1f       	adc	r25, r25
     6b6:	fa 94       	dec	r15
     6b8:	e2 f7       	brpl	.-8      	; 0x6b2 <setLED+0x36>
     6ba:	28 2b       	or	r18, r24
     6bc:	20 83       	st	Z, r18
}
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	1f 91       	pop	r17
     6c4:	0f 91       	pop	r16
     6c6:	ff 90       	pop	r15
     6c8:	08 95       	ret

000006ca <alterLED>:
// Alter the state of  a voxel in the cube buffer
// This function was made in order to make set and clr versions
// of other functions without writing two almost identical functions
void alterLED(int x, int y, int z, int state)
{
	if (state == 1){
     6ca:	21 30       	cpi	r18, 0x01	; 1
     6cc:	31 05       	cpc	r19, r1
     6ce:	19 f4       	brne	.+6      	; 0x6d6 <alterLED+0xc>
		setLED(x,y,z);
     6d0:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
     6d4:	08 95       	ret
	} 
	else{
		clrLED(x,y,z);
     6d6:	0e 94 16 03 	call	0x62c	; 0x62c <clrLED>
     6da:	08 95       	ret

000006dc <flpLED>:
}

// Flip the state of a LED.
// If the voxel in the buffer is 1, its turned into a 0, and vice versa.
void flpLED(int x, int y, int z)
{
     6dc:	ff 92       	push	r15
     6de:	0f 93       	push	r16
     6e0:	1f 93       	push	r17
     6e2:	cf 93       	push	r28
     6e4:	df 93       	push	r29
     6e6:	f8 2e       	mov	r15, r24
     6e8:	8b 01       	movw	r16, r22
     6ea:	ea 01       	movw	r28, r20
	if (inrange(x, y, z)) cube[z][y] ^= (1 << x);
     6ec:	0e 94 dd 02 	call	0x5ba	; 0x5ba <inrange>
     6f0:	88 23       	and	r24, r24
     6f2:	a9 f0       	breq	.+42     	; 0x71e <flpLED+0x42>
     6f4:	fe 01       	movw	r30, r28
     6f6:	ee 0f       	add	r30, r30
     6f8:	ff 1f       	adc	r31, r31
     6fa:	ee 0f       	add	r30, r30
     6fc:	ff 1f       	adc	r31, r31
     6fe:	ec 0f       	add	r30, r28
     700:	fd 1f       	adc	r31, r29
     702:	e0 0f       	add	r30, r16
     704:	f1 1f       	adc	r31, r17
     706:	e6 54       	subi	r30, 0x46	; 70
     708:	fe 4f       	sbci	r31, 0xFE	; 254
     70a:	20 81       	ld	r18, Z
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	02 c0       	rjmp	.+4      	; 0x716 <flpLED+0x3a>
     712:	88 0f       	add	r24, r24
     714:	99 1f       	adc	r25, r25
     716:	fa 94       	dec	r15
     718:	e2 f7       	brpl	.-8      	; 0x712 <flpLED+0x36>
     71a:	28 27       	eor	r18, r24
     71c:	20 83       	st	Z, r18
}
     71e:	df 91       	pop	r29
     720:	cf 91       	pop	r28
     722:	1f 91       	pop	r17
     724:	0f 91       	pop	r16
     726:	ff 90       	pop	r15
     728:	08 95       	ret

0000072a <setplane_z>:
// i.e. draws a horizonal plane on a given level (z)
void setplane_z (int z)
{
	int y;
	// Loop the 5 rows on the given level and write 1 to the bits.
	for(y = 0 ; y < 5 ; y++) cube[z][y] = 0x1f;
     72a:	fc 01       	movw	r30, r24
     72c:	ee 0f       	add	r30, r30
     72e:	ff 1f       	adc	r31, r31
     730:	ee 0f       	add	r30, r30
     732:	ff 1f       	adc	r31, r31
     734:	e8 0f       	add	r30, r24
     736:	f9 1f       	adc	r31, r25
     738:	e6 54       	subi	r30, 0x46	; 70
     73a:	fe 4f       	sbci	r31, 0xFE	; 254
     73c:	8f e1       	ldi	r24, 0x1F	; 31
     73e:	80 83       	st	Z, r24
     740:	81 83       	std	Z+1, r24	; 0x01
     742:	82 83       	std	Z+2, r24	; 0x02
     744:	83 83       	std	Z+3, r24	; 0x03
     746:	84 83       	std	Z+4, r24	; 0x04
}
     748:	08 95       	ret

0000074a <clrplane_z>:

// Clears all the leds on X and Y for a given Z
void clrplane_z (int z)
{
	int y;
	for(y = 0 ; y < 5 ; y++) cube[z][y] = 0x00;
     74a:	fc 01       	movw	r30, r24
     74c:	ee 0f       	add	r30, r30
     74e:	ff 1f       	adc	r31, r31
     750:	ee 0f       	add	r30, r30
     752:	ff 1f       	adc	r31, r31
     754:	e8 0f       	add	r30, r24
     756:	f9 1f       	adc	r31, r25
     758:	e6 54       	subi	r30, 0x46	; 70
     75a:	fe 4f       	sbci	r31, 0xFE	; 254
     75c:	10 82       	st	Z, r1
     75e:	11 82       	std	Z+1, r1	; 0x01
     760:	12 82       	std	Z+2, r1	; 0x02
     762:	13 82       	std	Z+3, r1	; 0x03
     764:	14 82       	std	Z+4, r1	; 0x04
}
     766:	08 95       	ret

00000768 <setplane_x>:
	// the actual bits in each row of each layer
	// We loop them all, and set the apropriate bit.
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
			// Set a bit, and shift it inwards to the right X
			cube[z][y] |= (1 << x);
     768:	21 e0       	ldi	r18, 0x01	; 1
     76a:	30 e0       	ldi	r19, 0x00	; 0
     76c:	02 c0       	rjmp	.+4      	; 0x772 <setplane_x+0xa>
     76e:	22 0f       	add	r18, r18
     770:	33 1f       	adc	r19, r19
     772:	8a 95       	dec	r24
     774:	e2 f7       	brpl	.-8      	; 0x76e <setplane_x+0x6>
	int z;
	int y;
	// Since coordinates along the X axis are
	// the actual bits in each row of each layer
	// We loop them all, and set the apropriate bit.
	for(z = 0 ; z < 5 ; z++){
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	11 c0       	rjmp	.+34     	; 0x79e <setplane_x+0x36>
		for(y = 0 ; y < 5 ; y++){
			// Set a bit, and shift it inwards to the right X
			cube[z][y] |= (1 << x);
     77c:	fb 01       	movw	r30, r22
     77e:	e4 0f       	add	r30, r20
     780:	f5 1f       	adc	r31, r21
     782:	e6 54       	subi	r30, 0x46	; 70
     784:	fe 4f       	sbci	r31, 0xFE	; 254
     786:	30 81       	ld	r19, Z
     788:	32 2b       	or	r19, r18
     78a:	30 83       	st	Z, r19
	int y;
	// Since coordinates along the X axis are
	// the actual bits in each row of each layer
	// We loop them all, and set the apropriate bit.
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
     78c:	4f 5f       	subi	r20, 0xFF	; 255
     78e:	5f 4f       	sbci	r21, 0xFF	; 255
     790:	45 30       	cpi	r20, 0x05	; 5
     792:	51 05       	cpc	r21, r1
     794:	99 f7       	brne	.-26     	; 0x77c <setplane_x+0x14>
	int z;
	int y;
	// Since coordinates along the X axis are
	// the actual bits in each row of each layer
	// We loop them all, and set the apropriate bit.
	for(z = 0 ; z < 5 ; z++){
     796:	01 96       	adiw	r24, 0x01	; 1
     798:	85 30       	cpi	r24, 0x05	; 5
     79a:	91 05       	cpc	r25, r1
     79c:	51 f0       	breq	.+20     	; 0x7b2 <setplane_x+0x4a>
	for(y = 0 ; y < 5 ; y++) cube[z][y] = 0x00;
}

// Sets all the leds on Y and Z for a given X
void setplane_x (int x)
{
     79e:	40 e0       	ldi	r20, 0x00	; 0
     7a0:	50 e0       	ldi	r21, 0x00	; 0
	// the actual bits in each row of each layer
	// We loop them all, and set the apropriate bit.
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
			// Set a bit, and shift it inwards to the right X
			cube[z][y] |= (1 << x);
     7a2:	bc 01       	movw	r22, r24
     7a4:	66 0f       	add	r22, r22
     7a6:	77 1f       	adc	r23, r23
     7a8:	66 0f       	add	r22, r22
     7aa:	77 1f       	adc	r23, r23
     7ac:	68 0f       	add	r22, r24
     7ae:	79 1f       	adc	r23, r25
     7b0:	e5 cf       	rjmp	.-54     	; 0x77c <setplane_x+0x14>
     7b2:	08 95       	ret

000007b4 <clrplane_x>:
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
			cube[z][y] &= ~(1 << x);
     7b4:	21 e0       	ldi	r18, 0x01	; 1
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	02 c0       	rjmp	.+4      	; 0x7be <clrplane_x+0xa>
     7ba:	22 0f       	add	r18, r18
     7bc:	33 1f       	adc	r19, r19
     7be:	8a 95       	dec	r24
     7c0:	e2 f7       	brpl	.-8      	; 0x7ba <clrplane_x+0x6>
     7c2:	20 95       	com	r18
// Clear all the leds on Y and Z for a given X
void clrplane_x (int x)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	11 c0       	rjmp	.+34     	; 0x7ec <clrplane_x+0x38>
		for(y = 0 ; y < 5 ; y++){
			cube[z][y] &= ~(1 << x);
     7ca:	fb 01       	movw	r30, r22
     7cc:	e4 0f       	add	r30, r20
     7ce:	f5 1f       	adc	r31, r21
     7d0:	e6 54       	subi	r30, 0x46	; 70
     7d2:	fe 4f       	sbci	r31, 0xFE	; 254
     7d4:	30 81       	ld	r19, Z
     7d6:	32 23       	and	r19, r18
     7d8:	30 83       	st	Z, r19
void clrplane_x (int x)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
     7da:	4f 5f       	subi	r20, 0xFF	; 255
     7dc:	5f 4f       	sbci	r21, 0xFF	; 255
     7de:	45 30       	cpi	r20, 0x05	; 5
     7e0:	51 05       	cpc	r21, r1
     7e2:	99 f7       	brne	.-26     	; 0x7ca <clrplane_x+0x16>
// Clear all the leds on Y and Z for a given X
void clrplane_x (int x)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
     7e4:	01 96       	adiw	r24, 0x01	; 1
     7e6:	85 30       	cpi	r24, 0x05	; 5
     7e8:	91 05       	cpc	r25, r1
     7ea:	51 f0       	breq	.+20     	; 0x800 <clrplane_x+0x4c>
	}
}

// Clear all the leds on Y and Z for a given X
void clrplane_x (int x)
{
     7ec:	40 e0       	ldi	r20, 0x00	; 0
     7ee:	50 e0       	ldi	r21, 0x00	; 0
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
		for(y = 0 ; y < 5 ; y++){
			cube[z][y] &= ~(1 << x);
     7f0:	bc 01       	movw	r22, r24
     7f2:	66 0f       	add	r22, r22
     7f4:	77 1f       	adc	r23, r23
     7f6:	66 0f       	add	r22, r22
     7f8:	77 1f       	adc	r23, r23
     7fa:	68 0f       	add	r22, r24
     7fc:	79 1f       	adc	r23, r25
     7fe:	e5 cf       	rjmp	.-54     	; 0x7ca <clrplane_x+0x16>
     800:	08 95       	ret

00000802 <setplane_y>:

// Sets all the leds on X and Z for a given Y
void setplane_y (int y)
{
	int z;
	for (z = 0 ; z < 5 ; z++) cube[z][y] = 0x1f; 
     802:	fc 01       	movw	r30, r24
     804:	e6 54       	subi	r30, 0x46	; 70
     806:	fe 4f       	sbci	r31, 0xFE	; 254
     808:	8f e1       	ldi	r24, 0x1F	; 31
     80a:	80 83       	st	Z, r24
     80c:	85 83       	std	Z+5, r24	; 0x05
     80e:	82 87       	std	Z+10, r24	; 0x0a
     810:	87 87       	std	Z+15, r24	; 0x0f
     812:	84 8b       	std	Z+20, r24	; 0x14
}
     814:	08 95       	ret

00000816 <clrplane_y>:

// Sets all the leds on X and Z for a given Y
void clrplane_y (int y)
{
	int z;
	for(z = 0 ; z < 5 ; z++) cube[z][y] = 0x00; 
     816:	fc 01       	movw	r30, r24
     818:	e6 54       	subi	r30, 0x46	; 70
     81a:	fe 4f       	sbci	r31, 0xFE	; 254
     81c:	10 82       	st	Z, r1
     81e:	15 82       	std	Z+5, r1	; 0x05
     820:	12 86       	std	Z+10, r1	; 0x0a
     822:	17 86       	std	Z+15, r1	; 0x0f
     824:	14 8a       	std	Z+20, r1	; 0x14
}
     826:	08 95       	ret

00000828 <setplane>:

// Set a plane using the functions above
void setplane(unsigned char plane, int i, int state)
{
     828:	28 2f       	mov	r18, r24
     82a:	cb 01       	movw	r24, r22
	if (plane == 'x'){
     82c:	28 37       	cpi	r18, 0x78	; 120
     82e:	49 f4       	brne	.+18     	; 0x842 <setplane+0x1a>
		if (state > 0){
     830:	14 16       	cp	r1, r20
     832:	15 06       	cpc	r1, r21
     834:	1c f4       	brge	.+6      	; 0x83c <setplane+0x14>
			setplane_x(i);
     836:	0e 94 b4 03 	call	0x768	; 0x768 <setplane_x>
     83a:	08 95       	ret
		} 
		else{
			clrplane_x(i);
     83c:	0e 94 da 03 	call	0x7b4	; 0x7b4 <clrplane_x>
     840:	08 95       	ret
		}
	}
	
	if (plane == 'y'){
     842:	29 37       	cpi	r18, 0x79	; 121
     844:	49 f4       	brne	.+18     	; 0x858 <setplane+0x30>
		if (state > 0){
     846:	14 16       	cp	r1, r20
     848:	15 06       	cpc	r1, r21
     84a:	1c f4       	brge	.+6      	; 0x852 <setplane+0x2a>
			setplane_y(i);
     84c:	0e 94 01 04 	call	0x802	; 0x802 <setplane_y>
     850:	08 95       	ret
		} 
		else{
			clrplane_y(i);
     852:	0e 94 0b 04 	call	0x816	; 0x816 <clrplane_y>
     856:	08 95       	ret
		}
	}
	
	if (plane == 'z'){
     858:	2a 37       	cpi	r18, 0x7A	; 122
     85a:	41 f4       	brne	.+16     	; 0x86c <__stack+0xd>
		if (state > 0){
     85c:	14 16       	cp	r1, r20
     85e:	15 06       	cpc	r1, r21
     860:	1c f4       	brge	.+6      	; 0x868 <__stack+0x9>
			setplane_z(i);
     862:	0e 94 95 03 	call	0x72a	; 0x72a <setplane_z>
     866:	08 95       	ret
		} 
		else{
			clrplane_z(i);
     868:	0e 94 a5 03 	call	0x74a	; 0x74a <clrplane_z>
     86c:	08 95       	ret

0000086e <line_z>:

// Draw a line along the Z axis
// state=0 clears a line of voxels,
// state=1 sets a line of voxels.
void line_z(int x, int y, int z1, int z2, int state)
{
     86e:	af 92       	push	r10
     870:	bf 92       	push	r11
     872:	cf 92       	push	r12
     874:	df 92       	push	r13
     876:	ef 92       	push	r14
     878:	ff 92       	push	r15
     87a:	0f 93       	push	r16
     87c:	1f 93       	push	r17
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	5c 01       	movw	r10, r24
     884:	6b 01       	movw	r12, r22
     886:	79 01       	movw	r14, r18
	
	if (z1>z2){
     888:	24 17       	cp	r18, r20
     88a:	35 07       	cpc	r19, r21
     88c:	34 f4       	brge	.+12     	; 0x89a <line_z+0x2c>
     88e:	34 2f       	mov	r19, r20
     890:	25 2f       	mov	r18, r21
     892:	a7 01       	movw	r20, r14
     894:	c9 01       	movw	r24, r18
     896:	e9 2e       	mov	r14, r25
     898:	f8 2e       	mov	r15, r24
		tmp = z1;
		z1= z2;
		z2 = tmp;
	}
	int i;
	for (i=z1;i<=z2;i++){
     89a:	ea 01       	movw	r28, r20
     89c:	07 c0       	rjmp	.+14     	; 0x8ac <line_z+0x3e>
		alterLED(x,y,i,state);
     89e:	c5 01       	movw	r24, r10
     8a0:	b6 01       	movw	r22, r12
     8a2:	ae 01       	movw	r20, r28
     8a4:	98 01       	movw	r18, r16
     8a6:	0e 94 65 03 	call	0x6ca	; 0x6ca <alterLED>
		tmp = z1;
		z1= z2;
		z2 = tmp;
	}
	int i;
	for (i=z1;i<=z2;i++){
     8aa:	21 96       	adiw	r28, 0x01	; 1
     8ac:	ec 16       	cp	r14, r28
     8ae:	fd 06       	cpc	r15, r29
     8b0:	b4 f7       	brge	.-20     	; 0x89e <line_z+0x30>
		alterLED(x,y,i,state);
	}
}
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	1f 91       	pop	r17
     8b8:	0f 91       	pop	r16
     8ba:	ff 90       	pop	r15
     8bc:	ef 90       	pop	r14
     8be:	df 90       	pop	r13
     8c0:	cf 90       	pop	r12
     8c2:	bf 90       	pop	r11
     8c4:	af 90       	pop	r10
     8c6:	08 95       	ret

000008c8 <line_x>:

// Draw a line along the X axis
void line_x(int z, int y, int x1, int x2, int state)
{
     8c8:	af 92       	push	r10
     8ca:	bf 92       	push	r11
     8cc:	cf 92       	push	r12
     8ce:	df 92       	push	r13
     8d0:	ef 92       	push	r14
     8d2:	ff 92       	push	r15
     8d4:	0f 93       	push	r16
     8d6:	1f 93       	push	r17
     8d8:	cf 93       	push	r28
     8da:	df 93       	push	r29
     8dc:	5c 01       	movw	r10, r24
     8de:	6b 01       	movw	r12, r22
     8e0:	79 01       	movw	r14, r18
	if (x1>x2){
     8e2:	24 17       	cp	r18, r20
     8e4:	35 07       	cpc	r19, r21
     8e6:	34 f4       	brge	.+12     	; 0x8f4 <line_x+0x2c>
     8e8:	34 2f       	mov	r19, r20
     8ea:	25 2f       	mov	r18, r21
     8ec:	a7 01       	movw	r20, r14
     8ee:	c9 01       	movw	r24, r18
     8f0:	e9 2e       	mov	r14, r25
     8f2:	f8 2e       	mov	r15, r24
		tmp = x1;
		x1= x2;
		x2 = tmp;
	}
	int i;
	for (i=x1;i<=x2;i++){
     8f4:	ea 01       	movw	r28, r20
     8f6:	07 c0       	rjmp	.+14     	; 0x906 <line_x+0x3e>
		alterLED(i,y,z,state);
     8f8:	ce 01       	movw	r24, r28
     8fa:	b6 01       	movw	r22, r12
     8fc:	a5 01       	movw	r20, r10
     8fe:	98 01       	movw	r18, r16
     900:	0e 94 65 03 	call	0x6ca	; 0x6ca <alterLED>
		tmp = x1;
		x1= x2;
		x2 = tmp;
	}
	int i;
	for (i=x1;i<=x2;i++){
     904:	21 96       	adiw	r28, 0x01	; 1
     906:	ec 16       	cp	r14, r28
     908:	fd 06       	cpc	r15, r29
     90a:	b4 f7       	brge	.-20     	; 0x8f8 <line_x+0x30>
		alterLED(i,y,z,state);
	}
}
     90c:	df 91       	pop	r29
     90e:	cf 91       	pop	r28
     910:	1f 91       	pop	r17
     912:	0f 91       	pop	r16
     914:	ff 90       	pop	r15
     916:	ef 90       	pop	r14
     918:	df 90       	pop	r13
     91a:	cf 90       	pop	r12
     91c:	bf 90       	pop	r11
     91e:	af 90       	pop	r10
     920:	08 95       	ret

00000922 <line_y>:

// Draw a line along the Y axis.
void line_y(int z, int x, int y1, int y2, int state)
{
     922:	af 92       	push	r10
     924:	bf 92       	push	r11
     926:	cf 92       	push	r12
     928:	df 92       	push	r13
     92a:	ef 92       	push	r14
     92c:	ff 92       	push	r15
     92e:	0f 93       	push	r16
     930:	1f 93       	push	r17
     932:	cf 93       	push	r28
     934:	df 93       	push	r29
     936:	5c 01       	movw	r10, r24
     938:	6b 01       	movw	r12, r22
     93a:	79 01       	movw	r14, r18
	if (y1>y2){
     93c:	24 17       	cp	r18, r20
     93e:	35 07       	cpc	r19, r21
     940:	34 f4       	brge	.+12     	; 0x94e <line_y+0x2c>
     942:	34 2f       	mov	r19, r20
     944:	25 2f       	mov	r18, r21
     946:	a7 01       	movw	r20, r14
     948:	c9 01       	movw	r24, r18
     94a:	e9 2e       	mov	r14, r25
     94c:	f8 2e       	mov	r15, r24
		tmp = y1;
		y1= y2;
		y2 = tmp;
	}
	int i;
	for (i=y1;i<=y2;i++){
     94e:	ea 01       	movw	r28, r20
     950:	07 c0       	rjmp	.+14     	; 0x960 <line_y+0x3e>
			alterLED(x,i,z,state);
     952:	c6 01       	movw	r24, r12
     954:	be 01       	movw	r22, r28
     956:	a5 01       	movw	r20, r10
     958:	98 01       	movw	r18, r16
     95a:	0e 94 65 03 	call	0x6ca	; 0x6ca <alterLED>
		tmp = y1;
		y1= y2;
		y2 = tmp;
	}
	int i;
	for (i=y1;i<=y2;i++){
     95e:	21 96       	adiw	r28, 0x01	; 1
     960:	ec 16       	cp	r14, r28
     962:	fd 06       	cpc	r15, r29
     964:	b4 f7       	brge	.-20     	; 0x952 <line_y+0x30>
			alterLED(x,i,z,state);
	}
}
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28
     96a:	1f 91       	pop	r17
     96c:	0f 91       	pop	r16
     96e:	ff 90       	pop	r15
     970:	ef 90       	pop	r14
     972:	df 90       	pop	r13
     974:	cf 90       	pop	r12
     976:	bf 90       	pop	r11
     978:	af 90       	pop	r10
     97a:	08 95       	ret

0000097c <drawline_plane>:

// Draws a plane on any diagonal angle
// unsigned char anchor is the plane that is constant. ("x","y", or "z")
void drawline_plane(int x2, int y2, int x1, int y1,unsigned char anchor){
     97c:	2f 92       	push	r2
     97e:	3f 92       	push	r3
     980:	4f 92       	push	r4
     982:	5f 92       	push	r5
     984:	7f 92       	push	r7
     986:	8f 92       	push	r8
     988:	9f 92       	push	r9
     98a:	af 92       	push	r10
     98c:	bf 92       	push	r11
     98e:	cf 92       	push	r12
     990:	df 92       	push	r13
     992:	ef 92       	push	r14
     994:	ff 92       	push	r15
     996:	0f 93       	push	r16
     998:	1f 93       	push	r17
     99a:	df 93       	push	r29
     99c:	cf 93       	push	r28
     99e:	00 d0       	rcall	.+0      	; 0x9a0 <drawline_plane+0x24>
     9a0:	00 d0       	rcall	.+0      	; 0x9a2 <drawline_plane+0x26>
     9a2:	00 d0       	rcall	.+0      	; 0x9a4 <drawline_plane+0x28>
     9a4:	cd b7       	in	r28, 0x3d	; 61
     9a6:	de b7       	in	r29, 0x3e	; 62
     9a8:	5a 01       	movw	r10, r20
     9aa:	3e 83       	std	Y+6, r19	; 0x06
     9ac:	2d 83       	std	Y+5, r18	; 0x05
     9ae:	70 2e       	mov	r7, r16
	int deltax = abs(x2 - x1);        // The difference between the x's
     9b0:	fc 01       	movw	r30, r24
     9b2:	e4 1b       	sub	r30, r20
     9b4:	f5 0b       	sbc	r31, r21
     9b6:	f7 ff       	sbrs	r31, 7
     9b8:	03 c0       	rjmp	.+6      	; 0x9c0 <drawline_plane+0x44>
     9ba:	f0 95       	com	r31
     9bc:	e1 95       	neg	r30
     9be:	ff 4f       	sbci	r31, 0xFF	; 255
	int deltay = abs(y2 - y1);        // The difference between the y's
     9c0:	9b 01       	movw	r18, r22
     9c2:	4d 81       	ldd	r20, Y+5	; 0x05
     9c4:	5e 81       	ldd	r21, Y+6	; 0x06
     9c6:	24 1b       	sub	r18, r20
     9c8:	35 0b       	sbc	r19, r21
     9ca:	37 ff       	sbrs	r19, 7
     9cc:	03 c0       	rjmp	.+6      	; 0x9d4 <drawline_plane+0x58>
     9ce:	30 95       	com	r19
     9d0:	21 95       	neg	r18
     9d2:	3f 4f       	sbci	r19, 0xFF	; 255
	int den;
	int num;
	int numadd;
	int numpixels;
	
	if (x2 >= x1){                 // The x-values are increasing
     9d4:	8a 15       	cp	r24, r10
     9d6:	9b 05       	cpc	r25, r11
     9d8:	24 f0       	brlt	.+8      	; 0x9e2 <drawline_plane+0x66>
		xinc1 = 1;
     9da:	a1 e0       	ldi	r26, 0x01	; 1
     9dc:	4a 2e       	mov	r4, r26
     9de:	51 2c       	mov	r5, r1
     9e0:	03 c0       	rjmp	.+6      	; 0x9e8 <drawline_plane+0x6c>
		xinc2 = 1;
	}
	else{                          // The x-values are decreasing
		xinc1 = -1;
     9e2:	44 24       	eor	r4, r4
     9e4:	4a 94       	dec	r4
     9e6:	54 2c       	mov	r5, r4
		xinc2 = -1;
	}
	
	if (y2 >= y1){                 // The y-values are increasing
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	9e 81       	ldd	r25, Y+6	; 0x06
     9ec:	68 17       	cp	r22, r24
     9ee:	79 07       	cpc	r23, r25
     9f0:	24 f0       	brlt	.+8      	; 0x9fa <drawline_plane+0x7e>
		yinc1 = 1;
     9f2:	51 e0       	ldi	r21, 0x01	; 1
     9f4:	85 2e       	mov	r8, r21
     9f6:	91 2c       	mov	r9, r1
     9f8:	03 c0       	rjmp	.+6      	; 0xa00 <drawline_plane+0x84>
		yinc2 = 1;
	}
	else{                          // The y-values are decreasing
		yinc1 = -1;
     9fa:	88 24       	eor	r8, r8
     9fc:	8a 94       	dec	r8
     9fe:	98 2c       	mov	r9, r8
		yinc2 = -1;
	}
	
	if (deltax >= deltay){         // There is at least one x-value for every y-value
     a00:	e2 17       	cp	r30, r18
     a02:	f3 07       	cpc	r31, r19
     a04:	6c f0       	brlt	.+26     	; 0xa20 <drawline_plane+0xa4>
		xinc1 = 0;                  // Don't change the x when numerator >= denominator
		yinc2 = 0;                  // Don't change the y for every iteration
		den = deltax;
		num = deltax / 2;
     a06:	7f 01       	movw	r14, r30
     a08:	f5 94       	asr	r15
     a0a:	e7 94       	ror	r14
     a0c:	3c 83       	std	Y+4, r19	; 0x04
     a0e:	2b 83       	std	Y+3, r18	; 0x03
     a10:	6f 01       	movw	r12, r30
     a12:	5a 82       	std	Y+2, r5	; 0x02
     a14:	49 82       	std	Y+1, r4	; 0x01
		yinc2 = -1;
	}
	
	if (deltax >= deltay){         // There is at least one x-value for every y-value
		xinc1 = 0;                  // Don't change the x when numerator >= denominator
		yinc2 = 0;                  // Don't change the y for every iteration
     a16:	22 24       	eor	r2, r2
     a18:	33 24       	eor	r3, r3
		yinc1 = -1;
		yinc2 = -1;
	}
	
	if (deltax >= deltay){         // There is at least one x-value for every y-value
		xinc1 = 0;                  // Don't change the x when numerator >= denominator
     a1a:	44 24       	eor	r4, r4
     a1c:	55 24       	eor	r5, r5
     a1e:	0e c0       	rjmp	.+28     	; 0xa3c <drawline_plane+0xc0>
	}
	else{                          // There is at least one y-value for every x-value
		xinc2 = 0;                  // Don't change the x for every iteration
		yinc1 = 0;                  // Don't change the y when numerator >= denominator
		den = deltay;
		num = deltay / 2;
     a20:	c9 01       	movw	r24, r18
     a22:	62 e0       	ldi	r22, 0x02	; 2
     a24:	70 e0       	ldi	r23, 0x00	; 0
     a26:	0e 94 26 29 	call	0x524c	; 0x524c <__divmodhi4>
     a2a:	7b 01       	movw	r14, r22
     a2c:	fc 83       	std	Y+4, r31	; 0x04
     a2e:	eb 83       	std	Y+3, r30	; 0x03
     a30:	69 01       	movw	r12, r18
     a32:	14 01       	movw	r2, r8
		numadd = deltay;
		numpixels = deltax;         // There are more x-values than y-values
	}
	else{                          // There is at least one y-value for every x-value
		xinc2 = 0;                  // Don't change the x for every iteration
		yinc1 = 0;                  // Don't change the y when numerator >= denominator
     a34:	88 24       	eor	r8, r8
     a36:	99 24       	eor	r9, r9
		num = deltax / 2;
		numadd = deltay;
		numpixels = deltax;         // There are more x-values than y-values
	}
	else{                          // There is at least one y-value for every x-value
		xinc2 = 0;                  // Don't change the x for every iteration
     a38:	1a 82       	std	Y+2, r1	; 0x02
     a3a:	19 82       	std	Y+1, r1	; 0x01
		num = deltay / 2;
		numadd = deltax;
		numpixels = deltay;         // There are more y-values than x-values
	}
	int curpixel;
	for(curpixel = 0 ; curpixel <= numpixels ; curpixel++){
     a3c:	85 01       	movw	r16, r10
     a3e:	aa 24       	eor	r10, r10
     a40:	bb 24       	eor	r11, r11
     a42:	8e c0       	rjmp	.+284    	; 0xb60 <drawline_plane+0x1e4>
		if (anchor == 'z')
     a44:	97 2d       	mov	r25, r7
     a46:	9a 37       	cpi	r25, 0x7A	; 122
     a48:	11 f5       	brne	.+68     	; 0xa8e <drawline_plane+0x112>
		{
			// Draw the current pixels
			setLED(x, y, 4);
     a4a:	c8 01       	movw	r24, r16
     a4c:	6d 81       	ldd	r22, Y+5	; 0x05
     a4e:	7e 81       	ldd	r23, Y+6	; 0x06
     a50:	44 e0       	ldi	r20, 0x04	; 4
     a52:	50 e0       	ldi	r21, 0x00	; 0
     a54:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
			setLED(x, y, 3);
     a58:	c8 01       	movw	r24, r16
     a5a:	6d 81       	ldd	r22, Y+5	; 0x05
     a5c:	7e 81       	ldd	r23, Y+6	; 0x06
     a5e:	43 e0       	ldi	r20, 0x03	; 3
     a60:	50 e0       	ldi	r21, 0x00	; 0
     a62:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
			setLED(x, y, 2);
     a66:	c8 01       	movw	r24, r16
     a68:	6d 81       	ldd	r22, Y+5	; 0x05
     a6a:	7e 81       	ldd	r23, Y+6	; 0x06
     a6c:	42 e0       	ldi	r20, 0x02	; 2
     a6e:	50 e0       	ldi	r21, 0x00	; 0
     a70:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
			setLED(x, y, 1);
     a74:	c8 01       	movw	r24, r16
     a76:	6d 81       	ldd	r22, Y+5	; 0x05
     a78:	7e 81       	ldd	r23, Y+6	; 0x06
     a7a:	41 e0       	ldi	r20, 0x01	; 1
     a7c:	50 e0       	ldi	r21, 0x00	; 0
     a7e:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
			setLED(x, y, 0);
     a82:	c8 01       	movw	r24, r16
     a84:	6d 81       	ldd	r22, Y+5	; 0x05
     a86:	7e 81       	ldd	r23, Y+6	; 0x06
     a88:	40 e0       	ldi	r20, 0x00	; 0
     a8a:	50 e0       	ldi	r21, 0x00	; 0
     a8c:	49 c0       	rjmp	.+146    	; 0xb20 <drawline_plane+0x1a4>
		}
		
		if (anchor == 'x')
     a8e:	a7 2d       	mov	r26, r7
     a90:	a8 37       	cpi	r26, 0x78	; 120
     a92:	11 f5       	brne	.+68     	; 0xad8 <drawline_plane+0x15c>
		{
			// Draw the current pixels
			setLED(x, 4, y);
     a94:	c8 01       	movw	r24, r16
     a96:	64 e0       	ldi	r22, 0x04	; 4
     a98:	70 e0       	ldi	r23, 0x00	; 0
     a9a:	4d 81       	ldd	r20, Y+5	; 0x05
     a9c:	5e 81       	ldd	r21, Y+6	; 0x06
     a9e:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
			setLED(x, 3, y);
     aa2:	c8 01       	movw	r24, r16
     aa4:	63 e0       	ldi	r22, 0x03	; 3
     aa6:	70 e0       	ldi	r23, 0x00	; 0
     aa8:	4d 81       	ldd	r20, Y+5	; 0x05
     aaa:	5e 81       	ldd	r21, Y+6	; 0x06
     aac:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
			setLED(x, 2, y);
     ab0:	c8 01       	movw	r24, r16
     ab2:	62 e0       	ldi	r22, 0x02	; 2
     ab4:	70 e0       	ldi	r23, 0x00	; 0
     ab6:	4d 81       	ldd	r20, Y+5	; 0x05
     ab8:	5e 81       	ldd	r21, Y+6	; 0x06
     aba:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
			setLED(x, 1, y);
     abe:	c8 01       	movw	r24, r16
     ac0:	61 e0       	ldi	r22, 0x01	; 1
     ac2:	70 e0       	ldi	r23, 0x00	; 0
     ac4:	4d 81       	ldd	r20, Y+5	; 0x05
     ac6:	5e 81       	ldd	r21, Y+6	; 0x06
     ac8:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
			setLED(x, 0, y);
     acc:	c8 01       	movw	r24, r16
     ace:	60 e0       	ldi	r22, 0x00	; 0
     ad0:	70 e0       	ldi	r23, 0x00	; 0
     ad2:	4d 81       	ldd	r20, Y+5	; 0x05
     ad4:	5e 81       	ldd	r21, Y+6	; 0x06
     ad6:	24 c0       	rjmp	.+72     	; 0xb20 <drawline_plane+0x1a4>
		}
		
		if (anchor == 'y')
     ad8:	b7 2d       	mov	r27, r7
     ada:	b9 37       	cpi	r27, 0x79	; 121
     adc:	19 f5       	brne	.+70     	; 0xb24 <drawline_plane+0x1a8>
		{
			// Draw the current pixels
			setLED(4, y, x);
     ade:	84 e0       	ldi	r24, 0x04	; 4
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	6d 81       	ldd	r22, Y+5	; 0x05
     ae4:	7e 81       	ldd	r23, Y+6	; 0x06
     ae6:	a8 01       	movw	r20, r16
     ae8:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
			setLED(3, y, x);
     aec:	83 e0       	ldi	r24, 0x03	; 3
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	6d 81       	ldd	r22, Y+5	; 0x05
     af2:	7e 81       	ldd	r23, Y+6	; 0x06
     af4:	a8 01       	movw	r20, r16
     af6:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
			setLED(2, y, x);
     afa:	82 e0       	ldi	r24, 0x02	; 2
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	6d 81       	ldd	r22, Y+5	; 0x05
     b00:	7e 81       	ldd	r23, Y+6	; 0x06
     b02:	a8 01       	movw	r20, r16
     b04:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
			setLED(1, y, x);
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	6d 81       	ldd	r22, Y+5	; 0x05
     b0e:	7e 81       	ldd	r23, Y+6	; 0x06
     b10:	a8 01       	movw	r20, r16
     b12:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
			setLED(0, y, x);
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	6d 81       	ldd	r22, Y+5	; 0x05
     b1c:	7e 81       	ldd	r23, Y+6	; 0x06
     b1e:	a8 01       	movw	r20, r16
     b20:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
		}
		
		num += numadd;              // Increase the numerator by the top of the fraction
     b24:	eb 81       	ldd	r30, Y+3	; 0x03
     b26:	fc 81       	ldd	r31, Y+4	; 0x04
     b28:	ee 0e       	add	r14, r30
     b2a:	ff 1e       	adc	r15, r31
		if (num >= den){             // Check if numerator >= denominator
     b2c:	ec 14       	cp	r14, r12
     b2e:	fd 04       	cpc	r15, r13
     b30:	54 f0       	brlt	.+20     	; 0xb46 <drawline_plane+0x1ca>
			num -= den;               // Calculate the new numerator value
     b32:	ec 18       	sub	r14, r12
     b34:	fd 08       	sbc	r15, r13
			x += xinc1;               // Change the x as appropriate
     b36:	04 0d       	add	r16, r4
     b38:	15 1d       	adc	r17, r5
			y += yinc1;               // Change the y as appropriate
     b3a:	4d 81       	ldd	r20, Y+5	; 0x05
     b3c:	5e 81       	ldd	r21, Y+6	; 0x06
     b3e:	48 0d       	add	r20, r8
     b40:	59 1d       	adc	r21, r9
     b42:	5e 83       	std	Y+6, r21	; 0x06
     b44:	4d 83       	std	Y+5, r20	; 0x05
		}
		x += xinc2;                 // Change the x as appropriate
     b46:	89 81       	ldd	r24, Y+1	; 0x01
     b48:	9a 81       	ldd	r25, Y+2	; 0x02
     b4a:	08 0f       	add	r16, r24
     b4c:	19 1f       	adc	r17, r25
		y += yinc2;                 // Change the y as appropriate
     b4e:	ad 81       	ldd	r26, Y+5	; 0x05
     b50:	be 81       	ldd	r27, Y+6	; 0x06
     b52:	a2 0d       	add	r26, r2
     b54:	b3 1d       	adc	r27, r3
     b56:	be 83       	std	Y+6, r27	; 0x06
     b58:	ad 83       	std	Y+5, r26	; 0x05
		num = deltay / 2;
		numadd = deltax;
		numpixels = deltay;         // There are more y-values than x-values
	}
	int curpixel;
	for(curpixel = 0 ; curpixel <= numpixels ; curpixel++){
     b5a:	08 94       	sec
     b5c:	a1 1c       	adc	r10, r1
     b5e:	b1 1c       	adc	r11, r1
     b60:	ca 14       	cp	r12, r10
     b62:	db 04       	cpc	r13, r11
     b64:	0c f0       	brlt	.+2      	; 0xb68 <drawline_plane+0x1ec>
     b66:	6e cf       	rjmp	.-292    	; 0xa44 <drawline_plane+0xc8>
			y += yinc1;               // Change the y as appropriate
		}
		x += xinc2;                 // Change the x as appropriate
		y += yinc2;                 // Change the y as appropriate
	}
}
     b68:	26 96       	adiw	r28, 0x06	; 6
     b6a:	0f b6       	in	r0, 0x3f	; 63
     b6c:	f8 94       	cli
     b6e:	de bf       	out	0x3e, r29	; 62
     b70:	0f be       	out	0x3f, r0	; 63
     b72:	cd bf       	out	0x3d, r28	; 61
     b74:	cf 91       	pop	r28
     b76:	df 91       	pop	r29
     b78:	1f 91       	pop	r17
     b7a:	0f 91       	pop	r16
     b7c:	ff 90       	pop	r15
     b7e:	ef 90       	pop	r14
     b80:	df 90       	pop	r13
     b82:	cf 90       	pop	r12
     b84:	bf 90       	pop	r11
     b86:	af 90       	pop	r10
     b88:	9f 90       	pop	r9
     b8a:	8f 90       	pop	r8
     b8c:	7f 90       	pop	r7
     b8e:	5f 90       	pop	r5
     b90:	4f 90       	pop	r4
     b92:	3f 90       	pop	r3
     b94:	2f 90       	pop	r2
     b96:	08 95       	ret

00000b98 <tmp2cube>:

// Copy the temp cube onto the real cube
void tmp2cube(void)
{
	int y, z;
	for(z = 0 ; z < 5 ; z++){
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	90 e0       	ldi	r25, 0x00	; 0
		for(y = 0 ; y < 5 ; y++){
			cube[z][y] = tmpcube[z][y];
     b9c:	fc 01       	movw	r30, r24
     b9e:	ee 0f       	add	r30, r30
     ba0:	ff 1f       	adc	r31, r31
     ba2:	ee 0f       	add	r30, r30
     ba4:	ff 1f       	adc	r31, r31
     ba6:	e8 0f       	add	r30, r24
     ba8:	f9 1f       	adc	r31, r25
     baa:	df 01       	movw	r26, r30
     bac:	a5 56       	subi	r26, 0x65	; 101
     bae:	be 4f       	sbci	r27, 0xFE	; 254
     bb0:	2c 91       	ld	r18, X
     bb2:	e6 54       	subi	r30, 0x46	; 70
     bb4:	fe 4f       	sbci	r31, 0xFE	; 254
     bb6:	20 83       	st	Z, r18
     bb8:	11 96       	adiw	r26, 0x01	; 1
     bba:	2c 91       	ld	r18, X
     bbc:	11 97       	sbiw	r26, 0x01	; 1
     bbe:	21 83       	std	Z+1, r18	; 0x01
     bc0:	12 96       	adiw	r26, 0x02	; 2
     bc2:	2c 91       	ld	r18, X
     bc4:	12 97       	sbiw	r26, 0x02	; 2
     bc6:	22 83       	std	Z+2, r18	; 0x02
     bc8:	13 96       	adiw	r26, 0x03	; 3
     bca:	2c 91       	ld	r18, X
     bcc:	13 97       	sbiw	r26, 0x03	; 3
     bce:	23 83       	std	Z+3, r18	; 0x03
     bd0:	14 96       	adiw	r26, 0x04	; 4
     bd2:	2c 91       	ld	r18, X
     bd4:	14 97       	sbiw	r26, 0x04	; 4
     bd6:	24 83       	std	Z+4, r18	; 0x04

// Copy the temp cube onto the real cube
void tmp2cube(void)
{
	int y, z;
	for(z = 0 ; z < 5 ; z++){
     bd8:	01 96       	adiw	r24, 0x01	; 1
     bda:	85 30       	cpi	r24, 0x05	; 5
     bdc:	91 05       	cpc	r25, r1
     bde:	f1 f6       	brne	.-68     	; 0xb9c <tmp2cube+0x4>
		for(y = 0 ; y < 5 ; y++){
			cube[z][y] = tmpcube[z][y];
		}
	}
}
     be0:	08 95       	ret

00000be2 <cube2tmp>:

// Copy the cube into the temp buffer
void cube2tmp(void)
{
	int y, z;
	for(z = 0 ; z < 5 ; z++){
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	90 e0       	ldi	r25, 0x00	; 0
		for(y = 0 ; y < 5 ; y++){
			tmpcube[z][y] = cube[z][y];
     be6:	fc 01       	movw	r30, r24
     be8:	ee 0f       	add	r30, r30
     bea:	ff 1f       	adc	r31, r31
     bec:	ee 0f       	add	r30, r30
     bee:	ff 1f       	adc	r31, r31
     bf0:	e8 0f       	add	r30, r24
     bf2:	f9 1f       	adc	r31, r25
     bf4:	df 01       	movw	r26, r30
     bf6:	a6 54       	subi	r26, 0x46	; 70
     bf8:	be 4f       	sbci	r27, 0xFE	; 254
     bfa:	2c 91       	ld	r18, X
     bfc:	e5 56       	subi	r30, 0x65	; 101
     bfe:	fe 4f       	sbci	r31, 0xFE	; 254
     c00:	20 83       	st	Z, r18
     c02:	11 96       	adiw	r26, 0x01	; 1
     c04:	2c 91       	ld	r18, X
     c06:	11 97       	sbiw	r26, 0x01	; 1
     c08:	21 83       	std	Z+1, r18	; 0x01
     c0a:	12 96       	adiw	r26, 0x02	; 2
     c0c:	2c 91       	ld	r18, X
     c0e:	12 97       	sbiw	r26, 0x02	; 2
     c10:	22 83       	std	Z+2, r18	; 0x02
     c12:	13 96       	adiw	r26, 0x03	; 3
     c14:	2c 91       	ld	r18, X
     c16:	13 97       	sbiw	r26, 0x03	; 3
     c18:	23 83       	std	Z+3, r18	; 0x03
     c1a:	14 96       	adiw	r26, 0x04	; 4
     c1c:	2c 91       	ld	r18, X
     c1e:	14 97       	sbiw	r26, 0x04	; 4
     c20:	24 83       	std	Z+4, r18	; 0x04

// Copy the cube into the temp buffer
void cube2tmp(void)
{
	int y, z;
	for(z = 0 ; z < 5 ; z++){
     c22:	01 96       	adiw	r24, 0x01	; 1
     c24:	85 30       	cpi	r24, 0x05	; 5
     c26:	91 05       	cpc	r25, r1
     c28:	f1 f6       	brne	.-68     	; 0xbe6 <cube2tmp+0x4>
		for(y = 0 ; y < 5 ; y++){
			tmpcube[z][y] = cube[z][y];
		}
	}
}
     c2a:	08 95       	ret

00000c2c <fill>:
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
     c2c:	20 e0       	ldi	r18, 0x00	; 0
     c2e:	30 e0       	ldi	r19, 0x00	; 0
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
     c30:	f9 01       	movw	r30, r18
     c32:	ee 0f       	add	r30, r30
     c34:	ff 1f       	adc	r31, r31
     c36:	ee 0f       	add	r30, r30
     c38:	ff 1f       	adc	r31, r31
     c3a:	e2 0f       	add	r30, r18
     c3c:	f3 1f       	adc	r31, r19
     c3e:	e6 54       	subi	r30, 0x46	; 70
     c40:	fe 4f       	sbci	r31, 0xFE	; 254
     c42:	80 83       	st	Z, r24
     c44:	81 83       	std	Z+1, r24	; 0x01
     c46:	82 83       	std	Z+2, r24	; 0x02
     c48:	83 83       	std	Z+3, r24	; 0x03
     c4a:	84 83       	std	Z+4, r24	; 0x04
// fill(0x1f); lights all leds
void fill (unsigned char pattern)
{
	int z;
	int y;
	for(z = 0 ; z < 5 ; z++){
     c4c:	2f 5f       	subi	r18, 0xFF	; 255
     c4e:	3f 4f       	sbci	r19, 0xFF	; 255
     c50:	25 30       	cpi	r18, 0x05	; 5
     c52:	31 05       	cpc	r19, r1
     c54:	69 f7       	brne	.-38     	; 0xc30 <fill+0x4>
		for (y = 0 ; y < 5 ; y++){
			cube[z][y] = pattern;
		}
	}
}
     c56:	08 95       	ret

00000c58 <writeA>:

// write E

void writeA(int l)
{
     c58:	cf 93       	push	r28
     c5a:	df 93       	push	r29
     c5c:	ec 01       	movw	r28, r24
		fill(0x00);
     c5e:	0e 94 c8 02 	call	0x590	; 0x590 <fill.clone.0>
	cube[4][l] = 0x0E;
     c62:	c6 54       	subi	r28, 0x46	; 70
     c64:	de 4f       	sbci	r29, 0xFE	; 254
     c66:	8e e0       	ldi	r24, 0x0E	; 14
     c68:	8c 8b       	std	Y+20, r24	; 0x14
	cube[3][l] = 0x11;
     c6a:	81 e1       	ldi	r24, 0x11	; 17
     c6c:	8f 87       	std	Y+15, r24	; 0x0f
	cube[2][l] = 0x1F;
     c6e:	9f e1       	ldi	r25, 0x1F	; 31
     c70:	9a 87       	std	Y+10, r25	; 0x0a
	cube[1][l] = 0x11;
     c72:	8d 83       	std	Y+5, r24	; 0x05
	cube[0][l] = 0x11;
     c74:	88 83       	st	Y, r24
}
     c76:	df 91       	pop	r29
     c78:	cf 91       	pop	r28
     c7a:	08 95       	ret

00000c7c <writeB>:
void writeB(int l)
{
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	ec 01       	movw	r28, r24
		fill(0x00);
     c82:	0e 94 c8 02 	call	0x590	; 0x590 <fill.clone.0>
	cube[4][l] = 0x0F;
     c86:	c6 54       	subi	r28, 0x46	; 70
     c88:	de 4f       	sbci	r29, 0xFE	; 254
     c8a:	8f e0       	ldi	r24, 0x0F	; 15
     c8c:	8c 8b       	std	Y+20, r24	; 0x14
	cube[3][l] = 0x11;
     c8e:	91 e1       	ldi	r25, 0x11	; 17
     c90:	9f 87       	std	Y+15, r25	; 0x0f
	cube[2][l] = 0x0F;
     c92:	8a 87       	std	Y+10, r24	; 0x0a
	cube[1][l] = 0x11;
     c94:	9d 83       	std	Y+5, r25	; 0x05
	cube[0][l] = 0x0F;
     c96:	88 83       	st	Y, r24
}
     c98:	df 91       	pop	r29
     c9a:	cf 91       	pop	r28
     c9c:	08 95       	ret

00000c9e <writeC>:


void writeC (int l)
{
     c9e:	cf 93       	push	r28
     ca0:	df 93       	push	r29
     ca2:	ec 01       	movw	r28, r24
	fill(0x00);
     ca4:	0e 94 c8 02 	call	0x590	; 0x590 <fill.clone.0>
	cube[0][l] = 0x1E;
     ca8:	c6 54       	subi	r28, 0x46	; 70
     caa:	de 4f       	sbci	r29, 0xFE	; 254
     cac:	8e e1       	ldi	r24, 0x1E	; 30
     cae:	88 83       	st	Y, r24
	cube[4][l] = 0x1E;
     cb0:	8c 8b       	std	Y+20, r24	; 0x14
	cube[3][l] = 0x01;
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	8f 87       	std	Y+15, r24	; 0x0f
	cube[2][l] = 0x01;
     cb6:	8a 87       	std	Y+10, r24	; 0x0a
	cube[1][l] = 0x01;
     cb8:	8d 83       	std	Y+5, r24	; 0x05

}
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	08 95       	ret

00000cc0 <writeD>:
void writeD(int l)
{
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	ec 01       	movw	r28, r24
		fill(0x00);
     cc6:	0e 94 c8 02 	call	0x590	; 0x590 <fill.clone.0>
	cube[4][l] = 0x0F;
     cca:	c6 54       	subi	r28, 0x46	; 70
     ccc:	de 4f       	sbci	r29, 0xFE	; 254
     cce:	9f e0       	ldi	r25, 0x0F	; 15
     cd0:	9c 8b       	std	Y+20, r25	; 0x14
	cube[3][l] = 0x11;
     cd2:	81 e1       	ldi	r24, 0x11	; 17
     cd4:	8f 87       	std	Y+15, r24	; 0x0f
	cube[2][l] = 0x11;
     cd6:	8a 87       	std	Y+10, r24	; 0x0a
	cube[1][l] = 0x11;
     cd8:	8d 83       	std	Y+5, r24	; 0x05
	cube[0][l] = 0x0F;
     cda:	98 83       	st	Y, r25
}
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	08 95       	ret

00000ce2 <writeE>:
	

void writeE (int l)
{
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	ec 01       	movw	r28, r24
	fill(0x00);
     ce8:	0e 94 c8 02 	call	0x590	; 0x590 <fill.clone.0>
	cube[4][l] = 0x1F;
     cec:	c6 54       	subi	r28, 0x46	; 70
     cee:	de 4f       	sbci	r29, 0xFE	; 254
     cf0:	8f e1       	ldi	r24, 0x1F	; 31
     cf2:	8c 8b       	std	Y+20, r24	; 0x14
	cube[3][l] = 0x01;
     cf4:	91 e0       	ldi	r25, 0x01	; 1
     cf6:	9f 87       	std	Y+15, r25	; 0x0f
	cube[2][l] = 0x07;
     cf8:	27 e0       	ldi	r18, 0x07	; 7
     cfa:	2a 87       	std	Y+10, r18	; 0x0a
	cube[1][l] = 0x01;
     cfc:	9d 83       	std	Y+5, r25	; 0x05
	cube[0][l] = 0x1F;
     cfe:	88 83       	st	Y, r24
}
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	08 95       	ret

00000d06 <writeF>:
void writeF(int l)
{
     d06:	cf 93       	push	r28
     d08:	df 93       	push	r29
     d0a:	ec 01       	movw	r28, r24
		fill(0x00);
     d0c:	0e 94 c8 02 	call	0x590	; 0x590 <fill.clone.0>
	cube[4][l] = 0x1F;
     d10:	c6 54       	subi	r28, 0x46	; 70
     d12:	de 4f       	sbci	r29, 0xFE	; 254
     d14:	8f e1       	ldi	r24, 0x1F	; 31
     d16:	8c 8b       	std	Y+20, r24	; 0x14
	cube[3][l] = 0x01;
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	8f 87       	std	Y+15, r24	; 0x0f
	cube[2][l] = 0x07;
     d1c:	97 e0       	ldi	r25, 0x07	; 7
     d1e:	9a 87       	std	Y+10, r25	; 0x0a
	cube[1][l] = 0x01;
     d20:	8d 83       	std	Y+5, r24	; 0x05
	cube[0][l] = 0x01;
     d22:	88 83       	st	Y, r24
}
     d24:	df 91       	pop	r29
     d26:	cf 91       	pop	r28
     d28:	08 95       	ret

00000d2a <writeG>:
void writeG(int l)
{
     d2a:	cf 93       	push	r28
     d2c:	df 93       	push	r29
     d2e:	ec 01       	movw	r28, r24
		fill(0x00);
     d30:	0e 94 c8 02 	call	0x590	; 0x590 <fill.clone.0>
	cube[4][l] = 0x0E;
     d34:	c6 54       	subi	r28, 0x46	; 70
     d36:	de 4f       	sbci	r29, 0xFE	; 254
     d38:	8e e0       	ldi	r24, 0x0E	; 14
     d3a:	8c 8b       	std	Y+20, r24	; 0x14
	cube[3][l] = 0x01;
     d3c:	91 e0       	ldi	r25, 0x01	; 1
     d3e:	9f 87       	std	Y+15, r25	; 0x0f
	cube[2][l] = 0x1D;
     d40:	9d e1       	ldi	r25, 0x1D	; 29
     d42:	9a 87       	std	Y+10, r25	; 0x0a
	cube[1][l] = 0x11;
     d44:	91 e1       	ldi	r25, 0x11	; 17
     d46:	9d 83       	std	Y+5, r25	; 0x05
	cube[0][l] = 0x0E;
     d48:	88 83       	st	Y, r24
}
     d4a:	df 91       	pop	r29
     d4c:	cf 91       	pop	r28
     d4e:	08 95       	ret

00000d50 <writeH>:
void writeH(int l)
{
     d50:	cf 93       	push	r28
     d52:	df 93       	push	r29
     d54:	ec 01       	movw	r28, r24
		fill(0x00);
     d56:	0e 94 c8 02 	call	0x590	; 0x590 <fill.clone.0>
	cube[4][l] = 0x11;
     d5a:	c6 54       	subi	r28, 0x46	; 70
     d5c:	de 4f       	sbci	r29, 0xFE	; 254
     d5e:	81 e1       	ldi	r24, 0x11	; 17
     d60:	8c 8b       	std	Y+20, r24	; 0x14
	cube[3][l] = 0x11;
     d62:	8f 87       	std	Y+15, r24	; 0x0f
	cube[2][l] = 0x1F;
     d64:	9f e1       	ldi	r25, 0x1F	; 31
     d66:	9a 87       	std	Y+10, r25	; 0x0a
	cube[1][l] = 0x11;
     d68:	8d 83       	std	Y+5, r24	; 0x05
	cube[0][l] = 0x11;
     d6a:	88 83       	st	Y, r24
}
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	08 95       	ret

00000d72 <writeI>:
void writeI(int l)
{
     d72:	cf 93       	push	r28
     d74:	df 93       	push	r29
     d76:	ec 01       	movw	r28, r24
		fill(0x00);
     d78:	0e 94 c8 02 	call	0x590	; 0x590 <fill.clone.0>
	cube[4][l] = 0x1F;
     d7c:	c6 54       	subi	r28, 0x46	; 70
     d7e:	de 4f       	sbci	r29, 0xFE	; 254
     d80:	9f e1       	ldi	r25, 0x1F	; 31
     d82:	9c 8b       	std	Y+20, r25	; 0x14
	cube[3][l] = 0x04;
     d84:	84 e0       	ldi	r24, 0x04	; 4
     d86:	8f 87       	std	Y+15, r24	; 0x0f
	cube[2][l] = 0x04;
     d88:	8a 87       	std	Y+10, r24	; 0x0a
	cube[1][l] = 0x04; 
     d8a:	8d 83       	std	Y+5, r24	; 0x05
	cube[0][l] = 0x1F;
     d8c:	98 83       	st	Y, r25
}
     d8e:	df 91       	pop	r29
     d90:	cf 91       	pop	r28
     d92:	08 95       	ret

00000d94 <writeJ>:
void writeJ(int l)
{
     d94:	cf 93       	push	r28
     d96:	df 93       	push	r29
     d98:	ec 01       	movw	r28, r24
		fill(0x00);
     d9a:	0e 94 c8 02 	call	0x590	; 0x590 <fill.clone.0>
	cube[4][l] = 0x1F;
     d9e:	c6 54       	subi	r28, 0x46	; 70
     da0:	de 4f       	sbci	r29, 0xFE	; 254
     da2:	8f e1       	ldi	r24, 0x1F	; 31
     da4:	8c 8b       	std	Y+20, r24	; 0x14
	cube[3][l] = 0x10;
     da6:	80 e1       	ldi	r24, 0x10	; 16
     da8:	8f 87       	std	Y+15, r24	; 0x0f
	cube[2][l] = 0x10;
     daa:	8a 87       	std	Y+10, r24	; 0x0a
	cube[1][l] = 0x11;
     dac:	81 e1       	ldi	r24, 0x11	; 17
     dae:	8d 83       	std	Y+5, r24	; 0x05
	cube[0][l] = 0x0E;
     db0:	8e e0       	ldi	r24, 0x0E	; 14
     db2:	88 83       	st	Y, r24
}
     db4:	df 91       	pop	r29
     db6:	cf 91       	pop	r28
     db8:	08 95       	ret

00000dba <writeK>:
void writeK(int l)
{
     dba:	cf 93       	push	r28
     dbc:	df 93       	push	r29
     dbe:	ec 01       	movw	r28, r24
		fill(0x00);
     dc0:	0e 94 c8 02 	call	0x590	; 0x590 <fill.clone.0>
	cube[4][l] = 0x09;
     dc4:	c6 54       	subi	r28, 0x46	; 70
     dc6:	de 4f       	sbci	r29, 0xFE	; 254
     dc8:	89 e0       	ldi	r24, 0x09	; 9
     dca:	8c 8b       	std	Y+20, r24	; 0x14
	cube[3][l] = 0x05;
     dcc:	95 e0       	ldi	r25, 0x05	; 5
     dce:	9f 87       	std	Y+15, r25	; 0x0f
	cube[2][l] = 0x03;
     dd0:	23 e0       	ldi	r18, 0x03	; 3
     dd2:	2a 87       	std	Y+10, r18	; 0x0a
	cube[1][l] = 0x05;
     dd4:	9d 83       	std	Y+5, r25	; 0x05
	cube[0][l] = 0x09;
     dd6:	88 83       	st	Y, r24
}
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	08 95       	ret

00000dde <writeL>:
void writeL(int l)
{
     dde:	cf 93       	push	r28
     de0:	df 93       	push	r29
     de2:	ec 01       	movw	r28, r24
		fill(0x00);
     de4:	0e 94 c8 02 	call	0x590	; 0x590 <fill.clone.0>
	cube[4][l] = 0x01;
     de8:	c6 54       	subi	r28, 0x46	; 70
     dea:	de 4f       	sbci	r29, 0xFE	; 254
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	8c 8b       	std	Y+20, r24	; 0x14
	cube[3][l] = 0x01;
     df0:	8f 87       	std	Y+15, r24	; 0x0f
	cube[2][l] = 0x01;
     df2:	8a 87       	std	Y+10, r24	; 0x0a
	cube[1][l] = 0x01;
     df4:	8d 83       	std	Y+5, r24	; 0x05
	cube[0][l] = 0x1F;
     df6:	8f e1       	ldi	r24, 0x1F	; 31
     df8:	88 83       	st	Y, r24
}
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	08 95       	ret

00000e00 <writeM>:
void writeM(int l)
{
     e00:	cf 93       	push	r28
     e02:	df 93       	push	r29
     e04:	ec 01       	movw	r28, r24
		fill(0x00);
     e06:	0e 94 c8 02 	call	0x590	; 0x590 <fill.clone.0>
	cube[4][l] = 0x11;
     e0a:	c6 54       	subi	r28, 0x46	; 70
     e0c:	de 4f       	sbci	r29, 0xFE	; 254
     e0e:	81 e1       	ldi	r24, 0x11	; 17
     e10:	8c 8b       	std	Y+20, r24	; 0x14
	cube[3][l] = 0x1B;
     e12:	9b e1       	ldi	r25, 0x1B	; 27
     e14:	9f 87       	std	Y+15, r25	; 0x0f
	cube[2][l] = 0x15;
     e16:	95 e1       	ldi	r25, 0x15	; 21
     e18:	9a 87       	std	Y+10, r25	; 0x0a
	cube[1][l] = 0x11;
     e1a:	8d 83       	std	Y+5, r24	; 0x05
	cube[0][l] = 0x11;
     e1c:	88 83       	st	Y, r24
}
     e1e:	df 91       	pop	r29
     e20:	cf 91       	pop	r28
     e22:	08 95       	ret

00000e24 <writeN>:
void writeN(int l)
{
     e24:	cf 93       	push	r28
     e26:	df 93       	push	r29
     e28:	ec 01       	movw	r28, r24
		fill(0x00);
     e2a:	0e 94 c8 02 	call	0x590	; 0x590 <fill.clone.0>
	cube[4][l] = 0x11;
     e2e:	c6 54       	subi	r28, 0x46	; 70
     e30:	de 4f       	sbci	r29, 0xFE	; 254
     e32:	81 e1       	ldi	r24, 0x11	; 17
     e34:	8c 8b       	std	Y+20, r24	; 0x14
	cube[3][l] = 0x13;
     e36:	93 e1       	ldi	r25, 0x13	; 19
     e38:	9f 87       	std	Y+15, r25	; 0x0f
	cube[2][l] = 0x15;
     e3a:	95 e1       	ldi	r25, 0x15	; 21
     e3c:	9a 87       	std	Y+10, r25	; 0x0a
	cube[1][l] = 0x19;
     e3e:	99 e1       	ldi	r25, 0x19	; 25
     e40:	9d 83       	std	Y+5, r25	; 0x05
	cube[0][l] = 0x11;
     e42:	88 83       	st	Y, r24
}
     e44:	df 91       	pop	r29
     e46:	cf 91       	pop	r28
     e48:	08 95       	ret

00000e4a <writeO>:
void writeO(int l)
{
     e4a:	cf 93       	push	r28
     e4c:	df 93       	push	r29
     e4e:	ec 01       	movw	r28, r24
		fill(0x00);
     e50:	0e 94 c8 02 	call	0x590	; 0x590 <fill.clone.0>
	cube[4][l] = 0x0E;
     e54:	c6 54       	subi	r28, 0x46	; 70
     e56:	de 4f       	sbci	r29, 0xFE	; 254
     e58:	9e e0       	ldi	r25, 0x0E	; 14
     e5a:	9c 8b       	std	Y+20, r25	; 0x14
	cube[3][l] = 0x11;
     e5c:	81 e1       	ldi	r24, 0x11	; 17
     e5e:	8f 87       	std	Y+15, r24	; 0x0f
	cube[2][l] = 0x11;
     e60:	8a 87       	std	Y+10, r24	; 0x0a
	cube[1][l] = 0x11;
     e62:	8d 83       	std	Y+5, r24	; 0x05
	cube[0][l] = 0x0E;
     e64:	98 83       	st	Y, r25
}
     e66:	df 91       	pop	r29
     e68:	cf 91       	pop	r28
     e6a:	08 95       	ret

00000e6c <writeP>:

void writeP(int l)
{
     e6c:	cf 93       	push	r28
     e6e:	df 93       	push	r29
     e70:	ec 01       	movw	r28, r24
		fill(0x00);
     e72:	0e 94 c8 02 	call	0x590	; 0x590 <fill.clone.0>
	cube[4][l] = 0x0F;
     e76:	c6 54       	subi	r28, 0x46	; 70
     e78:	de 4f       	sbci	r29, 0xFE	; 254
     e7a:	8f e0       	ldi	r24, 0x0F	; 15
     e7c:	8c 8b       	std	Y+20, r24	; 0x14
	cube[3][l] = 0x11;
     e7e:	91 e1       	ldi	r25, 0x11	; 17
     e80:	9f 87       	std	Y+15, r25	; 0x0f
	cube[2][l] = 0x0F;
     e82:	8a 87       	std	Y+10, r24	; 0x0a
	cube[1][l] = 0x01;
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	8d 83       	std	Y+5, r24	; 0x05
	cube[0][l] = 0x01;
     e88:	88 83       	st	Y, r24
}
     e8a:	df 91       	pop	r29
     e8c:	cf 91       	pop	r28
     e8e:	08 95       	ret

00000e90 <writeQ>:

void writeQ(int l)
{
     e90:	cf 93       	push	r28
     e92:	df 93       	push	r29
     e94:	ec 01       	movw	r28, r24
		fill(0x00);
     e96:	0e 94 c8 02 	call	0x590	; 0x590 <fill.clone.0>
	cube[4][l] = 0x06;
     e9a:	c6 54       	subi	r28, 0x46	; 70
     e9c:	de 4f       	sbci	r29, 0xFE	; 254
     e9e:	86 e0       	ldi	r24, 0x06	; 6
     ea0:	8c 8b       	std	Y+20, r24	; 0x14
	cube[3][l] = 0x09;
     ea2:	89 e0       	ldi	r24, 0x09	; 9
     ea4:	8f 87       	std	Y+15, r24	; 0x0f
	cube[2][l] = 0x09;
     ea6:	8a 87       	std	Y+10, r24	; 0x0a
	cube[1][l] = 0x0E;
     ea8:	8e e0       	ldi	r24, 0x0E	; 14
     eaa:	8d 83       	std	Y+5, r24	; 0x05
	cube[0][l] = 0x10;
     eac:	80 e1       	ldi	r24, 0x10	; 16
     eae:	88 83       	st	Y, r24
}
     eb0:	df 91       	pop	r29
     eb2:	cf 91       	pop	r28
     eb4:	08 95       	ret

00000eb6 <writeR>:
void writeR(int l)
{
     eb6:	cf 93       	push	r28
     eb8:	df 93       	push	r29
     eba:	ec 01       	movw	r28, r24
		fill(0x00);
     ebc:	0e 94 c8 02 	call	0x590	; 0x590 <fill.clone.0>
	cube[4][l] = 0x0F;
     ec0:	c6 54       	subi	r28, 0x46	; 70
     ec2:	de 4f       	sbci	r29, 0xFE	; 254
     ec4:	8f e0       	ldi	r24, 0x0F	; 15
     ec6:	8c 8b       	std	Y+20, r24	; 0x14
	cube[3][l] = 0x11;
     ec8:	91 e1       	ldi	r25, 0x11	; 17
     eca:	9f 87       	std	Y+15, r25	; 0x0f
	cube[2][l] = 0x0F;
     ecc:	8a 87       	std	Y+10, r24	; 0x0a
	cube[1][l] = 0x05;
     ece:	85 e0       	ldi	r24, 0x05	; 5
     ed0:	8d 83       	std	Y+5, r24	; 0x05
	cube[0][l] = 0x09;
     ed2:	89 e0       	ldi	r24, 0x09	; 9
     ed4:	88 83       	st	Y, r24
}
     ed6:	df 91       	pop	r29
     ed8:	cf 91       	pop	r28
     eda:	08 95       	ret

00000edc <writeS>:

void writeS(int l)
{
     edc:	cf 93       	push	r28
     ede:	df 93       	push	r29
     ee0:	ec 01       	movw	r28, r24
	fill(0x00);
     ee2:	0e 94 c8 02 	call	0x590	; 0x590 <fill.clone.0>
	cube[4][l] = 0x1E;
     ee6:	c6 54       	subi	r28, 0x46	; 70
     ee8:	de 4f       	sbci	r29, 0xFE	; 254
     eea:	8e e1       	ldi	r24, 0x1E	; 30
     eec:	8c 8b       	std	Y+20, r24	; 0x14
	cube[3][l] = 0x01;
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	8f 87       	std	Y+15, r24	; 0x0f
	cube[2][l] = 0x0E;
     ef2:	8e e0       	ldi	r24, 0x0E	; 14
     ef4:	8a 87       	std	Y+10, r24	; 0x0a
	cube[1][l] = 0x10;
     ef6:	80 e1       	ldi	r24, 0x10	; 16
     ef8:	8d 83       	std	Y+5, r24	; 0x05
	cube[0][l] = 0x0F;
     efa:	8f e0       	ldi	r24, 0x0F	; 15
     efc:	88 83       	st	Y, r24
}
     efe:	df 91       	pop	r29
     f00:	cf 91       	pop	r28
     f02:	08 95       	ret

00000f04 <writeT>:

void writeT(int l)
{
     f04:	cf 93       	push	r28
     f06:	df 93       	push	r29
     f08:	ec 01       	movw	r28, r24
	fill(0x00);
     f0a:	0e 94 c8 02 	call	0x590	; 0x590 <fill.clone.0>
	cube[0][l] = 0x04;
     f0e:	c6 54       	subi	r28, 0x46	; 70
     f10:	de 4f       	sbci	r29, 0xFE	; 254
     f12:	84 e0       	ldi	r24, 0x04	; 4
     f14:	88 83       	st	Y, r24
	cube[1][l] = 0x04;
     f16:	8d 83       	std	Y+5, r24	; 0x05
	cube[2][l] = 0x04;
     f18:	8a 87       	std	Y+10, r24	; 0x0a
	cube[3][l] = 0x04;
     f1a:	8f 87       	std	Y+15, r24	; 0x0f
	cube[4][l] = 0x1F;
     f1c:	8f e1       	ldi	r24, 0x1F	; 31
     f1e:	8c 8b       	std	Y+20, r24	; 0x14
}
     f20:	df 91       	pop	r29
     f22:	cf 91       	pop	r28
     f24:	08 95       	ret

00000f26 <writeU>:

void writeU(int l)
{
     f26:	cf 93       	push	r28
     f28:	df 93       	push	r29
     f2a:	ec 01       	movw	r28, r24
		fill(0x00);
     f2c:	0e 94 c8 02 	call	0x590	; 0x590 <fill.clone.0>
	cube[4][l] = 0x11;
     f30:	c6 54       	subi	r28, 0x46	; 70
     f32:	de 4f       	sbci	r29, 0xFE	; 254
     f34:	81 e1       	ldi	r24, 0x11	; 17
     f36:	8c 8b       	std	Y+20, r24	; 0x14
	cube[3][l] = 0x11;
     f38:	8f 87       	std	Y+15, r24	; 0x0f
	cube[2][l] = 0x11;
     f3a:	8a 87       	std	Y+10, r24	; 0x0a
	cube[1][l] = 0x11;
     f3c:	8d 83       	std	Y+5, r24	; 0x05
	cube[0][l] = 0x1F;
     f3e:	8f e1       	ldi	r24, 0x1F	; 31
     f40:	88 83       	st	Y, r24
}
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	08 95       	ret

00000f48 <writeW>:
void writeW(int l)
{
     f48:	cf 93       	push	r28
     f4a:	df 93       	push	r29
     f4c:	ec 01       	movw	r28, r24
		fill(0x00);
     f4e:	0e 94 c8 02 	call	0x590	; 0x590 <fill.clone.0>
	cube[4][l] = 0x11;
     f52:	c6 54       	subi	r28, 0x46	; 70
     f54:	de 4f       	sbci	r29, 0xFE	; 254
     f56:	81 e1       	ldi	r24, 0x11	; 17
     f58:	8c 8b       	std	Y+20, r24	; 0x14
	cube[3][l] = 0x11;
     f5a:	8f 87       	std	Y+15, r24	; 0x0f
	cube[2][l] = 0x15;
     f5c:	95 e1       	ldi	r25, 0x15	; 21
     f5e:	9a 87       	std	Y+10, r25	; 0x0a
	cube[1][l] = 0x1B;
     f60:	9b e1       	ldi	r25, 0x1B	; 27
     f62:	9d 83       	std	Y+5, r25	; 0x05
	cube[0][l] = 0x11;
     f64:	88 83       	st	Y, r24
}
     f66:	df 91       	pop	r29
     f68:	cf 91       	pop	r28
     f6a:	08 95       	ret

00000f6c <writeV>:
void writeV(int l)
{
     f6c:	cf 93       	push	r28
     f6e:	df 93       	push	r29
     f70:	ec 01       	movw	r28, r24
		fill(0x00);
     f72:	0e 94 c8 02 	call	0x590	; 0x590 <fill.clone.0>
	cube[4][l] = 0x11;
     f76:	c6 54       	subi	r28, 0x46	; 70
     f78:	de 4f       	sbci	r29, 0xFE	; 254
     f7a:	81 e1       	ldi	r24, 0x11	; 17
     f7c:	8c 8b       	std	Y+20, r24	; 0x14
	cube[3][l] = 0x11;
     f7e:	8f 87       	std	Y+15, r24	; 0x0f
	cube[2][l] = 0x11;
     f80:	8a 87       	std	Y+10, r24	; 0x0a
	cube[1][l] = 0x0A;
     f82:	8a e0       	ldi	r24, 0x0A	; 10
     f84:	8d 83       	std	Y+5, r24	; 0x05
	cube[0][l] = 0x04;
     f86:	84 e0       	ldi	r24, 0x04	; 4
     f88:	88 83       	st	Y, r24
}
     f8a:	df 91       	pop	r29
     f8c:	cf 91       	pop	r28
     f8e:	08 95       	ret

00000f90 <writeX>:
void writeX(int l)
{
     f90:	cf 93       	push	r28
     f92:	df 93       	push	r29
     f94:	ec 01       	movw	r28, r24
		fill(0x00);
     f96:	0e 94 c8 02 	call	0x590	; 0x590 <fill.clone.0>
	cube[4][l] = 0x11;
     f9a:	c6 54       	subi	r28, 0x46	; 70
     f9c:	de 4f       	sbci	r29, 0xFE	; 254
     f9e:	81 e1       	ldi	r24, 0x11	; 17
     fa0:	8c 8b       	std	Y+20, r24	; 0x14
	cube[3][l] = 0x0A;
     fa2:	9a e0       	ldi	r25, 0x0A	; 10
     fa4:	9f 87       	std	Y+15, r25	; 0x0f
	cube[2][l] = 0x04;
     fa6:	24 e0       	ldi	r18, 0x04	; 4
     fa8:	2a 87       	std	Y+10, r18	; 0x0a
	cube[1][l] = 0x0A;
     faa:	9d 83       	std	Y+5, r25	; 0x05
	cube[0][l] = 0x11;
     fac:	88 83       	st	Y, r24
}
     fae:	df 91       	pop	r29
     fb0:	cf 91       	pop	r28
     fb2:	08 95       	ret

00000fb4 <writeY>:

void writeY(int l)
{
     fb4:	cf 93       	push	r28
     fb6:	df 93       	push	r29
     fb8:	ec 01       	movw	r28, r24
		fill(0x00);
     fba:	0e 94 c8 02 	call	0x590	; 0x590 <fill.clone.0>
	cube[4][l] = 0x11;
     fbe:	c6 54       	subi	r28, 0x46	; 70
     fc0:	de 4f       	sbci	r29, 0xFE	; 254
     fc2:	81 e1       	ldi	r24, 0x11	; 17
     fc4:	8c 8b       	std	Y+20, r24	; 0x14
	cube[3][l] = 0x0A;
     fc6:	8a e0       	ldi	r24, 0x0A	; 10
     fc8:	8f 87       	std	Y+15, r24	; 0x0f
	cube[2][l] = 0x04;
     fca:	84 e0       	ldi	r24, 0x04	; 4
     fcc:	8a 87       	std	Y+10, r24	; 0x0a
	cube[1][l] = 0x04;
     fce:	8d 83       	std	Y+5, r24	; 0x05
	cube[0][l] = 0x04;
     fd0:	88 83       	st	Y, r24
}
     fd2:	df 91       	pop	r29
     fd4:	cf 91       	pop	r28
     fd6:	08 95       	ret

00000fd8 <writeZ>:
void writeZ(int l)
{
     fd8:	cf 93       	push	r28
     fda:	df 93       	push	r29
     fdc:	ec 01       	movw	r28, r24
		fill(0x00);
     fde:	0e 94 c8 02 	call	0x590	; 0x590 <fill.clone.0>
	cube[4][l] = 0x1F;
     fe2:	c6 54       	subi	r28, 0x46	; 70
     fe4:	de 4f       	sbci	r29, 0xFE	; 254
     fe6:	8f e1       	ldi	r24, 0x1F	; 31
     fe8:	8c 8b       	std	Y+20, r24	; 0x14
	cube[3][l] = 0x08;
     fea:	98 e0       	ldi	r25, 0x08	; 8
     fec:	9f 87       	std	Y+15, r25	; 0x0f
	cube[2][l] = 0x04;
     fee:	94 e0       	ldi	r25, 0x04	; 4
     ff0:	9a 87       	std	Y+10, r25	; 0x0a
	cube[1][l] = 0x02;
     ff2:	92 e0       	ldi	r25, 0x02	; 2
     ff4:	9d 83       	std	Y+5, r25	; 0x05
	cube[0][l] = 0x1F;
     ff6:	88 83       	st	Y, r24
}
     ff8:	df 91       	pop	r29
     ffa:	cf 91       	pop	r28
     ffc:	08 95       	ret

00000ffe <getLetter>:



void getLetter(int letter, int l)
{
     ffe:	fc 01       	movw	r30, r24
    1000:	cb 01       	movw	r24, r22
	
	switch(letter)
    1002:	ea 31       	cpi	r30, 0x1A	; 26
    1004:	f1 05       	cpc	r31, r1
    1006:	08 f0       	brcs	.+2      	; 0x100a <getLetter+0xc>
    1008:	55 c0       	rjmp	.+170    	; 0x10b4 <getLetter+0xb6>
    100a:	e4 5c       	subi	r30, 0xC4	; 196
    100c:	ff 4f       	sbci	r31, 0xFF	; 255
    100e:	ee 0f       	add	r30, r30
    1010:	ff 1f       	adc	r31, r31
    1012:	05 90       	lpm	r0, Z+
    1014:	f4 91       	lpm	r31, Z+
    1016:	e0 2d       	mov	r30, r0
    1018:	09 94       	ijmp
	{
		case 0: writeA(l);break;
    101a:	0e 94 2c 06 	call	0xc58	; 0xc58 <writeA>
    101e:	08 95       	ret
		case 1: writeB(l);break;
    1020:	0e 94 3e 06 	call	0xc7c	; 0xc7c <writeB>
    1024:	08 95       	ret
		case 2: writeC(l);break;
    1026:	0e 94 4f 06 	call	0xc9e	; 0xc9e <writeC>
    102a:	08 95       	ret
		case 3: writeD(l);break;
    102c:	0e 94 60 06 	call	0xcc0	; 0xcc0 <writeD>
    1030:	08 95       	ret
		case 4: writeE(l);break;
    1032:	0e 94 71 06 	call	0xce2	; 0xce2 <writeE>
    1036:	08 95       	ret
		case 5: writeF(l);break;
    1038:	0e 94 83 06 	call	0xd06	; 0xd06 <writeF>
    103c:	08 95       	ret
		case 6: writeG(l);break;
    103e:	0e 94 95 06 	call	0xd2a	; 0xd2a <writeG>
    1042:	08 95       	ret
		case 7: writeH(l);break;
    1044:	0e 94 a8 06 	call	0xd50	; 0xd50 <writeH>
    1048:	08 95       	ret
		case 8: writeI(l);break;
    104a:	0e 94 b9 06 	call	0xd72	; 0xd72 <writeI>
    104e:	08 95       	ret
		case 9: writeJ(l);break;
    1050:	0e 94 ca 06 	call	0xd94	; 0xd94 <writeJ>
    1054:	08 95       	ret
		case 10: writeK(l);break;
    1056:	0e 94 dd 06 	call	0xdba	; 0xdba <writeK>
    105a:	08 95       	ret
		case 11: writeL(l);break;
    105c:	0e 94 ef 06 	call	0xdde	; 0xdde <writeL>
    1060:	08 95       	ret
		case 12: writeM(l);break;
    1062:	0e 94 00 07 	call	0xe00	; 0xe00 <writeM>
    1066:	08 95       	ret
		case 13: writeN(l);break;
    1068:	0e 94 12 07 	call	0xe24	; 0xe24 <writeN>
    106c:	08 95       	ret
		case 14: writeO(l);break;
    106e:	0e 94 25 07 	call	0xe4a	; 0xe4a <writeO>
    1072:	08 95       	ret
		case 15: writeP(l);break;
    1074:	0e 94 36 07 	call	0xe6c	; 0xe6c <writeP>
    1078:	08 95       	ret
		case 16: writeQ(l);break;
    107a:	0e 94 48 07 	call	0xe90	; 0xe90 <writeQ>
    107e:	08 95       	ret
		case 17: writeR(l);break;
    1080:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <writeR>
    1084:	08 95       	ret
		case 18: writeS(l);break;
    1086:	0e 94 6e 07 	call	0xedc	; 0xedc <writeS>
    108a:	08 95       	ret
		case 19: writeT(l);break;
    108c:	0e 94 82 07 	call	0xf04	; 0xf04 <writeT>
    1090:	08 95       	ret
		case 20: writeU(l);break;
    1092:	0e 94 93 07 	call	0xf26	; 0xf26 <writeU>
    1096:	08 95       	ret
		case 21: writeV(l);break;
    1098:	0e 94 b6 07 	call	0xf6c	; 0xf6c <writeV>
    109c:	08 95       	ret
		case 22: writeW(l);break;
    109e:	0e 94 a4 07 	call	0xf48	; 0xf48 <writeW>
    10a2:	08 95       	ret
		case 23: writeX(l);break;
    10a4:	0e 94 c8 07 	call	0xf90	; 0xf90 <writeX>
    10a8:	08 95       	ret
		case 24: writeY(l);break;
    10aa:	0e 94 da 07 	call	0xfb4	; 0xfb4 <writeY>
    10ae:	08 95       	ret
		case 25: writeZ(l);break;
    10b0:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <writeZ>
    10b4:	08 95       	ret

000010b6 <letterToInt>:
	}
}

int letterToInt(char letter)
{
int i = letter - 'A';
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	21 54       	subi	r18, 0x41	; 65
    10bc:	30 40       	sbci	r19, 0x00	; 0
return i;
}
    10be:	c9 01       	movw	r24, r18
    10c0:	08 95       	ret

000010c2 <setLine>:

void setLine(int one, int two, int three, int four, int five)
{
    10c2:	cf 92       	push	r12
    10c4:	df 92       	push	r13
    10c6:	ef 92       	push	r14
    10c8:	ff 92       	push	r15
    10ca:	0f 93       	push	r16
    10cc:	1f 93       	push	r17
    10ce:	cf 93       	push	r28
    10d0:	df 93       	push	r29
    10d2:	7b 01       	movw	r14, r22
    10d4:	6a 01       	movw	r12, r20
    10d6:	e9 01       	movw	r28, r18
	if (one == 0)
    10d8:	00 97       	sbiw	r24, 0x00	; 0
    10da:	49 f4       	brne	.+18     	; 0x10ee <setLine+0x2c>
	clrLED(0,4,4);
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	64 e0       	ldi	r22, 0x04	; 4
    10e2:	70 e0       	ldi	r23, 0x00	; 0
    10e4:	44 e0       	ldi	r20, 0x04	; 4
    10e6:	50 e0       	ldi	r21, 0x00	; 0
    10e8:	0e 94 16 03 	call	0x62c	; 0x62c <clrLED>
    10ec:	08 c0       	rjmp	.+16     	; 0x10fe <setLine+0x3c>
	else setLED(0,4,4);
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	64 e0       	ldi	r22, 0x04	; 4
    10f4:	70 e0       	ldi	r23, 0x00	; 0
    10f6:	44 e0       	ldi	r20, 0x04	; 4
    10f8:	50 e0       	ldi	r21, 0x00	; 0
    10fa:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	if (two == 0) 
    10fe:	e1 14       	cp	r14, r1
    1100:	f1 04       	cpc	r15, r1
    1102:	49 f4       	brne	.+18     	; 0x1116 <setLine+0x54>
	clrLED(0,4,3);
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	64 e0       	ldi	r22, 0x04	; 4
    110a:	70 e0       	ldi	r23, 0x00	; 0
    110c:	43 e0       	ldi	r20, 0x03	; 3
    110e:	50 e0       	ldi	r21, 0x00	; 0
    1110:	0e 94 16 03 	call	0x62c	; 0x62c <clrLED>
    1114:	08 c0       	rjmp	.+16     	; 0x1126 <setLine+0x64>
	else setLED(0,4,3);
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	64 e0       	ldi	r22, 0x04	; 4
    111c:	70 e0       	ldi	r23, 0x00	; 0
    111e:	43 e0       	ldi	r20, 0x03	; 3
    1120:	50 e0       	ldi	r21, 0x00	; 0
    1122:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	if (three == 0) 
    1126:	c1 14       	cp	r12, r1
    1128:	d1 04       	cpc	r13, r1
    112a:	49 f4       	brne	.+18     	; 0x113e <setLine+0x7c>
	clrLED(0,4,2);
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	64 e0       	ldi	r22, 0x04	; 4
    1132:	70 e0       	ldi	r23, 0x00	; 0
    1134:	42 e0       	ldi	r20, 0x02	; 2
    1136:	50 e0       	ldi	r21, 0x00	; 0
    1138:	0e 94 16 03 	call	0x62c	; 0x62c <clrLED>
    113c:	08 c0       	rjmp	.+16     	; 0x114e <setLine+0x8c>
	else setLED(0,4,2);
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	64 e0       	ldi	r22, 0x04	; 4
    1144:	70 e0       	ldi	r23, 0x00	; 0
    1146:	42 e0       	ldi	r20, 0x02	; 2
    1148:	50 e0       	ldi	r21, 0x00	; 0
    114a:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	if (four == 0) 
    114e:	20 97       	sbiw	r28, 0x00	; 0
    1150:	49 f4       	brne	.+18     	; 0x1164 <setLine+0xa2>
	clrLED(0,4,1);
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	64 e0       	ldi	r22, 0x04	; 4
    1158:	70 e0       	ldi	r23, 0x00	; 0
    115a:	41 e0       	ldi	r20, 0x01	; 1
    115c:	50 e0       	ldi	r21, 0x00	; 0
    115e:	0e 94 16 03 	call	0x62c	; 0x62c <clrLED>
    1162:	08 c0       	rjmp	.+16     	; 0x1174 <setLine+0xb2>
	else setLED(0,4,1);
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	64 e0       	ldi	r22, 0x04	; 4
    116a:	70 e0       	ldi	r23, 0x00	; 0
    116c:	41 e0       	ldi	r20, 0x01	; 1
    116e:	50 e0       	ldi	r21, 0x00	; 0
    1170:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	if (five == 0) 
    1174:	01 15       	cp	r16, r1
    1176:	11 05       	cpc	r17, r1
    1178:	49 f4       	brne	.+18     	; 0x118c <setLine+0xca>
	clrLED(0,4,0);
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	64 e0       	ldi	r22, 0x04	; 4
    1180:	70 e0       	ldi	r23, 0x00	; 0
    1182:	40 e0       	ldi	r20, 0x00	; 0
    1184:	50 e0       	ldi	r21, 0x00	; 0
    1186:	0e 94 16 03 	call	0x62c	; 0x62c <clrLED>
    118a:	08 c0       	rjmp	.+16     	; 0x119c <setLine+0xda>
	else setLED(0,4,0);
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	64 e0       	ldi	r22, 0x04	; 4
    1192:	70 e0       	ldi	r23, 0x00	; 0
    1194:	40 e0       	ldi	r20, 0x00	; 0
    1196:	50 e0       	ldi	r21, 0x00	; 0
    1198:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	shiftLeft();
    119c:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <shiftLeft>

}
    11a0:	df 91       	pop	r29
    11a2:	cf 91       	pop	r28
    11a4:	1f 91       	pop	r17
    11a6:	0f 91       	pop	r16
    11a8:	ff 90       	pop	r15
    11aa:	ef 90       	pop	r14
    11ac:	df 90       	pop	r13
    11ae:	cf 90       	pop	r12
    11b0:	08 95       	ret

000011b2 <_writeA>:

void _writeA()
{
    11b2:	0f 93       	push	r16
    11b4:	1f 93       	push	r17
 setLine(0,1,1,1,1);
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	61 e0       	ldi	r22, 0x01	; 1
    11bc:	70 e0       	ldi	r23, 0x00	; 0
    11be:	41 e0       	ldi	r20, 0x01	; 1
    11c0:	50 e0       	ldi	r21, 0x00	; 0
    11c2:	21 e0       	ldi	r18, 0x01	; 1
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	01 e0       	ldi	r16, 0x01	; 1
    11c8:	10 e0       	ldi	r17, 0x00	; 0
    11ca:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
 setLine(1,0,1,0,0);
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	60 e0       	ldi	r22, 0x00	; 0
    11d4:	70 e0       	ldi	r23, 0x00	; 0
    11d6:	41 e0       	ldi	r20, 0x01	; 1
    11d8:	50 e0       	ldi	r21, 0x00	; 0
    11da:	20 e0       	ldi	r18, 0x00	; 0
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	00 e0       	ldi	r16, 0x00	; 0
    11e0:	10 e0       	ldi	r17, 0x00	; 0
    11e2:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
 setLine(1,0,1,0,0);
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	60 e0       	ldi	r22, 0x00	; 0
    11ec:	70 e0       	ldi	r23, 0x00	; 0
    11ee:	41 e0       	ldi	r20, 0x01	; 1
    11f0:	50 e0       	ldi	r21, 0x00	; 0
    11f2:	20 e0       	ldi	r18, 0x00	; 0
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
 setLine(0,1,1,1,1);
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	61 e0       	ldi	r22, 0x01	; 1
    1200:	70 e0       	ldi	r23, 0x00	; 0
    1202:	41 e0       	ldi	r20, 0x01	; 1
    1204:	50 e0       	ldi	r21, 0x00	; 0
    1206:	21 e0       	ldi	r18, 0x01	; 1
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	01 e0       	ldi	r16, 0x01	; 1
    120c:	10 e0       	ldi	r17, 0x00	; 0
    120e:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
 setLine(0,0,0,0,0);
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	60 e0       	ldi	r22, 0x00	; 0
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	40 e0       	ldi	r20, 0x00	; 0
    121c:	50 e0       	ldi	r21, 0x00	; 0
    121e:	20 e0       	ldi	r18, 0x00	; 0
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	00 e0       	ldi	r16, 0x00	; 0
    1224:	10 e0       	ldi	r17, 0x00	; 0
    1226:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
}
    122a:	1f 91       	pop	r17
    122c:	0f 91       	pop	r16
    122e:	08 95       	ret

00001230 <_writeB>:

void _writeB()
{
    1230:	0f 93       	push	r16
    1232:	1f 93       	push	r17
setLine(1,1,1,1,1);
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	61 e0       	ldi	r22, 0x01	; 1
    123a:	70 e0       	ldi	r23, 0x00	; 0
    123c:	41 e0       	ldi	r20, 0x01	; 1
    123e:	50 e0       	ldi	r21, 0x00	; 0
    1240:	21 e0       	ldi	r18, 0x01	; 1
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	01 e0       	ldi	r16, 0x01	; 1
    1246:	10 e0       	ldi	r17, 0x00	; 0
    1248:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,0,1,0,1);
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	60 e0       	ldi	r22, 0x00	; 0
    1252:	70 e0       	ldi	r23, 0x00	; 0
    1254:	41 e0       	ldi	r20, 0x01	; 1
    1256:	50 e0       	ldi	r21, 0x00	; 0
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,0,1,0,1);
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	60 e0       	ldi	r22, 0x00	; 0
    1266:	70 e0       	ldi	r23, 0x00	; 0
    1268:	41 e0       	ldi	r20, 0x01	; 1
    126a:	50 e0       	ldi	r21, 0x00	; 0
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,1,0,1,0);
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	61 e0       	ldi	r22, 0x01	; 1
    127a:	70 e0       	ldi	r23, 0x00	; 0
    127c:	40 e0       	ldi	r20, 0x00	; 0
    127e:	50 e0       	ldi	r21, 0x00	; 0
    1280:	21 e0       	ldi	r18, 0x01	; 1
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	00 e0       	ldi	r16, 0x00	; 0
    1286:	10 e0       	ldi	r17, 0x00	; 0
    1288:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,0,0);
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	60 e0       	ldi	r22, 0x00	; 0
    1292:	70 e0       	ldi	r23, 0x00	; 0
    1294:	40 e0       	ldi	r20, 0x00	; 0
    1296:	50 e0       	ldi	r21, 0x00	; 0
    1298:	20 e0       	ldi	r18, 0x00	; 0
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>

}
    12a0:	1f 91       	pop	r17
    12a2:	0f 91       	pop	r16
    12a4:	08 95       	ret

000012a6 <_writeC>:

void _writeC()
{
    12a6:	0f 93       	push	r16
    12a8:	1f 93       	push	r17
setLine(0,1,1,1,0);
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	61 e0       	ldi	r22, 0x01	; 1
    12b0:	70 e0       	ldi	r23, 0x00	; 0
    12b2:	41 e0       	ldi	r20, 0x01	; 1
    12b4:	50 e0       	ldi	r21, 0x00	; 0
    12b6:	21 e0       	ldi	r18, 0x01	; 1
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	00 e0       	ldi	r16, 0x00	; 0
    12bc:	10 e0       	ldi	r17, 0x00	; 0
    12be:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,0,0,0,1);
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	60 e0       	ldi	r22, 0x00	; 0
    12c8:	70 e0       	ldi	r23, 0x00	; 0
    12ca:	40 e0       	ldi	r20, 0x00	; 0
    12cc:	50 e0       	ldi	r21, 0x00	; 0
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	01 e0       	ldi	r16, 0x01	; 1
    12d4:	10 e0       	ldi	r17, 0x00	; 0
    12d6:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,0,0,0,1);
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	60 e0       	ldi	r22, 0x00	; 0
    12e0:	70 e0       	ldi	r23, 0x00	; 0
    12e2:	40 e0       	ldi	r20, 0x00	; 0
    12e4:	50 e0       	ldi	r21, 0x00	; 0
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,0,0,0,1);
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	60 e0       	ldi	r22, 0x00	; 0
    12f4:	70 e0       	ldi	r23, 0x00	; 0
    12f6:	40 e0       	ldi	r20, 0x00	; 0
    12f8:	50 e0       	ldi	r21, 0x00	; 0
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,0,0);
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	60 e0       	ldi	r22, 0x00	; 0
    1308:	70 e0       	ldi	r23, 0x00	; 0
    130a:	40 e0       	ldi	r20, 0x00	; 0
    130c:	50 e0       	ldi	r21, 0x00	; 0
    130e:	20 e0       	ldi	r18, 0x00	; 0
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	00 e0       	ldi	r16, 0x00	; 0
    1314:	10 e0       	ldi	r17, 0x00	; 0
    1316:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>

}
    131a:	1f 91       	pop	r17
    131c:	0f 91       	pop	r16
    131e:	08 95       	ret

00001320 <_writeD>:

void _writeD()
{
    1320:	0f 93       	push	r16
    1322:	1f 93       	push	r17
setLine(1,1,1,1,1);
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	61 e0       	ldi	r22, 0x01	; 1
    132a:	70 e0       	ldi	r23, 0x00	; 0
    132c:	41 e0       	ldi	r20, 0x01	; 1
    132e:	50 e0       	ldi	r21, 0x00	; 0
    1330:	21 e0       	ldi	r18, 0x01	; 1
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	01 e0       	ldi	r16, 0x01	; 1
    1336:	10 e0       	ldi	r17, 0x00	; 0
    1338:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,0,0,0,1);
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	60 e0       	ldi	r22, 0x00	; 0
    1342:	70 e0       	ldi	r23, 0x00	; 0
    1344:	40 e0       	ldi	r20, 0x00	; 0
    1346:	50 e0       	ldi	r21, 0x00	; 0
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,0,0,0,1);
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	60 e0       	ldi	r22, 0x00	; 0
    1356:	70 e0       	ldi	r23, 0x00	; 0
    1358:	40 e0       	ldi	r20, 0x00	; 0
    135a:	50 e0       	ldi	r21, 0x00	; 0
    135c:	20 e0       	ldi	r18, 0x00	; 0
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,1,1,1,0);
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	61 e0       	ldi	r22, 0x01	; 1
    136a:	70 e0       	ldi	r23, 0x00	; 0
    136c:	41 e0       	ldi	r20, 0x01	; 1
    136e:	50 e0       	ldi	r21, 0x00	; 0
    1370:	21 e0       	ldi	r18, 0x01	; 1
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	00 e0       	ldi	r16, 0x00	; 0
    1376:	10 e0       	ldi	r17, 0x00	; 0
    1378:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,0,0);
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	60 e0       	ldi	r22, 0x00	; 0
    1382:	70 e0       	ldi	r23, 0x00	; 0
    1384:	40 e0       	ldi	r20, 0x00	; 0
    1386:	50 e0       	ldi	r21, 0x00	; 0
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>

}
    1390:	1f 91       	pop	r17
    1392:	0f 91       	pop	r16
    1394:	08 95       	ret

00001396 <_writeE>:

void _writeE()
{
    1396:	0f 93       	push	r16
    1398:	1f 93       	push	r17
setLine(1,1,1,1,1);
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	61 e0       	ldi	r22, 0x01	; 1
    13a0:	70 e0       	ldi	r23, 0x00	; 0
    13a2:	41 e0       	ldi	r20, 0x01	; 1
    13a4:	50 e0       	ldi	r21, 0x00	; 0
    13a6:	21 e0       	ldi	r18, 0x01	; 1
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	01 e0       	ldi	r16, 0x01	; 1
    13ac:	10 e0       	ldi	r17, 0x00	; 0
    13ae:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,0,1,0,1);
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	60 e0       	ldi	r22, 0x00	; 0
    13b8:	70 e0       	ldi	r23, 0x00	; 0
    13ba:	41 e0       	ldi	r20, 0x01	; 1
    13bc:	50 e0       	ldi	r21, 0x00	; 0
    13be:	20 e0       	ldi	r18, 0x00	; 0
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,0,1,0,1);
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	60 e0       	ldi	r22, 0x00	; 0
    13cc:	70 e0       	ldi	r23, 0x00	; 0
    13ce:	41 e0       	ldi	r20, 0x01	; 1
    13d0:	50 e0       	ldi	r21, 0x00	; 0
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,0,0,0,1);
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	60 e0       	ldi	r22, 0x00	; 0
    13e0:	70 e0       	ldi	r23, 0x00	; 0
    13e2:	40 e0       	ldi	r20, 0x00	; 0
    13e4:	50 e0       	ldi	r21, 0x00	; 0
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,0,0);
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	60 e0       	ldi	r22, 0x00	; 0
    13f4:	70 e0       	ldi	r23, 0x00	; 0
    13f6:	40 e0       	ldi	r20, 0x00	; 0
    13f8:	50 e0       	ldi	r21, 0x00	; 0
    13fa:	20 e0       	ldi	r18, 0x00	; 0
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	00 e0       	ldi	r16, 0x00	; 0
    1400:	10 e0       	ldi	r17, 0x00	; 0
    1402:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>

}
    1406:	1f 91       	pop	r17
    1408:	0f 91       	pop	r16
    140a:	08 95       	ret

0000140c <_writeF>:

void _writeF()
{
    140c:	0f 93       	push	r16
    140e:	1f 93       	push	r17
setLine(1,1,1,1,1);
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	61 e0       	ldi	r22, 0x01	; 1
    1416:	70 e0       	ldi	r23, 0x00	; 0
    1418:	41 e0       	ldi	r20, 0x01	; 1
    141a:	50 e0       	ldi	r21, 0x00	; 0
    141c:	21 e0       	ldi	r18, 0x01	; 1
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	01 e0       	ldi	r16, 0x01	; 1
    1422:	10 e0       	ldi	r17, 0x00	; 0
    1424:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,0,1,0,0);
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	60 e0       	ldi	r22, 0x00	; 0
    142e:	70 e0       	ldi	r23, 0x00	; 0
    1430:	41 e0       	ldi	r20, 0x01	; 1
    1432:	50 e0       	ldi	r21, 0x00	; 0
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	00 e0       	ldi	r16, 0x00	; 0
    143a:	10 e0       	ldi	r17, 0x00	; 0
    143c:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,0,1,0,0);
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	60 e0       	ldi	r22, 0x00	; 0
    1446:	70 e0       	ldi	r23, 0x00	; 0
    1448:	41 e0       	ldi	r20, 0x01	; 1
    144a:	50 e0       	ldi	r21, 0x00	; 0
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,0,0,0,0);
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	60 e0       	ldi	r22, 0x00	; 0
    145a:	70 e0       	ldi	r23, 0x00	; 0
    145c:	40 e0       	ldi	r20, 0x00	; 0
    145e:	50 e0       	ldi	r21, 0x00	; 0
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,0,0);
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	60 e0       	ldi	r22, 0x00	; 0
    146e:	70 e0       	ldi	r23, 0x00	; 0
    1470:	40 e0       	ldi	r20, 0x00	; 0
    1472:	50 e0       	ldi	r21, 0x00	; 0
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>

}
    147c:	1f 91       	pop	r17
    147e:	0f 91       	pop	r16
    1480:	08 95       	ret

00001482 <_writeG>:

void _writeG()
{
    1482:	0f 93       	push	r16
    1484:	1f 93       	push	r17
setLine(0,1,1,1,0);
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	61 e0       	ldi	r22, 0x01	; 1
    148c:	70 e0       	ldi	r23, 0x00	; 0
    148e:	41 e0       	ldi	r20, 0x01	; 1
    1490:	50 e0       	ldi	r21, 0x00	; 0
    1492:	21 e0       	ldi	r18, 0x01	; 1
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	00 e0       	ldi	r16, 0x00	; 0
    1498:	10 e0       	ldi	r17, 0x00	; 0
    149a:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,0,0,0,1);
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	60 e0       	ldi	r22, 0x00	; 0
    14a4:	70 e0       	ldi	r23, 0x00	; 0
    14a6:	40 e0       	ldi	r20, 0x00	; 0
    14a8:	50 e0       	ldi	r21, 0x00	; 0
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	01 e0       	ldi	r16, 0x01	; 1
    14b0:	10 e0       	ldi	r17, 0x00	; 0
    14b2:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,0,0,0,1);
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	60 e0       	ldi	r22, 0x00	; 0
    14bc:	70 e0       	ldi	r23, 0x00	; 0
    14be:	40 e0       	ldi	r20, 0x00	; 0
    14c0:	50 e0       	ldi	r21, 0x00	; 0
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,0,1,0,1);
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	60 e0       	ldi	r22, 0x00	; 0
    14d0:	70 e0       	ldi	r23, 0x00	; 0
    14d2:	41 e0       	ldi	r20, 0x01	; 1
    14d4:	50 e0       	ldi	r21, 0x00	; 0
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,0,1,1,0);
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	60 e0       	ldi	r22, 0x00	; 0
    14e4:	70 e0       	ldi	r23, 0x00	; 0
    14e6:	41 e0       	ldi	r20, 0x01	; 1
    14e8:	50 e0       	ldi	r21, 0x00	; 0
    14ea:	21 e0       	ldi	r18, 0x01	; 1
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	00 e0       	ldi	r16, 0x00	; 0
    14f0:	10 e0       	ldi	r17, 0x00	; 0
    14f2:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,0,0);
    14f6:	80 e0       	ldi	r24, 0x00	; 0
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	60 e0       	ldi	r22, 0x00	; 0
    14fc:	70 e0       	ldi	r23, 0x00	; 0
    14fe:	40 e0       	ldi	r20, 0x00	; 0
    1500:	50 e0       	ldi	r21, 0x00	; 0
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>

}
    150a:	1f 91       	pop	r17
    150c:	0f 91       	pop	r16
    150e:	08 95       	ret

00001510 <_writeH>:

void _writeH()
{
    1510:	0f 93       	push	r16
    1512:	1f 93       	push	r17
setLine(1,1,1,1,1);
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	61 e0       	ldi	r22, 0x01	; 1
    151a:	70 e0       	ldi	r23, 0x00	; 0
    151c:	41 e0       	ldi	r20, 0x01	; 1
    151e:	50 e0       	ldi	r21, 0x00	; 0
    1520:	21 e0       	ldi	r18, 0x01	; 1
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	01 e0       	ldi	r16, 0x01	; 1
    1526:	10 e0       	ldi	r17, 0x00	; 0
    1528:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,1,0,0);
    152c:	80 e0       	ldi	r24, 0x00	; 0
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	60 e0       	ldi	r22, 0x00	; 0
    1532:	70 e0       	ldi	r23, 0x00	; 0
    1534:	41 e0       	ldi	r20, 0x01	; 1
    1536:	50 e0       	ldi	r21, 0x00	; 0
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	00 e0       	ldi	r16, 0x00	; 0
    153e:	10 e0       	ldi	r17, 0x00	; 0
    1540:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,1,0,0);
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	60 e0       	ldi	r22, 0x00	; 0
    154a:	70 e0       	ldi	r23, 0x00	; 0
    154c:	41 e0       	ldi	r20, 0x01	; 1
    154e:	50 e0       	ldi	r21, 0x00	; 0
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,1,1,1,1);
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	61 e0       	ldi	r22, 0x01	; 1
    155e:	70 e0       	ldi	r23, 0x00	; 0
    1560:	41 e0       	ldi	r20, 0x01	; 1
    1562:	50 e0       	ldi	r21, 0x00	; 0
    1564:	21 e0       	ldi	r18, 0x01	; 1
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	01 e0       	ldi	r16, 0x01	; 1
    156a:	10 e0       	ldi	r17, 0x00	; 0
    156c:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,0,0);
    1570:	80 e0       	ldi	r24, 0x00	; 0
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	60 e0       	ldi	r22, 0x00	; 0
    1576:	70 e0       	ldi	r23, 0x00	; 0
    1578:	40 e0       	ldi	r20, 0x00	; 0
    157a:	50 e0       	ldi	r21, 0x00	; 0
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	00 e0       	ldi	r16, 0x00	; 0
    1582:	10 e0       	ldi	r17, 0x00	; 0
    1584:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>

}
    1588:	1f 91       	pop	r17
    158a:	0f 91       	pop	r16
    158c:	08 95       	ret

0000158e <_writeI>:

void _writeI()
{
    158e:	0f 93       	push	r16
    1590:	1f 93       	push	r17
setLine(1,0,0,0,1);
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	60 e0       	ldi	r22, 0x00	; 0
    1598:	70 e0       	ldi	r23, 0x00	; 0
    159a:	40 e0       	ldi	r20, 0x00	; 0
    159c:	50 e0       	ldi	r21, 0x00	; 0
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	01 e0       	ldi	r16, 0x01	; 1
    15a4:	10 e0       	ldi	r17, 0x00	; 0
    15a6:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,1,1,1,1);
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	61 e0       	ldi	r22, 0x01	; 1
    15b0:	70 e0       	ldi	r23, 0x00	; 0
    15b2:	41 e0       	ldi	r20, 0x01	; 1
    15b4:	50 e0       	ldi	r21, 0x00	; 0
    15b6:	21 e0       	ldi	r18, 0x01	; 1
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,0,0,0,1);
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	60 e0       	ldi	r22, 0x00	; 0
    15c4:	70 e0       	ldi	r23, 0x00	; 0
    15c6:	40 e0       	ldi	r20, 0x00	; 0
    15c8:	50 e0       	ldi	r21, 0x00	; 0
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
}
    15d2:	1f 91       	pop	r17
    15d4:	0f 91       	pop	r16
    15d6:	08 95       	ret

000015d8 <_writeJ>:

void _writeJ()
{
    15d8:	0f 93       	push	r16
    15da:	1f 93       	push	r17
setLine(1,0,0,1,0);
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	60 e0       	ldi	r22, 0x00	; 0
    15e2:	70 e0       	ldi	r23, 0x00	; 0
    15e4:	40 e0       	ldi	r20, 0x00	; 0
    15e6:	50 e0       	ldi	r21, 0x00	; 0
    15e8:	21 e0       	ldi	r18, 0x01	; 1
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	00 e0       	ldi	r16, 0x00	; 0
    15ee:	10 e0       	ldi	r17, 0x00	; 0
    15f0:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,0,0,0,1);
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	60 e0       	ldi	r22, 0x00	; 0
    15fa:	70 e0       	ldi	r23, 0x00	; 0
    15fc:	40 e0       	ldi	r20, 0x00	; 0
    15fe:	50 e0       	ldi	r21, 0x00	; 0
    1600:	20 e0       	ldi	r18, 0x00	; 0
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	01 e0       	ldi	r16, 0x01	; 1
    1606:	10 e0       	ldi	r17, 0x00	; 0
    1608:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,0,0,0,1);
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	60 e0       	ldi	r22, 0x00	; 0
    1612:	70 e0       	ldi	r23, 0x00	; 0
    1614:	40 e0       	ldi	r20, 0x00	; 0
    1616:	50 e0       	ldi	r21, 0x00	; 0
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,1,1,1,0);
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	61 e0       	ldi	r22, 0x01	; 1
    1626:	70 e0       	ldi	r23, 0x00	; 0
    1628:	41 e0       	ldi	r20, 0x01	; 1
    162a:	50 e0       	ldi	r21, 0x00	; 0
    162c:	21 e0       	ldi	r18, 0x01	; 1
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	00 e0       	ldi	r16, 0x00	; 0
    1632:	10 e0       	ldi	r17, 0x00	; 0
    1634:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,0,0);
    1638:	80 e0       	ldi	r24, 0x00	; 0
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	60 e0       	ldi	r22, 0x00	; 0
    163e:	70 e0       	ldi	r23, 0x00	; 0
    1640:	40 e0       	ldi	r20, 0x00	; 0
    1642:	50 e0       	ldi	r21, 0x00	; 0
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>

}
    164c:	1f 91       	pop	r17
    164e:	0f 91       	pop	r16
    1650:	08 95       	ret

00001652 <_writeK>:

void _writeK()
{
    1652:	0f 93       	push	r16
    1654:	1f 93       	push	r17
setLine(1,1,1,1,1);
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	61 e0       	ldi	r22, 0x01	; 1
    165c:	70 e0       	ldi	r23, 0x00	; 0
    165e:	41 e0       	ldi	r20, 0x01	; 1
    1660:	50 e0       	ldi	r21, 0x00	; 0
    1662:	21 e0       	ldi	r18, 0x01	; 1
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	01 e0       	ldi	r16, 0x01	; 1
    1668:	10 e0       	ldi	r17, 0x00	; 0
    166a:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,1,0,0);
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	60 e0       	ldi	r22, 0x00	; 0
    1674:	70 e0       	ldi	r23, 0x00	; 0
    1676:	41 e0       	ldi	r20, 0x01	; 1
    1678:	50 e0       	ldi	r21, 0x00	; 0
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	00 e0       	ldi	r16, 0x00	; 0
    1680:	10 e0       	ldi	r17, 0x00	; 0
    1682:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,1,0,1,0);
    1686:	80 e0       	ldi	r24, 0x00	; 0
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	61 e0       	ldi	r22, 0x01	; 1
    168c:	70 e0       	ldi	r23, 0x00	; 0
    168e:	40 e0       	ldi	r20, 0x00	; 0
    1690:	50 e0       	ldi	r21, 0x00	; 0
    1692:	21 e0       	ldi	r18, 0x01	; 1
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,0,0,0,1);
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	60 e0       	ldi	r22, 0x00	; 0
    16a0:	70 e0       	ldi	r23, 0x00	; 0
    16a2:	40 e0       	ldi	r20, 0x00	; 0
    16a4:	50 e0       	ldi	r21, 0x00	; 0
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	01 e0       	ldi	r16, 0x01	; 1
    16ac:	10 e0       	ldi	r17, 0x00	; 0
    16ae:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,0,0);
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	60 e0       	ldi	r22, 0x00	; 0
    16b8:	70 e0       	ldi	r23, 0x00	; 0
    16ba:	40 e0       	ldi	r20, 0x00	; 0
    16bc:	50 e0       	ldi	r21, 0x00	; 0
    16be:	20 e0       	ldi	r18, 0x00	; 0
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	00 e0       	ldi	r16, 0x00	; 0
    16c4:	10 e0       	ldi	r17, 0x00	; 0
    16c6:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>

}
    16ca:	1f 91       	pop	r17
    16cc:	0f 91       	pop	r16
    16ce:	08 95       	ret

000016d0 <_writeL>:

void _writeL()
{
    16d0:	0f 93       	push	r16
    16d2:	1f 93       	push	r17
setLine(1,1,1,1,1);
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	61 e0       	ldi	r22, 0x01	; 1
    16da:	70 e0       	ldi	r23, 0x00	; 0
    16dc:	41 e0       	ldi	r20, 0x01	; 1
    16de:	50 e0       	ldi	r21, 0x00	; 0
    16e0:	21 e0       	ldi	r18, 0x01	; 1
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	01 e0       	ldi	r16, 0x01	; 1
    16e6:	10 e0       	ldi	r17, 0x00	; 0
    16e8:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,0,1);
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	60 e0       	ldi	r22, 0x00	; 0
    16f2:	70 e0       	ldi	r23, 0x00	; 0
    16f4:	40 e0       	ldi	r20, 0x00	; 0
    16f6:	50 e0       	ldi	r21, 0x00	; 0
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,0,1);
    1700:	80 e0       	ldi	r24, 0x00	; 0
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	60 e0       	ldi	r22, 0x00	; 0
    1706:	70 e0       	ldi	r23, 0x00	; 0
    1708:	40 e0       	ldi	r20, 0x00	; 0
    170a:	50 e0       	ldi	r21, 0x00	; 0
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,0,1);
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	60 e0       	ldi	r22, 0x00	; 0
    171a:	70 e0       	ldi	r23, 0x00	; 0
    171c:	40 e0       	ldi	r20, 0x00	; 0
    171e:	50 e0       	ldi	r21, 0x00	; 0
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,0,0);
    1728:	80 e0       	ldi	r24, 0x00	; 0
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	60 e0       	ldi	r22, 0x00	; 0
    172e:	70 e0       	ldi	r23, 0x00	; 0
    1730:	40 e0       	ldi	r20, 0x00	; 0
    1732:	50 e0       	ldi	r21, 0x00	; 0
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	00 e0       	ldi	r16, 0x00	; 0
    173a:	10 e0       	ldi	r17, 0x00	; 0
    173c:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
}
    1740:	1f 91       	pop	r17
    1742:	0f 91       	pop	r16
    1744:	08 95       	ret

00001746 <_writeM>:

void _writeM()
{
    1746:	0f 93       	push	r16
    1748:	1f 93       	push	r17
setLine(1,1,1,1,1);
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	61 e0       	ldi	r22, 0x01	; 1
    1750:	70 e0       	ldi	r23, 0x00	; 0
    1752:	41 e0       	ldi	r20, 0x01	; 1
    1754:	50 e0       	ldi	r21, 0x00	; 0
    1756:	21 e0       	ldi	r18, 0x01	; 1
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	01 e0       	ldi	r16, 0x01	; 1
    175c:	10 e0       	ldi	r17, 0x00	; 0
    175e:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,1,0,0,0);
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	61 e0       	ldi	r22, 0x01	; 1
    1768:	70 e0       	ldi	r23, 0x00	; 0
    176a:	40 e0       	ldi	r20, 0x00	; 0
    176c:	50 e0       	ldi	r21, 0x00	; 0
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	00 e0       	ldi	r16, 0x00	; 0
    1774:	10 e0       	ldi	r17, 0x00	; 0
    1776:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,1,0,0);
    177a:	80 e0       	ldi	r24, 0x00	; 0
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	60 e0       	ldi	r22, 0x00	; 0
    1780:	70 e0       	ldi	r23, 0x00	; 0
    1782:	41 e0       	ldi	r20, 0x01	; 1
    1784:	50 e0       	ldi	r21, 0x00	; 0
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,1,0,0,0);
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	61 e0       	ldi	r22, 0x01	; 1
    1794:	70 e0       	ldi	r23, 0x00	; 0
    1796:	40 e0       	ldi	r20, 0x00	; 0
    1798:	50 e0       	ldi	r21, 0x00	; 0
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,1,1,1,1);
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	61 e0       	ldi	r22, 0x01	; 1
    17a8:	70 e0       	ldi	r23, 0x00	; 0
    17aa:	41 e0       	ldi	r20, 0x01	; 1
    17ac:	50 e0       	ldi	r21, 0x00	; 0
    17ae:	21 e0       	ldi	r18, 0x01	; 1
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	01 e0       	ldi	r16, 0x01	; 1
    17b4:	10 e0       	ldi	r17, 0x00	; 0
    17b6:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,0,0);
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	60 e0       	ldi	r22, 0x00	; 0
    17c0:	70 e0       	ldi	r23, 0x00	; 0
    17c2:	40 e0       	ldi	r20, 0x00	; 0
    17c4:	50 e0       	ldi	r21, 0x00	; 0
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	00 e0       	ldi	r16, 0x00	; 0
    17cc:	10 e0       	ldi	r17, 0x00	; 0
    17ce:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
}
    17d2:	1f 91       	pop	r17
    17d4:	0f 91       	pop	r16
    17d6:	08 95       	ret

000017d8 <_writeN>:


void _writeN()
{
    17d8:	0f 93       	push	r16
    17da:	1f 93       	push	r17
setLine(1,1,1,1,1);
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	61 e0       	ldi	r22, 0x01	; 1
    17e2:	70 e0       	ldi	r23, 0x00	; 0
    17e4:	41 e0       	ldi	r20, 0x01	; 1
    17e6:	50 e0       	ldi	r21, 0x00	; 0
    17e8:	21 e0       	ldi	r18, 0x01	; 1
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	01 e0       	ldi	r16, 0x01	; 1
    17ee:	10 e0       	ldi	r17, 0x00	; 0
    17f0:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,1,0,0,0);
    17f4:	80 e0       	ldi	r24, 0x00	; 0
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	61 e0       	ldi	r22, 0x01	; 1
    17fa:	70 e0       	ldi	r23, 0x00	; 0
    17fc:	40 e0       	ldi	r20, 0x00	; 0
    17fe:	50 e0       	ldi	r21, 0x00	; 0
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	00 e0       	ldi	r16, 0x00	; 0
    1806:	10 e0       	ldi	r17, 0x00	; 0
    1808:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,1,0,0);
    180c:	80 e0       	ldi	r24, 0x00	; 0
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	60 e0       	ldi	r22, 0x00	; 0
    1812:	70 e0       	ldi	r23, 0x00	; 0
    1814:	41 e0       	ldi	r20, 0x01	; 1
    1816:	50 e0       	ldi	r21, 0x00	; 0
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,1,0);
    1820:	80 e0       	ldi	r24, 0x00	; 0
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	60 e0       	ldi	r22, 0x00	; 0
    1826:	70 e0       	ldi	r23, 0x00	; 0
    1828:	40 e0       	ldi	r20, 0x00	; 0
    182a:	50 e0       	ldi	r21, 0x00	; 0
    182c:	21 e0       	ldi	r18, 0x01	; 1
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,1,1,1,1);
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	61 e0       	ldi	r22, 0x01	; 1
    183a:	70 e0       	ldi	r23, 0x00	; 0
    183c:	41 e0       	ldi	r20, 0x01	; 1
    183e:	50 e0       	ldi	r21, 0x00	; 0
    1840:	21 e0       	ldi	r18, 0x01	; 1
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	01 e0       	ldi	r16, 0x01	; 1
    1846:	10 e0       	ldi	r17, 0x00	; 0
    1848:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,0,0);
    184c:	80 e0       	ldi	r24, 0x00	; 0
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	60 e0       	ldi	r22, 0x00	; 0
    1852:	70 e0       	ldi	r23, 0x00	; 0
    1854:	40 e0       	ldi	r20, 0x00	; 0
    1856:	50 e0       	ldi	r21, 0x00	; 0
    1858:	20 e0       	ldi	r18, 0x00	; 0
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	00 e0       	ldi	r16, 0x00	; 0
    185e:	10 e0       	ldi	r17, 0x00	; 0
    1860:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
}
    1864:	1f 91       	pop	r17
    1866:	0f 91       	pop	r16
    1868:	08 95       	ret

0000186a <_writeO>:

void _writeO()
{
    186a:	0f 93       	push	r16
    186c:	1f 93       	push	r17
setLine(0,1,1,1,0);
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	61 e0       	ldi	r22, 0x01	; 1
    1874:	70 e0       	ldi	r23, 0x00	; 0
    1876:	41 e0       	ldi	r20, 0x01	; 1
    1878:	50 e0       	ldi	r21, 0x00	; 0
    187a:	21 e0       	ldi	r18, 0x01	; 1
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	00 e0       	ldi	r16, 0x00	; 0
    1880:	10 e0       	ldi	r17, 0x00	; 0
    1882:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,0,0,0,1);
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	60 e0       	ldi	r22, 0x00	; 0
    188c:	70 e0       	ldi	r23, 0x00	; 0
    188e:	40 e0       	ldi	r20, 0x00	; 0
    1890:	50 e0       	ldi	r21, 0x00	; 0
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	01 e0       	ldi	r16, 0x01	; 1
    1898:	10 e0       	ldi	r17, 0x00	; 0
    189a:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,0,0,0,1);
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	60 e0       	ldi	r22, 0x00	; 0
    18a4:	70 e0       	ldi	r23, 0x00	; 0
    18a6:	40 e0       	ldi	r20, 0x00	; 0
    18a8:	50 e0       	ldi	r21, 0x00	; 0
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,1,1,1,0);
    18b2:	80 e0       	ldi	r24, 0x00	; 0
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	61 e0       	ldi	r22, 0x01	; 1
    18b8:	70 e0       	ldi	r23, 0x00	; 0
    18ba:	41 e0       	ldi	r20, 0x01	; 1
    18bc:	50 e0       	ldi	r21, 0x00	; 0
    18be:	21 e0       	ldi	r18, 0x01	; 1
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	00 e0       	ldi	r16, 0x00	; 0
    18c4:	10 e0       	ldi	r17, 0x00	; 0
    18c6:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,0,0);
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	60 e0       	ldi	r22, 0x00	; 0
    18d0:	70 e0       	ldi	r23, 0x00	; 0
    18d2:	40 e0       	ldi	r20, 0x00	; 0
    18d4:	50 e0       	ldi	r21, 0x00	; 0
    18d6:	20 e0       	ldi	r18, 0x00	; 0
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
}
    18de:	1f 91       	pop	r17
    18e0:	0f 91       	pop	r16
    18e2:	08 95       	ret

000018e4 <_writeP>:

void _writeP()
{
    18e4:	0f 93       	push	r16
    18e6:	1f 93       	push	r17

setLine(1,1,1,1,1);
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	61 e0       	ldi	r22, 0x01	; 1
    18ee:	70 e0       	ldi	r23, 0x00	; 0
    18f0:	41 e0       	ldi	r20, 0x01	; 1
    18f2:	50 e0       	ldi	r21, 0x00	; 0
    18f4:	21 e0       	ldi	r18, 0x01	; 1
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	01 e0       	ldi	r16, 0x01	; 1
    18fa:	10 e0       	ldi	r17, 0x00	; 0
    18fc:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,0,1,0,0);
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	60 e0       	ldi	r22, 0x00	; 0
    1906:	70 e0       	ldi	r23, 0x00	; 0
    1908:	41 e0       	ldi	r20, 0x01	; 1
    190a:	50 e0       	ldi	r21, 0x00	; 0
    190c:	20 e0       	ldi	r18, 0x00	; 0
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	00 e0       	ldi	r16, 0x00	; 0
    1912:	10 e0       	ldi	r17, 0x00	; 0
    1914:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,0,1,0,0);
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	60 e0       	ldi	r22, 0x00	; 0
    191e:	70 e0       	ldi	r23, 0x00	; 0
    1920:	41 e0       	ldi	r20, 0x01	; 1
    1922:	50 e0       	ldi	r21, 0x00	; 0
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,1,0,0,0);
    192c:	80 e0       	ldi	r24, 0x00	; 0
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	61 e0       	ldi	r22, 0x01	; 1
    1932:	70 e0       	ldi	r23, 0x00	; 0
    1934:	40 e0       	ldi	r20, 0x00	; 0
    1936:	50 e0       	ldi	r21, 0x00	; 0
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,0,0);
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	60 e0       	ldi	r22, 0x00	; 0
    1946:	70 e0       	ldi	r23, 0x00	; 0
    1948:	40 e0       	ldi	r20, 0x00	; 0
    194a:	50 e0       	ldi	r21, 0x00	; 0
    194c:	20 e0       	ldi	r18, 0x00	; 0
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
}
    1954:	1f 91       	pop	r17
    1956:	0f 91       	pop	r16
    1958:	08 95       	ret

0000195a <_writeQ>:

void _writeQ()
{
    195a:	0f 93       	push	r16
    195c:	1f 93       	push	r17
setLine(0,1,1,1,0);
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	61 e0       	ldi	r22, 0x01	; 1
    1964:	70 e0       	ldi	r23, 0x00	; 0
    1966:	41 e0       	ldi	r20, 0x01	; 1
    1968:	50 e0       	ldi	r21, 0x00	; 0
    196a:	21 e0       	ldi	r18, 0x01	; 1
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	00 e0       	ldi	r16, 0x00	; 0
    1970:	10 e0       	ldi	r17, 0x00	; 0
    1972:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,0,0,0,1);
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	60 e0       	ldi	r22, 0x00	; 0
    197c:	70 e0       	ldi	r23, 0x00	; 0
    197e:	40 e0       	ldi	r20, 0x00	; 0
    1980:	50 e0       	ldi	r21, 0x00	; 0
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	01 e0       	ldi	r16, 0x01	; 1
    1988:	10 e0       	ldi	r17, 0x00	; 0
    198a:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,0,0,1,1);
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	60 e0       	ldi	r22, 0x00	; 0
    1994:	70 e0       	ldi	r23, 0x00	; 0
    1996:	40 e0       	ldi	r20, 0x00	; 0
    1998:	50 e0       	ldi	r21, 0x00	; 0
    199a:	21 e0       	ldi	r18, 0x01	; 1
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,1,1,1,0);
    19a2:	80 e0       	ldi	r24, 0x00	; 0
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	61 e0       	ldi	r22, 0x01	; 1
    19a8:	70 e0       	ldi	r23, 0x00	; 0
    19aa:	41 e0       	ldi	r20, 0x01	; 1
    19ac:	50 e0       	ldi	r21, 0x00	; 0
    19ae:	21 e0       	ldi	r18, 0x01	; 1
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	00 e0       	ldi	r16, 0x00	; 0
    19b4:	10 e0       	ldi	r17, 0x00	; 0
    19b6:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,0,0);
    19ba:	80 e0       	ldi	r24, 0x00	; 0
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	60 e0       	ldi	r22, 0x00	; 0
    19c0:	70 e0       	ldi	r23, 0x00	; 0
    19c2:	40 e0       	ldi	r20, 0x00	; 0
    19c4:	50 e0       	ldi	r21, 0x00	; 0
    19c6:	20 e0       	ldi	r18, 0x00	; 0
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
}
    19ce:	1f 91       	pop	r17
    19d0:	0f 91       	pop	r16
    19d2:	08 95       	ret

000019d4 <_writeR>:


void _writeR()
{
    19d4:	0f 93       	push	r16
    19d6:	1f 93       	push	r17
setLine(1,1,1,1,1);
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	61 e0       	ldi	r22, 0x01	; 1
    19de:	70 e0       	ldi	r23, 0x00	; 0
    19e0:	41 e0       	ldi	r20, 0x01	; 1
    19e2:	50 e0       	ldi	r21, 0x00	; 0
    19e4:	21 e0       	ldi	r18, 0x01	; 1
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	01 e0       	ldi	r16, 0x01	; 1
    19ea:	10 e0       	ldi	r17, 0x00	; 0
    19ec:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,0,1,0,0);
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	60 e0       	ldi	r22, 0x00	; 0
    19f6:	70 e0       	ldi	r23, 0x00	; 0
    19f8:	41 e0       	ldi	r20, 0x01	; 1
    19fa:	50 e0       	ldi	r21, 0x00	; 0
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	00 e0       	ldi	r16, 0x00	; 0
    1a02:	10 e0       	ldi	r17, 0x00	; 0
    1a04:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,0,1,1,0);
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	60 e0       	ldi	r22, 0x00	; 0
    1a0e:	70 e0       	ldi	r23, 0x00	; 0
    1a10:	41 e0       	ldi	r20, 0x01	; 1
    1a12:	50 e0       	ldi	r21, 0x00	; 0
    1a14:	21 e0       	ldi	r18, 0x01	; 1
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,1,0,0,1);
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	61 e0       	ldi	r22, 0x01	; 1
    1a22:	70 e0       	ldi	r23, 0x00	; 0
    1a24:	40 e0       	ldi	r20, 0x00	; 0
    1a26:	50 e0       	ldi	r21, 0x00	; 0
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	01 e0       	ldi	r16, 0x01	; 1
    1a2e:	10 e0       	ldi	r17, 0x00	; 0
    1a30:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,0,0);
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	60 e0       	ldi	r22, 0x00	; 0
    1a3a:	70 e0       	ldi	r23, 0x00	; 0
    1a3c:	40 e0       	ldi	r20, 0x00	; 0
    1a3e:	50 e0       	ldi	r21, 0x00	; 0
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	00 e0       	ldi	r16, 0x00	; 0
    1a46:	10 e0       	ldi	r17, 0x00	; 0
    1a48:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
}
    1a4c:	1f 91       	pop	r17
    1a4e:	0f 91       	pop	r16
    1a50:	08 95       	ret

00001a52 <_writeS>:

void _writeS()
{
    1a52:	0f 93       	push	r16
    1a54:	1f 93       	push	r17
setLine(0,1,0,0,1);
    1a56:	80 e0       	ldi	r24, 0x00	; 0
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	61 e0       	ldi	r22, 0x01	; 1
    1a5c:	70 e0       	ldi	r23, 0x00	; 0
    1a5e:	40 e0       	ldi	r20, 0x00	; 0
    1a60:	50 e0       	ldi	r21, 0x00	; 0
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	01 e0       	ldi	r16, 0x01	; 1
    1a68:	10 e0       	ldi	r17, 0x00	; 0
    1a6a:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,0,1,0,1);
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	60 e0       	ldi	r22, 0x00	; 0
    1a74:	70 e0       	ldi	r23, 0x00	; 0
    1a76:	41 e0       	ldi	r20, 0x01	; 1
    1a78:	50 e0       	ldi	r21, 0x00	; 0
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,0,1,0,1);
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	60 e0       	ldi	r22, 0x00	; 0
    1a88:	70 e0       	ldi	r23, 0x00	; 0
    1a8a:	41 e0       	ldi	r20, 0x01	; 1
    1a8c:	50 e0       	ldi	r21, 0x00	; 0
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,0,0,1,0);
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	60 e0       	ldi	r22, 0x00	; 0
    1a9c:	70 e0       	ldi	r23, 0x00	; 0
    1a9e:	40 e0       	ldi	r20, 0x00	; 0
    1aa0:	50 e0       	ldi	r21, 0x00	; 0
    1aa2:	21 e0       	ldi	r18, 0x01	; 1
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	00 e0       	ldi	r16, 0x00	; 0
    1aa8:	10 e0       	ldi	r17, 0x00	; 0
    1aaa:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,0,0);
    1aae:	80 e0       	ldi	r24, 0x00	; 0
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	60 e0       	ldi	r22, 0x00	; 0
    1ab4:	70 e0       	ldi	r23, 0x00	; 0
    1ab6:	40 e0       	ldi	r20, 0x00	; 0
    1ab8:	50 e0       	ldi	r21, 0x00	; 0
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>

}
    1ac2:	1f 91       	pop	r17
    1ac4:	0f 91       	pop	r16
    1ac6:	08 95       	ret

00001ac8 <_writeT>:

void _writeT()
{
    1ac8:	0f 93       	push	r16
    1aca:	1f 93       	push	r17
setLine(1,0,0,0,0);
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	60 e0       	ldi	r22, 0x00	; 0
    1ad2:	70 e0       	ldi	r23, 0x00	; 0
    1ad4:	40 e0       	ldi	r20, 0x00	; 0
    1ad6:	50 e0       	ldi	r21, 0x00	; 0
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	00 e0       	ldi	r16, 0x00	; 0
    1ade:	10 e0       	ldi	r17, 0x00	; 0
    1ae0:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,0,0,0,0);
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	60 e0       	ldi	r22, 0x00	; 0
    1aea:	70 e0       	ldi	r23, 0x00	; 0
    1aec:	40 e0       	ldi	r20, 0x00	; 0
    1aee:	50 e0       	ldi	r21, 0x00	; 0
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,1,1,1,1);
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	61 e0       	ldi	r22, 0x01	; 1
    1afe:	70 e0       	ldi	r23, 0x00	; 0
    1b00:	41 e0       	ldi	r20, 0x01	; 1
    1b02:	50 e0       	ldi	r21, 0x00	; 0
    1b04:	21 e0       	ldi	r18, 0x01	; 1
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	01 e0       	ldi	r16, 0x01	; 1
    1b0a:	10 e0       	ldi	r17, 0x00	; 0
    1b0c:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,0,0,0,0);
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	60 e0       	ldi	r22, 0x00	; 0
    1b16:	70 e0       	ldi	r23, 0x00	; 0
    1b18:	40 e0       	ldi	r20, 0x00	; 0
    1b1a:	50 e0       	ldi	r21, 0x00	; 0
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	00 e0       	ldi	r16, 0x00	; 0
    1b22:	10 e0       	ldi	r17, 0x00	; 0
    1b24:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,0,0,0,0);
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	60 e0       	ldi	r22, 0x00	; 0
    1b2e:	70 e0       	ldi	r23, 0x00	; 0
    1b30:	40 e0       	ldi	r20, 0x00	; 0
    1b32:	50 e0       	ldi	r21, 0x00	; 0
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,0,0);
    1b3c:	80 e0       	ldi	r24, 0x00	; 0
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	60 e0       	ldi	r22, 0x00	; 0
    1b42:	70 e0       	ldi	r23, 0x00	; 0
    1b44:	40 e0       	ldi	r20, 0x00	; 0
    1b46:	50 e0       	ldi	r21, 0x00	; 0
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>

}
    1b50:	1f 91       	pop	r17
    1b52:	0f 91       	pop	r16
    1b54:	08 95       	ret

00001b56 <_writeU>:


void _writeU()
{
    1b56:	0f 93       	push	r16
    1b58:	1f 93       	push	r17
setLine(1,1,1,1,0);
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	61 e0       	ldi	r22, 0x01	; 1
    1b60:	70 e0       	ldi	r23, 0x00	; 0
    1b62:	41 e0       	ldi	r20, 0x01	; 1
    1b64:	50 e0       	ldi	r21, 0x00	; 0
    1b66:	21 e0       	ldi	r18, 0x01	; 1
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	00 e0       	ldi	r16, 0x00	; 0
    1b6c:	10 e0       	ldi	r17, 0x00	; 0
    1b6e:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,0,1);
    1b72:	80 e0       	ldi	r24, 0x00	; 0
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	60 e0       	ldi	r22, 0x00	; 0
    1b78:	70 e0       	ldi	r23, 0x00	; 0
    1b7a:	40 e0       	ldi	r20, 0x00	; 0
    1b7c:	50 e0       	ldi	r21, 0x00	; 0
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	01 e0       	ldi	r16, 0x01	; 1
    1b84:	10 e0       	ldi	r17, 0x00	; 0
    1b86:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,0,1);
    1b8a:	80 e0       	ldi	r24, 0x00	; 0
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	60 e0       	ldi	r22, 0x00	; 0
    1b90:	70 e0       	ldi	r23, 0x00	; 0
    1b92:	40 e0       	ldi	r20, 0x00	; 0
    1b94:	50 e0       	ldi	r21, 0x00	; 0
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,1,1,1,0);
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	61 e0       	ldi	r22, 0x01	; 1
    1ba4:	70 e0       	ldi	r23, 0x00	; 0
    1ba6:	41 e0       	ldi	r20, 0x01	; 1
    1ba8:	50 e0       	ldi	r21, 0x00	; 0
    1baa:	21 e0       	ldi	r18, 0x01	; 1
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	00 e0       	ldi	r16, 0x00	; 0
    1bb0:	10 e0       	ldi	r17, 0x00	; 0
    1bb2:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,0,0);
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	60 e0       	ldi	r22, 0x00	; 0
    1bbc:	70 e0       	ldi	r23, 0x00	; 0
    1bbe:	40 e0       	ldi	r20, 0x00	; 0
    1bc0:	50 e0       	ldi	r21, 0x00	; 0
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
}
    1bca:	1f 91       	pop	r17
    1bcc:	0f 91       	pop	r16
    1bce:	08 95       	ret

00001bd0 <_writeV>:

void _writeV()
{
    1bd0:	0f 93       	push	r16
    1bd2:	1f 93       	push	r17
setLine(1,1,1,0,0);
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	61 e0       	ldi	r22, 0x01	; 1
    1bda:	70 e0       	ldi	r23, 0x00	; 0
    1bdc:	41 e0       	ldi	r20, 0x01	; 1
    1bde:	50 e0       	ldi	r21, 0x00	; 0
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	00 e0       	ldi	r16, 0x00	; 0
    1be6:	10 e0       	ldi	r17, 0x00	; 0
    1be8:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,1,0);
    1bec:	80 e0       	ldi	r24, 0x00	; 0
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	60 e0       	ldi	r22, 0x00	; 0
    1bf2:	70 e0       	ldi	r23, 0x00	; 0
    1bf4:	40 e0       	ldi	r20, 0x00	; 0
    1bf6:	50 e0       	ldi	r21, 0x00	; 0
    1bf8:	21 e0       	ldi	r18, 0x01	; 1
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,0,1);
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	60 e0       	ldi	r22, 0x00	; 0
    1c06:	70 e0       	ldi	r23, 0x00	; 0
    1c08:	40 e0       	ldi	r20, 0x00	; 0
    1c0a:	50 e0       	ldi	r21, 0x00	; 0
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	01 e0       	ldi	r16, 0x01	; 1
    1c12:	10 e0       	ldi	r17, 0x00	; 0
    1c14:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,1,0);
    1c18:	80 e0       	ldi	r24, 0x00	; 0
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	60 e0       	ldi	r22, 0x00	; 0
    1c1e:	70 e0       	ldi	r23, 0x00	; 0
    1c20:	40 e0       	ldi	r20, 0x00	; 0
    1c22:	50 e0       	ldi	r21, 0x00	; 0
    1c24:	21 e0       	ldi	r18, 0x01	; 1
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	00 e0       	ldi	r16, 0x00	; 0
    1c2a:	10 e0       	ldi	r17, 0x00	; 0
    1c2c:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,1,1,0,0);
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	61 e0       	ldi	r22, 0x01	; 1
    1c36:	70 e0       	ldi	r23, 0x00	; 0
    1c38:	41 e0       	ldi	r20, 0x01	; 1
    1c3a:	50 e0       	ldi	r21, 0x00	; 0
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,0,0);
    1c44:	80 e0       	ldi	r24, 0x00	; 0
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	60 e0       	ldi	r22, 0x00	; 0
    1c4a:	70 e0       	ldi	r23, 0x00	; 0
    1c4c:	40 e0       	ldi	r20, 0x00	; 0
    1c4e:	50 e0       	ldi	r21, 0x00	; 0
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
}
    1c58:	1f 91       	pop	r17
    1c5a:	0f 91       	pop	r16
    1c5c:	08 95       	ret

00001c5e <_writeW>:

void _writeW()
{
    1c5e:	0f 93       	push	r16
    1c60:	1f 93       	push	r17
setLine(1,1,1,1,1);
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	61 e0       	ldi	r22, 0x01	; 1
    1c68:	70 e0       	ldi	r23, 0x00	; 0
    1c6a:	41 e0       	ldi	r20, 0x01	; 1
    1c6c:	50 e0       	ldi	r21, 0x00	; 0
    1c6e:	21 e0       	ldi	r18, 0x01	; 1
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	01 e0       	ldi	r16, 0x01	; 1
    1c74:	10 e0       	ldi	r17, 0x00	; 0
    1c76:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,1,0);
    1c7a:	80 e0       	ldi	r24, 0x00	; 0
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	60 e0       	ldi	r22, 0x00	; 0
    1c80:	70 e0       	ldi	r23, 0x00	; 0
    1c82:	40 e0       	ldi	r20, 0x00	; 0
    1c84:	50 e0       	ldi	r21, 0x00	; 0
    1c86:	21 e0       	ldi	r18, 0x01	; 1
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	00 e0       	ldi	r16, 0x00	; 0
    1c8c:	10 e0       	ldi	r17, 0x00	; 0
    1c8e:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,1,0,0);
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	60 e0       	ldi	r22, 0x00	; 0
    1c98:	70 e0       	ldi	r23, 0x00	; 0
    1c9a:	41 e0       	ldi	r20, 0x01	; 1
    1c9c:	50 e0       	ldi	r21, 0x00	; 0
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,1,0);
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	60 e0       	ldi	r22, 0x00	; 0
    1cac:	70 e0       	ldi	r23, 0x00	; 0
    1cae:	40 e0       	ldi	r20, 0x00	; 0
    1cb0:	50 e0       	ldi	r21, 0x00	; 0
    1cb2:	21 e0       	ldi	r18, 0x01	; 1
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,1,1,1,1);
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	61 e0       	ldi	r22, 0x01	; 1
    1cc0:	70 e0       	ldi	r23, 0x00	; 0
    1cc2:	41 e0       	ldi	r20, 0x01	; 1
    1cc4:	50 e0       	ldi	r21, 0x00	; 0
    1cc6:	21 e0       	ldi	r18, 0x01	; 1
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	01 e0       	ldi	r16, 0x01	; 1
    1ccc:	10 e0       	ldi	r17, 0x00	; 0
    1cce:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,0,0);
    1cd2:	80 e0       	ldi	r24, 0x00	; 0
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	60 e0       	ldi	r22, 0x00	; 0
    1cd8:	70 e0       	ldi	r23, 0x00	; 0
    1cda:	40 e0       	ldi	r20, 0x00	; 0
    1cdc:	50 e0       	ldi	r21, 0x00	; 0
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	00 e0       	ldi	r16, 0x00	; 0
    1ce4:	10 e0       	ldi	r17, 0x00	; 0
    1ce6:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
}
    1cea:	1f 91       	pop	r17
    1cec:	0f 91       	pop	r16
    1cee:	08 95       	ret

00001cf0 <_writeX>:

void _writeX()
{
    1cf0:	0f 93       	push	r16
    1cf2:	1f 93       	push	r17
setLine(1,0,0,0,1);
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	60 e0       	ldi	r22, 0x00	; 0
    1cfa:	70 e0       	ldi	r23, 0x00	; 0
    1cfc:	40 e0       	ldi	r20, 0x00	; 0
    1cfe:	50 e0       	ldi	r21, 0x00	; 0
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	01 e0       	ldi	r16, 0x01	; 1
    1d06:	10 e0       	ldi	r17, 0x00	; 0
    1d08:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,1,0,1,0);
    1d0c:	80 e0       	ldi	r24, 0x00	; 0
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	61 e0       	ldi	r22, 0x01	; 1
    1d12:	70 e0       	ldi	r23, 0x00	; 0
    1d14:	40 e0       	ldi	r20, 0x00	; 0
    1d16:	50 e0       	ldi	r21, 0x00	; 0
    1d18:	21 e0       	ldi	r18, 0x01	; 1
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	00 e0       	ldi	r16, 0x00	; 0
    1d1e:	10 e0       	ldi	r17, 0x00	; 0
    1d20:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,1,0,0);
    1d24:	80 e0       	ldi	r24, 0x00	; 0
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	60 e0       	ldi	r22, 0x00	; 0
    1d2a:	70 e0       	ldi	r23, 0x00	; 0
    1d2c:	41 e0       	ldi	r20, 0x01	; 1
    1d2e:	50 e0       	ldi	r21, 0x00	; 0
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,1,0,1,0);
    1d38:	80 e0       	ldi	r24, 0x00	; 0
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	61 e0       	ldi	r22, 0x01	; 1
    1d3e:	70 e0       	ldi	r23, 0x00	; 0
    1d40:	40 e0       	ldi	r20, 0x00	; 0
    1d42:	50 e0       	ldi	r21, 0x00	; 0
    1d44:	21 e0       	ldi	r18, 0x01	; 1
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,0,0,0,1);
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	60 e0       	ldi	r22, 0x00	; 0
    1d52:	70 e0       	ldi	r23, 0x00	; 0
    1d54:	40 e0       	ldi	r20, 0x00	; 0
    1d56:	50 e0       	ldi	r21, 0x00	; 0
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	01 e0       	ldi	r16, 0x01	; 1
    1d5e:	10 e0       	ldi	r17, 0x00	; 0
    1d60:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,0,0);
    1d64:	80 e0       	ldi	r24, 0x00	; 0
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	60 e0       	ldi	r22, 0x00	; 0
    1d6a:	70 e0       	ldi	r23, 0x00	; 0
    1d6c:	40 e0       	ldi	r20, 0x00	; 0
    1d6e:	50 e0       	ldi	r21, 0x00	; 0
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	00 e0       	ldi	r16, 0x00	; 0
    1d76:	10 e0       	ldi	r17, 0x00	; 0
    1d78:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
}
    1d7c:	1f 91       	pop	r17
    1d7e:	0f 91       	pop	r16
    1d80:	08 95       	ret

00001d82 <_writeY>:

void _writeY()
{
    1d82:	0f 93       	push	r16
    1d84:	1f 93       	push	r17
setLine(1,0,0,0,0);
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	60 e0       	ldi	r22, 0x00	; 0
    1d8c:	70 e0       	ldi	r23, 0x00	; 0
    1d8e:	40 e0       	ldi	r20, 0x00	; 0
    1d90:	50 e0       	ldi	r21, 0x00	; 0
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	00 e0       	ldi	r16, 0x00	; 0
    1d98:	10 e0       	ldi	r17, 0x00	; 0
    1d9a:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,1,0,0,0);
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	61 e0       	ldi	r22, 0x01	; 1
    1da4:	70 e0       	ldi	r23, 0x00	; 0
    1da6:	40 e0       	ldi	r20, 0x00	; 0
    1da8:	50 e0       	ldi	r21, 0x00	; 0
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,1,1,1);
    1db2:	80 e0       	ldi	r24, 0x00	; 0
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	60 e0       	ldi	r22, 0x00	; 0
    1db8:	70 e0       	ldi	r23, 0x00	; 0
    1dba:	41 e0       	ldi	r20, 0x01	; 1
    1dbc:	50 e0       	ldi	r21, 0x00	; 0
    1dbe:	21 e0       	ldi	r18, 0x01	; 1
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	01 e0       	ldi	r16, 0x01	; 1
    1dc4:	10 e0       	ldi	r17, 0x00	; 0
    1dc6:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,1,0,0,0);
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	61 e0       	ldi	r22, 0x01	; 1
    1dd0:	70 e0       	ldi	r23, 0x00	; 0
    1dd2:	40 e0       	ldi	r20, 0x00	; 0
    1dd4:	50 e0       	ldi	r21, 0x00	; 0
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	00 e0       	ldi	r16, 0x00	; 0
    1ddc:	10 e0       	ldi	r17, 0x00	; 0
    1dde:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,0,0,0,0);
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	60 e0       	ldi	r22, 0x00	; 0
    1de8:	70 e0       	ldi	r23, 0x00	; 0
    1dea:	40 e0       	ldi	r20, 0x00	; 0
    1dec:	50 e0       	ldi	r21, 0x00	; 0
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,0,0);
    1df6:	80 e0       	ldi	r24, 0x00	; 0
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	60 e0       	ldi	r22, 0x00	; 0
    1dfc:	70 e0       	ldi	r23, 0x00	; 0
    1dfe:	40 e0       	ldi	r20, 0x00	; 0
    1e00:	50 e0       	ldi	r21, 0x00	; 0
    1e02:	20 e0       	ldi	r18, 0x00	; 0
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
}
    1e0a:	1f 91       	pop	r17
    1e0c:	0f 91       	pop	r16
    1e0e:	08 95       	ret

00001e10 <_writeZ>:

void _writeZ()
{
    1e10:	0f 93       	push	r16
    1e12:	1f 93       	push	r17
setLine(1,0,0,0,1);
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	60 e0       	ldi	r22, 0x00	; 0
    1e1a:	70 e0       	ldi	r23, 0x00	; 0
    1e1c:	40 e0       	ldi	r20, 0x00	; 0
    1e1e:	50 e0       	ldi	r21, 0x00	; 0
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	01 e0       	ldi	r16, 0x01	; 1
    1e26:	10 e0       	ldi	r17, 0x00	; 0
    1e28:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,0,0,1,1);
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	60 e0       	ldi	r22, 0x00	; 0
    1e32:	70 e0       	ldi	r23, 0x00	; 0
    1e34:	40 e0       	ldi	r20, 0x00	; 0
    1e36:	50 e0       	ldi	r21, 0x00	; 0
    1e38:	21 e0       	ldi	r18, 0x01	; 1
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,0,1,0,1);
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	60 e0       	ldi	r22, 0x00	; 0
    1e46:	70 e0       	ldi	r23, 0x00	; 0
    1e48:	41 e0       	ldi	r20, 0x01	; 1
    1e4a:	50 e0       	ldi	r21, 0x00	; 0
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,1,0,0,1);
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	61 e0       	ldi	r22, 0x01	; 1
    1e5a:	70 e0       	ldi	r23, 0x00	; 0
    1e5c:	40 e0       	ldi	r20, 0x00	; 0
    1e5e:	50 e0       	ldi	r21, 0x00	; 0
    1e60:	20 e0       	ldi	r18, 0x00	; 0
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,0,0,0,1);
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	60 e0       	ldi	r22, 0x00	; 0
    1e6e:	70 e0       	ldi	r23, 0x00	; 0
    1e70:	40 e0       	ldi	r20, 0x00	; 0
    1e72:	50 e0       	ldi	r21, 0x00	; 0
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,0,0);
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	60 e0       	ldi	r22, 0x00	; 0
    1e82:	70 e0       	ldi	r23, 0x00	; 0
    1e84:	40 e0       	ldi	r20, 0x00	; 0
    1e86:	50 e0       	ldi	r21, 0x00	; 0
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	00 e0       	ldi	r16, 0x00	; 0
    1e8e:	10 e0       	ldi	r17, 0x00	; 0
    1e90:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
}
    1e94:	1f 91       	pop	r17
    1e96:	0f 91       	pop	r16
    1e98:	08 95       	ret

00001e9a <_writeQM>:

void _writeQM()
{
    1e9a:	0f 93       	push	r16
    1e9c:	1f 93       	push	r17
setLine(0,1,0,0,0);
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	61 e0       	ldi	r22, 0x01	; 1
    1ea4:	70 e0       	ldi	r23, 0x00	; 0
    1ea6:	40 e0       	ldi	r20, 0x00	; 0
    1ea8:	50 e0       	ldi	r21, 0x00	; 0
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	00 e0       	ldi	r16, 0x00	; 0
    1eb0:	10 e0       	ldi	r17, 0x00	; 0
    1eb2:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,0,0,0,0);
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	60 e0       	ldi	r22, 0x00	; 0
    1ebc:	70 e0       	ldi	r23, 0x00	; 0
    1ebe:	40 e0       	ldi	r20, 0x00	; 0
    1ec0:	50 e0       	ldi	r21, 0x00	; 0
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,0,1,0,1);
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	60 e0       	ldi	r22, 0x00	; 0
    1ed0:	70 e0       	ldi	r23, 0x00	; 0
    1ed2:	41 e0       	ldi	r20, 0x01	; 1
    1ed4:	50 e0       	ldi	r21, 0x00	; 0
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	01 e0       	ldi	r16, 0x01	; 1
    1edc:	10 e0       	ldi	r17, 0x00	; 0
    1ede:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,0,1,0,0);
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	60 e0       	ldi	r22, 0x00	; 0
    1ee8:	70 e0       	ldi	r23, 0x00	; 0
    1eea:	41 e0       	ldi	r20, 0x01	; 1
    1eec:	50 e0       	ldi	r21, 0x00	; 0
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	00 e0       	ldi	r16, 0x00	; 0
    1ef4:	10 e0       	ldi	r17, 0x00	; 0
    1ef6:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,1,0,0,0);
    1efa:	80 e0       	ldi	r24, 0x00	; 0
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	61 e0       	ldi	r22, 0x01	; 1
    1f00:	70 e0       	ldi	r23, 0x00	; 0
    1f02:	40 e0       	ldi	r20, 0x00	; 0
    1f04:	50 e0       	ldi	r21, 0x00	; 0
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,0,0);	
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	60 e0       	ldi	r22, 0x00	; 0
    1f14:	70 e0       	ldi	r23, 0x00	; 0
    1f16:	40 e0       	ldi	r20, 0x00	; 0
    1f18:	50 e0       	ldi	r21, 0x00	; 0
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
}
    1f22:	1f 91       	pop	r17
    1f24:	0f 91       	pop	r16
    1f26:	08 95       	ret

00001f28 <_writeAPO>:

void _writeAPO()
{
    1f28:	0f 93       	push	r16
    1f2a:	1f 93       	push	r17
setLine(1,1,0,0,0);
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	61 e0       	ldi	r22, 0x01	; 1
    1f32:	70 e0       	ldi	r23, 0x00	; 0
    1f34:	40 e0       	ldi	r20, 0x00	; 0
    1f36:	50 e0       	ldi	r21, 0x00	; 0
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	00 e0       	ldi	r16, 0x00	; 0
    1f3e:	10 e0       	ldi	r17, 0x00	; 0
    1f40:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,0,0);	
    1f44:	80 e0       	ldi	r24, 0x00	; 0
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	60 e0       	ldi	r22, 0x00	; 0
    1f4a:	70 e0       	ldi	r23, 0x00	; 0
    1f4c:	40 e0       	ldi	r20, 0x00	; 0
    1f4e:	50 e0       	ldi	r21, 0x00	; 0
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
}
    1f58:	1f 91       	pop	r17
    1f5a:	0f 91       	pop	r16
    1f5c:	08 95       	ret

00001f5e <_writeEMP>:

void _writeEMP()
{
    1f5e:	0f 93       	push	r16
    1f60:	1f 93       	push	r17
setLine(0,0,0,0,0);
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	60 e0       	ldi	r22, 0x00	; 0
    1f68:	70 e0       	ldi	r23, 0x00	; 0
    1f6a:	40 e0       	ldi	r20, 0x00	; 0
    1f6c:	50 e0       	ldi	r21, 0x00	; 0
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	00 e0       	ldi	r16, 0x00	; 0
    1f74:	10 e0       	ldi	r17, 0x00	; 0
    1f76:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,0,0);
    1f7a:	80 e0       	ldi	r24, 0x00	; 0
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	60 e0       	ldi	r22, 0x00	; 0
    1f80:	70 e0       	ldi	r23, 0x00	; 0
    1f82:	40 e0       	ldi	r20, 0x00	; 0
    1f84:	50 e0       	ldi	r21, 0x00	; 0
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,0,0);
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	60 e0       	ldi	r22, 0x00	; 0
    1f94:	70 e0       	ldi	r23, 0x00	; 0
    1f96:	40 e0       	ldi	r20, 0x00	; 0
    1f98:	50 e0       	ldi	r21, 0x00	; 0
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,0,0);
    1fa2:	80 e0       	ldi	r24, 0x00	; 0
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	60 e0       	ldi	r22, 0x00	; 0
    1fa8:	70 e0       	ldi	r23, 0x00	; 0
    1faa:	40 e0       	ldi	r20, 0x00	; 0
    1fac:	50 e0       	ldi	r21, 0x00	; 0
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
}
    1fb6:	1f 91       	pop	r17
    1fb8:	0f 91       	pop	r16
    1fba:	08 95       	ret

00001fbc <_writeEM>:

void _writeEM()
{
    1fbc:	0f 93       	push	r16
    1fbe:	1f 93       	push	r17
setLine(1,1,1,0,1);
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	61 e0       	ldi	r22, 0x01	; 1
    1fc6:	70 e0       	ldi	r23, 0x00	; 0
    1fc8:	41 e0       	ldi	r20, 0x01	; 1
    1fca:	50 e0       	ldi	r21, 0x00	; 0
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	01 e0       	ldi	r16, 0x01	; 1
    1fd2:	10 e0       	ldi	r17, 0x00	; 0
    1fd4:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,0,0);
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	60 e0       	ldi	r22, 0x00	; 0
    1fde:	70 e0       	ldi	r23, 0x00	; 0
    1fe0:	40 e0       	ldi	r20, 0x00	; 0
    1fe2:	50 e0       	ldi	r21, 0x00	; 0
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	00 e0       	ldi	r16, 0x00	; 0
    1fea:	10 e0       	ldi	r17, 0x00	; 0
    1fec:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
}
    1ff0:	1f 91       	pop	r17
    1ff2:	0f 91       	pop	r16
    1ff4:	08 95       	ret

00001ff6 <_writeDOT>:

void _writeDOT()
{
    1ff6:	0f 93       	push	r16
    1ff8:	1f 93       	push	r17
setLine(0,0,0,0,1);
    1ffa:	80 e0       	ldi	r24, 0x00	; 0
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	60 e0       	ldi	r22, 0x00	; 0
    2000:	70 e0       	ldi	r23, 0x00	; 0
    2002:	40 e0       	ldi	r20, 0x00	; 0
    2004:	50 e0       	ldi	r21, 0x00	; 0
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	01 e0       	ldi	r16, 0x01	; 1
    200c:	10 e0       	ldi	r17, 0x00	; 0
    200e:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,0,0);
    2012:	80 e0       	ldi	r24, 0x00	; 0
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	60 e0       	ldi	r22, 0x00	; 0
    2018:	70 e0       	ldi	r23, 0x00	; 0
    201a:	40 e0       	ldi	r20, 0x00	; 0
    201c:	50 e0       	ldi	r21, 0x00	; 0
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	00 e0       	ldi	r16, 0x00	; 0
    2024:	10 e0       	ldi	r17, 0x00	; 0
    2026:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
}
    202a:	1f 91       	pop	r17
    202c:	0f 91       	pop	r16
    202e:	08 95       	ret

00002030 <_writeCOM>:

void _writeCOM()
{
    2030:	0f 93       	push	r16
    2032:	1f 93       	push	r17
setLine(0,0,0,1,1);
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	60 e0       	ldi	r22, 0x00	; 0
    203a:	70 e0       	ldi	r23, 0x00	; 0
    203c:	40 e0       	ldi	r20, 0x00	; 0
    203e:	50 e0       	ldi	r21, 0x00	; 0
    2040:	21 e0       	ldi	r18, 0x01	; 1
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	01 e0       	ldi	r16, 0x01	; 1
    2046:	10 e0       	ldi	r17, 0x00	; 0
    2048:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,0,0);
    204c:	80 e0       	ldi	r24, 0x00	; 0
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	60 e0       	ldi	r22, 0x00	; 0
    2052:	70 e0       	ldi	r23, 0x00	; 0
    2054:	40 e0       	ldi	r20, 0x00	; 0
    2056:	50 e0       	ldi	r21, 0x00	; 0
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	00 e0       	ldi	r16, 0x00	; 0
    205e:	10 e0       	ldi	r17, 0x00	; 0
    2060:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
}
    2064:	1f 91       	pop	r17
    2066:	0f 91       	pop	r16
    2068:	08 95       	ret

0000206a <_writeEQL>:

void _writeEQL()
{
    206a:	0f 93       	push	r16
    206c:	1f 93       	push	r17
setLine(0,1,0,1,0);
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	61 e0       	ldi	r22, 0x01	; 1
    2074:	70 e0       	ldi	r23, 0x00	; 0
    2076:	40 e0       	ldi	r20, 0x00	; 0
    2078:	50 e0       	ldi	r21, 0x00	; 0
    207a:	21 e0       	ldi	r18, 0x01	; 1
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	00 e0       	ldi	r16, 0x00	; 0
    2080:	10 e0       	ldi	r17, 0x00	; 0
    2082:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,1,0,1,0);
    2086:	80 e0       	ldi	r24, 0x00	; 0
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	61 e0       	ldi	r22, 0x01	; 1
    208c:	70 e0       	ldi	r23, 0x00	; 0
    208e:	40 e0       	ldi	r20, 0x00	; 0
    2090:	50 e0       	ldi	r21, 0x00	; 0
    2092:	21 e0       	ldi	r18, 0x01	; 1
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,1,0,1,0);
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	61 e0       	ldi	r22, 0x01	; 1
    20a0:	70 e0       	ldi	r23, 0x00	; 0
    20a2:	40 e0       	ldi	r20, 0x00	; 0
    20a4:	50 e0       	ldi	r21, 0x00	; 0
    20a6:	21 e0       	ldi	r18, 0x01	; 1
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,0,0);
    20ae:	80 e0       	ldi	r24, 0x00	; 0
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	60 e0       	ldi	r22, 0x00	; 0
    20b4:	70 e0       	ldi	r23, 0x00	; 0
    20b6:	40 e0       	ldi	r20, 0x00	; 0
    20b8:	50 e0       	ldi	r21, 0x00	; 0
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
}
    20c2:	1f 91       	pop	r17
    20c4:	0f 91       	pop	r16
    20c6:	08 95       	ret

000020c8 <_writeBRKO>:

void _writeBRKO()
{
    20c8:	0f 93       	push	r16
    20ca:	1f 93       	push	r17
setLine(0,1,1,1,0);
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	61 e0       	ldi	r22, 0x01	; 1
    20d2:	70 e0       	ldi	r23, 0x00	; 0
    20d4:	41 e0       	ldi	r20, 0x01	; 1
    20d6:	50 e0       	ldi	r21, 0x00	; 0
    20d8:	21 e0       	ldi	r18, 0x01	; 1
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	00 e0       	ldi	r16, 0x00	; 0
    20de:	10 e0       	ldi	r17, 0x00	; 0
    20e0:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(1,0,0,0,1);
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	60 e0       	ldi	r22, 0x00	; 0
    20ea:	70 e0       	ldi	r23, 0x00	; 0
    20ec:	40 e0       	ldi	r20, 0x00	; 0
    20ee:	50 e0       	ldi	r21, 0x00	; 0
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	01 e0       	ldi	r16, 0x01	; 1
    20f6:	10 e0       	ldi	r17, 0x00	; 0
    20f8:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,0,0);
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	60 e0       	ldi	r22, 0x00	; 0
    2102:	70 e0       	ldi	r23, 0x00	; 0
    2104:	40 e0       	ldi	r20, 0x00	; 0
    2106:	50 e0       	ldi	r21, 0x00	; 0
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	00 e0       	ldi	r16, 0x00	; 0
    210e:	10 e0       	ldi	r17, 0x00	; 0
    2110:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
}
    2114:	1f 91       	pop	r17
    2116:	0f 91       	pop	r16
    2118:	08 95       	ret

0000211a <_writeBRKC>:

void _writeBRKC()
{
    211a:	0f 93       	push	r16
    211c:	1f 93       	push	r17
setLine(1,0,0,0,1);
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	60 e0       	ldi	r22, 0x00	; 0
    2124:	70 e0       	ldi	r23, 0x00	; 0
    2126:	40 e0       	ldi	r20, 0x00	; 0
    2128:	50 e0       	ldi	r21, 0x00	; 0
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	01 e0       	ldi	r16, 0x01	; 1
    2130:	10 e0       	ldi	r17, 0x00	; 0
    2132:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,1,1,1,0);
    2136:	80 e0       	ldi	r24, 0x00	; 0
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	61 e0       	ldi	r22, 0x01	; 1
    213c:	70 e0       	ldi	r23, 0x00	; 0
    213e:	41 e0       	ldi	r20, 0x01	; 1
    2140:	50 e0       	ldi	r21, 0x00	; 0
    2142:	21 e0       	ldi	r18, 0x01	; 1
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	00 e0       	ldi	r16, 0x00	; 0
    2148:	10 e0       	ldi	r17, 0x00	; 0
    214a:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
setLine(0,0,0,0,0);
    214e:	80 e0       	ldi	r24, 0x00	; 0
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	60 e0       	ldi	r22, 0x00	; 0
    2154:	70 e0       	ldi	r23, 0x00	; 0
    2156:	40 e0       	ldi	r20, 0x00	; 0
    2158:	50 e0       	ldi	r21, 0x00	; 0
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	0e 94 61 08 	call	0x10c2	; 0x10c2 <setLine>
}
    2162:	1f 91       	pop	r17
    2164:	0f 91       	pop	r16
    2166:	08 95       	ret

00002168 <effect_spiral>:
	{ 0x08, 0x08, 0x04, 0x02, 0x02 },
};

// Shows an animation of a spinning spiral
void effect_spiral(int direction, int iterations, int delay)
{
    2168:	cf 92       	push	r12
    216a:	df 92       	push	r13
    216c:	ef 92       	push	r14
    216e:	ff 92       	push	r15
    2170:	0f 93       	push	r16
    2172:	1f 93       	push	r17
    2174:	cf 93       	push	r28
    2176:	df 93       	push	r29
    2178:	6b 01       	movw	r12, r22
    217a:	8a 01       	movw	r16, r20
	int i;
	int z;		// cube level

	for (i=0;i<iterations;i++)
    217c:	c0 e0       	ldi	r28, 0x00	; 0
    217e:	d0 e0       	ldi	r29, 0x00	; 0
		// Loop cube levels
		for (z=0;z<5;z++)
		{
			// Read the animation from program memory and put it in the cube buffer.
			// y=0 and y=2 is stored in the upper nibble of the byte, and must be bitshifted into place.
			cube[z][0] = pgm_read_byte(&spinning_line[(i+z)%6][0]);
    2180:	76 e0       	ldi	r23, 0x06	; 6
    2182:	e7 2e       	mov	r14, r23
    2184:	f1 2c       	mov	r15, r1
void effect_spiral(int direction, int iterations, int delay)
{
	int i;
	int z;		// cube level

	for (i=0;i<iterations;i++)
    2186:	43 c0       	rjmp	.+134    	; 0x220e <effect_spiral+0xa6>
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	30 e0       	ldi	r19, 0x00	; 0
	{ 0x02, 0x02, 0x04, 0x08, 0x08 },
	{ 0x08, 0x08, 0x04, 0x02, 0x02 },
};

// Shows an animation of a spinning spiral
void effect_spiral(int direction, int iterations, int delay)
    218c:	c9 01       	movw	r24, r18
    218e:	8c 0f       	add	r24, r28
    2190:	9d 1f       	adc	r25, r29
		// Loop cube levels
		for (z=0;z<5;z++)
		{
			// Read the animation from program memory and put it in the cube buffer.
			// y=0 and y=2 is stored in the upper nibble of the byte, and must be bitshifted into place.
			cube[z][0] = pgm_read_byte(&spinning_line[(i+z)%6][0]);
    2192:	b7 01       	movw	r22, r14
    2194:	0e 94 26 29 	call	0x524c	; 0x524c <__divmodhi4>
    2198:	ac 01       	movw	r20, r24
    219a:	44 0f       	add	r20, r20
    219c:	55 1f       	adc	r21, r21
    219e:	44 0f       	add	r20, r20
    21a0:	55 1f       	adc	r21, r21
    21a2:	48 0f       	add	r20, r24
    21a4:	59 1f       	adc	r21, r25
    21a6:	fa 01       	movw	r30, r20
    21a8:	e0 5e       	subi	r30, 0xE0	; 224
    21aa:	fe 4f       	sbci	r31, 0xFE	; 254
    21ac:	e4 91       	lpm	r30, Z+
    21ae:	d9 01       	movw	r26, r18
    21b0:	aa 0f       	add	r26, r26
    21b2:	bb 1f       	adc	r27, r27
    21b4:	aa 0f       	add	r26, r26
    21b6:	bb 1f       	adc	r27, r27
    21b8:	a2 0f       	add	r26, r18
    21ba:	b3 1f       	adc	r27, r19
    21bc:	a6 54       	subi	r26, 0x46	; 70
    21be:	be 4f       	sbci	r27, 0xFE	; 254
    21c0:	ec 93       	st	X, r30
			cube[z][1] = pgm_read_byte(&spinning_line[(i+z)%6][1]);
    21c2:	fa 01       	movw	r30, r20
    21c4:	ef 5d       	subi	r30, 0xDF	; 223
    21c6:	fe 4f       	sbci	r31, 0xFE	; 254
    21c8:	e4 91       	lpm	r30, Z+
    21ca:	11 96       	adiw	r26, 0x01	; 1
    21cc:	ec 93       	st	X, r30
    21ce:	11 97       	sbiw	r26, 0x01	; 1
			cube[z][2] = pgm_read_byte(&spinning_line[(i+z)%6][2]);
    21d0:	fa 01       	movw	r30, r20
    21d2:	ee 5d       	subi	r30, 0xDE	; 222
    21d4:	fe 4f       	sbci	r31, 0xFE	; 254
    21d6:	e4 91       	lpm	r30, Z+
    21d8:	12 96       	adiw	r26, 0x02	; 2
    21da:	ec 93       	st	X, r30
    21dc:	12 97       	sbiw	r26, 0x02	; 2
			cube[z][3] = pgm_read_byte(&spinning_line[(i+z)%6][3]);
    21de:	fa 01       	movw	r30, r20
    21e0:	ed 5d       	subi	r30, 0xDD	; 221
    21e2:	fe 4f       	sbci	r31, 0xFE	; 254
    21e4:	e4 91       	lpm	r30, Z+
    21e6:	13 96       	adiw	r26, 0x03	; 3
    21e8:	ec 93       	st	X, r30
    21ea:	13 97       	sbiw	r26, 0x03	; 3
			cube[z][4] = pgm_read_byte(&spinning_line[(i+z)%6][4]);
    21ec:	4c 5d       	subi	r20, 0xDC	; 220
    21ee:	5e 4f       	sbci	r21, 0xFE	; 254
    21f0:	fa 01       	movw	r30, r20
    21f2:	44 91       	lpm	r20, Z+
    21f4:	14 96       	adiw	r26, 0x04	; 4
    21f6:	4c 93       	st	X, r20
    21f8:	14 97       	sbiw	r26, 0x04	; 4
	int z;		// cube level

	for (i=0;i<iterations;i++)
	{
		// Loop cube levels
		for (z=0;z<5;z++)
    21fa:	2f 5f       	subi	r18, 0xFF	; 255
    21fc:	3f 4f       	sbci	r19, 0xFF	; 255
    21fe:	25 30       	cpi	r18, 0x05	; 5
    2200:	31 05       	cpc	r19, r1
    2202:	09 f0       	breq	.+2      	; 0x2206 <effect_spiral+0x9e>
    2204:	c3 cf       	rjmp	.-122    	; 0x218c <effect_spiral+0x24>
			cube[z][3] = pgm_read_byte(&spinning_line[(i+z)%6][3]);
			cube[z][4] = pgm_read_byte(&spinning_line[(i+z)%6][4]);
			// the +z makes the animation iterate one step for each plane
			// making it into a spiral
		}
		delay_ms(delay);
    2206:	c8 01       	movw	r24, r16
    2208:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
void effect_spiral(int direction, int iterations, int delay)
{
	int i;
	int z;		// cube level

	for (i=0;i<iterations;i++)
    220c:	21 96       	adiw	r28, 0x01	; 1
    220e:	cc 15       	cp	r28, r12
    2210:	dd 05       	cpc	r29, r13
    2212:	0c f4       	brge	.+2      	; 0x2216 <effect_spiral+0xae>
    2214:	b9 cf       	rjmp	.-142    	; 0x2188 <effect_spiral+0x20>
			// the +z makes the animation iterate one step for each plane
			// making it into a spiral
		}
		delay_ms(delay);
	}
}
    2216:	df 91       	pop	r29
    2218:	cf 91       	pop	r28
    221a:	1f 91       	pop	r17
    221c:	0f 91       	pop	r16
    221e:	ff 90       	pop	r15
    2220:	ef 90       	pop	r14
    2222:	df 90       	pop	r13
    2224:	cf 90       	pop	r12
    2226:	08 95       	ret

00002228 <effect_spinning_plane>:

// Shows an animation of a spinning plane.
void effect_spinning_plane(int direction, int iterations, int delay)
{
    2228:	bf 92       	push	r11
    222a:	cf 92       	push	r12
    222c:	df 92       	push	r13
    222e:	ef 92       	push	r14
    2230:	ff 92       	push	r15
    2232:	0f 93       	push	r16
    2234:	1f 93       	push	r17
    2236:	cf 93       	push	r28
    2238:	df 93       	push	r29
    223a:	6b 01       	movw	r12, r22
    223c:	8a 01       	movw	r16, r20
	int i;
	int z;		// cube level

	for (i=0;i<iterations;i++)
    223e:	c0 e0       	ldi	r28, 0x00	; 0
    2240:	d0 e0       	ldi	r29, 0x00	; 0
	{
		// Loop cube levels.
		for (z=0;z<5;z++)
		{
			cube[z][0] = pgm_read_byte(&spinning_line[(i)%6][0]);
    2242:	86 e0       	ldi	r24, 0x06	; 6
    2244:	e8 2e       	mov	r14, r24
    2246:	f1 2c       	mov	r15, r1
void effect_spinning_plane(int direction, int iterations, int delay)
{
	int i;
	int z;		// cube level

	for (i=0;i<iterations;i++)
    2248:	16 c0       	rjmp	.+44     	; 0x2276 <effect_spinning_plane+0x4e>
	{
		// Loop cube levels.
		for (z=0;z<5;z++)
		{
			cube[z][0] = pgm_read_byte(&spinning_line[(i)%6][0]);
    224a:	fc 01       	movw	r30, r24
    224c:	ee 0f       	add	r30, r30
    224e:	ff 1f       	adc	r31, r31
    2250:	ee 0f       	add	r30, r30
    2252:	ff 1f       	adc	r31, r31
    2254:	e8 0f       	add	r30, r24
    2256:	f9 1f       	adc	r31, r25
    2258:	e6 54       	subi	r30, 0x46	; 70
    225a:	fe 4f       	sbci	r31, 0xFE	; 254
    225c:	b0 82       	st	Z, r11
			cube[z][1] = pgm_read_byte(&spinning_line[(i)%6][1]);
    225e:	a1 83       	std	Z+1, r26	; 0x01
			cube[z][2] = pgm_read_byte(&spinning_line[(i)%6][2]);
    2260:	62 83       	std	Z+2, r22	; 0x02
			cube[z][3] = pgm_read_byte(&spinning_line[(i)%6][3]);
    2262:	43 83       	std	Z+3, r20	; 0x03
			cube[z][4] = pgm_read_byte(&spinning_line[(i)%6][4]);
    2264:	24 83       	std	Z+4, r18	; 0x04
	int z;		// cube level

	for (i=0;i<iterations;i++)
	{
		// Loop cube levels.
		for (z=0;z<5;z++)
    2266:	01 96       	adiw	r24, 0x01	; 1
    2268:	85 30       	cpi	r24, 0x05	; 5
    226a:	91 05       	cpc	r25, r1
    226c:	71 f7       	brne	.-36     	; 0x224a <effect_spinning_plane+0x22>
			cube[z][1] = pgm_read_byte(&spinning_line[(i)%6][1]);
			cube[z][2] = pgm_read_byte(&spinning_line[(i)%6][2]);
			cube[z][3] = pgm_read_byte(&spinning_line[(i)%6][3]);
			cube[z][4] = pgm_read_byte(&spinning_line[(i)%6][4]);
		}
		delay_ms(delay);
    226e:	c8 01       	movw	r24, r16
    2270:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
void effect_spinning_plane(int direction, int iterations, int delay)
{
	int i;
	int z;		// cube level

	for (i=0;i<iterations;i++)
    2274:	21 96       	adiw	r28, 0x01	; 1
    2276:	cc 15       	cp	r28, r12
    2278:	dd 05       	cpc	r29, r13
    227a:	2c f5       	brge	.+74     	; 0x22c6 <effect_spinning_plane+0x9e>
	{
		// Loop cube levels.
		for (z=0;z<5;z++)
		{
			cube[z][0] = pgm_read_byte(&spinning_line[(i)%6][0]);
    227c:	ce 01       	movw	r24, r28
    227e:	b7 01       	movw	r22, r14
    2280:	0e 94 26 29 	call	0x524c	; 0x524c <__divmodhi4>
    2284:	9c 01       	movw	r18, r24
    2286:	22 0f       	add	r18, r18
    2288:	33 1f       	adc	r19, r19
    228a:	22 0f       	add	r18, r18
    228c:	33 1f       	adc	r19, r19
    228e:	28 0f       	add	r18, r24
    2290:	39 1f       	adc	r19, r25
    2292:	f9 01       	movw	r30, r18
    2294:	e0 5e       	subi	r30, 0xE0	; 224
    2296:	fe 4f       	sbci	r31, 0xFE	; 254
			cube[z][1] = pgm_read_byte(&spinning_line[(i)%6][1]);
    2298:	d9 01       	movw	r26, r18
    229a:	af 5d       	subi	r26, 0xDF	; 223
    229c:	be 4f       	sbci	r27, 0xFE	; 254
			cube[z][2] = pgm_read_byte(&spinning_line[(i)%6][2]);
    229e:	b9 01       	movw	r22, r18
    22a0:	6e 5d       	subi	r22, 0xDE	; 222
    22a2:	7e 4f       	sbci	r23, 0xFE	; 254
			cube[z][3] = pgm_read_byte(&spinning_line[(i)%6][3]);
    22a4:	a9 01       	movw	r20, r18
    22a6:	4d 5d       	subi	r20, 0xDD	; 221
    22a8:	5e 4f       	sbci	r21, 0xFE	; 254
			cube[z][4] = pgm_read_byte(&spinning_line[(i)%6][4]);
    22aa:	2c 5d       	subi	r18, 0xDC	; 220
    22ac:	3e 4f       	sbci	r19, 0xFE	; 254
    22ae:	80 e0       	ldi	r24, 0x00	; 0
    22b0:	90 e0       	ldi	r25, 0x00	; 0
	for (i=0;i<iterations;i++)
	{
		// Loop cube levels.
		for (z=0;z<5;z++)
		{
			cube[z][0] = pgm_read_byte(&spinning_line[(i)%6][0]);
    22b2:	b4 90       	lpm	r11, Z+
			cube[z][1] = pgm_read_byte(&spinning_line[(i)%6][1]);
    22b4:	fd 01       	movw	r30, r26
    22b6:	a4 91       	lpm	r26, Z+
			cube[z][2] = pgm_read_byte(&spinning_line[(i)%6][2]);
    22b8:	fb 01       	movw	r30, r22
    22ba:	64 91       	lpm	r22, Z+
			cube[z][3] = pgm_read_byte(&spinning_line[(i)%6][3]);
    22bc:	fa 01       	movw	r30, r20
    22be:	44 91       	lpm	r20, Z+
			cube[z][4] = pgm_read_byte(&spinning_line[(i)%6][4]);
    22c0:	f9 01       	movw	r30, r18
    22c2:	24 91       	lpm	r18, Z+
    22c4:	c2 cf       	rjmp	.-124    	; 0x224a <effect_spinning_plane+0x22>
		}
		delay_ms(delay);
	}
}
    22c6:	df 91       	pop	r29
    22c8:	cf 91       	pop	r28
    22ca:	1f 91       	pop	r17
    22cc:	0f 91       	pop	r16
    22ce:	ff 90       	pop	r15
    22d0:	ef 90       	pop	r14
    22d2:	df 90       	pop	r13
    22d4:	cf 90       	pop	r12
    22d6:	bf 90       	pop	r11
    22d8:	08 95       	ret

000022da <effect_rain>:

// Random voxels light up at the top layer and falls to the bottom layer.
void effect_rain (int iterations, int delay, int hold, int speed)
{
    22da:	6f 92       	push	r6
    22dc:	7f 92       	push	r7
    22de:	8f 92       	push	r8
    22e0:	9f 92       	push	r9
    22e2:	af 92       	push	r10
    22e4:	bf 92       	push	r11
    22e6:	cf 92       	push	r12
    22e8:	df 92       	push	r13
    22ea:	ef 92       	push	r14
    22ec:	ff 92       	push	r15
    22ee:	0f 93       	push	r16
    22f0:	1f 93       	push	r17
    22f2:	cf 93       	push	r28
    22f4:	df 93       	push	r29
    22f6:	5c 01       	movw	r10, r24
    22f8:	4b 01       	movw	r8, r22
    22fa:	3a 01       	movw	r6, r20
    22fc:	79 01       	movw	r14, r18
	int i;
	int p;		// Position of the raindrop on Z
	int z;		// cube layer
	int y;		// byte
	
	fill(0x00);
    22fe:	80 e0       	ldi	r24, 0x00	; 0
    2300:	0e 94 16 06 	call	0xc2c	; 0xc2c <fill>
	
	for (i = 0; i < iterations; i++)
    2304:	00 e0       	ldi	r16, 0x00	; 0
    2306:	10 e0       	ldi	r17, 0x00	; 0
	{
		// Start by setting a random pixel on layer 4.
		setLED(rand()%5,rand()%5,4);
    2308:	85 e0       	ldi	r24, 0x05	; 5
    230a:	c8 2e       	mov	r12, r24
    230c:	d1 2c       	mov	r13, r1
	int z;		// cube layer
	int y;		// byte
	
	fill(0x00);
	
	for (i = 0; i < iterations; i++)
    230e:	65 c0       	rjmp	.+202    	; 0x23da <effect_rain+0x100>
	{
		// Start by setting a random pixel on layer 4.
		setLED(rand()%5,rand()%5,4);
    2310:	0e 94 05 2a 	call	0x540a	; 0x540a <rand>
    2314:	ec 01       	movw	r28, r24
    2316:	0e 94 05 2a 	call	0x540a	; 0x540a <rand>
    231a:	fc 01       	movw	r30, r24
    231c:	ce 01       	movw	r24, r28
    231e:	b6 01       	movw	r22, r12
    2320:	0e 94 26 29 	call	0x524c	; 0x524c <__divmodhi4>
    2324:	9c 01       	movw	r18, r24
    2326:	cf 01       	movw	r24, r30
    2328:	b6 01       	movw	r22, r12
    232a:	0e 94 26 29 	call	0x524c	; 0x524c <__divmodhi4>
    232e:	bc 01       	movw	r22, r24
    2330:	c9 01       	movw	r24, r18
    2332:	44 e0       	ldi	r20, 0x04	; 4
    2334:	50 e0       	ldi	r21, 0x00	; 0
    2336:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
		delay_ms(hold);
    233a:	c3 01       	movw	r24, r6
    233c:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
		
		// The raindrop has to step down one layer 5 times
		// in order to travel from the top, and exit out the bottom.
		for (p=1;p<5;p++)
    2340:	c1 e0       	ldi	r28, 0x01	; 1
    2342:	d0 e0       	ldi	r29, 0x00	; 0
    2344:	3f c0       	rjmp	.+126    	; 0x23c4 <effect_rain+0xea>
			// Shift all the layers one position down,
			for (z=0;z<4;z++)
			{
				for (y=0;y<5;y++)
				{
					cube[z][y] = cube[z+1][y];
    2346:	db 01       	movw	r26, r22
    2348:	a2 0f       	add	r26, r18
    234a:	b3 1f       	adc	r27, r19
    234c:	a6 54       	subi	r26, 0x46	; 70
    234e:	be 4f       	sbci	r27, 0xFE	; 254
    2350:	8c 91       	ld	r24, X
    2352:	da 01       	movw	r26, r20
    2354:	a2 0f       	add	r26, r18
    2356:	b3 1f       	adc	r27, r19
    2358:	a6 54       	subi	r26, 0x46	; 70
    235a:	be 4f       	sbci	r27, 0xFE	; 254
    235c:	8c 93       	st	X, r24
		for (p=1;p<5;p++)
		{
			// Shift all the layers one position down,
			for (z=0;z<4;z++)
			{
				for (y=0;y<5;y++)
    235e:	2f 5f       	subi	r18, 0xFF	; 255
    2360:	3f 4f       	sbci	r19, 0xFF	; 255
    2362:	25 30       	cpi	r18, 0x05	; 5
    2364:	31 05       	cpc	r19, r1
    2366:	79 f7       	brne	.-34     	; 0x2346 <effect_rain+0x6c>
    2368:	cf 01       	movw	r24, r30
		// The raindrop has to step down one layer 5 times
		// in order to travel from the top, and exit out the bottom.
		for (p=1;p<5;p++)
		{
			// Shift all the layers one position down,
			for (z=0;z<4;z++)
    236a:	e4 30       	cpi	r30, 0x04	; 4
    236c:	f1 05       	cpc	r31, r1
    236e:	99 f0       	breq	.+38     	; 0x2396 <effect_rain+0xbc>
	}
}

// Random voxels light up at the top layer and falls to the bottom layer.
void effect_rain (int iterations, int delay, int hold, int speed)
{
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	30 e0       	ldi	r19, 0x00	; 0
		delay_ms(delay);
	}
}

// Random voxels light up at the top layer and falls to the bottom layer.
void effect_rain (int iterations, int delay, int hold, int speed)
    2374:	fc 01       	movw	r30, r24
    2376:	31 96       	adiw	r30, 0x01	; 1
			// Shift all the layers one position down,
			for (z=0;z<4;z++)
			{
				for (y=0;y<5;y++)
				{
					cube[z][y] = cube[z+1][y];
    2378:	bf 01       	movw	r22, r30
    237a:	66 0f       	add	r22, r22
    237c:	77 1f       	adc	r23, r23
    237e:	66 0f       	add	r22, r22
    2380:	77 1f       	adc	r23, r23
    2382:	6e 0f       	add	r22, r30
    2384:	7f 1f       	adc	r23, r31
    2386:	ac 01       	movw	r20, r24
    2388:	44 0f       	add	r20, r20
    238a:	55 1f       	adc	r21, r21
    238c:	44 0f       	add	r20, r20
    238e:	55 1f       	adc	r21, r21
    2390:	48 0f       	add	r20, r24
    2392:	59 1f       	adc	r21, r25
    2394:	d8 cf       	rjmp	.-80     	; 0x2346 <effect_rain+0x6c>
				}
			}
			
			// and a blank image on the top layer.
			cube[4][0] = 0x00;
    2396:	10 92 ce 01 	sts	0x01CE, r1
			cube[4][1] = 0x00;
    239a:	10 92 cf 01 	sts	0x01CF, r1
			cube[4][2] = 0x00;
    239e:	10 92 d0 01 	sts	0x01D0, r1
			cube[4][3] = 0x00;
    23a2:	10 92 d1 01 	sts	0x01D1, r1
			cube[4][4] = 0x00;
    23a6:	10 92 d2 01 	sts	0x01D2, r1
			
			// Accelerate the raindrop as it falls.
			// (speed/p) will decrease as p increases.
			delay_ms(speed+(speed/p));
    23aa:	c7 01       	movw	r24, r14
    23ac:	be 01       	movw	r22, r28
    23ae:	0e 94 26 29 	call	0x524c	; 0x524c <__divmodhi4>
    23b2:	cb 01       	movw	r24, r22
    23b4:	8e 0d       	add	r24, r14
    23b6:	9f 1d       	adc	r25, r15
    23b8:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
		setLED(rand()%5,rand()%5,4);
		delay_ms(hold);
		
		// The raindrop has to step down one layer 5 times
		// in order to travel from the top, and exit out the bottom.
		for (p=1;p<5;p++)
    23bc:	21 96       	adiw	r28, 0x01	; 1
    23be:	c5 30       	cpi	r28, 0x05	; 5
    23c0:	d1 05       	cpc	r29, r1
    23c2:	19 f0       	breq	.+6      	; 0x23ca <effect_rain+0xf0>
	}
}

// Random voxels light up at the top layer and falls to the bottom layer.
void effect_rain (int iterations, int delay, int hold, int speed)
{
    23c4:	80 e0       	ldi	r24, 0x00	; 0
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	d3 cf       	rjmp	.-90     	; 0x2370 <effect_rain+0x96>
			// Accelerate the raindrop as it falls.
			// (speed/p) will decrease as p increases.
			delay_ms(speed+(speed/p));
		}
		
		fill(0x00);
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	0e 94 16 06 	call	0xc2c	; 0xc2c <fill>
		delay_ms(delay);
    23d0:	c4 01       	movw	r24, r8
    23d2:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
	int z;		// cube layer
	int y;		// byte
	
	fill(0x00);
	
	for (i = 0; i < iterations; i++)
    23d6:	0f 5f       	subi	r16, 0xFF	; 255
    23d8:	1f 4f       	sbci	r17, 0xFF	; 255
    23da:	0a 15       	cp	r16, r10
    23dc:	1b 05       	cpc	r17, r11
    23de:	0c f4       	brge	.+2      	; 0x23e2 <effect_rain+0x108>
    23e0:	97 cf       	rjmp	.-210    	; 0x2310 <effect_rain+0x36>
		}
		
		fill(0x00);
		delay_ms(delay);
	}
}
    23e2:	df 91       	pop	r29
    23e4:	cf 91       	pop	r28
    23e6:	1f 91       	pop	r17
    23e8:	0f 91       	pop	r16
    23ea:	ff 90       	pop	r15
    23ec:	ef 90       	pop	r14
    23ee:	df 90       	pop	r13
    23f0:	cf 90       	pop	r12
    23f2:	bf 90       	pop	r11
    23f4:	af 90       	pop	r10
    23f6:	9f 90       	pop	r9
    23f8:	8f 90       	pop	r8
    23fa:	7f 90       	pop	r7
    23fc:	6f 90       	pop	r6
    23fe:	08 95       	ret

00002400 <sendvoxel_z>:


// Send a voxel flying from one side of the cube to the other
// It its at the bottom, send it to the top..
void sendvoxel_z (unsigned char x, unsigned char y, unsigned char z, int delay)
{
    2400:	7f 92       	push	r7
    2402:	8f 92       	push	r8
    2404:	9f 92       	push	r9
    2406:	af 92       	push	r10
    2408:	bf 92       	push	r11
    240a:	cf 92       	push	r12
    240c:	df 92       	push	r13
    240e:	ef 92       	push	r14
    2410:	ff 92       	push	r15
    2412:	0f 93       	push	r16
    2414:	1f 93       	push	r17
    2416:	cf 93       	push	r28
    2418:	df 93       	push	r29
    241a:	f8 2e       	mov	r15, r24
    241c:	e6 2e       	mov	r14, r22
    241e:	74 2e       	mov	r7, r20
    2420:	49 01       	movw	r8, r18
    2422:	05 e0       	ldi	r16, 0x05	; 5
    2424:	10 e0       	ldi	r17, 0x00	; 0



// Send a voxel flying from one side of the cube to the other
// It its at the bottom, send it to the top..
void sendvoxel_z (unsigned char x, unsigned char y, unsigned char z, int delay)
    2426:	25 e0       	ldi	r18, 0x05	; 5
    2428:	c2 2e       	mov	r12, r18
    242a:	d1 2c       	mov	r13, r1
    242c:	94 e0       	ldi	r25, 0x04	; 4
    242e:	a9 2e       	mov	r10, r25
    2430:	b1 2c       	mov	r11, r1
    2432:	e6 01       	movw	r28, r12
    2434:	c0 1b       	sub	r28, r16
    2436:	d1 0b       	sbc	r29, r17
{
	int i, ii;
	for (i=0; i<5; i++)
	{
		if (z == 4)
    2438:	87 2d       	mov	r24, r7
    243a:	84 30       	cpi	r24, 0x04	; 4
    243c:	41 f4       	brne	.+16     	; 0x244e <sendvoxel_z+0x4e>



// Send a voxel flying from one side of the cube to the other
// It its at the bottom, send it to the top..
void sendvoxel_z (unsigned char x, unsigned char y, unsigned char z, int delay)
    243e:	e8 01       	movw	r28, r16
    2440:	21 97       	sbiw	r28, 0x01	; 1
	for (i=0; i<5; i++)
	{
		if (z == 4)
		{
			ii = 4-i;
			clrLED(x,y,ii+1);
    2442:	8f 2d       	mov	r24, r15
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	6e 2d       	mov	r22, r14
    2448:	70 e0       	ldi	r23, 0x00	; 0
    244a:	a8 01       	movw	r20, r16
    244c:	07 c0       	rjmp	.+14     	; 0x245c <sendvoxel_z+0x5c>



// Send a voxel flying from one side of the cube to the other
// It its at the bottom, send it to the top..
void sendvoxel_z (unsigned char x, unsigned char y, unsigned char z, int delay)
    244e:	a5 01       	movw	r20, r10
    2450:	40 1b       	sub	r20, r16
    2452:	51 0b       	sbc	r21, r17
			ii = 4-i;
			clrLED(x,y,ii+1);
		} else
		{
			ii = i;
			clrLED(x,y,ii-1);
    2454:	8f 2d       	mov	r24, r15
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	6e 2d       	mov	r22, r14
    245a:	70 e0       	ldi	r23, 0x00	; 0
    245c:	0e 94 16 03 	call	0x62c	; 0x62c <clrLED>
		}
		setLED(x,y,ii);
    2460:	8f 2d       	mov	r24, r15
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	6e 2d       	mov	r22, r14
    2466:	70 e0       	ldi	r23, 0x00	; 0
    2468:	ae 01       	movw	r20, r28
    246a:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
		delay_ms(delay);
    246e:	c4 01       	movw	r24, r8
    2470:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
    2474:	01 50       	subi	r16, 0x01	; 1
    2476:	10 40       	sbci	r17, 0x00	; 0
// Send a voxel flying from one side of the cube to the other
// It its at the bottom, send it to the top..
void sendvoxel_z (unsigned char x, unsigned char y, unsigned char z, int delay)
{
	int i, ii;
	for (i=0; i<5; i++)
    2478:	e1 f6       	brne	.-72     	; 0x2432 <sendvoxel_z+0x32>
			clrLED(x,y,ii-1);
		}
		setLED(x,y,ii);
		delay_ms(delay);
	}
}
    247a:	df 91       	pop	r29
    247c:	cf 91       	pop	r28
    247e:	1f 91       	pop	r17
    2480:	0f 91       	pop	r16
    2482:	ff 90       	pop	r15
    2484:	ef 90       	pop	r14
    2486:	df 90       	pop	r13
    2488:	cf 90       	pop	r12
    248a:	bf 90       	pop	r11
    248c:	af 90       	pop	r10
    248e:	9f 90       	pop	r9
    2490:	8f 90       	pop	r8
    2492:	7f 90       	pop	r7
    2494:	08 95       	ret

00002496 <sendplane_rand_z>:

// Send all the voxels from one side of the cube to the other
// Start at z and send to the opposite side.
// Sends in random order.
void sendplane_rand_z (unsigned char z, int delay, int wait)
{
    2496:	af 92       	push	r10
    2498:	bf 92       	push	r11
    249a:	cf 92       	push	r12
    249c:	df 92       	push	r13
    249e:	ef 92       	push	r14
    24a0:	ff 92       	push	r15
    24a2:	0f 93       	push	r16
    24a4:	1f 93       	push	r17
    24a6:	cf 93       	push	r28
    24a8:	df 93       	push	r29
    24aa:	08 2f       	mov	r16, r24
    24ac:	7b 01       	movw	r14, r22
    24ae:	5a 01       	movw	r10, r20
	unsigned char loop = 25;
	unsigned char x, y;

	fill(0x00);
    24b0:	80 e0       	ldi	r24, 0x00	; 0
    24b2:	0e 94 16 06 	call	0xc2c	; 0xc2c <fill>

	setplane_z(z);
    24b6:	80 2f       	mov	r24, r16
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	0e 94 95 03 	call	0x72a	; 0x72a <setplane_z>
// Send all the voxels from one side of the cube to the other
// Start at z and send to the opposite side.
// Sends in random order.
void sendplane_rand_z (unsigned char z, int delay, int wait)
{
	unsigned char loop = 25;
    24be:	19 e1       	ldi	r17, 0x19	; 25
	setplane_z(z);
	
	// Send voxels at random untill all 16 have crossed the cube.
	while(loop)
	{
		x = rand()%5;
    24c0:	c5 e0       	ldi	r28, 0x05	; 5
    24c2:	d0 e0       	ldi	r29, 0x00	; 0
    24c4:	0e 94 05 2a 	call	0x540a	; 0x540a <rand>
    24c8:	be 01       	movw	r22, r28
    24ca:	0e 94 26 29 	call	0x524c	; 0x524c <__divmodhi4>
    24ce:	c8 2e       	mov	r12, r24
		y = rand()%5;
    24d0:	0e 94 05 2a 	call	0x540a	; 0x540a <rand>
    24d4:	be 01       	movw	r22, r28
    24d6:	0e 94 26 29 	call	0x524c	; 0x524c <__divmodhi4>
    24da:	d8 2e       	mov	r13, r24
		if (getLED(x,y,z))
    24dc:	8c 2d       	mov	r24, r12
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	6d 2d       	mov	r22, r13
    24e2:	70 e0       	ldi	r23, 0x00	; 0
    24e4:	40 2f       	mov	r20, r16
    24e6:	50 e0       	ldi	r21, 0x00	; 0
    24e8:	0e 94 ef 02 	call	0x5de	; 0x5de <getLED>
    24ec:	88 23       	and	r24, r24
    24ee:	51 f3       	breq	.-44     	; 0x24c4 <sendplane_rand_z+0x2e>
		{
			// Send the voxel flying
			sendvoxel_z(x,y,z,delay);
    24f0:	8c 2d       	mov	r24, r12
    24f2:	6d 2d       	mov	r22, r13
    24f4:	40 2f       	mov	r20, r16
    24f6:	97 01       	movw	r18, r14
    24f8:	0e 94 00 12 	call	0x2400	; 0x2400 <sendvoxel_z>
			delay_ms(wait);
    24fc:	c5 01       	movw	r24, r10
    24fe:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
			loop--; // one down, loop-- to go. when this hits 0, the loop exits. 
    2502:	11 50       	subi	r17, 0x01	; 1
	fill(0x00);

	setplane_z(z);
	
	// Send voxels at random untill all 16 have crossed the cube.
	while(loop)
    2504:	f9 f6       	brne	.-66     	; 0x24c4 <sendplane_rand_z+0x2e>
			sendvoxel_z(x,y,z,delay);
			delay_ms(wait);
			loop--; // one down, loop-- to go. when this hits 0, the loop exits. 
		}
	}
}
    2506:	df 91       	pop	r29
    2508:	cf 91       	pop	r28
    250a:	1f 91       	pop	r17
    250c:	0f 91       	pop	r16
    250e:	ff 90       	pop	r15
    2510:	ef 90       	pop	r14
    2512:	df 90       	pop	r13
    2514:	cf 90       	pop	r12
    2516:	bf 90       	pop	r11
    2518:	af 90       	pop	r10
    251a:	08 95       	ret

0000251c <sendvoxels_rand_z>:

// For each coordinate along X and Y, a voxel is set either at level 0 or at level 3
// for n iterations, a random voxel is sent to the opposite side of where it was.
void sendvoxels_rand_z (int iterations, int delay, int wait)
{
    251c:	4f 92       	push	r4
    251e:	5f 92       	push	r5
    2520:	6f 92       	push	r6
    2522:	7f 92       	push	r7
    2524:	9f 92       	push	r9
    2526:	af 92       	push	r10
    2528:	bf 92       	push	r11
    252a:	cf 92       	push	r12
    252c:	df 92       	push	r13
    252e:	ef 92       	push	r14
    2530:	ff 92       	push	r15
    2532:	0f 93       	push	r16
    2534:	1f 93       	push	r17
    2536:	cf 93       	push	r28
    2538:	df 93       	push	r29
    253a:	2c 01       	movw	r4, r24
    253c:	5b 01       	movw	r10, r22
    253e:	3a 01       	movw	r6, r20
	//unsigned char loop = 25;
	unsigned char x, y, i;
	unsigned char last_x, last_y;

	fill(0x00);
    2540:	80 e0       	ldi	r24, 0x00	; 0
    2542:	0e 94 16 06 	call	0xc2c	; 0xc2c <fill>
    2546:	00 e0       	ldi	r16, 0x00	; 0
    2548:	10 e0       	ldi	r17, 0x00	; 0
    254a:	1c c0       	rjmp	.+56     	; 0x2584 <sendvoxels_rand_z+0x68>
	for (x=0;x<5;x++)
	{
		for (y=0;y<5;y++)
		{
			// Then set a voxel either at the top or at the bottom
			if (rand()%2 == 0)
    254c:	0e 94 05 2a 	call	0x540a	; 0x540a <rand>
    2550:	80 fd       	sbrc	r24, 0
    2552:	05 c0       	rjmp	.+10     	; 0x255e <sendvoxels_rand_z+0x42>
			{
				setLED(x,y,0);
    2554:	c8 01       	movw	r24, r16
    2556:	be 01       	movw	r22, r28
    2558:	40 e0       	ldi	r20, 0x00	; 0
    255a:	50 e0       	ldi	r21, 0x00	; 0
    255c:	04 c0       	rjmp	.+8      	; 0x2566 <sendvoxels_rand_z+0x4a>
			} else
			{
				setLED(x,y,4);
    255e:	c8 01       	movw	r24, r16
    2560:	be 01       	movw	r22, r28
    2562:	44 e0       	ldi	r20, 0x04	; 4
    2564:	50 e0       	ldi	r21, 0x00	; 0
    2566:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
    256a:	21 96       	adiw	r28, 0x01	; 1
	fill(0x00);

	// Loop through all the X and Y coordinates
	for (x=0;x<5;x++)
	{
		for (y=0;y<5;y++)
    256c:	c5 30       	cpi	r28, 0x05	; 5
    256e:	d1 05       	cpc	r29, r1
    2570:	69 f7       	brne	.-38     	; 0x254c <sendvoxels_rand_z+0x30>
    2572:	0f 5f       	subi	r16, 0xFF	; 255
    2574:	1f 4f       	sbci	r17, 0xFF	; 255
	unsigned char last_x, last_y;

	fill(0x00);

	// Loop through all the X and Y coordinates
	for (x=0;x<5;x++)
    2576:	05 30       	cpi	r16, 0x05	; 5
    2578:	11 05       	cpc	r17, r1
    257a:	21 f4       	brne	.+8      	; 0x2584 <sendvoxels_rand_z+0x68>
    257c:	00 e0       	ldi	r16, 0x00	; 0

	for (i=0;i<iterations;i++)
	{
		// Pick a random x,y position
		x = rand()%5;
		y = rand()%5;
    257e:	c5 e0       	ldi	r28, 0x05	; 5
    2580:	d0 e0       	ldi	r29, 0x00	; 0
    2582:	30 c0       	rjmp	.+96     	; 0x25e4 <sendvoxels_rand_z+0xc8>
}

// For each coordinate along X and Y, a voxel is set either at level 0 or at level 3
// for n iterations, a random voxel is sent to the opposite side of where it was.
void sendvoxels_rand_z (int iterations, int delay, int wait)
{
    2584:	c0 e0       	ldi	r28, 0x00	; 0
    2586:	d0 e0       	ldi	r29, 0x00	; 0
    2588:	e1 cf       	rjmp	.-62     	; 0x254c <sendvoxels_rand_z+0x30>
	}

	for (i=0;i<iterations;i++)
	{
		// Pick a random x,y position
		x = rand()%5;
    258a:	0e 94 05 2a 	call	0x540a	; 0x540a <rand>
    258e:	7c 01       	movw	r14, r24
		y = rand()%5;
    2590:	0e 94 05 2a 	call	0x540a	; 0x540a <rand>
    2594:	be 01       	movw	r22, r28
    2596:	0e 94 26 29 	call	0x524c	; 0x524c <__divmodhi4>
    259a:	d8 2e       	mov	r13, r24
    259c:	18 2f       	mov	r17, r24
		// but not the sameone twice in a row
		if (y != last_y && x != last_x)
    259e:	8c 15       	cp	r24, r12
    25a0:	01 f1       	breq	.+64     	; 0x25e2 <sendvoxels_rand_z+0xc6>
	}

	for (i=0;i<iterations;i++)
	{
		// Pick a random x,y position
		x = rand()%5;
    25a2:	c7 01       	movw	r24, r14
    25a4:	be 01       	movw	r22, r28
    25a6:	0e 94 26 29 	call	0x524c	; 0x524c <__divmodhi4>
    25aa:	e8 2e       	mov	r14, r24
    25ac:	f8 2e       	mov	r15, r24
		y = rand()%5;
		// but not the sameone twice in a row
		if (y != last_y && x != last_x)
    25ae:	89 15       	cp	r24, r9
    25b0:	c1 f0       	breq	.+48     	; 0x25e2 <sendvoxels_rand_z+0xc6>
		{
			// If the voxel at this x,y is at the bottom
			if (getLED(x,y,0))
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	6d 2d       	mov	r22, r13
    25b6:	70 e0       	ldi	r23, 0x00	; 0
    25b8:	40 e0       	ldi	r20, 0x00	; 0
    25ba:	50 e0       	ldi	r21, 0x00	; 0
    25bc:	0e 94 ef 02 	call	0x5de	; 0x5de <getLED>
    25c0:	88 23       	and	r24, r24
    25c2:	21 f0       	breq	.+8      	; 0x25cc <sendvoxels_rand_z+0xb0>
			{
				// send it to the top
				sendvoxel_z(x,y,0,delay);
    25c4:	8e 2d       	mov	r24, r14
    25c6:	6d 2d       	mov	r22, r13
    25c8:	40 e0       	ldi	r20, 0x00	; 0
    25ca:	03 c0       	rjmp	.+6      	; 0x25d2 <sendvoxels_rand_z+0xb6>
			} else
			{
				// if its at the top, send it to the bottom
				sendvoxel_z(x,y,4,delay);
    25cc:	8e 2d       	mov	r24, r14
    25ce:	6d 2d       	mov	r22, r13
    25d0:	44 e0       	ldi	r20, 0x04	; 4
    25d2:	95 01       	movw	r18, r10
    25d4:	0e 94 00 12 	call	0x2400	; 0x2400 <sendvoxel_z>
			}
			delay_ms(wait);
    25d8:	c3 01       	movw	r24, r6
    25da:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
    25de:	c1 2e       	mov	r12, r17
    25e0:	9f 2c       	mov	r9, r15
				setLED(x,y,4);
			}
		}
	}

	for (i=0;i<iterations;i++)
    25e2:	0f 5f       	subi	r16, 0xFF	; 255
    25e4:	80 2f       	mov	r24, r16
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	84 15       	cp	r24, r4
    25ea:	95 05       	cpc	r25, r5
    25ec:	74 f2       	brlt	.-100    	; 0x258a <sendvoxels_rand_z+0x6e>
			last_y = y;
			last_x = x;
		}
	}

}
    25ee:	df 91       	pop	r29
    25f0:	cf 91       	pop	r28
    25f2:	1f 91       	pop	r17
    25f4:	0f 91       	pop	r16
    25f6:	ff 90       	pop	r15
    25f8:	ef 90       	pop	r14
    25fa:	df 90       	pop	r13
    25fc:	cf 90       	pop	r12
    25fe:	bf 90       	pop	r11
    2600:	af 90       	pop	r10
    2602:	9f 90       	pop	r9
    2604:	7f 90       	pop	r7
    2606:	6f 90       	pop	r6
    2608:	5f 90       	pop	r5
    260a:	4f 90       	pop	r4
    260c:	08 95       	ret

0000260e <random_1>:

// Set n number of voxels at random positions
void random_1 (int iterations, int voxels, int delay)
{
    260e:	4f 92       	push	r4
    2610:	5f 92       	push	r5
    2612:	6f 92       	push	r6
    2614:	7f 92       	push	r7
    2616:	8f 92       	push	r8
    2618:	9f 92       	push	r9
    261a:	af 92       	push	r10
    261c:	bf 92       	push	r11
    261e:	cf 92       	push	r12
    2620:	df 92       	push	r13
    2622:	ef 92       	push	r14
    2624:	ff 92       	push	r15
    2626:	0f 93       	push	r16
    2628:	1f 93       	push	r17
    262a:	cf 93       	push	r28
    262c:	df 93       	push	r29
    262e:	4c 01       	movw	r8, r24
    2630:	3b 01       	movw	r6, r22
    2632:	2a 01       	movw	r4, r20
	int i;
	int v;
	for (i = 0; i < iterations; i++)
    2634:	00 e0       	ldi	r16, 0x00	; 0
    2636:	10 e0       	ldi	r17, 0x00	; 0
	{
		for (v=0;v<=voxels;v++)
			setLED(rand()%5,rand()%5,rand()%5);
    2638:	35 e0       	ldi	r19, 0x05	; 5
    263a:	e3 2e       	mov	r14, r19
    263c:	f1 2c       	mov	r15, r1
// Set n number of voxels at random positions
void random_1 (int iterations, int voxels, int delay)
{
	int i;
	int v;
	for (i = 0; i < iterations; i++)
    263e:	28 c0       	rjmp	.+80     	; 0x2690 <random_1+0x82>
	{
		for (v=0;v<=voxels;v++)
			setLED(rand()%5,rand()%5,rand()%5);
    2640:	0e 94 05 2a 	call	0x540a	; 0x540a <rand>
    2644:	6c 01       	movw	r12, r24
    2646:	0e 94 05 2a 	call	0x540a	; 0x540a <rand>
    264a:	5c 01       	movw	r10, r24
    264c:	0e 94 05 2a 	call	0x540a	; 0x540a <rand>
    2650:	fc 01       	movw	r30, r24
    2652:	c6 01       	movw	r24, r12
    2654:	b7 01       	movw	r22, r14
    2656:	0e 94 26 29 	call	0x524c	; 0x524c <__divmodhi4>
    265a:	9c 01       	movw	r18, r24
    265c:	c5 01       	movw	r24, r10
    265e:	b7 01       	movw	r22, r14
    2660:	0e 94 26 29 	call	0x524c	; 0x524c <__divmodhi4>
    2664:	6c 01       	movw	r12, r24
    2666:	cf 01       	movw	r24, r30
    2668:	b7 01       	movw	r22, r14
    266a:	0e 94 26 29 	call	0x524c	; 0x524c <__divmodhi4>
    266e:	ac 01       	movw	r20, r24
    2670:	c9 01       	movw	r24, r18
    2672:	b6 01       	movw	r22, r12
    2674:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
{
	int i;
	int v;
	for (i = 0; i < iterations; i++)
	{
		for (v=0;v<=voxels;v++)
    2678:	21 96       	adiw	r28, 0x01	; 1
    267a:	6c 16       	cp	r6, r28
    267c:	7d 06       	cpc	r7, r29
    267e:	04 f7       	brge	.-64     	; 0x2640 <random_1+0x32>
			setLED(rand()%5,rand()%5,rand()%5);
			
		delay_ms(delay);
    2680:	c2 01       	movw	r24, r4
    2682:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
		fill(0x00);
    2686:	80 e0       	ldi	r24, 0x00	; 0
    2688:	0e 94 16 06 	call	0xc2c	; 0xc2c <fill>
// Set n number of voxels at random positions
void random_1 (int iterations, int voxels, int delay)
{
	int i;
	int v;
	for (i = 0; i < iterations; i++)
    268c:	0f 5f       	subi	r16, 0xFF	; 255
    268e:	1f 4f       	sbci	r17, 0xFF	; 255
    2690:	08 15       	cp	r16, r8
    2692:	19 05       	cpc	r17, r9
    2694:	1c f4       	brge	.+6      	; 0x269c <random_1+0x8e>
    2696:	c0 e0       	ldi	r28, 0x00	; 0
    2698:	d0 e0       	ldi	r29, 0x00	; 0
    269a:	ef cf       	rjmp	.-34     	; 0x267a <random_1+0x6c>
			setLED(rand()%5,rand()%5,rand()%5);
			
		delay_ms(delay);
		fill(0x00);
	}
}
    269c:	df 91       	pop	r29
    269e:	cf 91       	pop	r28
    26a0:	1f 91       	pop	r17
    26a2:	0f 91       	pop	r16
    26a4:	ff 90       	pop	r15
    26a6:	ef 90       	pop	r14
    26a8:	df 90       	pop	r13
    26aa:	cf 90       	pop	r12
    26ac:	bf 90       	pop	r11
    26ae:	af 90       	pop	r10
    26b0:	9f 90       	pop	r9
    26b2:	8f 90       	pop	r8
    26b4:	7f 90       	pop	r7
    26b6:	6f 90       	pop	r6
    26b8:	5f 90       	pop	r5
    26ba:	4f 90       	pop	r4
    26bc:	08 95       	ret

000026be <random_2>:

// blink 1 random voxel, blink 2 random voxels..... blink 20 random voxels
// and back to 1 again.
void random_2 (void)
{
    26be:	cf 93       	push	r28
    26c0:	df 93       	push	r29
	int i;
	
	for (i=1;i<25;i++)
    26c2:	c1 e0       	ldi	r28, 0x01	; 1
    26c4:	d0 e0       	ldi	r29, 0x00	; 0
	{
		random_1(5,i,500);
    26c6:	85 e0       	ldi	r24, 0x05	; 5
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	be 01       	movw	r22, r28
    26cc:	44 ef       	ldi	r20, 0xF4	; 244
    26ce:	51 e0       	ldi	r21, 0x01	; 1
    26d0:	0e 94 07 13 	call	0x260e	; 0x260e <random_1>
// and back to 1 again.
void random_2 (void)
{
	int i;
	
	for (i=1;i<25;i++)
    26d4:	21 96       	adiw	r28, 0x01	; 1
    26d6:	c9 31       	cpi	r28, 0x19	; 25
    26d8:	d1 05       	cpc	r29, r1
    26da:	a9 f7       	brne	.-22     	; 0x26c6 <random_2+0x8>
		random_1(5,i,500);
	}
	
	for (i=25;i>=1;i--)
	{
		random_1(5,i,500);
    26dc:	85 e0       	ldi	r24, 0x05	; 5
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	be 01       	movw	r22, r28
    26e2:	44 ef       	ldi	r20, 0xF4	; 244
    26e4:	51 e0       	ldi	r21, 0x01	; 1
    26e6:	0e 94 07 13 	call	0x260e	; 0x260e <random_1>
	for (i=1;i<25;i++)
	{
		random_1(5,i,500);
	}
	
	for (i=25;i>=1;i--)
    26ea:	21 97       	sbiw	r28, 0x01	; 1
    26ec:	b9 f7       	brne	.-18     	; 0x26dc <random_2+0x1e>
	{
		random_1(5,i,500);
	}
	
}
    26ee:	df 91       	pop	r29
    26f0:	cf 91       	pop	r28
    26f2:	08 95       	ret

000026f4 <random_filler>:

// Randomly fill or empty the cube with n voxels.
void random_filler (int iterations, int pixels, int delay, int state)
{
    26f4:	2f 92       	push	r2
    26f6:	3f 92       	push	r3
    26f8:	4f 92       	push	r4
    26fa:	5f 92       	push	r5
    26fc:	6f 92       	push	r6
    26fe:	7f 92       	push	r7
    2700:	8f 92       	push	r8
    2702:	9f 92       	push	r9
    2704:	af 92       	push	r10
    2706:	bf 92       	push	r11
    2708:	cf 92       	push	r12
    270a:	df 92       	push	r13
    270c:	ef 92       	push	r14
    270e:	ff 92       	push	r15
    2710:	0f 93       	push	r16
    2712:	1f 93       	push	r17
    2714:	cf 93       	push	r28
    2716:	df 93       	push	r29
    2718:	4c 01       	movw	r8, r24
    271a:	3b 01       	movw	r6, r22
    271c:	2a 01       	movw	r4, r20
    271e:	19 01       	movw	r2, r18
	int i;
	int p;
	for (i = 0; i < iterations; i++)
    2720:	00 e0       	ldi	r16, 0x00	; 0
    2722:	10 e0       	ldi	r17, 0x00	; 0
	{
		for (p=0;p<=pixels;p++)
			alterLED(rand()%5,rand()%5,rand()%5,state);
    2724:	45 e0       	ldi	r20, 0x05	; 5
    2726:	e4 2e       	mov	r14, r20
    2728:	f1 2c       	mov	r15, r1
// Randomly fill or empty the cube with n voxels.
void random_filler (int iterations, int pixels, int delay, int state)
{
	int i;
	int p;
	for (i = 0; i < iterations; i++)
    272a:	26 c0       	rjmp	.+76     	; 0x2778 <random_filler+0x84>
	{
		for (p=0;p<=pixels;p++)
			alterLED(rand()%5,rand()%5,rand()%5,state);
    272c:	0e 94 05 2a 	call	0x540a	; 0x540a <rand>
    2730:	6c 01       	movw	r12, r24
    2732:	0e 94 05 2a 	call	0x540a	; 0x540a <rand>
    2736:	5c 01       	movw	r10, r24
    2738:	0e 94 05 2a 	call	0x540a	; 0x540a <rand>
    273c:	fc 01       	movw	r30, r24
    273e:	c6 01       	movw	r24, r12
    2740:	b7 01       	movw	r22, r14
    2742:	0e 94 26 29 	call	0x524c	; 0x524c <__divmodhi4>
    2746:	9c 01       	movw	r18, r24
    2748:	c5 01       	movw	r24, r10
    274a:	b7 01       	movw	r22, r14
    274c:	0e 94 26 29 	call	0x524c	; 0x524c <__divmodhi4>
    2750:	6c 01       	movw	r12, r24
    2752:	cf 01       	movw	r24, r30
    2754:	b7 01       	movw	r22, r14
    2756:	0e 94 26 29 	call	0x524c	; 0x524c <__divmodhi4>
    275a:	ac 01       	movw	r20, r24
    275c:	c9 01       	movw	r24, r18
    275e:	b6 01       	movw	r22, r12
    2760:	91 01       	movw	r18, r2
    2762:	0e 94 65 03 	call	0x6ca	; 0x6ca <alterLED>
{
	int i;
	int p;
	for (i = 0; i < iterations; i++)
	{
		for (p=0;p<=pixels;p++)
    2766:	21 96       	adiw	r28, 0x01	; 1
    2768:	6c 16       	cp	r6, r28
    276a:	7d 06       	cpc	r7, r29
    276c:	fc f6       	brge	.-66     	; 0x272c <random_filler+0x38>
			alterLED(rand()%5,rand()%5,rand()%5,state);
			
		delay_ms(delay);
    276e:	c2 01       	movw	r24, r4
    2770:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
// Randomly fill or empty the cube with n voxels.
void random_filler (int iterations, int pixels, int delay, int state)
{
	int i;
	int p;
	for (i = 0; i < iterations; i++)
    2774:	0f 5f       	subi	r16, 0xFF	; 255
    2776:	1f 4f       	sbci	r17, 0xFF	; 255
    2778:	08 15       	cp	r16, r8
    277a:	19 05       	cpc	r17, r9
    277c:	1c f4       	brge	.+6      	; 0x2784 <random_filler+0x90>
    277e:	c0 e0       	ldi	r28, 0x00	; 0
    2780:	d0 e0       	ldi	r29, 0x00	; 0
    2782:	f2 cf       	rjmp	.-28     	; 0x2768 <random_filler+0x74>
		for (p=0;p<=pixels;p++)
			alterLED(rand()%5,rand()%5,rand()%5,state);
			
		delay_ms(delay);
	}
}
    2784:	df 91       	pop	r29
    2786:	cf 91       	pop	r28
    2788:	1f 91       	pop	r17
    278a:	0f 91       	pop	r16
    278c:	ff 90       	pop	r15
    278e:	ef 90       	pop	r14
    2790:	df 90       	pop	r13
    2792:	cf 90       	pop	r12
    2794:	bf 90       	pop	r11
    2796:	af 90       	pop	r10
    2798:	9f 90       	pop	r9
    279a:	8f 90       	pop	r8
    279c:	7f 90       	pop	r7
    279e:	6f 90       	pop	r6
    27a0:	5f 90       	pop	r5
    27a2:	4f 90       	pop	r4
    27a4:	3f 90       	pop	r3
    27a6:	2f 90       	pop	r2
    27a8:	08 95       	ret

000027aa <random_filler2>:

// Set or clear exactly 125 voxels in a random order.
void random_filler2 (int delay, int state)
{
    27aa:	2f 92       	push	r2
    27ac:	3f 92       	push	r3
    27ae:	4f 92       	push	r4
    27b0:	5f 92       	push	r5
    27b2:	6f 92       	push	r6
    27b4:	7f 92       	push	r7
    27b6:	8f 92       	push	r8
    27b8:	9f 92       	push	r9
    27ba:	af 92       	push	r10
    27bc:	bf 92       	push	r11
    27be:	cf 92       	push	r12
    27c0:	df 92       	push	r13
    27c2:	ef 92       	push	r14
    27c4:	ff 92       	push	r15
    27c6:	0f 93       	push	r16
    27c8:	1f 93       	push	r17
    27ca:	cf 93       	push	r28
    27cc:	df 93       	push	r29
    27ce:	1c 01       	movw	r2, r24
    27d0:	eb 01       	movw	r28, r22
	int x,y,z;
	int loop = 0;
    27d2:	00 e0       	ldi	r16, 0x00	; 0
    27d4:	10 e0       	ldi	r17, 0x00	; 0
	
	while (loop<124)
	{
		x = rand()%5;
    27d6:	55 e0       	ldi	r21, 0x05	; 5
    27d8:	e5 2e       	mov	r14, r21
    27da:	f1 2c       	mov	r15, r1
    27dc:	0e 94 05 2a 	call	0x540a	; 0x540a <rand>
    27e0:	b7 01       	movw	r22, r14
    27e2:	0e 94 26 29 	call	0x524c	; 0x524c <__divmodhi4>
    27e6:	5c 01       	movw	r10, r24
    27e8:	78 2e       	mov	r7, r24
    27ea:	6b 2c       	mov	r6, r11
		y = rand()%5;
    27ec:	0e 94 05 2a 	call	0x540a	; 0x540a <rand>
    27f0:	b7 01       	movw	r22, r14
    27f2:	0e 94 26 29 	call	0x524c	; 0x524c <__divmodhi4>
    27f6:	6c 01       	movw	r12, r24
    27f8:	58 2e       	mov	r5, r24
    27fa:	4d 2c       	mov	r4, r13
		z = rand()%5;
    27fc:	0e 94 05 2a 	call	0x540a	; 0x540a <rand>
    2800:	b7 01       	movw	r22, r14
    2802:	0e 94 26 29 	call	0x524c	; 0x524c <__divmodhi4>
    2806:	ac 01       	movw	r20, r24
    2808:	98 2e       	mov	r9, r24
    280a:	85 2e       	mov	r8, r21

		if ((state == 0 && getLED(x,y,z) == 0x01) || (state == 1 && getLED(x,y,z) == 0x00))
    280c:	20 97       	sbiw	r28, 0x00	; 0
    280e:	39 f4       	brne	.+14     	; 0x281e <random_filler2+0x74>
    2810:	c5 01       	movw	r24, r10
    2812:	b6 01       	movw	r22, r12
    2814:	0e 94 ef 02 	call	0x5de	; 0x5de <getLED>
    2818:	81 30       	cpi	r24, 0x01	; 1
    281a:	c1 f4       	brne	.+48     	; 0x284c <random_filler2+0xa2>
    281c:	09 c0       	rjmp	.+18     	; 0x2830 <random_filler2+0x86>
    281e:	c1 30       	cpi	r28, 0x01	; 1
    2820:	d1 05       	cpc	r29, r1
    2822:	a1 f4       	brne	.+40     	; 0x284c <random_filler2+0xa2>
    2824:	c5 01       	movw	r24, r10
    2826:	b6 01       	movw	r22, r12
    2828:	0e 94 ef 02 	call	0x5de	; 0x5de <getLED>
    282c:	88 23       	and	r24, r24
    282e:	71 f4       	brne	.+28     	; 0x284c <random_filler2+0xa2>
		{
			alterLED(x,y,z,state);
    2830:	87 2d       	mov	r24, r7
    2832:	96 2d       	mov	r25, r6
    2834:	65 2d       	mov	r22, r5
    2836:	74 2d       	mov	r23, r4
    2838:	49 2d       	mov	r20, r9
    283a:	58 2d       	mov	r21, r8
    283c:	9e 01       	movw	r18, r28
    283e:	0e 94 65 03 	call	0x6ca	; 0x6ca <alterLED>
			delay_ms(delay);
    2842:	c1 01       	movw	r24, r2
    2844:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
			loop++;
    2848:	0f 5f       	subi	r16, 0xFF	; 255
    284a:	1f 4f       	sbci	r17, 0xFF	; 255
void random_filler2 (int delay, int state)
{
	int x,y,z;
	int loop = 0;
	
	while (loop<124)
    284c:	0c 37       	cpi	r16, 0x7C	; 124
    284e:	11 05       	cpc	r17, r1
    2850:	2c f2       	brlt	.-118    	; 0x27dc <random_filler2+0x32>
			alterLED(x,y,z,state);
			delay_ms(delay);
			loop++;
		}	
	}
}
    2852:	df 91       	pop	r29
    2854:	cf 91       	pop	r28
    2856:	1f 91       	pop	r17
    2858:	0f 91       	pop	r16
    285a:	ff 90       	pop	r15
    285c:	ef 90       	pop	r14
    285e:	df 90       	pop	r13
    2860:	cf 90       	pop	r12
    2862:	bf 90       	pop	r11
    2864:	af 90       	pop	r10
    2866:	9f 90       	pop	r9
    2868:	8f 90       	pop	r8
    286a:	7f 90       	pop	r7
    286c:	6f 90       	pop	r6
    286e:	5f 90       	pop	r5
    2870:	4f 90       	pop	r4
    2872:	3f 90       	pop	r3
    2874:	2f 90       	pop	r2
    2876:	08 95       	ret

00002878 <planeflip>:

// ...to be continiued
void planeflip (unsigned char axis1, int pos1, unsigned char axis2, int pos2, int delay)
{
	
}
    2878:	08 95       	ret

0000287a <loadbar>:


// Light all leds layer by layer,
// then unset layer by layer
void loadbar(int delay)
{
    287a:	ff 92       	push	r15
    287c:	0f 93       	push	r16
    287e:	1f 93       	push	r17
    2880:	cf 93       	push	r28
    2882:	df 93       	push	r29
    2884:	8c 01       	movw	r16, r24
	fill(0x00);
    2886:	80 e0       	ldi	r24, 0x00	; 0
    2888:	0e 94 16 06 	call	0xc2c	; 0xc2c <fill>
	
	int z,y;
	
	for (z=0;z<5;z++)
    288c:	c0 e0       	ldi	r28, 0x00	; 0
    288e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		for (y=0;y<5;y++)
			cube[z][y] = 0xff;
    2890:	ff 24       	eor	r15, r15
    2892:	fa 94       	dec	r15
    2894:	fe 01       	movw	r30, r28
    2896:	ee 0f       	add	r30, r30
    2898:	ff 1f       	adc	r31, r31
    289a:	ee 0f       	add	r30, r30
    289c:	ff 1f       	adc	r31, r31
    289e:	ec 0f       	add	r30, r28
    28a0:	fd 1f       	adc	r31, r29
    28a2:	e6 54       	subi	r30, 0x46	; 70
    28a4:	fe 4f       	sbci	r31, 0xFE	; 254
    28a6:	f0 82       	st	Z, r15
    28a8:	f1 82       	std	Z+1, r15	; 0x01
    28aa:	f2 82       	std	Z+2, r15	; 0x02
    28ac:	f3 82       	std	Z+3, r15	; 0x03
    28ae:	f4 82       	std	Z+4, r15	; 0x04
			
		delay_ms(delay);
    28b0:	c8 01       	movw	r24, r16
    28b2:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
{
	fill(0x00);
	
	int z,y;
	
	for (z=0;z<5;z++)
    28b6:	21 96       	adiw	r28, 0x01	; 1
    28b8:	c5 30       	cpi	r28, 0x05	; 5
    28ba:	d1 05       	cpc	r29, r1
    28bc:	59 f7       	brne	.-42     	; 0x2894 <loadbar+0x1a>
			cube[z][y] = 0xff;
			
		delay_ms(delay);
	}
	
	delay_ms(delay*3);
    28be:	c8 01       	movw	r24, r16
    28c0:	88 0f       	add	r24, r24
    28c2:	99 1f       	adc	r25, r25
    28c4:	80 0f       	add	r24, r16
    28c6:	91 1f       	adc	r25, r17
    28c8:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
	
	for (z=0;z<5;z++)
    28cc:	c0 e0       	ldi	r28, 0x00	; 0
    28ce:	d0 e0       	ldi	r29, 0x00	; 0
	{
		for (y=0;y<5;y++)
			cube[z][y] = 0x00;
    28d0:	fe 01       	movw	r30, r28
    28d2:	ee 0f       	add	r30, r30
    28d4:	ff 1f       	adc	r31, r31
    28d6:	ee 0f       	add	r30, r30
    28d8:	ff 1f       	adc	r31, r31
    28da:	ec 0f       	add	r30, r28
    28dc:	fd 1f       	adc	r31, r29
    28de:	e6 54       	subi	r30, 0x46	; 70
    28e0:	fe 4f       	sbci	r31, 0xFE	; 254
    28e2:	10 82       	st	Z, r1
    28e4:	11 82       	std	Z+1, r1	; 0x01
    28e6:	12 82       	std	Z+2, r1	; 0x02
    28e8:	13 82       	std	Z+3, r1	; 0x03
    28ea:	14 82       	std	Z+4, r1	; 0x04
			
		delay_ms(delay);
    28ec:	c8 01       	movw	r24, r16
    28ee:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
		delay_ms(delay);
	}
	
	delay_ms(delay*3);
	
	for (z=0;z<5;z++)
    28f2:	21 96       	adiw	r28, 0x01	; 1
    28f4:	c5 30       	cpi	r28, 0x05	; 5
    28f6:	d1 05       	cpc	r29, r1
    28f8:	59 f7       	brne	.-42     	; 0x28d0 <loadbar+0x56>
		for (y=0;y<5;y++)
			cube[z][y] = 0x00;
			
		delay_ms(delay);
	}
}
    28fa:	df 91       	pop	r29
    28fc:	cf 91       	pop	r28
    28fe:	1f 91       	pop	r17
    2900:	0f 91       	pop	r16
    2902:	ff 90       	pop	r15
    2904:	08 95       	ret

00002906 <flyplane>:

void flyplane (unsigned char plane,unsigned char direction, int delay)
{
    2906:	af 92       	push	r10
    2908:	bf 92       	push	r11
    290a:	cf 92       	push	r12
    290c:	df 92       	push	r13
    290e:	ef 92       	push	r14
    2910:	ff 92       	push	r15
    2912:	0f 93       	push	r16
    2914:	1f 93       	push	r17
    2916:	cf 93       	push	r28
    2918:	df 93       	push	r29
    291a:	f8 2e       	mov	r15, r24
    291c:	e6 2e       	mov	r14, r22
    291e:	5a 01       	movw	r10, r20
	int i,ii;
	
	fill(0x00);
    2920:	80 e0       	ldi	r24, 0x00	; 0
    2922:	0e 94 16 06 	call	0xc2c	; 0xc2c <fill>
	
	for (i=0;i<5;i++)
    2926:	00 e0       	ldi	r16, 0x00	; 0
    2928:	10 e0       	ldi	r17, 0x00	; 0
			
		delay_ms(delay);
	}
}

void flyplane (unsigned char plane,unsigned char direction, int delay)
    292a:	84 e0       	ldi	r24, 0x04	; 4
    292c:	c8 2e       	mov	r12, r24
    292e:	d1 2c       	mov	r13, r1
	
	fill(0x00);
	
	for (i=0;i<5;i++)
	{
		if (direction != 0)
    2930:	ee 20       	and	r14, r14
    2932:	21 f0       	breq	.+8      	; 0x293c <flyplane+0x36>
			
		delay_ms(delay);
	}
}

void flyplane (unsigned char plane,unsigned char direction, int delay)
    2934:	e6 01       	movw	r28, r12
    2936:	c0 1b       	sub	r28, r16
    2938:	d1 0b       	sbc	r29, r17
    293a:	01 c0       	rjmp	.+2      	; 0x293e <flyplane+0x38>
	
	fill(0x00);
	
	for (i=0;i<5;i++)
	{
		if (direction != 0)
    293c:	e8 01       	movw	r28, r16
		} else
		{
			ii = i;
		}
		
		setplane(plane,ii,1);
    293e:	8f 2d       	mov	r24, r15
    2940:	be 01       	movw	r22, r28
    2942:	41 e0       	ldi	r20, 0x01	; 1
    2944:	50 e0       	ldi	r21, 0x00	; 0
    2946:	0e 94 14 04 	call	0x828	; 0x828 <setplane>
		delay_ms(delay);
    294a:	c5 01       	movw	r24, r10
    294c:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
		setplane(plane,ii,0);
    2950:	8f 2d       	mov	r24, r15
    2952:	be 01       	movw	r22, r28
    2954:	40 e0       	ldi	r20, 0x00	; 0
    2956:	50 e0       	ldi	r21, 0x00	; 0
    2958:	0e 94 14 04 	call	0x828	; 0x828 <setplane>
{
	int i,ii;
	
	fill(0x00);
	
	for (i=0;i<5;i++)
    295c:	0f 5f       	subi	r16, 0xFF	; 255
    295e:	1f 4f       	sbci	r17, 0xFF	; 255
    2960:	05 30       	cpi	r16, 0x05	; 5
    2962:	11 05       	cpc	r17, r1
    2964:	29 f7       	brne	.-54     	; 0x2930 <flyplane+0x2a>
    2966:	03 e0       	ldi	r16, 0x03	; 3
    2968:	10 e0       	ldi	r17, 0x00	; 0
			
		delay_ms(delay);
	}
}

void flyplane (unsigned char plane,unsigned char direction, int delay)
    296a:	b4 e0       	ldi	r27, 0x04	; 4
    296c:	cb 2e       	mov	r12, r27
    296e:	d1 2c       	mov	r13, r1
		setplane(plane,ii,0);
	}
	
	for (i=3;i>=0;i--)
	{
		if (direction != 0)
    2970:	ee 20       	and	r14, r14
    2972:	21 f0       	breq	.+8      	; 0x297c <flyplane+0x76>
			
		delay_ms(delay);
	}
}

void flyplane (unsigned char plane,unsigned char direction, int delay)
    2974:	e6 01       	movw	r28, r12
    2976:	c0 1b       	sub	r28, r16
    2978:	d1 0b       	sbc	r29, r17
    297a:	01 c0       	rjmp	.+2      	; 0x297e <flyplane+0x78>
		setplane(plane,ii,0);
	}
	
	for (i=3;i>=0;i--)
	{
		if (direction != 0)
    297c:	e8 01       	movw	r28, r16
		} else
		{
			ii = i;
		}
		
		setplane(plane,ii,1);
    297e:	8f 2d       	mov	r24, r15
    2980:	be 01       	movw	r22, r28
    2982:	41 e0       	ldi	r20, 0x01	; 1
    2984:	50 e0       	ldi	r21, 0x00	; 0
    2986:	0e 94 14 04 	call	0x828	; 0x828 <setplane>
		delay_ms(delay);
    298a:	c5 01       	movw	r24, r10
    298c:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
		setplane(plane,ii,0);
    2990:	8f 2d       	mov	r24, r15
    2992:	be 01       	movw	r22, r28
    2994:	40 e0       	ldi	r20, 0x00	; 0
    2996:	50 e0       	ldi	r21, 0x00	; 0
    2998:	0e 94 14 04 	call	0x828	; 0x828 <setplane>
		setplane(plane,ii,1);
		delay_ms(delay);
		setplane(plane,ii,0);
	}
	
	for (i=3;i>=0;i--)
    299c:	01 50       	subi	r16, 0x01	; 1
    299e:	10 40       	sbci	r17, 0x00	; 0
    29a0:	8f ef       	ldi	r24, 0xFF	; 255
    29a2:	0f 3f       	cpi	r16, 0xFF	; 255
    29a4:	18 07       	cpc	r17, r24
    29a6:	21 f7       	brne	.-56     	; 0x2970 <flyplane+0x6a>
		
		setplane(plane,ii,1);
		delay_ms(delay);
		setplane(plane,ii,0);
	}
}
    29a8:	df 91       	pop	r29
    29aa:	cf 91       	pop	r28
    29ac:	1f 91       	pop	r17
    29ae:	0f 91       	pop	r16
    29b0:	ff 90       	pop	r15
    29b2:	ef 90       	pop	r14
    29b4:	df 90       	pop	r13
    29b6:	cf 90       	pop	r12
    29b8:	bf 90       	pop	r11
    29ba:	af 90       	pop	r10
    29bc:	08 95       	ret

000029be <blinky>:

void blinky(void)
{
    29be:	cf 93       	push	r28
    29c0:	df 93       	push	r29
	int a;

	fill(0x00);
    29c2:	80 e0       	ldi	r24, 0x00	; 0
    29c4:	0e 94 16 06 	call	0xc2c	; 0xc2c <fill>
	delay_ms(2000);
    29c8:	80 ed       	ldi	r24, 0xD0	; 208
    29ca:	97 e0       	ldi	r25, 0x07	; 7
    29cc:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
    29d0:	c4 e0       	ldi	r28, 0x04	; 4
    29d2:	d0 e0       	ldi	r29, 0x00	; 0
	
	for (a=0;a<4;a++)
	{
		fill(0x1f);
    29d4:	8f e1       	ldi	r24, 0x1F	; 31
    29d6:	0e 94 16 06 	call	0xc2c	; 0xc2c <fill>
		delay_ms(50);
    29da:	82 e3       	ldi	r24, 0x32	; 50
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
		fill(0x00);
    29e2:	80 e0       	ldi	r24, 0x00	; 0
    29e4:	0e 94 16 06 	call	0xc2c	; 0xc2c <fill>
		
		delay_ms(1500);
    29e8:	8c ed       	ldi	r24, 0xDC	; 220
    29ea:	95 e0       	ldi	r25, 0x05	; 5
    29ec:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
		
		fill(0x1f);
    29f0:	8f e1       	ldi	r24, 0x1F	; 31
    29f2:	0e 94 16 06 	call	0xc2c	; 0xc2c <fill>
		delay_ms(30);
    29f6:	8e e1       	ldi	r24, 0x1E	; 30
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
		fill(0x00);
    29fe:	80 e0       	ldi	r24, 0x00	; 0
    2a00:	0e 94 16 06 	call	0xc2c	; 0xc2c <fill>
		
		delay_ms(7000);
    2a04:	88 e5       	ldi	r24, 0x58	; 88
    2a06:	9b e1       	ldi	r25, 0x1B	; 27
    2a08:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
    2a0c:	21 97       	sbiw	r28, 0x01	; 1
	int a;

	fill(0x00);
	delay_ms(2000);
	
	for (a=0;a<4;a++)
    2a0e:	11 f7       	brne	.-60     	; 0x29d4 <blinky+0x16>
		
		delay_ms(7000);
	}
	
	
}
    2a10:	df 91       	pop	r29
    2a12:	cf 91       	pop	r28
    2a14:	08 95       	ret

00002a16 <blinky2>:

void blinky2(void)
{
    2a16:	af 92       	push	r10
    2a18:	bf 92       	push	r11
    2a1a:	cf 92       	push	r12
    2a1c:	df 92       	push	r13
    2a1e:	ef 92       	push	r14
    2a20:	ff 92       	push	r15
    2a22:	0f 93       	push	r16
    2a24:	1f 93       	push	r17
    2a26:	cf 93       	push	r28
    2a28:	df 93       	push	r29
	int i,r;
	fill(0x00);
    2a2a:	80 e0       	ldi	r24, 0x00	; 0
    2a2c:	0e 94 16 06 	call	0xc2c	; 0xc2c <fill>
    2a30:	05 e0       	ldi	r16, 0x05	; 5
    2a32:	10 e0       	ldi	r17, 0x00	; 0
			delay_ms(i);
			
			fill(0x1f);
			delay_ms(100);
			
			i = i - (15+(1000/(i/10)));
    2a34:	36 ef       	ldi	r19, 0xF6	; 246
    2a36:	e3 2e       	mov	r14, r19
    2a38:	3f ef       	ldi	r19, 0xFF	; 255
    2a3a:	f3 2e       	mov	r15, r19
    2a3c:	28 ee       	ldi	r18, 0xE8	; 232
    2a3e:	c2 2e       	mov	r12, r18
    2a40:	23 e0       	ldi	r18, 0x03	; 3
    2a42:	d2 2e       	mov	r13, r18
		
		i = 750;
		while (i>0)
		{
			fill(0x00);
			delay_ms(751-i);
    2a44:	9f ee       	ldi	r25, 0xEF	; 239
    2a46:	a9 2e       	mov	r10, r25
    2a48:	92 e0       	ldi	r25, 0x02	; 2
    2a4a:	b9 2e       	mov	r11, r25
    2a4c:	41 c0       	rjmp	.+130    	; 0x2ad0 <blinky2+0xba>
	for (r=0;r<5;r++)
	{
		i = 750;
		while (i>0)
		{
			fill(0x00);
    2a4e:	80 e0       	ldi	r24, 0x00	; 0
    2a50:	0e 94 16 06 	call	0xc2c	; 0xc2c <fill>
			delay_ms(i);
    2a54:	ce 01       	movw	r24, r28
    2a56:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
			
			fill(0x1f);
    2a5a:	8f e1       	ldi	r24, 0x1F	; 31
    2a5c:	0e 94 16 06 	call	0xc2c	; 0xc2c <fill>
			delay_ms(100);
    2a60:	84 e6       	ldi	r24, 0x64	; 100
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
			
			i = i - (15+(1000/(i/10)));
    2a68:	ce 01       	movw	r24, r28
    2a6a:	b7 01       	movw	r22, r14
    2a6c:	0e 94 26 29 	call	0x524c	; 0x524c <__divmodhi4>
    2a70:	c6 01       	movw	r24, r12
    2a72:	0e 94 26 29 	call	0x524c	; 0x524c <__divmodhi4>
    2a76:	6f 50       	subi	r22, 0x0F	; 15
    2a78:	70 40       	sbci	r23, 0x00	; 0
    2a7a:	c6 0f       	add	r28, r22
    2a7c:	d7 1f       	adc	r29, r23
	fill(0x00);
	
	for (r=0;r<5;r++)
	{
		i = 750;
		while (i>0)
    2a7e:	1c 16       	cp	r1, r28
    2a80:	1d 06       	cpc	r1, r29
    2a82:	2c f3       	brlt	.-54     	; 0x2a4e <blinky2+0x38>
			delay_ms(100);
			
			i = i - (15+(1000/(i/10)));
		}
		
		delay_ms(1000);
    2a84:	88 ee       	ldi	r24, 0xE8	; 232
    2a86:	93 e0       	ldi	r25, 0x03	; 3
    2a88:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
		
		i = 750;
    2a8c:	ce ee       	ldi	r28, 0xEE	; 238
    2a8e:	d2 e0       	ldi	r29, 0x02	; 2
		while (i>0)
		{
			fill(0x00);
    2a90:	80 e0       	ldi	r24, 0x00	; 0
    2a92:	0e 94 16 06 	call	0xc2c	; 0xc2c <fill>
			delay_ms(751-i);
    2a96:	c5 01       	movw	r24, r10
    2a98:	8c 1b       	sub	r24, r28
    2a9a:	9d 0b       	sbc	r25, r29
    2a9c:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
			
			fill(0x1f);
    2aa0:	8f e1       	ldi	r24, 0x1F	; 31
    2aa2:	0e 94 16 06 	call	0xc2c	; 0xc2c <fill>
			delay_ms(100);
    2aa6:	84 e6       	ldi	r24, 0x64	; 100
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
			
			i = i - (15+(1000/(i/10)));
    2aae:	ce 01       	movw	r24, r28
    2ab0:	b7 01       	movw	r22, r14
    2ab2:	0e 94 26 29 	call	0x524c	; 0x524c <__divmodhi4>
    2ab6:	c6 01       	movw	r24, r12
    2ab8:	0e 94 26 29 	call	0x524c	; 0x524c <__divmodhi4>
    2abc:	6f 50       	subi	r22, 0x0F	; 15
    2abe:	70 40       	sbci	r23, 0x00	; 0
    2ac0:	c6 0f       	add	r28, r22
    2ac2:	d7 1f       	adc	r29, r23
		}
		
		delay_ms(1000);
		
		i = 750;
		while (i>0)
    2ac4:	1c 16       	cp	r1, r28
    2ac6:	1d 06       	cpc	r1, r29
    2ac8:	1c f3       	brlt	.-58     	; 0x2a90 <blinky2+0x7a>
    2aca:	01 50       	subi	r16, 0x01	; 1
    2acc:	10 40       	sbci	r17, 0x00	; 0
void blinky2(void)
{
	int i,r;
	fill(0x00);
	
	for (r=0;r<5;r++)
    2ace:	19 f0       	breq	.+6      	; 0x2ad6 <blinky2+0xc0>
	
	
}

void blinky2(void)
{
    2ad0:	ce ee       	ldi	r28, 0xEE	; 238
    2ad2:	d2 e0       	ldi	r29, 0x02	; 2
    2ad4:	bc cf       	rjmp	.-136    	; 0x2a4e <blinky2+0x38>
			
			i = i - (15+(1000/(i/10)));
		}
	}

}
    2ad6:	df 91       	pop	r29
    2ad8:	cf 91       	pop	r28
    2ada:	1f 91       	pop	r17
    2adc:	0f 91       	pop	r16
    2ade:	ff 90       	pop	r15
    2ae0:	ef 90       	pop	r14
    2ae2:	df 90       	pop	r13
    2ae4:	cf 90       	pop	r12
    2ae6:	bf 90       	pop	r11
    2ae8:	af 90       	pop	r10
    2aea:	08 95       	ret

00002aec <animateCharacter>:

void animateCharacter(char charletter)
{
    2aec:	0f 93       	push	r16
    2aee:	1f 93       	push	r17
    2af0:	cf 93       	push	r28
    2af2:	df 93       	push	r29
	int letter = letterToInt(charletter);
    2af4:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <letterToInt>
    2af8:	8c 01       	movw	r16, r24
	int l=0;
	for(l=0;l<4;l++)
    2afa:	c0 e0       	ldi	r28, 0x00	; 0
    2afc:	d0 e0       	ldi	r29, 0x00	; 0
	{
		getLetter(letter,l);
    2afe:	c8 01       	movw	r24, r16
    2b00:	be 01       	movw	r22, r28
    2b02:	0e 94 ff 07 	call	0xffe	; 0xffe <getLetter>
		delay_ms(80);
    2b06:	80 e5       	ldi	r24, 0x50	; 80
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>

void animateCharacter(char charletter)
{
	int letter = letterToInt(charletter);
	int l=0;
	for(l=0;l<4;l++)
    2b0e:	21 96       	adiw	r28, 0x01	; 1
    2b10:	c4 30       	cpi	r28, 0x04	; 4
    2b12:	d1 05       	cpc	r29, r1
    2b14:	a1 f7       	brne	.-24     	; 0x2afe <animateCharacter+0x12>
	{
		getLetter(letter,l);
		delay_ms(80);
	}
		getLetter(letter,l);
    2b16:	c8 01       	movw	r24, r16
    2b18:	64 e0       	ldi	r22, 0x04	; 4
    2b1a:	70 e0       	ldi	r23, 0x00	; 0
    2b1c:	0e 94 ff 07 	call	0xffe	; 0xffe <getLetter>
		delay_ms(500);
    2b20:	84 ef       	ldi	r24, 0xF4	; 244
    2b22:	91 e0       	ldi	r25, 0x01	; 1
    2b24:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>

	
	
}
    2b28:	df 91       	pop	r29
    2b2a:	cf 91       	pop	r28
    2b2c:	1f 91       	pop	r17
    2b2e:	0f 91       	pop	r16
    2b30:	08 95       	ret

00002b32 <writeBlank>:

void writeBlank(void)
{
		fill(0x00);
    2b32:	80 e0       	ldi	r24, 0x00	; 0
    2b34:	0e 94 16 06 	call	0xc2c	; 0xc2c <fill>
		delay_ms(900);
    2b38:	84 e8       	ldi	r24, 0x84	; 132
    2b3a:	93 e0       	ldi	r25, 0x03	; 3
    2b3c:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>

}
    2b40:	08 95       	ret

00002b42 <LCHamburg>:

void LCHamburg(void)
{
	animateCharacter('E');
    2b42:	85 e4       	ldi	r24, 0x45	; 69
    2b44:	0e 94 76 15 	call	0x2aec	; 0x2aec <animateCharacter>
	animateCharacter('E');
    2b48:	85 e4       	ldi	r24, 0x45	; 69
    2b4a:	0e 94 76 15 	call	0x2aec	; 0x2aec <animateCharacter>
	animateCharacter('S');
    2b4e:	83 e5       	ldi	r24, 0x53	; 83
    2b50:	0e 94 76 15 	call	0x2aec	; 0x2aec <animateCharacter>
	animateCharacter('T');
    2b54:	84 e5       	ldi	r24, 0x54	; 84
    2b56:	0e 94 76 15 	call	0x2aec	; 0x2aec <animateCharacter>
	animateCharacter('E');
    2b5a:	85 e4       	ldi	r24, 0x45	; 69
    2b5c:	0e 94 76 15 	call	0x2aec	; 0x2aec <animateCharacter>
	animateCharacter('C');
    2b60:	83 e4       	ldi	r24, 0x43	; 67
    2b62:	0e 94 76 15 	call	0x2aec	; 0x2aec <animateCharacter>
	writeBlank();
    2b66:	0e 94 99 15 	call	0x2b32	; 0x2b32 <writeBlank>
	animateCharacter('L');
    2b6a:	8c e4       	ldi	r24, 0x4C	; 76
    2b6c:	0e 94 76 15 	call	0x2aec	; 0x2aec <animateCharacter>
	animateCharacter('C');
    2b70:	83 e4       	ldi	r24, 0x43	; 67
    2b72:	0e 94 76 15 	call	0x2aec	; 0x2aec <animateCharacter>
	writeBlank();
    2b76:	0e 94 99 15 	call	0x2b32	; 0x2b32 <writeBlank>
	animateCharacter('H');
    2b7a:	88 e4       	ldi	r24, 0x48	; 72
    2b7c:	0e 94 76 15 	call	0x2aec	; 0x2aec <animateCharacter>
	animateCharacter('A');
    2b80:	81 e4       	ldi	r24, 0x41	; 65
    2b82:	0e 94 76 15 	call	0x2aec	; 0x2aec <animateCharacter>
	animateCharacter('M');
    2b86:	8d e4       	ldi	r24, 0x4D	; 77
    2b88:	0e 94 76 15 	call	0x2aec	; 0x2aec <animateCharacter>
	animateCharacter('B');
    2b8c:	82 e4       	ldi	r24, 0x42	; 66
    2b8e:	0e 94 76 15 	call	0x2aec	; 0x2aec <animateCharacter>
	animateCharacter('U');
    2b92:	85 e5       	ldi	r24, 0x55	; 85
    2b94:	0e 94 76 15 	call	0x2aec	; 0x2aec <animateCharacter>
	animateCharacter('R');
    2b98:	82 e5       	ldi	r24, 0x52	; 82
    2b9a:	0e 94 76 15 	call	0x2aec	; 0x2aec <animateCharacter>
	animateCharacter('G');
    2b9e:	87 e4       	ldi	r24, 0x47	; 71
    2ba0:	0e 94 76 15 	call	0x2aec	; 0x2aec <animateCharacter>
}
    2ba4:	08 95       	ret

00002ba6 <shiftBack2>:

void shiftBack2()
{
    2ba6:	cf 92       	push	r12
    2ba8:	df 92       	push	r13
    2baa:	ef 92       	push	r14
    2bac:	ff 92       	push	r15
    2bae:	0f 93       	push	r16
    2bb0:	1f 93       	push	r17
    2bb2:	cf 93       	push	r28
    2bb4:	df 93       	push	r29
    2bb6:	04 e0       	ldi	r16, 0x04	; 4
    2bb8:	10 e0       	ldi	r17, 0x00	; 0
    2bba:	1c c0       	rjmp	.+56     	; 0x2bf4 <shiftBack2+0x4e>
    {
        for (j=0;j<1;j++)
        {
			for (k=0;k<5;k++)
            {
                if(getLED(i-1,j,k))
    2bbc:	c7 01       	movw	r24, r14
    2bbe:	60 e0       	ldi	r22, 0x00	; 0
    2bc0:	70 e0       	ldi	r23, 0x00	; 0
    2bc2:	ae 01       	movw	r20, r28
    2bc4:	0e 94 ef 02 	call	0x5de	; 0x5de <getLED>
    2bc8:	88 23       	and	r24, r24
    2bca:	39 f0       	breq	.+14     	; 0x2bda <shiftBack2+0x34>
                    setLED(i,j,k);
    2bcc:	c6 01       	movw	r24, r12
    2bce:	60 e0       	ldi	r22, 0x00	; 0
    2bd0:	70 e0       	ldi	r23, 0x00	; 0
    2bd2:	ae 01       	movw	r20, r28
    2bd4:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
    2bd8:	06 c0       	rjmp	.+12     	; 0x2be6 <shiftBack2+0x40>
							   //clrLED(i-1,j,k);
                else
                    clrLED(i,j,k);
    2bda:	c6 01       	movw	r24, r12
    2bdc:	60 e0       	ldi	r22, 0x00	; 0
    2bde:	70 e0       	ldi	r23, 0x00	; 0
    2be0:	ae 01       	movw	r20, r28
    2be2:	0e 94 16 03 	call	0x62c	; 0x62c <clrLED>
int i,j,k;
    for (i=4;i>0;i--)
    {
        for (j=0;j<1;j++)
        {
			for (k=0;k<5;k++)
    2be6:	21 96       	adiw	r28, 0x01	; 1
    2be8:	c5 30       	cpi	r28, 0x05	; 5
    2bea:	d1 05       	cpc	r29, r1
    2bec:	39 f7       	brne	.-50     	; 0x2bbc <shiftBack2+0x16>
    2bee:	01 50       	subi	r16, 0x01	; 1
    2bf0:	10 40       	sbci	r17, 0x00	; 0
}

void shiftBack2()
{
int i,j,k;
    for (i=4;i>0;i--)
    2bf2:	41 f0       	breq	.+16     	; 0x2c04 <shiftBack2+0x5e>
    2bf4:	68 01       	movw	r12, r16
	animateCharacter('R');
	animateCharacter('G');
}

void shiftBack2()
{
    2bf6:	c0 e0       	ldi	r28, 0x00	; 0
    2bf8:	d0 e0       	ldi	r29, 0x00	; 0
	animateCharacter('U');
	animateCharacter('R');
	animateCharacter('G');
}

void shiftBack2()
    2bfa:	78 01       	movw	r14, r16
    2bfc:	08 94       	sec
    2bfe:	e1 08       	sbc	r14, r1
    2c00:	f1 08       	sbc	r15, r1
    2c02:	dc cf       	rjmp	.-72     	; 0x2bbc <shiftBack2+0x16>
                    clrLED(i,j,k);
			}
        }
	}

}
    2c04:	df 91       	pop	r29
    2c06:	cf 91       	pop	r28
    2c08:	1f 91       	pop	r17
    2c0a:	0f 91       	pop	r16
    2c0c:	ff 90       	pop	r15
    2c0e:	ef 90       	pop	r14
    2c10:	df 90       	pop	r13
    2c12:	cf 90       	pop	r12
    2c14:	08 95       	ret

00002c16 <shiftLeft>:

void shiftLeft()
{
    2c16:	ef 92       	push	r14
    2c18:	ff 92       	push	r15
    2c1a:	0f 93       	push	r16
    2c1c:	1f 93       	push	r17
    2c1e:	cf 93       	push	r28
    2c20:	df 93       	push	r29
int i,j,k;



       for (j=0;j<4;j++)
    2c22:	c0 e0       	ldi	r28, 0x00	; 0
    2c24:	d0 e0       	ldi	r29, 0x00	; 0
    2c26:	1e c0       	rjmp	.+60     	; 0x2c64 <shiftLeft+0x4e>
       {
       for (k=0;k<5;k++)
       {
                       if(getLED(0,j+1,k)){
    2c28:	80 e0       	ldi	r24, 0x00	; 0
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	b7 01       	movw	r22, r14
    2c2e:	a8 01       	movw	r20, r16
    2c30:	0e 94 ef 02 	call	0x5de	; 0x5de <getLED>
    2c34:	88 23       	and	r24, r24
    2c36:	39 f0       	breq	.+14     	; 0x2c46 <shiftLeft+0x30>
                            setLED(0,j,k);
    2c38:	80 e0       	ldi	r24, 0x00	; 0
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	be 01       	movw	r22, r28
    2c3e:	a8 01       	movw	r20, r16
    2c40:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
    2c44:	06 c0       	rjmp	.+12     	; 0x2c52 <shiftLeft+0x3c>
							//clrLED(0,j+1,k);
							  }
                       else
                               clrLED(0,j,k);
    2c46:	80 e0       	ldi	r24, 0x00	; 0
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	be 01       	movw	r22, r28
    2c4c:	a8 01       	movw	r20, r16
    2c4e:	0e 94 16 03 	call	0x62c	; 0x62c <clrLED>



       for (j=0;j<4;j++)
       {
       for (k=0;k<5;k++)
    2c52:	0f 5f       	subi	r16, 0xFF	; 255
    2c54:	1f 4f       	sbci	r17, 0xFF	; 255
    2c56:	05 30       	cpi	r16, 0x05	; 5
    2c58:	11 05       	cpc	r17, r1
    2c5a:	31 f7       	brne	.-52     	; 0x2c28 <shiftLeft+0x12>
    2c5c:	21 96       	adiw	r28, 0x01	; 1
{
int i,j,k;



       for (j=0;j<4;j++)
    2c5e:	c4 30       	cpi	r28, 0x04	; 4
    2c60:	d1 05       	cpc	r29, r1
    2c62:	39 f0       	breq	.+14     	; 0x2c72 <shiftLeft+0x5c>
	}

}

void shiftLeft()
{
    2c64:	00 e0       	ldi	r16, 0x00	; 0
    2c66:	10 e0       	ldi	r17, 0x00	; 0
        }
	}

}

void shiftLeft()
    2c68:	7e 01       	movw	r14, r28
    2c6a:	08 94       	sec
    2c6c:	e1 1c       	adc	r14, r1
    2c6e:	f1 1c       	adc	r15, r1
    2c70:	db cf       	rjmp	.-74     	; 0x2c28 <shiftLeft+0x12>
		else
			clrLED(i,0,j);
		}
	
}*/
shiftBack2();
    2c72:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <shiftBack2>


delay_ms(150);
    2c76:	86 e9       	ldi	r24, 0x96	; 150
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
}
    2c7e:	df 91       	pop	r29
    2c80:	cf 91       	pop	r28
    2c82:	1f 91       	pop	r17
    2c84:	0f 91       	pop	r16
    2c86:	ff 90       	pop	r15
    2c88:	ef 90       	pop	r14
    2c8a:	08 95       	ret

00002c8c <writer>:

void writer(char word[],int size)
{
    2c8c:	af 92       	push	r10
    2c8e:	bf 92       	push	r11
    2c90:	cf 92       	push	r12
    2c92:	df 92       	push	r13
    2c94:	ef 92       	push	r14
    2c96:	ff 92       	push	r15
    2c98:	0f 93       	push	r16
    2c9a:	1f 93       	push	r17
    2c9c:	df 93       	push	r29
    2c9e:	cf 93       	push	r28
    2ca0:	0f 92       	push	r0
    2ca2:	cd b7       	in	r28, 0x3d	; 61
    2ca4:	de b7       	in	r29, 0x3e	; 62
    2ca6:	08 2f       	mov	r16, r24
    2ca8:	5b 01       	movw	r10, r22
fill(0x00);
    2caa:	80 e0       	ldi	r24, 0x00	; 0
    2cac:	99 83       	std	Y+1, r25	; 0x01
    2cae:	0e 94 16 06 	call	0xc2c	; 0xc2c <fill>
    2cb2:	99 81       	ldd	r25, Y+1	; 0x01
    2cb4:	e0 2e       	mov	r14, r16
    2cb6:	f9 2e       	mov	r15, r25
	for (unsigned int i = 0; i < (size+3); i++)
    2cb8:	00 e0       	ldi	r16, 0x00	; 0
    2cba:	10 e0       	ldi	r17, 0x00	; 0
    2cbc:	43 e0       	ldi	r20, 0x03	; 3
    2cbe:	c4 2e       	mov	r12, r20
    2cc0:	d1 2c       	mov	r13, r1
    2cc2:	ca 0c       	add	r12, r10
    2cc4:	db 1c       	adc	r13, r11
    2cc6:	80 c0       	rjmp	.+256    	; 0x2dc8 <writer+0x13c>
{	
	char current = word[i];
    2cc8:	f7 01       	movw	r30, r14
    2cca:	81 91       	ld	r24, Z+
    2ccc:	7f 01       	movw	r14, r30
	if (i >= size) current = ' ';
    2cce:	0a 15       	cp	r16, r10
    2cd0:	1b 05       	cpc	r17, r11
    2cd2:	08 f0       	brcs	.+2      	; 0x2cd6 <writer+0x4a>
    2cd4:	75 c0       	rjmp	.+234    	; 0x2dc0 <writer+0x134>
	switch(current)
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	81 97       	sbiw	r24, 0x21	; 33
    2cda:	8a 33       	cpi	r24, 0x3A	; 58
    2cdc:	91 05       	cpc	r25, r1
    2cde:	08 f0       	brcs	.+2      	; 0x2ce2 <writer+0x56>
    2ce0:	6f c0       	rjmp	.+222    	; 0x2dc0 <writer+0x134>
    2ce2:	8a 5a       	subi	r24, 0xAA	; 170
    2ce4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ce6:	fc 01       	movw	r30, r24
    2ce8:	ee 0f       	add	r30, r30
    2cea:	ff 1f       	adc	r31, r31
    2cec:	05 90       	lpm	r0, Z+
    2cee:	f4 91       	lpm	r31, Z+
    2cf0:	e0 2d       	mov	r30, r0
    2cf2:	09 94       	ijmp
	{case 'A':
	_writeA();
    2cf4:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <_writeA>
	break;
    2cf8:	65 c0       	rjmp	.+202    	; 0x2dc4 <writer+0x138>
	case 'B':
	_writeB();
    2cfa:	0e 94 18 09 	call	0x1230	; 0x1230 <_writeB>
	break;
    2cfe:	62 c0       	rjmp	.+196    	; 0x2dc4 <writer+0x138>
	case 'C':
	_writeC();
    2d00:	0e 94 53 09 	call	0x12a6	; 0x12a6 <_writeC>
	break;
    2d04:	5f c0       	rjmp	.+190    	; 0x2dc4 <writer+0x138>
	case 'D':
	_writeD();
    2d06:	0e 94 90 09 	call	0x1320	; 0x1320 <_writeD>
	break;
    2d0a:	5c c0       	rjmp	.+184    	; 0x2dc4 <writer+0x138>
	case 'E':
	_writeE();
    2d0c:	0e 94 cb 09 	call	0x1396	; 0x1396 <_writeE>
	break;
    2d10:	59 c0       	rjmp	.+178    	; 0x2dc4 <writer+0x138>
	case 'F':
	_writeF();
    2d12:	0e 94 06 0a 	call	0x140c	; 0x140c <_writeF>
	break;
    2d16:	56 c0       	rjmp	.+172    	; 0x2dc4 <writer+0x138>
	case 'G':
	_writeG();
    2d18:	0e 94 41 0a 	call	0x1482	; 0x1482 <_writeG>
	break;
    2d1c:	53 c0       	rjmp	.+166    	; 0x2dc4 <writer+0x138>
	case 'H':
	_writeH();
    2d1e:	0e 94 88 0a 	call	0x1510	; 0x1510 <_writeH>
	break;
    2d22:	50 c0       	rjmp	.+160    	; 0x2dc4 <writer+0x138>
	case 'I':
	_writeI();
    2d24:	0e 94 c7 0a 	call	0x158e	; 0x158e <_writeI>
break;
    2d28:	4d c0       	rjmp	.+154    	; 0x2dc4 <writer+0x138>
	case 'J':
	_writeJ();
    2d2a:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <_writeJ>
break;
    2d2e:	4a c0       	rjmp	.+148    	; 0x2dc4 <writer+0x138>
	case 'K':
	_writeK();
    2d30:	0e 94 29 0b 	call	0x1652	; 0x1652 <_writeK>
break;
    2d34:	47 c0       	rjmp	.+142    	; 0x2dc4 <writer+0x138>
	case 'L':
	_writeL();
    2d36:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <_writeL>
break;
    2d3a:	44 c0       	rjmp	.+136    	; 0x2dc4 <writer+0x138>
	case 'M':
	_writeM();
    2d3c:	0e 94 a3 0b 	call	0x1746	; 0x1746 <_writeM>
break;
    2d40:	41 c0       	rjmp	.+130    	; 0x2dc4 <writer+0x138>
	case 'N':
	_writeN();
    2d42:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <_writeN>
break;
    2d46:	3e c0       	rjmp	.+124    	; 0x2dc4 <writer+0x138>
	case 'O':
	_writeO();
    2d48:	0e 94 35 0c 	call	0x186a	; 0x186a <_writeO>
break;
    2d4c:	3b c0       	rjmp	.+118    	; 0x2dc4 <writer+0x138>
	case 'P':
	_writeP();
    2d4e:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <_writeP>
break;
    2d52:	38 c0       	rjmp	.+112    	; 0x2dc4 <writer+0x138>
	case 'Q':
	_writeQ();
    2d54:	0e 94 ad 0c 	call	0x195a	; 0x195a <_writeQ>
break;
    2d58:	35 c0       	rjmp	.+106    	; 0x2dc4 <writer+0x138>
	case 'R':
	_writeR();
    2d5a:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <_writeR>
break;
    2d5e:	32 c0       	rjmp	.+100    	; 0x2dc4 <writer+0x138>
	case 'S':
	_writeS();
    2d60:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <_writeS>
break;
    2d64:	2f c0       	rjmp	.+94     	; 0x2dc4 <writer+0x138>
	case 'T':
	_writeT();
    2d66:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <_writeT>
break;
    2d6a:	2c c0       	rjmp	.+88     	; 0x2dc4 <writer+0x138>
	case 'U':
	_writeU();
    2d6c:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <_writeU>
	break;
    2d70:	29 c0       	rjmp	.+82     	; 0x2dc4 <writer+0x138>
	case 'V':
	_writeV();
    2d72:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <_writeV>
	break;
    2d76:	26 c0       	rjmp	.+76     	; 0x2dc4 <writer+0x138>
	case 'W':
	_writeW();
    2d78:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <_writeW>
	break;
    2d7c:	23 c0       	rjmp	.+70     	; 0x2dc4 <writer+0x138>
	case 'X':
	_writeX();
    2d7e:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <_writeX>
	break;
    2d82:	20 c0       	rjmp	.+64     	; 0x2dc4 <writer+0x138>
	case 'Y':
	_writeY();
    2d84:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <_writeY>
	break;
    2d88:	1d c0       	rjmp	.+58     	; 0x2dc4 <writer+0x138>
	case 'Z':
	_writeZ();
    2d8a:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <_writeZ>
	break;
    2d8e:	1a c0       	rjmp	.+52     	; 0x2dc4 <writer+0x138>
	case '?':
	_writeQM();
    2d90:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <_writeQM>
	break;
    2d94:	17 c0       	rjmp	.+46     	; 0x2dc4 <writer+0x138>
	case '\'':
	_writeAPO();
    2d96:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <_writeAPO>
	break;
    2d9a:	14 c0       	rjmp	.+40     	; 0x2dc4 <writer+0x138>
	case '!':
	_writeEM();
    2d9c:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <_writeEM>
	break;
    2da0:	11 c0       	rjmp	.+34     	; 0x2dc4 <writer+0x138>
	case '(':
	_writeBRKO();
    2da2:	0e 94 64 10 	call	0x20c8	; 0x20c8 <_writeBRKO>
	break;
    2da6:	0e c0       	rjmp	.+28     	; 0x2dc4 <writer+0x138>
	case ')':
	_writeBRKC();
    2da8:	0e 94 8d 10 	call	0x211a	; 0x211a <_writeBRKC>
	break;
    2dac:	0b c0       	rjmp	.+22     	; 0x2dc4 <writer+0x138>
	case '=':
	_writeEQL();
    2dae:	0e 94 35 10 	call	0x206a	; 0x206a <_writeEQL>
	break;
    2db2:	08 c0       	rjmp	.+16     	; 0x2dc4 <writer+0x138>
	case '.':
	_writeDOT();
    2db4:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <_writeDOT>
	break;
    2db8:	05 c0       	rjmp	.+10     	; 0x2dc4 <writer+0x138>
	case ',':
	_writeCOM();
    2dba:	0e 94 18 10 	call	0x2030	; 0x2030 <_writeCOM>
	break;
    2dbe:	02 c0       	rjmp	.+4      	; 0x2dc4 <writer+0x138>
	default:
	_writeEMP();
    2dc0:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <_writeEMP>
}

void writer(char word[],int size)
{
fill(0x00);
	for (unsigned int i = 0; i < (size+3); i++)
    2dc4:	0f 5f       	subi	r16, 0xFF	; 255
    2dc6:	1f 4f       	sbci	r17, 0xFF	; 255
    2dc8:	0c 15       	cp	r16, r12
    2dca:	1d 05       	cpc	r17, r13
    2dcc:	08 f4       	brcc	.+2      	; 0x2dd0 <writer+0x144>
    2dce:	7c cf       	rjmp	.-264    	; 0x2cc8 <writer+0x3c>
	default:
	_writeEMP();
	break;
	} 
}
}
    2dd0:	0f 90       	pop	r0
    2dd2:	cf 91       	pop	r28
    2dd4:	df 91       	pop	r29
    2dd6:	1f 91       	pop	r17
    2dd8:	0f 91       	pop	r16
    2dda:	ff 90       	pop	r15
    2ddc:	ef 90       	pop	r14
    2dde:	df 90       	pop	r13
    2de0:	cf 90       	pop	r12
    2de2:	bf 90       	pop	r11
    2de4:	af 90       	pop	r10
    2de6:	08 95       	ret

00002de8 <create_cube>:
	
	}
}

void create_cube(int x, int y, int z) 
{
    2de8:	af 92       	push	r10
    2dea:	bf 92       	push	r11
    2dec:	cf 92       	push	r12
    2dee:	df 92       	push	r13
    2df0:	ef 92       	push	r14
    2df2:	ff 92       	push	r15
    2df4:	0f 93       	push	r16
    2df6:	1f 93       	push	r17
    2df8:	cf 93       	push	r28
    2dfa:	df 93       	push	r29
    2dfc:	ec 01       	movw	r28, r24
    2dfe:	8b 01       	movw	r16, r22
    2e00:	7a 01       	movw	r14, r20
	fill(0x00);
    2e02:	80 e0       	ldi	r24, 0x00	; 0
    2e04:	0e 94 16 06 	call	0xc2c	; 0xc2c <fill>

	setLED(x, y, z);
    2e08:	ce 01       	movw	r24, r28
    2e0a:	b8 01       	movw	r22, r16
    2e0c:	a7 01       	movw	r20, r14
    2e0e:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(x ,y, z+1);
    2e12:	57 01       	movw	r10, r14
    2e14:	08 94       	sec
    2e16:	a1 1c       	adc	r10, r1
    2e18:	b1 1c       	adc	r11, r1
    2e1a:	ce 01       	movw	r24, r28
    2e1c:	b8 01       	movw	r22, r16
    2e1e:	a5 01       	movw	r20, r10
    2e20:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(x, y+1, z);
    2e24:	68 01       	movw	r12, r16
    2e26:	08 94       	sec
    2e28:	c1 1c       	adc	r12, r1
    2e2a:	d1 1c       	adc	r13, r1
    2e2c:	ce 01       	movw	r24, r28
    2e2e:	b6 01       	movw	r22, r12
    2e30:	a7 01       	movw	r20, r14
    2e32:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(x,y+1,z+1);
    2e36:	ce 01       	movw	r24, r28
    2e38:	b6 01       	movw	r22, r12
    2e3a:	a5 01       	movw	r20, r10
    2e3c:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(x+1, y, z);
    2e40:	21 96       	adiw	r28, 0x01	; 1
    2e42:	ce 01       	movw	r24, r28
    2e44:	b8 01       	movw	r22, r16
    2e46:	a7 01       	movw	r20, r14
    2e48:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(x+1 ,y, z+1);
    2e4c:	ce 01       	movw	r24, r28
    2e4e:	b8 01       	movw	r22, r16
    2e50:	a5 01       	movw	r20, r10
    2e52:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(x+1, y+1, z);
    2e56:	ce 01       	movw	r24, r28
    2e58:	b6 01       	movw	r22, r12
    2e5a:	a7 01       	movw	r20, r14
    2e5c:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(x+1,y+1,z+1);
    2e60:	ce 01       	movw	r24, r28
    2e62:	b6 01       	movw	r22, r12
    2e64:	a5 01       	movw	r20, r10
    2e66:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
}
    2e6a:	df 91       	pop	r29
    2e6c:	cf 91       	pop	r28
    2e6e:	1f 91       	pop	r17
    2e70:	0f 91       	pop	r16
    2e72:	ff 90       	pop	r15
    2e74:	ef 90       	pop	r14
    2e76:	df 90       	pop	r13
    2e78:	cf 90       	pop	r12
    2e7a:	bf 90       	pop	r11
    2e7c:	af 90       	pop	r10
    2e7e:	08 95       	ret

00002e80 <little_cube>:
	
	//stop()
}

void little_cube(void)
{
    2e80:	af 92       	push	r10
    2e82:	bf 92       	push	r11
    2e84:	cf 92       	push	r12
    2e86:	df 92       	push	r13
    2e88:	ef 92       	push	r14
    2e8a:	ff 92       	push	r15
    2e8c:	0f 93       	push	r16
    2e8e:	1f 93       	push	r17
    2e90:	cf 93       	push	r28
    2e92:	df 93       	push	r29
	static unsigned int x=0, y=0, z=0;
	unsigned int axis1, direction, iteration;
	
	for (iteration=0; iteration<50; iteration++) {
    2e94:	c0 e0       	ldi	r28, 0x00	; 0
    2e96:	d0 e0       	ldi	r29, 0x00	; 0
	
	create_cube(x, y, z);
	
	direction = rand() % 2;

		axis1 = rand() % 3;		
    2e98:	63 e0       	ldi	r22, 0x03	; 3
    2e9a:	c6 2e       	mov	r12, r22
    2e9c:	d1 2c       	mov	r13, r1
	
	for (iteration=0; iteration<50; iteration++) {
	
	create_cube(x, y, z);
	
	direction = rand() % 2;
    2e9e:	52 e0       	ldi	r21, 0x02	; 2
    2ea0:	a5 2e       	mov	r10, r21
    2ea2:	b1 2c       	mov	r11, r1
		}
		
		else if (axis1 == 2)
		{
			if (z>0) z--;
			else z++;
    2ea4:	01 e0       	ldi	r16, 0x01	; 1
    2ea6:	10 e0       	ldi	r17, 0x00	; 0
	static unsigned int x=0, y=0, z=0;
	unsigned int axis1, direction, iteration;
	
	for (iteration=0; iteration<50; iteration++) {
	
	create_cube(x, y, z);
    2ea8:	60 91 96 01 	lds	r22, 0x0196
    2eac:	70 91 97 01 	lds	r23, 0x0197
    2eb0:	40 91 94 01 	lds	r20, 0x0194
    2eb4:	50 91 95 01 	lds	r21, 0x0195
    2eb8:	80 91 98 01 	lds	r24, 0x0198
    2ebc:	90 91 99 01 	lds	r25, 0x0199
    2ec0:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <create_cube>
	
	direction = rand() % 2;
    2ec4:	0e 94 05 2a 	call	0x540a	; 0x540a <rand>
    2ec8:	7c 01       	movw	r14, r24

		axis1 = rand() % 3;		
    2eca:	0e 94 05 2a 	call	0x540a	; 0x540a <rand>
    2ece:	b6 01       	movw	r22, r12
    2ed0:	0e 94 26 29 	call	0x524c	; 0x524c <__divmodhi4>
    2ed4:	9c 01       	movw	r18, r24
	
	for (iteration=0; iteration<50; iteration++) {
	
	create_cube(x, y, z);
	
	direction = rand() % 2;
    2ed6:	c7 01       	movw	r24, r14
    2ed8:	b5 01       	movw	r22, r10
    2eda:	0e 94 26 29 	call	0x524c	; 0x524c <__divmodhi4>

		axis1 = rand() % 3;		
		// if 0 only x changes
		// if 1 only y changes
		// if 2 only z changes
		if(direction==0) 
    2ede:	00 97       	sbiw	r24, 0x00	; 0
    2ee0:	99 f5       	brne	.+102    	; 0x2f48 <little_cube+0xc8>
		{
		if (axis1 == 0)
    2ee2:	21 15       	cp	r18, r1
    2ee4:	31 05       	cpc	r19, r1
    2ee6:	79 f4       	brne	.+30     	; 0x2f06 <little_cube+0x86>
		{
			if (x+1<4) x++;							
    2ee8:	80 91 98 01 	lds	r24, 0x0198
    2eec:	90 91 99 01 	lds	r25, 0x0199
    2ef0:	9c 01       	movw	r18, r24
    2ef2:	2f 5f       	subi	r18, 0xFF	; 255
    2ef4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ef6:	24 30       	cpi	r18, 0x04	; 4
    2ef8:	31 05       	cpc	r19, r1
    2efa:	78 f5       	brcc	.+94     	; 0x2f5a <little_cube+0xda>
    2efc:	30 93 99 01 	sts	0x0199, r19
    2f00:	20 93 98 01 	sts	0x0198, r18
    2f04:	5c c0       	rjmp	.+184    	; 0x2fbe <little_cube+0x13e>
			else x--;
		}
		
		else if (axis1 == 1)
    2f06:	21 30       	cpi	r18, 0x01	; 1
    2f08:	31 05       	cpc	r19, r1
    2f0a:	59 f4       	brne	.+22     	; 0x2f22 <little_cube+0xa2>
		{
			if (y+1<4) y++;
    2f0c:	80 91 96 01 	lds	r24, 0x0196
    2f10:	90 91 97 01 	lds	r25, 0x0197
    2f14:	9c 01       	movw	r18, r24
    2f16:	2f 5f       	subi	r18, 0xFF	; 255
    2f18:	3f 4f       	sbci	r19, 0xFF	; 255
    2f1a:	24 30       	cpi	r18, 0x04	; 4
    2f1c:	31 05       	cpc	r19, r1
    2f1e:	88 f5       	brcc	.+98     	; 0x2f82 <little_cube+0x102>
    2f20:	36 c0       	rjmp	.+108    	; 0x2f8e <little_cube+0x10e>
			else y--;
		}
		
		else if (axis1 == 2)
    2f22:	22 30       	cpi	r18, 0x02	; 2
    2f24:	31 05       	cpc	r19, r1
    2f26:	09 f0       	breq	.+2      	; 0x2f2a <little_cube+0xaa>
    2f28:	4a c0       	rjmp	.+148    	; 0x2fbe <little_cube+0x13e>
		{
			if (z+1<4) z++;
    2f2a:	80 91 94 01 	lds	r24, 0x0194
    2f2e:	90 91 95 01 	lds	r25, 0x0195
    2f32:	9c 01       	movw	r18, r24
    2f34:	2f 5f       	subi	r18, 0xFF	; 255
    2f36:	3f 4f       	sbci	r19, 0xFF	; 255
    2f38:	24 30       	cpi	r18, 0x04	; 4
    2f3a:	31 05       	cpc	r19, r1
    2f3c:	b0 f5       	brcc	.+108    	; 0x2faa <little_cube+0x12a>
    2f3e:	30 93 95 01 	sts	0x0195, r19
    2f42:	20 93 94 01 	sts	0x0194, r18
    2f46:	3b c0       	rjmp	.+118    	; 0x2fbe <little_cube+0x13e>
		}
		}
		
		else 
		{
		if (axis1 == 0)
    2f48:	21 15       	cp	r18, r1
    2f4a:	31 05       	cpc	r19, r1
    2f4c:	89 f4       	brne	.+34     	; 0x2f70 <little_cube+0xf0>
		{
			if (x>0) x--;	
    2f4e:	80 91 98 01 	lds	r24, 0x0198
    2f52:	90 91 99 01 	lds	r25, 0x0199
    2f56:	00 97       	sbiw	r24, 0x00	; 0
    2f58:	31 f0       	breq	.+12     	; 0x2f66 <little_cube+0xe6>
    2f5a:	01 97       	sbiw	r24, 0x01	; 1
    2f5c:	90 93 99 01 	sts	0x0199, r25
    2f60:	80 93 98 01 	sts	0x0198, r24
    2f64:	2c c0       	rjmp	.+88     	; 0x2fbe <little_cube+0x13e>
			else x++;						
    2f66:	10 93 99 01 	sts	0x0199, r17
    2f6a:	00 93 98 01 	sts	0x0198, r16
    2f6e:	27 c0       	rjmp	.+78     	; 0x2fbe <little_cube+0x13e>
		}
		
		else if (axis1 == 1)
    2f70:	21 30       	cpi	r18, 0x01	; 1
    2f72:	31 05       	cpc	r19, r1
    2f74:	89 f4       	brne	.+34     	; 0x2f98 <little_cube+0x118>
		{
			if (y>0) y--;
    2f76:	80 91 96 01 	lds	r24, 0x0196
    2f7a:	90 91 97 01 	lds	r25, 0x0197
    2f7e:	00 97       	sbiw	r24, 0x00	; 0
    2f80:	31 f0       	breq	.+12     	; 0x2f8e <little_cube+0x10e>
    2f82:	01 97       	sbiw	r24, 0x01	; 1
    2f84:	90 93 97 01 	sts	0x0197, r25
    2f88:	80 93 96 01 	sts	0x0196, r24
    2f8c:	18 c0       	rjmp	.+48     	; 0x2fbe <little_cube+0x13e>
			else y++;
    2f8e:	30 93 97 01 	sts	0x0197, r19
    2f92:	20 93 96 01 	sts	0x0196, r18
    2f96:	13 c0       	rjmp	.+38     	; 0x2fbe <little_cube+0x13e>
		}
		
		else if (axis1 == 2)
    2f98:	22 30       	cpi	r18, 0x02	; 2
    2f9a:	31 05       	cpc	r19, r1
    2f9c:	81 f4       	brne	.+32     	; 0x2fbe <little_cube+0x13e>
		{
			if (z>0) z--;
    2f9e:	80 91 94 01 	lds	r24, 0x0194
    2fa2:	90 91 95 01 	lds	r25, 0x0195
    2fa6:	00 97       	sbiw	r24, 0x00	; 0
    2fa8:	31 f0       	breq	.+12     	; 0x2fb6 <little_cube+0x136>
    2faa:	01 97       	sbiw	r24, 0x01	; 1
    2fac:	90 93 95 01 	sts	0x0195, r25
    2fb0:	80 93 94 01 	sts	0x0194, r24
    2fb4:	04 c0       	rjmp	.+8      	; 0x2fbe <little_cube+0x13e>
			else z++;
    2fb6:	10 93 95 01 	sts	0x0195, r17
    2fba:	00 93 94 01 	sts	0x0194, r16
		}
			
		}	
	
	
	delay_ms(63);
    2fbe:	8f e3       	ldi	r24, 0x3F	; 63
    2fc0:	90 e0       	ldi	r25, 0x00	; 0
    2fc2:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
void little_cube(void)
{
	static unsigned int x=0, y=0, z=0;
	unsigned int axis1, direction, iteration;
	
	for (iteration=0; iteration<50; iteration++) {
    2fc6:	21 96       	adiw	r28, 0x01	; 1
    2fc8:	c2 33       	cpi	r28, 0x32	; 50
    2fca:	d1 05       	cpc	r29, r1
    2fcc:	09 f0       	breq	.+2      	; 0x2fd0 <little_cube+0x150>
    2fce:	6c cf       	rjmp	.-296    	; 0x2ea8 <little_cube+0x28>
	
	
	delay_ms(63);
	
	}
}
    2fd0:	df 91       	pop	r29
    2fd2:	cf 91       	pop	r28
    2fd4:	1f 91       	pop	r17
    2fd6:	0f 91       	pop	r16
    2fd8:	ff 90       	pop	r15
    2fda:	ef 90       	pop	r14
    2fdc:	df 90       	pop	r13
    2fde:	cf 90       	pop	r12
    2fe0:	bf 90       	pop	r11
    2fe2:	af 90       	pop	r10
    2fe4:	08 95       	ret

00002fe6 <pumping_heart>:
	setLED(x+1, y+1, z);
	setLED(x+1,y+1,z+1);
}

void pumping_heart() 
{
    2fe6:	cf 92       	push	r12
    2fe8:	df 92       	push	r13
    2fea:	ef 92       	push	r14
    2fec:	ff 92       	push	r15
    2fee:	0f 93       	push	r16
    2ff0:	1f 93       	push	r17
    2ff2:	cf 93       	push	r28
    2ff4:	df 93       	push	r29
    2ff6:	c7 e0       	ldi	r28, 0x07	; 7
    2ff8:	d0 e0       	ldi	r29, 0x00	; 0
   int i,j;
   for(i=0;i<7;i++){
	
	fill(0x00);
    2ffa:	80 e0       	ldi	r24, 0x00	; 0
    2ffc:	0e 94 16 06 	call	0xc2c	; 0xc2c <fill>
	
	setLED(2,2,2);
    3000:	82 e0       	ldi	r24, 0x02	; 2
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	62 e0       	ldi	r22, 0x02	; 2
    3006:	70 e0       	ldi	r23, 0x00	; 0
    3008:	42 e0       	ldi	r20, 0x02	; 2
    300a:	50 e0       	ldi	r21, 0x00	; 0
    300c:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2,3,3);
    3010:	82 e0       	ldi	r24, 0x02	; 2
    3012:	90 e0       	ldi	r25, 0x00	; 0
    3014:	63 e0       	ldi	r22, 0x03	; 3
    3016:	70 e0       	ldi	r23, 0x00	; 0
    3018:	43 e0       	ldi	r20, 0x03	; 3
    301a:	50 e0       	ldi	r21, 0x00	; 0
    301c:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2,1,3);
    3020:	82 e0       	ldi	r24, 0x02	; 2
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	61 e0       	ldi	r22, 0x01	; 1
    3026:	70 e0       	ldi	r23, 0x00	; 0
    3028:	43 e0       	ldi	r20, 0x03	; 3
    302a:	50 e0       	ldi	r21, 0x00	; 0
    302c:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2,4,2);
    3030:	82 e0       	ldi	r24, 0x02	; 2
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	64 e0       	ldi	r22, 0x04	; 4
    3036:	70 e0       	ldi	r23, 0x00	; 0
    3038:	42 e0       	ldi	r20, 0x02	; 2
    303a:	50 e0       	ldi	r21, 0x00	; 0
    303c:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2,0,2);
    3040:	82 e0       	ldi	r24, 0x02	; 2
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	60 e0       	ldi	r22, 0x00	; 0
    3046:	70 e0       	ldi	r23, 0x00	; 0
    3048:	42 e0       	ldi	r20, 0x02	; 2
    304a:	50 e0       	ldi	r21, 0x00	; 0
    304c:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2,3,1);
    3050:	82 e0       	ldi	r24, 0x02	; 2
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	63 e0       	ldi	r22, 0x03	; 3
    3056:	70 e0       	ldi	r23, 0x00	; 0
    3058:	41 e0       	ldi	r20, 0x01	; 1
    305a:	50 e0       	ldi	r21, 0x00	; 0
    305c:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2,1,1);
    3060:	82 e0       	ldi	r24, 0x02	; 2
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	61 e0       	ldi	r22, 0x01	; 1
    3066:	70 e0       	ldi	r23, 0x00	; 0
    3068:	41 e0       	ldi	r20, 0x01	; 1
    306a:	50 e0       	ldi	r21, 0x00	; 0
    306c:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2,2,0);
    3070:	82 e0       	ldi	r24, 0x02	; 2
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	62 e0       	ldi	r22, 0x02	; 2
    3076:	70 e0       	ldi	r23, 0x00	; 0
    3078:	40 e0       	ldi	r20, 0x00	; 0
    307a:	50 e0       	ldi	r21, 0x00	; 0
    307c:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
delay_ms(100);
    3080:	84 e6       	ldi	r24, 0x64	; 100
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>

fill(0x00);
    3088:	80 e0       	ldi	r24, 0x00	; 0
    308a:	0e 94 16 06 	call	0xc2c	; 0xc2c <fill>

	setLED(2,2,2);
    308e:	82 e0       	ldi	r24, 0x02	; 2
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	62 e0       	ldi	r22, 0x02	; 2
    3094:	70 e0       	ldi	r23, 0x00	; 0
    3096:	42 e0       	ldi	r20, 0x02	; 2
    3098:	50 e0       	ldi	r21, 0x00	; 0
    309a:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2,2,0);
    309e:	82 e0       	ldi	r24, 0x02	; 2
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	62 e0       	ldi	r22, 0x02	; 2
    30a4:	70 e0       	ldi	r23, 0x00	; 0
    30a6:	40 e0       	ldi	r20, 0x00	; 0
    30a8:	50 e0       	ldi	r21, 0x00	; 0
    30aa:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2,3,3);
    30ae:	82 e0       	ldi	r24, 0x02	; 2
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	63 e0       	ldi	r22, 0x03	; 3
    30b4:	70 e0       	ldi	r23, 0x00	; 0
    30b6:	43 e0       	ldi	r20, 0x03	; 3
    30b8:	50 e0       	ldi	r21, 0x00	; 0
    30ba:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2,1,3);
    30be:	82 e0       	ldi	r24, 0x02	; 2
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	61 e0       	ldi	r22, 0x01	; 1
    30c4:	70 e0       	ldi	r23, 0x00	; 0
    30c6:	43 e0       	ldi	r20, 0x03	; 3
    30c8:	50 e0       	ldi	r21, 0x00	; 0
    30ca:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2+1,4,2);
    30ce:	83 e0       	ldi	r24, 0x03	; 3
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	64 e0       	ldi	r22, 0x04	; 4
    30d4:	70 e0       	ldi	r23, 0x00	; 0
    30d6:	42 e0       	ldi	r20, 0x02	; 2
    30d8:	50 e0       	ldi	r21, 0x00	; 0
    30da:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2-1,0,2);
    30de:	81 e0       	ldi	r24, 0x01	; 1
    30e0:	90 e0       	ldi	r25, 0x00	; 0
    30e2:	60 e0       	ldi	r22, 0x00	; 0
    30e4:	70 e0       	ldi	r23, 0x00	; 0
    30e6:	42 e0       	ldi	r20, 0x02	; 2
    30e8:	50 e0       	ldi	r21, 0x00	; 0
    30ea:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2,3,1);
    30ee:	82 e0       	ldi	r24, 0x02	; 2
    30f0:	90 e0       	ldi	r25, 0x00	; 0
    30f2:	63 e0       	ldi	r22, 0x03	; 3
    30f4:	70 e0       	ldi	r23, 0x00	; 0
    30f6:	41 e0       	ldi	r20, 0x01	; 1
    30f8:	50 e0       	ldi	r21, 0x00	; 0
    30fa:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2,1,1);
    30fe:	82 e0       	ldi	r24, 0x02	; 2
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	61 e0       	ldi	r22, 0x01	; 1
    3104:	70 e0       	ldi	r23, 0x00	; 0
    3106:	41 e0       	ldi	r20, 0x01	; 1
    3108:	50 e0       	ldi	r21, 0x00	; 0
    310a:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	
delay_ms(100);
    310e:	84 e6       	ldi	r24, 0x64	; 100
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
	
fill(0x00);
    3116:	80 e0       	ldi	r24, 0x00	; 0
    3118:	0e 94 16 06 	call	0xc2c	; 0xc2c <fill>

	setLED(2,2,2);
    311c:	82 e0       	ldi	r24, 0x02	; 2
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	62 e0       	ldi	r22, 0x02	; 2
    3122:	70 e0       	ldi	r23, 0x00	; 0
    3124:	42 e0       	ldi	r20, 0x02	; 2
    3126:	50 e0       	ldi	r21, 0x00	; 0
    3128:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2,2,0);
    312c:	82 e0       	ldi	r24, 0x02	; 2
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	62 e0       	ldi	r22, 0x02	; 2
    3132:	70 e0       	ldi	r23, 0x00	; 0
    3134:	40 e0       	ldi	r20, 0x00	; 0
    3136:	50 e0       	ldi	r21, 0x00	; 0
    3138:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2+1,3,3);
    313c:	83 e0       	ldi	r24, 0x03	; 3
    313e:	90 e0       	ldi	r25, 0x00	; 0
    3140:	63 e0       	ldi	r22, 0x03	; 3
    3142:	70 e0       	ldi	r23, 0x00	; 0
    3144:	43 e0       	ldi	r20, 0x03	; 3
    3146:	50 e0       	ldi	r21, 0x00	; 0
    3148:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2-1,1,3);
    314c:	81 e0       	ldi	r24, 0x01	; 1
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	61 e0       	ldi	r22, 0x01	; 1
    3152:	70 e0       	ldi	r23, 0x00	; 0
    3154:	43 e0       	ldi	r20, 0x03	; 3
    3156:	50 e0       	ldi	r21, 0x00	; 0
    3158:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2+2,4,2);
    315c:	84 e0       	ldi	r24, 0x04	; 4
    315e:	90 e0       	ldi	r25, 0x00	; 0
    3160:	64 e0       	ldi	r22, 0x04	; 4
    3162:	70 e0       	ldi	r23, 0x00	; 0
    3164:	42 e0       	ldi	r20, 0x02	; 2
    3166:	50 e0       	ldi	r21, 0x00	; 0
    3168:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2-2,0,2);
    316c:	80 e0       	ldi	r24, 0x00	; 0
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	60 e0       	ldi	r22, 0x00	; 0
    3172:	70 e0       	ldi	r23, 0x00	; 0
    3174:	42 e0       	ldi	r20, 0x02	; 2
    3176:	50 e0       	ldi	r21, 0x00	; 0
    3178:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2+1,3,1);
    317c:	83 e0       	ldi	r24, 0x03	; 3
    317e:	90 e0       	ldi	r25, 0x00	; 0
    3180:	63 e0       	ldi	r22, 0x03	; 3
    3182:	70 e0       	ldi	r23, 0x00	; 0
    3184:	41 e0       	ldi	r20, 0x01	; 1
    3186:	50 e0       	ldi	r21, 0x00	; 0
    3188:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2-1,1,1);
    318c:	81 e0       	ldi	r24, 0x01	; 1
    318e:	90 e0       	ldi	r25, 0x00	; 0
    3190:	61 e0       	ldi	r22, 0x01	; 1
    3192:	70 e0       	ldi	r23, 0x00	; 0
    3194:	41 e0       	ldi	r20, 0x01	; 1
    3196:	50 e0       	ldi	r21, 0x00	; 0
    3198:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
delay_ms(100);
    319c:	84 e6       	ldi	r24, 0x64	; 100
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
	
fill(0x00);
    31a4:	80 e0       	ldi	r24, 0x00	; 0
    31a6:	0e 94 16 06 	call	0xc2c	; 0xc2c <fill>

	setLED(2,2,2);
    31aa:	82 e0       	ldi	r24, 0x02	; 2
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	62 e0       	ldi	r22, 0x02	; 2
    31b0:	70 e0       	ldi	r23, 0x00	; 0
    31b2:	42 e0       	ldi	r20, 0x02	; 2
    31b4:	50 e0       	ldi	r21, 0x00	; 0
    31b6:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2,2,0);
    31ba:	82 e0       	ldi	r24, 0x02	; 2
    31bc:	90 e0       	ldi	r25, 0x00	; 0
    31be:	62 e0       	ldi	r22, 0x02	; 2
    31c0:	70 e0       	ldi	r23, 0x00	; 0
    31c2:	40 e0       	ldi	r20, 0x00	; 0
    31c4:	50 e0       	ldi	r21, 0x00	; 0
    31c6:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2+1,3,3);
    31ca:	83 e0       	ldi	r24, 0x03	; 3
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	63 e0       	ldi	r22, 0x03	; 3
    31d0:	70 e0       	ldi	r23, 0x00	; 0
    31d2:	43 e0       	ldi	r20, 0x03	; 3
    31d4:	50 e0       	ldi	r21, 0x00	; 0
    31d6:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2-1,1,3);
    31da:	81 e0       	ldi	r24, 0x01	; 1
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	61 e0       	ldi	r22, 0x01	; 1
    31e0:	70 e0       	ldi	r23, 0x00	; 0
    31e2:	43 e0       	ldi	r20, 0x03	; 3
    31e4:	50 e0       	ldi	r21, 0x00	; 0
    31e6:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2+2,4-1,2);
    31ea:	84 e0       	ldi	r24, 0x04	; 4
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	63 e0       	ldi	r22, 0x03	; 3
    31f0:	70 e0       	ldi	r23, 0x00	; 0
    31f2:	42 e0       	ldi	r20, 0x02	; 2
    31f4:	50 e0       	ldi	r21, 0x00	; 0
    31f6:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2-2,0+1,2);
    31fa:	80 e0       	ldi	r24, 0x00	; 0
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	61 e0       	ldi	r22, 0x01	; 1
    3200:	70 e0       	ldi	r23, 0x00	; 0
    3202:	42 e0       	ldi	r20, 0x02	; 2
    3204:	50 e0       	ldi	r21, 0x00	; 0
    3206:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2+1,3,1);
    320a:	83 e0       	ldi	r24, 0x03	; 3
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	63 e0       	ldi	r22, 0x03	; 3
    3210:	70 e0       	ldi	r23, 0x00	; 0
    3212:	41 e0       	ldi	r20, 0x01	; 1
    3214:	50 e0       	ldi	r21, 0x00	; 0
    3216:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2-1,1,1);
    321a:	81 e0       	ldi	r24, 0x01	; 1
    321c:	90 e0       	ldi	r25, 0x00	; 0
    321e:	61 e0       	ldi	r22, 0x01	; 1
    3220:	70 e0       	ldi	r23, 0x00	; 0
    3222:	41 e0       	ldi	r20, 0x01	; 1
    3224:	50 e0       	ldi	r21, 0x00	; 0
    3226:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	
delay_ms(100);
    322a:	84 e6       	ldi	r24, 0x64	; 100
    322c:	90 e0       	ldi	r25, 0x00	; 0
    322e:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
	
	fill(0x00);
    3232:	80 e0       	ldi	r24, 0x00	; 0
    3234:	0e 94 16 06 	call	0xc2c	; 0xc2c <fill>

	setLED(2,2,2);
    3238:	82 e0       	ldi	r24, 0x02	; 2
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	62 e0       	ldi	r22, 0x02	; 2
    323e:	70 e0       	ldi	r23, 0x00	; 0
    3240:	42 e0       	ldi	r20, 0x02	; 2
    3242:	50 e0       	ldi	r21, 0x00	; 0
    3244:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2,2,0);
    3248:	82 e0       	ldi	r24, 0x02	; 2
    324a:	90 e0       	ldi	r25, 0x00	; 0
    324c:	62 e0       	ldi	r22, 0x02	; 2
    324e:	70 e0       	ldi	r23, 0x00	; 0
    3250:	40 e0       	ldi	r20, 0x00	; 0
    3252:	50 e0       	ldi	r21, 0x00	; 0
    3254:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2+1,3-1,3);
    3258:	83 e0       	ldi	r24, 0x03	; 3
    325a:	90 e0       	ldi	r25, 0x00	; 0
    325c:	62 e0       	ldi	r22, 0x02	; 2
    325e:	70 e0       	ldi	r23, 0x00	; 0
    3260:	43 e0       	ldi	r20, 0x03	; 3
    3262:	50 e0       	ldi	r21, 0x00	; 0
    3264:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2-1,1+1,3);
    3268:	81 e0       	ldi	r24, 0x01	; 1
    326a:	90 e0       	ldi	r25, 0x00	; 0
    326c:	62 e0       	ldi	r22, 0x02	; 2
    326e:	70 e0       	ldi	r23, 0x00	; 0
    3270:	43 e0       	ldi	r20, 0x03	; 3
    3272:	50 e0       	ldi	r21, 0x00	; 0
    3274:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2+2,4-2,2);
    3278:	84 e0       	ldi	r24, 0x04	; 4
    327a:	90 e0       	ldi	r25, 0x00	; 0
    327c:	62 e0       	ldi	r22, 0x02	; 2
    327e:	70 e0       	ldi	r23, 0x00	; 0
    3280:	42 e0       	ldi	r20, 0x02	; 2
    3282:	50 e0       	ldi	r21, 0x00	; 0
    3284:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2-2,0+2,2);
    3288:	80 e0       	ldi	r24, 0x00	; 0
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	62 e0       	ldi	r22, 0x02	; 2
    328e:	70 e0       	ldi	r23, 0x00	; 0
    3290:	42 e0       	ldi	r20, 0x02	; 2
    3292:	50 e0       	ldi	r21, 0x00	; 0
    3294:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2+1,3-1,1);
    3298:	83 e0       	ldi	r24, 0x03	; 3
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	62 e0       	ldi	r22, 0x02	; 2
    329e:	70 e0       	ldi	r23, 0x00	; 0
    32a0:	41 e0       	ldi	r20, 0x01	; 1
    32a2:	50 e0       	ldi	r21, 0x00	; 0
    32a4:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2-1,1+1,1);
    32a8:	81 e0       	ldi	r24, 0x01	; 1
    32aa:	90 e0       	ldi	r25, 0x00	; 0
    32ac:	62 e0       	ldi	r22, 0x02	; 2
    32ae:	70 e0       	ldi	r23, 0x00	; 0
    32b0:	41 e0       	ldi	r20, 0x01	; 1
    32b2:	50 e0       	ldi	r21, 0x00	; 0
    32b4:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	
delay_ms(100);
    32b8:	84 e6       	ldi	r24, 0x64	; 100
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
	
	
	fill(0x00);
    32c0:	80 e0       	ldi	r24, 0x00	; 0
    32c2:	0e 94 16 06 	call	0xc2c	; 0xc2c <fill>

	setLED(2,2,2);
    32c6:	82 e0       	ldi	r24, 0x02	; 2
    32c8:	90 e0       	ldi	r25, 0x00	; 0
    32ca:	62 e0       	ldi	r22, 0x02	; 2
    32cc:	70 e0       	ldi	r23, 0x00	; 0
    32ce:	42 e0       	ldi	r20, 0x02	; 2
    32d0:	50 e0       	ldi	r21, 0x00	; 0
    32d2:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2,2,0);
    32d6:	82 e0       	ldi	r24, 0x02	; 2
    32d8:	90 e0       	ldi	r25, 0x00	; 0
    32da:	62 e0       	ldi	r22, 0x02	; 2
    32dc:	70 e0       	ldi	r23, 0x00	; 0
    32de:	40 e0       	ldi	r20, 0x00	; 0
    32e0:	50 e0       	ldi	r21, 0x00	; 0
    32e2:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2+1,3-1,3);
    32e6:	83 e0       	ldi	r24, 0x03	; 3
    32e8:	90 e0       	ldi	r25, 0x00	; 0
    32ea:	62 e0       	ldi	r22, 0x02	; 2
    32ec:	70 e0       	ldi	r23, 0x00	; 0
    32ee:	43 e0       	ldi	r20, 0x03	; 3
    32f0:	50 e0       	ldi	r21, 0x00	; 0
    32f2:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2-1,1+1,3);
    32f6:	81 e0       	ldi	r24, 0x01	; 1
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	62 e0       	ldi	r22, 0x02	; 2
    32fc:	70 e0       	ldi	r23, 0x00	; 0
    32fe:	43 e0       	ldi	r20, 0x03	; 3
    3300:	50 e0       	ldi	r21, 0x00	; 0
    3302:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2+2,4-3,2);
    3306:	84 e0       	ldi	r24, 0x04	; 4
    3308:	90 e0       	ldi	r25, 0x00	; 0
    330a:	61 e0       	ldi	r22, 0x01	; 1
    330c:	70 e0       	ldi	r23, 0x00	; 0
    330e:	42 e0       	ldi	r20, 0x02	; 2
    3310:	50 e0       	ldi	r21, 0x00	; 0
    3312:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2-2,0+3,2);
    3316:	80 e0       	ldi	r24, 0x00	; 0
    3318:	90 e0       	ldi	r25, 0x00	; 0
    331a:	63 e0       	ldi	r22, 0x03	; 3
    331c:	70 e0       	ldi	r23, 0x00	; 0
    331e:	42 e0       	ldi	r20, 0x02	; 2
    3320:	50 e0       	ldi	r21, 0x00	; 0
    3322:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2+1,3-1,1);
    3326:	83 e0       	ldi	r24, 0x03	; 3
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	62 e0       	ldi	r22, 0x02	; 2
    332c:	70 e0       	ldi	r23, 0x00	; 0
    332e:	41 e0       	ldi	r20, 0x01	; 1
    3330:	50 e0       	ldi	r21, 0x00	; 0
    3332:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2-1,1+1,1);
    3336:	81 e0       	ldi	r24, 0x01	; 1
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	62 e0       	ldi	r22, 0x02	; 2
    333c:	70 e0       	ldi	r23, 0x00	; 0
    333e:	41 e0       	ldi	r20, 0x01	; 1
    3340:	50 e0       	ldi	r21, 0x00	; 0
    3342:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
delay_ms(100);
    3346:	84 e6       	ldi	r24, 0x64	; 100
    3348:	90 e0       	ldi	r25, 0x00	; 0
    334a:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
	
	fill(0x00);
    334e:	80 e0       	ldi	r24, 0x00	; 0
    3350:	0e 94 16 06 	call	0xc2c	; 0xc2c <fill>

	setLED(2,2,2);
    3354:	82 e0       	ldi	r24, 0x02	; 2
    3356:	90 e0       	ldi	r25, 0x00	; 0
    3358:	62 e0       	ldi	r22, 0x02	; 2
    335a:	70 e0       	ldi	r23, 0x00	; 0
    335c:	42 e0       	ldi	r20, 0x02	; 2
    335e:	50 e0       	ldi	r21, 0x00	; 0
    3360:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2,2,0);
    3364:	82 e0       	ldi	r24, 0x02	; 2
    3366:	90 e0       	ldi	r25, 0x00	; 0
    3368:	62 e0       	ldi	r22, 0x02	; 2
    336a:	70 e0       	ldi	r23, 0x00	; 0
    336c:	40 e0       	ldi	r20, 0x00	; 0
    336e:	50 e0       	ldi	r21, 0x00	; 0
    3370:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2+1,3-2,3);
    3374:	83 e0       	ldi	r24, 0x03	; 3
    3376:	90 e0       	ldi	r25, 0x00	; 0
    3378:	61 e0       	ldi	r22, 0x01	; 1
    337a:	70 e0       	ldi	r23, 0x00	; 0
    337c:	43 e0       	ldi	r20, 0x03	; 3
    337e:	50 e0       	ldi	r21, 0x00	; 0
    3380:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2-1,1+2,3);
    3384:	81 e0       	ldi	r24, 0x01	; 1
    3386:	90 e0       	ldi	r25, 0x00	; 0
    3388:	63 e0       	ldi	r22, 0x03	; 3
    338a:	70 e0       	ldi	r23, 0x00	; 0
    338c:	43 e0       	ldi	r20, 0x03	; 3
    338e:	50 e0       	ldi	r21, 0x00	; 0
    3390:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2+2,4-4,2);
    3394:	84 e0       	ldi	r24, 0x04	; 4
    3396:	90 e0       	ldi	r25, 0x00	; 0
    3398:	60 e0       	ldi	r22, 0x00	; 0
    339a:	70 e0       	ldi	r23, 0x00	; 0
    339c:	42 e0       	ldi	r20, 0x02	; 2
    339e:	50 e0       	ldi	r21, 0x00	; 0
    33a0:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2-2,0+4,2);
    33a4:	80 e0       	ldi	r24, 0x00	; 0
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	64 e0       	ldi	r22, 0x04	; 4
    33aa:	70 e0       	ldi	r23, 0x00	; 0
    33ac:	42 e0       	ldi	r20, 0x02	; 2
    33ae:	50 e0       	ldi	r21, 0x00	; 0
    33b0:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2+1,3-2,1);
    33b4:	83 e0       	ldi	r24, 0x03	; 3
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	61 e0       	ldi	r22, 0x01	; 1
    33ba:	70 e0       	ldi	r23, 0x00	; 0
    33bc:	41 e0       	ldi	r20, 0x01	; 1
    33be:	50 e0       	ldi	r21, 0x00	; 0
    33c0:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2-1,1+2,1);
    33c4:	81 e0       	ldi	r24, 0x01	; 1
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	63 e0       	ldi	r22, 0x03	; 3
    33ca:	70 e0       	ldi	r23, 0x00	; 0
    33cc:	41 e0       	ldi	r20, 0x01	; 1
    33ce:	50 e0       	ldi	r21, 0x00	; 0
    33d0:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	
delay_ms(100);
    33d4:	84 e6       	ldi	r24, 0x64	; 100
    33d6:	90 e0       	ldi	r25, 0x00	; 0
    33d8:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
	
	fill(0x00);
    33dc:	80 e0       	ldi	r24, 0x00	; 0
    33de:	0e 94 16 06 	call	0xc2c	; 0xc2c <fill>

	setLED(2,2,2);
    33e2:	82 e0       	ldi	r24, 0x02	; 2
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	62 e0       	ldi	r22, 0x02	; 2
    33e8:	70 e0       	ldi	r23, 0x00	; 0
    33ea:	42 e0       	ldi	r20, 0x02	; 2
    33ec:	50 e0       	ldi	r21, 0x00	; 0
    33ee:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2,2,0);
    33f2:	82 e0       	ldi	r24, 0x02	; 2
    33f4:	90 e0       	ldi	r25, 0x00	; 0
    33f6:	62 e0       	ldi	r22, 0x02	; 2
    33f8:	70 e0       	ldi	r23, 0x00	; 0
    33fa:	40 e0       	ldi	r20, 0x00	; 0
    33fc:	50 e0       	ldi	r21, 0x00	; 0
    33fe:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2+1,3-2,3);
    3402:	83 e0       	ldi	r24, 0x03	; 3
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	61 e0       	ldi	r22, 0x01	; 1
    3408:	70 e0       	ldi	r23, 0x00	; 0
    340a:	43 e0       	ldi	r20, 0x03	; 3
    340c:	50 e0       	ldi	r21, 0x00	; 0
    340e:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2-1,1+2,3);
    3412:	81 e0       	ldi	r24, 0x01	; 1
    3414:	90 e0       	ldi	r25, 0x00	; 0
    3416:	63 e0       	ldi	r22, 0x03	; 3
    3418:	70 e0       	ldi	r23, 0x00	; 0
    341a:	43 e0       	ldi	r20, 0x03	; 3
    341c:	50 e0       	ldi	r21, 0x00	; 0
    341e:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2+1,4-4,2);
    3422:	83 e0       	ldi	r24, 0x03	; 3
    3424:	90 e0       	ldi	r25, 0x00	; 0
    3426:	60 e0       	ldi	r22, 0x00	; 0
    3428:	70 e0       	ldi	r23, 0x00	; 0
    342a:	42 e0       	ldi	r20, 0x02	; 2
    342c:	50 e0       	ldi	r21, 0x00	; 0
    342e:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2-1,0+4,2);
    3432:	81 e0       	ldi	r24, 0x01	; 1
    3434:	90 e0       	ldi	r25, 0x00	; 0
    3436:	64 e0       	ldi	r22, 0x04	; 4
    3438:	70 e0       	ldi	r23, 0x00	; 0
    343a:	42 e0       	ldi	r20, 0x02	; 2
    343c:	50 e0       	ldi	r21, 0x00	; 0
    343e:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2+1,3-2,1);
    3442:	83 e0       	ldi	r24, 0x03	; 3
    3444:	90 e0       	ldi	r25, 0x00	; 0
    3446:	61 e0       	ldi	r22, 0x01	; 1
    3448:	70 e0       	ldi	r23, 0x00	; 0
    344a:	41 e0       	ldi	r20, 0x01	; 1
    344c:	50 e0       	ldi	r21, 0x00	; 0
    344e:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2-1,1+2,1);
    3452:	81 e0       	ldi	r24, 0x01	; 1
    3454:	90 e0       	ldi	r25, 0x00	; 0
    3456:	63 e0       	ldi	r22, 0x03	; 3
    3458:	70 e0       	ldi	r23, 0x00	; 0
    345a:	41 e0       	ldi	r20, 0x01	; 1
    345c:	50 e0       	ldi	r21, 0x00	; 0
    345e:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	
	delay_ms(100);
    3462:	84 e6       	ldi	r24, 0x64	; 100
    3464:	90 e0       	ldi	r25, 0x00	; 0
    3466:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
    346a:	21 97       	sbiw	r28, 0x01	; 1
}

void pumping_heart() 
{
   int i,j;
   for(i=0;i<7;i++){
    346c:	09 f0       	breq	.+2      	; 0x3470 <pumping_heart+0x48a>
    346e:	c5 cd       	rjmp	.-1142   	; 0x2ffa <pumping_heart+0x14>
	

	}
	
	
	fill(0x00);
    3470:	80 e0       	ldi	r24, 0x00	; 0
    3472:	0e 94 16 06 	call	0xc2c	; 0xc2c <fill>
    3476:	e5 e0       	ldi	r30, 0x05	; 5
    3478:	ee 2e       	mov	r14, r30
    347a:	f1 2c       	mov	r15, r1
	setLED(x+1 ,y, z+1);
	setLED(x+1, y+1, z);
	setLED(x+1,y+1,z+1);
}

void pumping_heart() 
    347c:	74 e0       	ldi	r23, 0x04	; 4
    347e:	c7 2e       	mov	r12, r23
    3480:	d1 2c       	mov	r13, r1
    3482:	03 c1       	rjmp	.+518    	; 0x368a <pumping_heart+0x6a4>
    3484:	e6 01       	movw	r28, r12
    3486:	c0 1b       	sub	r28, r16
    3488:	d1 0b       	sbc	r29, r17
	for(j=0;j<5;j++)
	{
	for(i=0;i<3;i++)
	{
	
	setLED(2+i,2,2);
    348a:	ce 01       	movw	r24, r28
    348c:	62 e0       	ldi	r22, 0x02	; 2
    348e:	70 e0       	ldi	r23, 0x00	; 0
    3490:	42 e0       	ldi	r20, 0x02	; 2
    3492:	50 e0       	ldi	r21, 0x00	; 0
    3494:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2+i,3,3);
    3498:	ce 01       	movw	r24, r28
    349a:	63 e0       	ldi	r22, 0x03	; 3
    349c:	70 e0       	ldi	r23, 0x00	; 0
    349e:	43 e0       	ldi	r20, 0x03	; 3
    34a0:	50 e0       	ldi	r21, 0x00	; 0
    34a2:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2+i,1,3);
    34a6:	ce 01       	movw	r24, r28
    34a8:	61 e0       	ldi	r22, 0x01	; 1
    34aa:	70 e0       	ldi	r23, 0x00	; 0
    34ac:	43 e0       	ldi	r20, 0x03	; 3
    34ae:	50 e0       	ldi	r21, 0x00	; 0
    34b0:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2+i,4,2);
    34b4:	ce 01       	movw	r24, r28
    34b6:	64 e0       	ldi	r22, 0x04	; 4
    34b8:	70 e0       	ldi	r23, 0x00	; 0
    34ba:	42 e0       	ldi	r20, 0x02	; 2
    34bc:	50 e0       	ldi	r21, 0x00	; 0
    34be:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2+i,0,2);
    34c2:	ce 01       	movw	r24, r28
    34c4:	60 e0       	ldi	r22, 0x00	; 0
    34c6:	70 e0       	ldi	r23, 0x00	; 0
    34c8:	42 e0       	ldi	r20, 0x02	; 2
    34ca:	50 e0       	ldi	r21, 0x00	; 0
    34cc:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2+i,3,1);
    34d0:	ce 01       	movw	r24, r28
    34d2:	63 e0       	ldi	r22, 0x03	; 3
    34d4:	70 e0       	ldi	r23, 0x00	; 0
    34d6:	41 e0       	ldi	r20, 0x01	; 1
    34d8:	50 e0       	ldi	r21, 0x00	; 0
    34da:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2+i,1,1);
    34de:	ce 01       	movw	r24, r28
    34e0:	61 e0       	ldi	r22, 0x01	; 1
    34e2:	70 e0       	ldi	r23, 0x00	; 0
    34e4:	41 e0       	ldi	r20, 0x01	; 1
    34e6:	50 e0       	ldi	r21, 0x00	; 0
    34e8:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2+i,2,0);
    34ec:	ce 01       	movw	r24, r28
    34ee:	62 e0       	ldi	r22, 0x02	; 2
    34f0:	70 e0       	ldi	r23, 0x00	; 0
    34f2:	40 e0       	ldi	r20, 0x00	; 0
    34f4:	50 e0       	ldi	r21, 0x00	; 0
    34f6:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	
	setLED(2-i,2,2);
    34fa:	c8 01       	movw	r24, r16
    34fc:	62 e0       	ldi	r22, 0x02	; 2
    34fe:	70 e0       	ldi	r23, 0x00	; 0
    3500:	42 e0       	ldi	r20, 0x02	; 2
    3502:	50 e0       	ldi	r21, 0x00	; 0
    3504:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2-i,3,3);
    3508:	c8 01       	movw	r24, r16
    350a:	63 e0       	ldi	r22, 0x03	; 3
    350c:	70 e0       	ldi	r23, 0x00	; 0
    350e:	43 e0       	ldi	r20, 0x03	; 3
    3510:	50 e0       	ldi	r21, 0x00	; 0
    3512:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2-i,1,3);
    3516:	c8 01       	movw	r24, r16
    3518:	61 e0       	ldi	r22, 0x01	; 1
    351a:	70 e0       	ldi	r23, 0x00	; 0
    351c:	43 e0       	ldi	r20, 0x03	; 3
    351e:	50 e0       	ldi	r21, 0x00	; 0
    3520:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2-i,4,2);
    3524:	c8 01       	movw	r24, r16
    3526:	64 e0       	ldi	r22, 0x04	; 4
    3528:	70 e0       	ldi	r23, 0x00	; 0
    352a:	42 e0       	ldi	r20, 0x02	; 2
    352c:	50 e0       	ldi	r21, 0x00	; 0
    352e:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2-i,0,2);
    3532:	c8 01       	movw	r24, r16
    3534:	60 e0       	ldi	r22, 0x00	; 0
    3536:	70 e0       	ldi	r23, 0x00	; 0
    3538:	42 e0       	ldi	r20, 0x02	; 2
    353a:	50 e0       	ldi	r21, 0x00	; 0
    353c:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2-i,3,1);
    3540:	c8 01       	movw	r24, r16
    3542:	63 e0       	ldi	r22, 0x03	; 3
    3544:	70 e0       	ldi	r23, 0x00	; 0
    3546:	41 e0       	ldi	r20, 0x01	; 1
    3548:	50 e0       	ldi	r21, 0x00	; 0
    354a:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2-i,1,1);
    354e:	c8 01       	movw	r24, r16
    3550:	61 e0       	ldi	r22, 0x01	; 1
    3552:	70 e0       	ldi	r23, 0x00	; 0
    3554:	41 e0       	ldi	r20, 0x01	; 1
    3556:	50 e0       	ldi	r21, 0x00	; 0
    3558:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	setLED(2-i,2,0);
    355c:	c8 01       	movw	r24, r16
    355e:	62 e0       	ldi	r22, 0x02	; 2
    3560:	70 e0       	ldi	r23, 0x00	; 0
    3562:	40 e0       	ldi	r20, 0x00	; 0
    3564:	50 e0       	ldi	r21, 0x00	; 0
    3566:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
	
	
	
delay_ms(100);
    356a:	84 e6       	ldi	r24, 0x64	; 100
    356c:	90 e0       	ldi	r25, 0x00	; 0
    356e:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
    3572:	01 50       	subi	r16, 0x01	; 1
    3574:	10 40       	sbci	r17, 0x00	; 0
	
	
	fill(0x00);
	for(j=0;j<5;j++)
	{
	for(i=0;i<3;i++)
    3576:	8f ef       	ldi	r24, 0xFF	; 255
    3578:	0f 3f       	cpi	r16, 0xFF	; 255
    357a:	18 07       	cpc	r17, r24
    357c:	09 f0       	breq	.+2      	; 0x3580 <pumping_heart+0x59a>
    357e:	82 cf       	rjmp	.-252    	; 0x3484 <pumping_heart+0x49e>
    3580:	00 e0       	ldi	r16, 0x00	; 0
    3582:	10 e0       	ldi	r17, 0x00	; 0
	setLED(x+1 ,y, z+1);
	setLED(x+1, y+1, z);
	setLED(x+1,y+1,z+1);
}

void pumping_heart() 
    3584:	e6 01       	movw	r28, r12
    3586:	c0 1b       	sub	r28, r16
    3588:	d1 0b       	sbc	r29, r17
}

for(i=2;i>=0;i--)
	{
	
	clrLED(2+i,2,2);
    358a:	ce 01       	movw	r24, r28
    358c:	62 e0       	ldi	r22, 0x02	; 2
    358e:	70 e0       	ldi	r23, 0x00	; 0
    3590:	42 e0       	ldi	r20, 0x02	; 2
    3592:	50 e0       	ldi	r21, 0x00	; 0
    3594:	0e 94 16 03 	call	0x62c	; 0x62c <clrLED>
	clrLED(2+i,3,3);
    3598:	ce 01       	movw	r24, r28
    359a:	63 e0       	ldi	r22, 0x03	; 3
    359c:	70 e0       	ldi	r23, 0x00	; 0
    359e:	43 e0       	ldi	r20, 0x03	; 3
    35a0:	50 e0       	ldi	r21, 0x00	; 0
    35a2:	0e 94 16 03 	call	0x62c	; 0x62c <clrLED>
	clrLED(2+i,1,3);
    35a6:	ce 01       	movw	r24, r28
    35a8:	61 e0       	ldi	r22, 0x01	; 1
    35aa:	70 e0       	ldi	r23, 0x00	; 0
    35ac:	43 e0       	ldi	r20, 0x03	; 3
    35ae:	50 e0       	ldi	r21, 0x00	; 0
    35b0:	0e 94 16 03 	call	0x62c	; 0x62c <clrLED>
	clrLED(2+i,4,2);
    35b4:	ce 01       	movw	r24, r28
    35b6:	64 e0       	ldi	r22, 0x04	; 4
    35b8:	70 e0       	ldi	r23, 0x00	; 0
    35ba:	42 e0       	ldi	r20, 0x02	; 2
    35bc:	50 e0       	ldi	r21, 0x00	; 0
    35be:	0e 94 16 03 	call	0x62c	; 0x62c <clrLED>
	clrLED(2+i,0,2);
    35c2:	ce 01       	movw	r24, r28
    35c4:	60 e0       	ldi	r22, 0x00	; 0
    35c6:	70 e0       	ldi	r23, 0x00	; 0
    35c8:	42 e0       	ldi	r20, 0x02	; 2
    35ca:	50 e0       	ldi	r21, 0x00	; 0
    35cc:	0e 94 16 03 	call	0x62c	; 0x62c <clrLED>
	clrLED(2+i,3,1);
    35d0:	ce 01       	movw	r24, r28
    35d2:	63 e0       	ldi	r22, 0x03	; 3
    35d4:	70 e0       	ldi	r23, 0x00	; 0
    35d6:	41 e0       	ldi	r20, 0x01	; 1
    35d8:	50 e0       	ldi	r21, 0x00	; 0
    35da:	0e 94 16 03 	call	0x62c	; 0x62c <clrLED>
	clrLED(2+i,1,1);
    35de:	ce 01       	movw	r24, r28
    35e0:	61 e0       	ldi	r22, 0x01	; 1
    35e2:	70 e0       	ldi	r23, 0x00	; 0
    35e4:	41 e0       	ldi	r20, 0x01	; 1
    35e6:	50 e0       	ldi	r21, 0x00	; 0
    35e8:	0e 94 16 03 	call	0x62c	; 0x62c <clrLED>
	clrLED(2+i,2,0);
    35ec:	ce 01       	movw	r24, r28
    35ee:	62 e0       	ldi	r22, 0x02	; 2
    35f0:	70 e0       	ldi	r23, 0x00	; 0
    35f2:	40 e0       	ldi	r20, 0x00	; 0
    35f4:	50 e0       	ldi	r21, 0x00	; 0
    35f6:	0e 94 16 03 	call	0x62c	; 0x62c <clrLED>
	
	clrLED(2-i,2,2);
    35fa:	c8 01       	movw	r24, r16
    35fc:	62 e0       	ldi	r22, 0x02	; 2
    35fe:	70 e0       	ldi	r23, 0x00	; 0
    3600:	42 e0       	ldi	r20, 0x02	; 2
    3602:	50 e0       	ldi	r21, 0x00	; 0
    3604:	0e 94 16 03 	call	0x62c	; 0x62c <clrLED>
	clrLED(2-i,3,3);
    3608:	c8 01       	movw	r24, r16
    360a:	63 e0       	ldi	r22, 0x03	; 3
    360c:	70 e0       	ldi	r23, 0x00	; 0
    360e:	43 e0       	ldi	r20, 0x03	; 3
    3610:	50 e0       	ldi	r21, 0x00	; 0
    3612:	0e 94 16 03 	call	0x62c	; 0x62c <clrLED>
	clrLED(2-i,1,3);
    3616:	c8 01       	movw	r24, r16
    3618:	61 e0       	ldi	r22, 0x01	; 1
    361a:	70 e0       	ldi	r23, 0x00	; 0
    361c:	43 e0       	ldi	r20, 0x03	; 3
    361e:	50 e0       	ldi	r21, 0x00	; 0
    3620:	0e 94 16 03 	call	0x62c	; 0x62c <clrLED>
	clrLED(2-i,4,2);
    3624:	c8 01       	movw	r24, r16
    3626:	64 e0       	ldi	r22, 0x04	; 4
    3628:	70 e0       	ldi	r23, 0x00	; 0
    362a:	42 e0       	ldi	r20, 0x02	; 2
    362c:	50 e0       	ldi	r21, 0x00	; 0
    362e:	0e 94 16 03 	call	0x62c	; 0x62c <clrLED>
	clrLED(2-i,0,2);
    3632:	c8 01       	movw	r24, r16
    3634:	60 e0       	ldi	r22, 0x00	; 0
    3636:	70 e0       	ldi	r23, 0x00	; 0
    3638:	42 e0       	ldi	r20, 0x02	; 2
    363a:	50 e0       	ldi	r21, 0x00	; 0
    363c:	0e 94 16 03 	call	0x62c	; 0x62c <clrLED>
	clrLED(2-i,3,1);
    3640:	c8 01       	movw	r24, r16
    3642:	63 e0       	ldi	r22, 0x03	; 3
    3644:	70 e0       	ldi	r23, 0x00	; 0
    3646:	41 e0       	ldi	r20, 0x01	; 1
    3648:	50 e0       	ldi	r21, 0x00	; 0
    364a:	0e 94 16 03 	call	0x62c	; 0x62c <clrLED>
	clrLED(2-i,1,1);
    364e:	c8 01       	movw	r24, r16
    3650:	61 e0       	ldi	r22, 0x01	; 1
    3652:	70 e0       	ldi	r23, 0x00	; 0
    3654:	41 e0       	ldi	r20, 0x01	; 1
    3656:	50 e0       	ldi	r21, 0x00	; 0
    3658:	0e 94 16 03 	call	0x62c	; 0x62c <clrLED>
	clrLED(2-i,2,0);
    365c:	c8 01       	movw	r24, r16
    365e:	62 e0       	ldi	r22, 0x02	; 2
    3660:	70 e0       	ldi	r23, 0x00	; 0
    3662:	40 e0       	ldi	r20, 0x00	; 0
    3664:	50 e0       	ldi	r21, 0x00	; 0
    3666:	0e 94 16 03 	call	0x62c	; 0x62c <clrLED>
	
	
	
delay_ms(100);
    366a:	84 e6       	ldi	r24, 0x64	; 100
    366c:	90 e0       	ldi	r25, 0x00	; 0
    366e:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
    3672:	0f 5f       	subi	r16, 0xFF	; 255
    3674:	1f 4f       	sbci	r17, 0xFF	; 255
	
	
delay_ms(100);
}

for(i=2;i>=0;i--)
    3676:	03 30       	cpi	r16, 0x03	; 3
    3678:	11 05       	cpc	r17, r1
    367a:	09 f0       	breq	.+2      	; 0x367e <pumping_heart+0x698>
    367c:	83 cf       	rjmp	.-250    	; 0x3584 <pumping_heart+0x59e>
    367e:	08 94       	sec
    3680:	e1 08       	sbc	r14, r1
    3682:	f1 08       	sbc	r15, r1

	}
	
	
	fill(0x00);
	for(j=0;j<5;j++)
    3684:	e1 14       	cp	r14, r1
    3686:	f1 04       	cpc	r15, r1
    3688:	19 f0       	breq	.+6      	; 0x3690 <pumping_heart+0x6aa>
	setLED(x+1, y+1, z);
	setLED(x+1,y+1,z+1);
}

void pumping_heart() 
{
    368a:	02 e0       	ldi	r16, 0x02	; 2
    368c:	10 e0       	ldi	r17, 0x00	; 0
    368e:	fa ce       	rjmp	.-524    	; 0x3484 <pumping_heart+0x49e>
	
	
delay_ms(100);
}
}	
}
    3690:	df 91       	pop	r29
    3692:	cf 91       	pop	r28
    3694:	1f 91       	pop	r17
    3696:	0f 91       	pop	r16
    3698:	ff 90       	pop	r15
    369a:	ef 90       	pop	r14
    369c:	df 90       	pop	r13
    369e:	cf 90       	pop	r12
    36a0:	08 95       	ret

000036a2 <Sejla_Damir>:
}
}

void Sejla_Damir()
{
	little_cube();
    36a2:	0e 94 40 17 	call	0x2e80	; 0x2e80 <little_cube>
	
	create_cube(2, 2, 2);
    36a6:	82 e0       	ldi	r24, 0x02	; 2
    36a8:	90 e0       	ldi	r25, 0x00	; 0
    36aa:	62 e0       	ldi	r22, 0x02	; 2
    36ac:	70 e0       	ldi	r23, 0x00	; 0
    36ae:	42 e0       	ldi	r20, 0x02	; 2
    36b0:	50 e0       	ldi	r21, 0x00	; 0
    36b2:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <create_cube>
	
	
	
	
	pumping_heart();
    36b6:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <pumping_heart>
	
	//stop()
}
    36ba:	08 95       	ret

000036bc <grow>:


}

void grow(char Array[5][5][5], int delay)
{
    36bc:	2f 92       	push	r2
    36be:	3f 92       	push	r3
    36c0:	4f 92       	push	r4
    36c2:	5f 92       	push	r5
    36c4:	6f 92       	push	r6
    36c6:	7f 92       	push	r7
    36c8:	8f 92       	push	r8
    36ca:	9f 92       	push	r9
    36cc:	af 92       	push	r10
    36ce:	bf 92       	push	r11
    36d0:	cf 92       	push	r12
    36d2:	df 92       	push	r13
    36d4:	ef 92       	push	r14
    36d6:	ff 92       	push	r15
    36d8:	0f 93       	push	r16
    36da:	1f 93       	push	r17
    36dc:	df 93       	push	r29
    36de:	cf 93       	push	r28
    36e0:	cd b7       	in	r28, 0x3d	; 61
    36e2:	de b7       	in	r29, 0x3e	; 62
    36e4:	2e 97       	sbiw	r28, 0x0e	; 14
    36e6:	0f b6       	in	r0, 0x3f	; 63
    36e8:	f8 94       	cli
    36ea:	de bf       	out	0x3e, r29	; 62
    36ec:	0f be       	out	0x3f, r0	; 63
    36ee:	cd bf       	out	0x3d, r28	; 61
    36f0:	89 87       	std	Y+9, r24	; 0x09
    36f2:	9a 87       	std	Y+10, r25	; 0x0a
    36f4:	78 87       	std	Y+8, r23	; 0x08
    36f6:	6f 83       	std	Y+7, r22	; 0x07
	double a,r=0;
	int i,j,k;

	for(a=0;a<45;a++)
    36f8:	ae e2       	ldi	r26, 0x2E	; 46
    36fa:	6a 2e       	mov	r6, r26
    36fc:	71 2c       	mov	r7, r1

}

void grow(char Array[5][5][5], int delay)
{
	double a,r=0;
    36fe:	19 82       	std	Y+1, r1	; 0x01
    3700:	1a 82       	std	Y+2, r1	; 0x02
    3702:	1b 82       	std	Y+3, r1	; 0x03
    3704:	1c 82       	std	Y+4, r1	; 0x04
	int i,j,k;

	for(a=0;a<45;a++)
    3706:	55 24       	eor	r5, r5
    3708:	44 24       	eor	r4, r4
    370a:	33 24       	eor	r3, r3
    370c:	22 24       	eor	r2, r2
    370e:	99 c0       	rjmp	.+306    	; 0x3842 <grow+0x186>
	shrink(Array,delay);


}

void grow(char Array[5][5][5], int delay)
    3710:	c7 01       	movw	r24, r14
    3712:	02 97       	sbiw	r24, 0x02	; 2
	{
	for (j=0;j<5;j++)
	{
	for (k=0;k<5;k++)
		{
		if(sqrt((i-2)*(i-2)+(j-2)*(j-2)+(k-2)*(k-2))<r)
    3714:	88 9f       	mul	r24, r24
    3716:	b0 01       	movw	r22, r0
    3718:	89 9f       	mul	r24, r25
    371a:	70 0d       	add	r23, r0
    371c:	98 9f       	mul	r25, r24
    371e:	70 0d       	add	r23, r0
    3720:	11 24       	eor	r1, r1
    3722:	6a 0d       	add	r22, r10
    3724:	7b 1d       	adc	r23, r11
    3726:	88 27       	eor	r24, r24
    3728:	77 fd       	sbrc	r23, 7
    372a:	80 95       	com	r24
    372c:	98 2f       	mov	r25, r24
    372e:	0e 94 96 23 	call	0x472c	; 0x472c <__floatsisf>
    3732:	0e 94 68 2b 	call	0x56d0	; 0x56d0 <sqrt>
    3736:	e9 81       	ldd	r30, Y+1	; 0x01
    3738:	fa 81       	ldd	r31, Y+2	; 0x02
    373a:	2b 81       	ldd	r18, Y+3	; 0x03
    373c:	2b 87       	std	Y+11, r18	; 0x0b
    373e:	3c 81       	ldd	r19, Y+4	; 0x04
    3740:	3c 87       	std	Y+12, r19	; 0x0c
    3742:	9f 01       	movw	r18, r30
    3744:	4b 85       	ldd	r20, Y+11	; 0x0b
    3746:	5c 85       	ldd	r21, Y+12	; 0x0c
    3748:	0e 94 66 23 	call	0x46cc	; 0x46cc <__ltsf2>
    374c:	87 fd       	sbrc	r24, 7
    374e:	04 c0       	rjmp	.+8      	; 0x3758 <grow+0x9c>
			setLED(i,j,k);
		else
			if(Array[i][j][k]==1)
    3750:	d8 01       	movw	r26, r16
    3752:	8c 91       	ld	r24, X
    3754:	81 30       	cpi	r24, 0x01	; 1
    3756:	39 f4       	brne	.+14     	; 0x3766 <grow+0xaa>
				setLED(i,j,k);
    3758:	c6 01       	movw	r24, r12
    375a:	6d 85       	ldd	r22, Y+13	; 0x0d
    375c:	7e 85       	ldd	r23, Y+14	; 0x0e
    375e:	a7 01       	movw	r20, r14
    3760:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
    3764:	06 c0       	rjmp	.+12     	; 0x3772 <grow+0xb6>
			else
				clrLED(i,j,k);
    3766:	c6 01       	movw	r24, r12
    3768:	6d 85       	ldd	r22, Y+13	; 0x0d
    376a:	7e 85       	ldd	r23, Y+14	; 0x0e
    376c:	a7 01       	movw	r20, r14
    376e:	0e 94 16 03 	call	0x62c	; 0x62c <clrLED>
	{
	for (i=0;i<5;i++)
	{
	for (j=0;j<5;j++)
	{
	for (k=0;k<5;k++)
    3772:	08 94       	sec
    3774:	e1 1c       	adc	r14, r1
    3776:	f1 1c       	adc	r15, r1
    3778:	0f 5f       	subi	r16, 0xFF	; 255
    377a:	1f 4f       	sbci	r17, 0xFF	; 255
    377c:	b5 e0       	ldi	r27, 0x05	; 5
    377e:	eb 16       	cp	r14, r27
    3780:	f1 04       	cpc	r15, r1
    3782:	31 f6       	brne	.-116    	; 0x3710 <grow+0x54>
    3784:	2d 85       	ldd	r18, Y+13	; 0x0d
    3786:	3e 85       	ldd	r19, Y+14	; 0x0e

	for(a=0;a<45;a++)
	{
	for (i=0;i<5;i++)
	{
	for (j=0;j<5;j++)
    3788:	2f 5f       	subi	r18, 0xFF	; 255
    378a:	3f 4f       	sbci	r19, 0xFF	; 255
    378c:	25 30       	cpi	r18, 0x05	; 5
    378e:	31 05       	cpc	r19, r1
    3790:	d9 f0       	breq	.+54     	; 0x37c8 <grow+0x10c>
	shrink(Array,delay);


}

void grow(char Array[5][5][5], int delay)
    3792:	c9 01       	movw	r24, r18
    3794:	02 97       	sbiw	r24, 0x02	; 2
	{
	for (j=0;j<5;j++)
	{
	for (k=0;k<5;k++)
		{
		if(sqrt((i-2)*(i-2)+(j-2)*(j-2)+(k-2)*(k-2))<r)
    3796:	88 9f       	mul	r24, r24
    3798:	50 01       	movw	r10, r0
    379a:	89 9f       	mul	r24, r25
    379c:	b0 0c       	add	r11, r0
    379e:	98 9f       	mul	r25, r24
    37a0:	b0 0c       	add	r11, r0
    37a2:	11 24       	eor	r1, r1
    37a4:	ed 81       	ldd	r30, Y+5	; 0x05
    37a6:	fe 81       	ldd	r31, Y+6	; 0x06
    37a8:	ae 0e       	add	r10, r30
    37aa:	bf 1e       	adc	r11, r31
	shrink(Array,delay);


}

void grow(char Array[5][5][5], int delay)
    37ac:	89 01       	movw	r16, r18
    37ae:	00 0f       	add	r16, r16
    37b0:	11 1f       	adc	r17, r17
    37b2:	00 0f       	add	r16, r16
    37b4:	11 1f       	adc	r17, r17
    37b6:	02 0f       	add	r16, r18
    37b8:	13 1f       	adc	r17, r19
    37ba:	08 0d       	add	r16, r8
    37bc:	19 1d       	adc	r17, r9
    37be:	ee 24       	eor	r14, r14
    37c0:	ff 24       	eor	r15, r15
    37c2:	3e 87       	std	Y+14, r19	; 0x0e
    37c4:	2d 87       	std	Y+13, r18	; 0x0d
    37c6:	a4 cf       	rjmp	.-184    	; 0x3710 <grow+0x54>
	double a,r=0;
	int i,j,k;

	for(a=0;a<45;a++)
	{
	for (i=0;i<5;i++)
    37c8:	08 94       	sec
    37ca:	c1 1c       	adc	r12, r1
    37cc:	d1 1c       	adc	r13, r1
    37ce:	29 e1       	ldi	r18, 0x19	; 25
    37d0:	30 e0       	ldi	r19, 0x00	; 0
    37d2:	82 0e       	add	r8, r18
    37d4:	93 1e       	adc	r9, r19
    37d6:	35 e0       	ldi	r19, 0x05	; 5
    37d8:	c3 16       	cp	r12, r19
    37da:	d1 04       	cpc	r13, r1
    37dc:	71 f0       	breq	.+28     	; 0x37fa <grow+0x13e>
	shrink(Array,delay);


}

void grow(char Array[5][5][5], int delay)
    37de:	c6 01       	movw	r24, r12
    37e0:	02 97       	sbiw	r24, 0x02	; 2
	{
	for (j=0;j<5;j++)
	{
	for (k=0;k<5;k++)
		{
		if(sqrt((i-2)*(i-2)+(j-2)*(j-2)+(k-2)*(k-2))<r)
    37e2:	88 9f       	mul	r24, r24
    37e4:	d0 01       	movw	r26, r0
    37e6:	89 9f       	mul	r24, r25
    37e8:	b0 0d       	add	r27, r0
    37ea:	98 9f       	mul	r25, r24
    37ec:	b0 0d       	add	r27, r0
    37ee:	11 24       	eor	r1, r1
    37f0:	be 83       	std	Y+6, r27	; 0x06
    37f2:	ad 83       	std	Y+5, r26	; 0x05
    37f4:	20 e0       	ldi	r18, 0x00	; 0
    37f6:	30 e0       	ldi	r19, 0x00	; 0
    37f8:	cc cf       	rjmp	.-104    	; 0x3792 <grow+0xd6>
			else
				clrLED(i,j,k);
		}
	}
	}
	r=a/10;
    37fa:	a2 01       	movw	r20, r4
    37fc:	91 01       	movw	r18, r2
    37fe:	65 2f       	mov	r22, r21
    3800:	74 2d       	mov	r23, r4
    3802:	83 2f       	mov	r24, r19
    3804:	92 2d       	mov	r25, r2
    3806:	20 e0       	ldi	r18, 0x00	; 0
    3808:	30 e0       	ldi	r19, 0x00	; 0
    380a:	40 e2       	ldi	r20, 0x20	; 32
    380c:	51 e4       	ldi	r21, 0x41	; 65
    380e:	0e 94 b8 22 	call	0x4570	; 0x4570 <__divsf3>
    3812:	69 83       	std	Y+1, r22	; 0x01
    3814:	7a 83       	std	Y+2, r23	; 0x02
    3816:	8b 83       	std	Y+3, r24	; 0x03
    3818:	9c 83       	std	Y+4, r25	; 0x04
	delay_ms(delay);
    381a:	8f 81       	ldd	r24, Y+7	; 0x07
    381c:	98 85       	ldd	r25, Y+8	; 0x08
    381e:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
void grow(char Array[5][5][5], int delay)
{
	double a,r=0;
	int i,j,k;

	for(a=0;a<45;a++)
    3822:	a2 01       	movw	r20, r4
    3824:	91 01       	movw	r18, r2
    3826:	65 2f       	mov	r22, r21
    3828:	74 2d       	mov	r23, r4
    382a:	83 2f       	mov	r24, r19
    382c:	92 2d       	mov	r25, r2
    382e:	20 e0       	ldi	r18, 0x00	; 0
    3830:	30 e0       	ldi	r19, 0x00	; 0
    3832:	40 e8       	ldi	r20, 0x80	; 128
    3834:	5f e3       	ldi	r21, 0x3F	; 63
    3836:	0e 94 5a 22 	call	0x44b4	; 0x44b4 <__addsf3>
    383a:	56 2e       	mov	r5, r22
    383c:	47 2e       	mov	r4, r23
    383e:	38 2e       	mov	r3, r24
    3840:	29 2e       	mov	r2, r25
    3842:	08 94       	sec
    3844:	61 08       	sbc	r6, r1
    3846:	71 08       	sbc	r7, r1
    3848:	61 14       	cp	r6, r1
    384a:	71 04       	cpc	r7, r1
    384c:	39 f0       	breq	.+14     	; 0x385c <grow+0x1a0>
    384e:	99 85       	ldd	r25, Y+9	; 0x09
    3850:	8a 85       	ldd	r24, Y+10	; 0x0a
    3852:	89 2e       	mov	r8, r25
    3854:	98 2e       	mov	r9, r24
    3856:	cc 24       	eor	r12, r12
    3858:	dd 24       	eor	r13, r13
    385a:	c1 cf       	rjmp	.-126    	; 0x37de <grow+0x122>
	}
	}
	r=a/10;
	delay_ms(delay);
	}
}
    385c:	2e 96       	adiw	r28, 0x0e	; 14
    385e:	0f b6       	in	r0, 0x3f	; 63
    3860:	f8 94       	cli
    3862:	de bf       	out	0x3e, r29	; 62
    3864:	0f be       	out	0x3f, r0	; 63
    3866:	cd bf       	out	0x3d, r28	; 61
    3868:	cf 91       	pop	r28
    386a:	df 91       	pop	r29
    386c:	1f 91       	pop	r17
    386e:	0f 91       	pop	r16
    3870:	ff 90       	pop	r15
    3872:	ef 90       	pop	r14
    3874:	df 90       	pop	r13
    3876:	cf 90       	pop	r12
    3878:	bf 90       	pop	r11
    387a:	af 90       	pop	r10
    387c:	9f 90       	pop	r9
    387e:	8f 90       	pop	r8
    3880:	7f 90       	pop	r7
    3882:	6f 90       	pop	r6
    3884:	5f 90       	pop	r5
    3886:	4f 90       	pop	r4
    3888:	3f 90       	pop	r3
    388a:	2f 90       	pop	r2
    388c:	08 95       	ret

0000388e <grow2>:

void grow2(char Array[5][5][5], int delay)
{
    388e:	2f 92       	push	r2
    3890:	3f 92       	push	r3
    3892:	4f 92       	push	r4
    3894:	5f 92       	push	r5
    3896:	6f 92       	push	r6
    3898:	7f 92       	push	r7
    389a:	8f 92       	push	r8
    389c:	9f 92       	push	r9
    389e:	af 92       	push	r10
    38a0:	bf 92       	push	r11
    38a2:	cf 92       	push	r12
    38a4:	df 92       	push	r13
    38a6:	ef 92       	push	r14
    38a8:	ff 92       	push	r15
    38aa:	0f 93       	push	r16
    38ac:	1f 93       	push	r17
    38ae:	df 93       	push	r29
    38b0:	cf 93       	push	r28
    38b2:	cd b7       	in	r28, 0x3d	; 61
    38b4:	de b7       	in	r29, 0x3e	; 62
    38b6:	2a 97       	sbiw	r28, 0x0a	; 10
    38b8:	0f b6       	in	r0, 0x3f	; 63
    38ba:	f8 94       	cli
    38bc:	de bf       	out	0x3e, r29	; 62
    38be:	0f be       	out	0x3f, r0	; 63
    38c0:	cd bf       	out	0x3d, r28	; 61
    38c2:	78 87       	std	Y+8, r23	; 0x08
    38c4:	6f 83       	std	Y+7, r22	; 0x07
	double a,r=0;
	int i,j,k;

	for(a=4;a<36;a++)
    38c6:	b1 e2       	ldi	r27, 0x21	; 33
    38c8:	6b 2e       	mov	r6, r27
    38ca:	71 2c       	mov	r7, r1
	}
}

void grow2(char Array[5][5][5], int delay)
{
	double a,r=0;
    38cc:	55 24       	eor	r5, r5
    38ce:	44 24       	eor	r4, r4
    38d0:	33 24       	eor	r3, r3
    38d2:	22 24       	eor	r2, r2
	int i,j,k;

	for(a=4;a<36;a++)
    38d4:	19 82       	std	Y+1, r1	; 0x01
    38d6:	1a 82       	std	Y+2, r1	; 0x02
    38d8:	20 e8       	ldi	r18, 0x80	; 128
    38da:	2b 83       	std	Y+3, r18	; 0x03
    38dc:	30 e4       	ldi	r19, 0x40	; 64
    38de:	3c 83       	std	Y+4, r19	; 0x04
    38e0:	ad c0       	rjmp	.+346    	; 0x3a3c <grow2+0x1ae>
	r=a/10;
	delay_ms(delay);
	}
}

void grow2(char Array[5][5][5], int delay)
    38e2:	89 85       	ldd	r24, Y+9	; 0x09
    38e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    38e6:	02 97       	sbiw	r24, 0x02	; 2
		{
			for (j=0;j<5;j++)
			{
			for (k=0;k<5;k++)
				{
				if(sqrt((i-2)*(i-2)+(j-2)*(j-2)+(k-2)*(k-2))<r)
    38e8:	88 9f       	mul	r24, r24
    38ea:	b0 01       	movw	r22, r0
    38ec:	89 9f       	mul	r24, r25
    38ee:	70 0d       	add	r23, r0
    38f0:	98 9f       	mul	r25, r24
    38f2:	70 0d       	add	r23, r0
    38f4:	11 24       	eor	r1, r1
    38f6:	6c 0d       	add	r22, r12
    38f8:	7d 1d       	adc	r23, r13
    38fa:	88 27       	eor	r24, r24
    38fc:	77 fd       	sbrc	r23, 7
    38fe:	80 95       	com	r24
    3900:	98 2f       	mov	r25, r24
    3902:	0e 94 96 23 	call	0x472c	; 0x472c <__floatsisf>
    3906:	4b 01       	movw	r8, r22
    3908:	5c 01       	movw	r10, r24
    390a:	0e 94 68 2b 	call	0x56d0	; 0x56d0 <sqrt>
    390e:	e5 2d       	mov	r30, r5
    3910:	f4 2d       	mov	r31, r4
    3912:	a3 2d       	mov	r26, r3
    3914:	b2 2d       	mov	r27, r2
    3916:	9f 01       	movw	r18, r30
    3918:	ad 01       	movw	r20, r26
    391a:	0e 94 66 23 	call	0x46cc	; 0x46cc <__ltsf2>
    391e:	87 ff       	sbrs	r24, 7
    3920:	07 c0       	rjmp	.+14     	; 0x3930 <grow2+0xa2>
					setLED(i,j,k);
    3922:	c7 01       	movw	r24, r14
    3924:	b8 01       	movw	r22, r16
    3926:	49 85       	ldd	r20, Y+9	; 0x09
    3928:	5a 85       	ldd	r21, Y+10	; 0x0a
    392a:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
    392e:	06 c0       	rjmp	.+12     	; 0x393c <grow2+0xae>
				/*else
					if(Array[i][j][k]==1)
						setLED(i,j,k);*/
					else
						clrLED(i,j,k);
    3930:	c7 01       	movw	r24, r14
    3932:	b8 01       	movw	r22, r16
    3934:	49 85       	ldd	r20, Y+9	; 0x09
    3936:	5a 85       	ldd	r21, Y+10	; 0x0a
    3938:	0e 94 16 03 	call	0x62c	; 0x62c <clrLED>
				if(sqrt((i-2)*(i-2)+(j-2)*(j-2)+(k-2)*(k-2))<r-0.7)
    393c:	c5 01       	movw	r24, r10
    393e:	b4 01       	movw	r22, r8
    3940:	0e 94 68 2b 	call	0x56d0	; 0x56d0 <sqrt>
    3944:	4b 01       	movw	r8, r22
    3946:	5c 01       	movw	r10, r24
    3948:	a2 01       	movw	r20, r4
    394a:	91 01       	movw	r18, r2
    394c:	65 2f       	mov	r22, r21
    394e:	74 2d       	mov	r23, r4
    3950:	83 2f       	mov	r24, r19
    3952:	92 2d       	mov	r25, r2
    3954:	23 e3       	ldi	r18, 0x33	; 51
    3956:	33 e3       	ldi	r19, 0x33	; 51
    3958:	43 e3       	ldi	r20, 0x33	; 51
    395a:	5f e3       	ldi	r21, 0x3F	; 63
    395c:	0e 94 87 22 	call	0x450e	; 0x450e <__subsf3>
    3960:	9b 01       	movw	r18, r22
    3962:	ac 01       	movw	r20, r24
    3964:	c5 01       	movw	r24, r10
    3966:	b4 01       	movw	r22, r8
    3968:	0e 94 66 23 	call	0x46cc	; 0x46cc <__ltsf2>
    396c:	87 ff       	sbrs	r24, 7
    396e:	06 c0       	rjmp	.+12     	; 0x397c <grow2+0xee>
					clrLED(i,j,k);
    3970:	c7 01       	movw	r24, r14
    3972:	b8 01       	movw	r22, r16
    3974:	49 85       	ldd	r20, Y+9	; 0x09
    3976:	5a 85       	ldd	r21, Y+10	; 0x0a
    3978:	0e 94 16 03 	call	0x62c	; 0x62c <clrLED>
	{
		for (i=0;i<5;i++)
		{
			for (j=0;j<5;j++)
			{
			for (k=0;k<5;k++)
    397c:	89 85       	ldd	r24, Y+9	; 0x09
    397e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3980:	01 96       	adiw	r24, 0x01	; 1
    3982:	9a 87       	std	Y+10, r25	; 0x0a
    3984:	89 87       	std	Y+9, r24	; 0x09
    3986:	85 30       	cpi	r24, 0x05	; 5
    3988:	91 05       	cpc	r25, r1
    398a:	09 f0       	breq	.+2      	; 0x398e <grow2+0x100>
    398c:	aa cf       	rjmp	.-172    	; 0x38e2 <grow2+0x54>

	for(a=4;a<36;a++)
	{
		for (i=0;i<5;i++)
		{
			for (j=0;j<5;j++)
    398e:	0f 5f       	subi	r16, 0xFF	; 255
    3990:	1f 4f       	sbci	r17, 0xFF	; 255
    3992:	05 30       	cpi	r16, 0x05	; 5
    3994:	11 05       	cpc	r17, r1
    3996:	91 f0       	breq	.+36     	; 0x39bc <grow2+0x12e>
	r=a/10;
	delay_ms(delay);
	}
}

void grow2(char Array[5][5][5], int delay)
    3998:	c8 01       	movw	r24, r16
    399a:	02 97       	sbiw	r24, 0x02	; 2
		{
			for (j=0;j<5;j++)
			{
			for (k=0;k<5;k++)
				{
				if(sqrt((i-2)*(i-2)+(j-2)*(j-2)+(k-2)*(k-2))<r)
    399c:	88 9f       	mul	r24, r24
    399e:	60 01       	movw	r12, r0
    39a0:	89 9f       	mul	r24, r25
    39a2:	d0 0c       	add	r13, r0
    39a4:	98 9f       	mul	r25, r24
    39a6:	d0 0c       	add	r13, r0
    39a8:	11 24       	eor	r1, r1
    39aa:	ed 81       	ldd	r30, Y+5	; 0x05
    39ac:	fe 81       	ldd	r31, Y+6	; 0x06
    39ae:	ce 0e       	add	r12, r30
    39b0:	df 1e       	adc	r13, r31
    39b2:	80 e0       	ldi	r24, 0x00	; 0
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	9a 87       	std	Y+10, r25	; 0x0a
    39b8:	89 87       	std	Y+9, r24	; 0x09
    39ba:	93 cf       	rjmp	.-218    	; 0x38e2 <grow2+0x54>
	double a,r=0;
	int i,j,k;

	for(a=4;a<36;a++)
	{
		for (i=0;i<5;i++)
    39bc:	08 94       	sec
    39be:	e1 1c       	adc	r14, r1
    39c0:	f1 1c       	adc	r15, r1
    39c2:	f5 e0       	ldi	r31, 0x05	; 5
    39c4:	ef 16       	cp	r14, r31
    39c6:	f1 04       	cpc	r15, r1
    39c8:	19 f4       	brne	.+6      	; 0x39d0 <grow2+0x142>
    39ca:	10 c0       	rjmp	.+32     	; 0x39ec <grow2+0x15e>
void grow2(char Array[5][5][5], int delay)
{
	double a,r=0;
	int i,j,k;

	for(a=4;a<36;a++)
    39cc:	ee 24       	eor	r14, r14
    39ce:	ff 24       	eor	r15, r15
	r=a/10;
	delay_ms(delay);
	}
}

void grow2(char Array[5][5][5], int delay)
    39d0:	c7 01       	movw	r24, r14
    39d2:	02 97       	sbiw	r24, 0x02	; 2
		{
			for (j=0;j<5;j++)
			{
			for (k=0;k<5;k++)
				{
				if(sqrt((i-2)*(i-2)+(j-2)*(j-2)+(k-2)*(k-2))<r)
    39d4:	88 9f       	mul	r24, r24
    39d6:	90 01       	movw	r18, r0
    39d8:	89 9f       	mul	r24, r25
    39da:	30 0d       	add	r19, r0
    39dc:	98 9f       	mul	r25, r24
    39de:	30 0d       	add	r19, r0
    39e0:	11 24       	eor	r1, r1
    39e2:	3e 83       	std	Y+6, r19	; 0x06
    39e4:	2d 83       	std	Y+5, r18	; 0x05
    39e6:	00 e0       	ldi	r16, 0x00	; 0
    39e8:	10 e0       	ldi	r17, 0x00	; 0
    39ea:	d6 cf       	rjmp	.-84     	; 0x3998 <grow2+0x10a>
					clrLED(i,j,k);
				
				}
			}
		}
	r=a/10;
    39ec:	59 81       	ldd	r21, Y+1	; 0x01
    39ee:	4a 81       	ldd	r20, Y+2	; 0x02
    39f0:	3b 81       	ldd	r19, Y+3	; 0x03
    39f2:	2c 81       	ldd	r18, Y+4	; 0x04
    39f4:	65 2f       	mov	r22, r21
    39f6:	74 2f       	mov	r23, r20
    39f8:	83 2f       	mov	r24, r19
    39fa:	92 2f       	mov	r25, r18
    39fc:	20 e0       	ldi	r18, 0x00	; 0
    39fe:	30 e0       	ldi	r19, 0x00	; 0
    3a00:	40 e2       	ldi	r20, 0x20	; 32
    3a02:	51 e4       	ldi	r21, 0x41	; 65
    3a04:	0e 94 b8 22 	call	0x4570	; 0x4570 <__divsf3>
    3a08:	56 2e       	mov	r5, r22
    3a0a:	47 2e       	mov	r4, r23
    3a0c:	38 2e       	mov	r3, r24
    3a0e:	29 2e       	mov	r2, r25
	delay_ms(delay);
    3a10:	8f 81       	ldd	r24, Y+7	; 0x07
    3a12:	98 85       	ldd	r25, Y+8	; 0x08
    3a14:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
void grow2(char Array[5][5][5], int delay)
{
	double a,r=0;
	int i,j,k;

	for(a=4;a<36;a++)
    3a18:	59 81       	ldd	r21, Y+1	; 0x01
    3a1a:	4a 81       	ldd	r20, Y+2	; 0x02
    3a1c:	3b 81       	ldd	r19, Y+3	; 0x03
    3a1e:	2c 81       	ldd	r18, Y+4	; 0x04
    3a20:	65 2f       	mov	r22, r21
    3a22:	74 2f       	mov	r23, r20
    3a24:	83 2f       	mov	r24, r19
    3a26:	92 2f       	mov	r25, r18
    3a28:	20 e0       	ldi	r18, 0x00	; 0
    3a2a:	30 e0       	ldi	r19, 0x00	; 0
    3a2c:	40 e8       	ldi	r20, 0x80	; 128
    3a2e:	5f e3       	ldi	r21, 0x3F	; 63
    3a30:	0e 94 5a 22 	call	0x44b4	; 0x44b4 <__addsf3>
    3a34:	69 83       	std	Y+1, r22	; 0x01
    3a36:	7a 83       	std	Y+2, r23	; 0x02
    3a38:	8b 83       	std	Y+3, r24	; 0x03
    3a3a:	9c 83       	std	Y+4, r25	; 0x04
    3a3c:	08 94       	sec
    3a3e:	61 08       	sbc	r6, r1
    3a40:	71 08       	sbc	r7, r1
    3a42:	61 14       	cp	r6, r1
    3a44:	71 04       	cpc	r7, r1
    3a46:	11 f6       	brne	.-124    	; 0x39cc <grow2+0x13e>
			}
		}
	r=a/10;
	delay_ms(delay);
	}
}
    3a48:	2a 96       	adiw	r28, 0x0a	; 10
    3a4a:	0f b6       	in	r0, 0x3f	; 63
    3a4c:	f8 94       	cli
    3a4e:	de bf       	out	0x3e, r29	; 62
    3a50:	0f be       	out	0x3f, r0	; 63
    3a52:	cd bf       	out	0x3d, r28	; 61
    3a54:	cf 91       	pop	r28
    3a56:	df 91       	pop	r29
    3a58:	1f 91       	pop	r17
    3a5a:	0f 91       	pop	r16
    3a5c:	ff 90       	pop	r15
    3a5e:	ef 90       	pop	r14
    3a60:	df 90       	pop	r13
    3a62:	cf 90       	pop	r12
    3a64:	bf 90       	pop	r11
    3a66:	af 90       	pop	r10
    3a68:	9f 90       	pop	r9
    3a6a:	8f 90       	pop	r8
    3a6c:	7f 90       	pop	r7
    3a6e:	6f 90       	pop	r6
    3a70:	5f 90       	pop	r5
    3a72:	4f 90       	pop	r4
    3a74:	3f 90       	pop	r3
    3a76:	2f 90       	pop	r2
    3a78:	08 95       	ret

00003a7a <effect_rings>:
		effect_noise(1,10,10);
		
}

void effect_rings(int direction, int iterations, int delay)
{
    3a7a:	df 93       	push	r29
    3a7c:	cf 93       	push	r28
    3a7e:	cd b7       	in	r28, 0x3d	; 61
    3a80:	de b7       	in	r29, 0x3e	; 62
    3a82:	cd 57       	subi	r28, 0x7D	; 125
    3a84:	d0 40       	sbci	r29, 0x00	; 0
    3a86:	0f b6       	in	r0, 0x3f	; 63
    3a88:	f8 94       	cli
    3a8a:	de bf       	out	0x3e, r29	; 62
    3a8c:	0f be       	out	0x3f, r0	; 63
    3a8e:	cd bf       	out	0x3d, r28	; 61
    3a90:	ba 01       	movw	r22, r20
	char Array[5][5][5];

	int i,j,k,rand;
	for (i=0;i<5;i++)
    3a92:	80 e0       	ldi	r24, 0x00	; 0
    3a94:	90 e0       	ldi	r25, 0x00	; 0
	for(i=0;i<128;i++)	
		effect_noise(1,10,10);
		
}

void effect_rings(int direction, int iterations, int delay)
    3a96:	a9 e1       	ldi	r26, 0x19	; 25
    3a98:	b0 e0       	ldi	r27, 0x00	; 0
    3a9a:	ae 01       	movw	r20, r28
    3a9c:	4f 5f       	subi	r20, 0xFF	; 255
    3a9e:	5f 4f       	sbci	r21, 0xFF	; 255
    3aa0:	0f c0       	rjmp	.+30     	; 0x3ac0 <effect_rings+0x46>
	int i,j,k,rand;
	for (i=0;i<5;i++)
		for (j=0;j<5;j++)
			for (k=0;k<5;k++)
				{
					Array[i][j][k]=0;
    3aa2:	10 82       	st	Z, r1
    3aa4:	11 82       	std	Z+1, r1	; 0x01
    3aa6:	12 82       	std	Z+2, r1	; 0x02
    3aa8:	13 82       	std	Z+3, r1	; 0x03
    3aaa:	14 82       	std	Z+4, r1	; 0x04
    3aac:	21 50       	subi	r18, 0x01	; 1
    3aae:	30 40       	sbci	r19, 0x00	; 0
    3ab0:	35 96       	adiw	r30, 0x05	; 5
{
	char Array[5][5][5];

	int i,j,k,rand;
	for (i=0;i<5;i++)
		for (j=0;j<5;j++)
    3ab2:	21 15       	cp	r18, r1
    3ab4:	31 05       	cpc	r19, r1
    3ab6:	a9 f7       	brne	.-22     	; 0x3aa2 <effect_rings+0x28>
void effect_rings(int direction, int iterations, int delay)
{
	char Array[5][5][5];

	int i,j,k,rand;
	for (i=0;i<5;i++)
    3ab8:	01 96       	adiw	r24, 0x01	; 1
    3aba:	85 30       	cpi	r24, 0x05	; 5
    3abc:	91 05       	cpc	r25, r1
    3abe:	61 f0       	breq	.+24     	; 0x3ad8 <effect_rings+0x5e>
	for(i=0;i<128;i++)	
		effect_noise(1,10,10);
		
}

void effect_rings(int direction, int iterations, int delay)
    3ac0:	8a 9f       	mul	r24, r26
    3ac2:	f0 01       	movw	r30, r0
    3ac4:	8b 9f       	mul	r24, r27
    3ac6:	f0 0d       	add	r31, r0
    3ac8:	9a 9f       	mul	r25, r26
    3aca:	f0 0d       	add	r31, r0
    3acc:	11 24       	eor	r1, r1
    3ace:	e4 0f       	add	r30, r20
    3ad0:	f5 1f       	adc	r31, r21
    3ad2:	25 e0       	ldi	r18, 0x05	; 5
    3ad4:	30 e0       	ldi	r19, 0x00	; 0
    3ad6:	e5 cf       	rjmp	.-54     	; 0x3aa2 <effect_rings+0x28>
			for (k=0;k<5;k++)
				{
					Array[i][j][k]=0;
				}
				
	grow2(Array,delay);
    3ad8:	ce 01       	movw	r24, r28
    3ada:	01 96       	adiw	r24, 0x01	; 1
    3adc:	0e 94 47 1c 	call	0x388e	; 0x388e <grow2>

}
    3ae0:	c3 58       	subi	r28, 0x83	; 131
    3ae2:	df 4f       	sbci	r29, 0xFF	; 255
    3ae4:	0f b6       	in	r0, 0x3f	; 63
    3ae6:	f8 94       	cli
    3ae8:	de bf       	out	0x3e, r29	; 62
    3aea:	0f be       	out	0x3f, r0	; 63
    3aec:	cd bf       	out	0x3d, r28	; 61
    3aee:	cf 91       	pop	r28
    3af0:	df 91       	pop	r29
    3af2:	08 95       	ret

00003af4 <shrink>:
	delay_ms(delay);
	}
}

void shrink(char Array[5][5][5], int delay)
{
    3af4:	2f 92       	push	r2
    3af6:	3f 92       	push	r3
    3af8:	4f 92       	push	r4
    3afa:	5f 92       	push	r5
    3afc:	6f 92       	push	r6
    3afe:	7f 92       	push	r7
    3b00:	8f 92       	push	r8
    3b02:	9f 92       	push	r9
    3b04:	af 92       	push	r10
    3b06:	bf 92       	push	r11
    3b08:	cf 92       	push	r12
    3b0a:	df 92       	push	r13
    3b0c:	ef 92       	push	r14
    3b0e:	ff 92       	push	r15
    3b10:	0f 93       	push	r16
    3b12:	1f 93       	push	r17
    3b14:	df 93       	push	r29
    3b16:	cf 93       	push	r28
    3b18:	cd b7       	in	r28, 0x3d	; 61
    3b1a:	de b7       	in	r29, 0x3e	; 62
    3b1c:	2e 97       	sbiw	r28, 0x0e	; 14
    3b1e:	0f b6       	in	r0, 0x3f	; 63
    3b20:	f8 94       	cli
    3b22:	de bf       	out	0x3e, r29	; 62
    3b24:	0f be       	out	0x3f, r0	; 63
    3b26:	cd bf       	out	0x3d, r28	; 61
    3b28:	8d 83       	std	Y+5, r24	; 0x05
    3b2a:	9e 83       	std	Y+6, r25	; 0x06
    3b2c:	7c 83       	std	Y+4, r23	; 0x04
    3b2e:	6b 83       	std	Y+3, r22	; 0x03
	double a,r=0;
	int i,j,k;
	for(a=45;a>=0;a--)
    3b30:	3f e2       	ldi	r19, 0x2F	; 47
    3b32:	63 2e       	mov	r6, r19
    3b34:	71 2c       	mov	r7, r1
    3b36:	55 24       	eor	r5, r5
    3b38:	44 24       	eor	r4, r4
    3b3a:	24 e3       	ldi	r18, 0x34	; 52
    3b3c:	32 2e       	mov	r3, r18
    3b3e:	92 e4       	ldi	r25, 0x42	; 66
    3b40:	29 2e       	mov	r2, r25
    3b42:	a0 c0       	rjmp	.+320    	; 0x3c84 <shrink+0x190>
	{
	r=a/10;
    3b44:	a2 01       	movw	r20, r4
    3b46:	91 01       	movw	r18, r2
    3b48:	65 2f       	mov	r22, r21
    3b4a:	74 2d       	mov	r23, r4
    3b4c:	83 2f       	mov	r24, r19
    3b4e:	92 2d       	mov	r25, r2
    3b50:	20 e0       	ldi	r18, 0x00	; 0
    3b52:	30 e0       	ldi	r19, 0x00	; 0
    3b54:	40 e2       	ldi	r20, 0x20	; 32
    3b56:	51 e4       	ldi	r21, 0x41	; 65
    3b58:	0e 94 b8 22 	call	0x4570	; 0x4570 <__divsf3>
    3b5c:	6f 83       	std	Y+7, r22	; 0x07
    3b5e:	78 87       	std	Y+8, r23	; 0x08
    3b60:	89 87       	std	Y+9, r24	; 0x09
    3b62:	9a 87       	std	Y+10, r25	; 0x0a
    3b64:	9d 81       	ldd	r25, Y+5	; 0x05
    3b66:	8e 81       	ldd	r24, Y+6	; 0x06
    3b68:	89 2e       	mov	r8, r25
    3b6a:	98 2e       	mov	r9, r24
	for (i=0;i<5;i++)
    3b6c:	cc 24       	eor	r12, r12
    3b6e:	dd 24       	eor	r13, r13
    3b70:	67 c0       	rjmp	.+206    	; 0x3c40 <shrink+0x14c>
	r=a/10;
	delay_ms(delay);
	}
}

void shrink(char Array[5][5][5], int delay)
    3b72:	c7 01       	movw	r24, r14
    3b74:	02 97       	sbiw	r24, 0x02	; 2
	{
	for (j=0;j<5;j++)
	{
	for (k=0;k<5;k++)
		{
		if(sqrt((i-2)*(i-2)+(j-2)*(j-2)+(k-2)*(k-2))<r)
    3b76:	88 9f       	mul	r24, r24
    3b78:	b0 01       	movw	r22, r0
    3b7a:	89 9f       	mul	r24, r25
    3b7c:	70 0d       	add	r23, r0
    3b7e:	98 9f       	mul	r25, r24
    3b80:	70 0d       	add	r23, r0
    3b82:	11 24       	eor	r1, r1
    3b84:	6a 0d       	add	r22, r10
    3b86:	7b 1d       	adc	r23, r11
    3b88:	88 27       	eor	r24, r24
    3b8a:	77 fd       	sbrc	r23, 7
    3b8c:	80 95       	com	r24
    3b8e:	98 2f       	mov	r25, r24
    3b90:	0e 94 96 23 	call	0x472c	; 0x472c <__floatsisf>
    3b94:	0e 94 68 2b 	call	0x56d0	; 0x56d0 <sqrt>
    3b98:	ef 81       	ldd	r30, Y+7	; 0x07
    3b9a:	f8 85       	ldd	r31, Y+8	; 0x08
    3b9c:	29 85       	ldd	r18, Y+9	; 0x09
    3b9e:	2b 87       	std	Y+11, r18	; 0x0b
    3ba0:	3a 85       	ldd	r19, Y+10	; 0x0a
    3ba2:	3c 87       	std	Y+12, r19	; 0x0c
    3ba4:	9f 01       	movw	r18, r30
    3ba6:	4b 85       	ldd	r20, Y+11	; 0x0b
    3ba8:	5c 85       	ldd	r21, Y+12	; 0x0c
    3baa:	0e 94 66 23 	call	0x46cc	; 0x46cc <__ltsf2>
    3bae:	87 fd       	sbrc	r24, 7
    3bb0:	04 c0       	rjmp	.+8      	; 0x3bba <shrink+0xc6>
			setLED(i,j,k);
		else
			if(Array[i][j][k]==1)
    3bb2:	d8 01       	movw	r26, r16
    3bb4:	8c 91       	ld	r24, X
    3bb6:	81 30       	cpi	r24, 0x01	; 1
    3bb8:	39 f4       	brne	.+14     	; 0x3bc8 <shrink+0xd4>
				setLED(i,j,k);
    3bba:	c6 01       	movw	r24, r12
    3bbc:	6d 85       	ldd	r22, Y+13	; 0x0d
    3bbe:	7e 85       	ldd	r23, Y+14	; 0x0e
    3bc0:	a7 01       	movw	r20, r14
    3bc2:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
    3bc6:	06 c0       	rjmp	.+12     	; 0x3bd4 <shrink+0xe0>
			else
				clrLED(i,j,k);
    3bc8:	c6 01       	movw	r24, r12
    3bca:	6d 85       	ldd	r22, Y+13	; 0x0d
    3bcc:	7e 85       	ldd	r23, Y+14	; 0x0e
    3bce:	a7 01       	movw	r20, r14
    3bd0:	0e 94 16 03 	call	0x62c	; 0x62c <clrLED>
	r=a/10;
	for (i=0;i<5;i++)
	{
	for (j=0;j<5;j++)
	{
	for (k=0;k<5;k++)
    3bd4:	08 94       	sec
    3bd6:	e1 1c       	adc	r14, r1
    3bd8:	f1 1c       	adc	r15, r1
    3bda:	0f 5f       	subi	r16, 0xFF	; 255
    3bdc:	1f 4f       	sbci	r17, 0xFF	; 255
    3bde:	b5 e0       	ldi	r27, 0x05	; 5
    3be0:	eb 16       	cp	r14, r27
    3be2:	f1 04       	cpc	r15, r1
    3be4:	31 f6       	brne	.-116    	; 0x3b72 <shrink+0x7e>
    3be6:	2d 85       	ldd	r18, Y+13	; 0x0d
    3be8:	3e 85       	ldd	r19, Y+14	; 0x0e
	for(a=45;a>=0;a--)
	{
	r=a/10;
	for (i=0;i<5;i++)
	{
	for (j=0;j<5;j++)
    3bea:	2f 5f       	subi	r18, 0xFF	; 255
    3bec:	3f 4f       	sbci	r19, 0xFF	; 255
    3bee:	25 30       	cpi	r18, 0x05	; 5
    3bf0:	31 05       	cpc	r19, r1
    3bf2:	d9 f0       	breq	.+54     	; 0x3c2a <shrink+0x136>
	r=a/10;
	delay_ms(delay);
	}
}

void shrink(char Array[5][5][5], int delay)
    3bf4:	c9 01       	movw	r24, r18
    3bf6:	02 97       	sbiw	r24, 0x02	; 2
	{
	for (j=0;j<5;j++)
	{
	for (k=0;k<5;k++)
		{
		if(sqrt((i-2)*(i-2)+(j-2)*(j-2)+(k-2)*(k-2))<r)
    3bf8:	88 9f       	mul	r24, r24
    3bfa:	50 01       	movw	r10, r0
    3bfc:	89 9f       	mul	r24, r25
    3bfe:	b0 0c       	add	r11, r0
    3c00:	98 9f       	mul	r25, r24
    3c02:	b0 0c       	add	r11, r0
    3c04:	11 24       	eor	r1, r1
    3c06:	e9 81       	ldd	r30, Y+1	; 0x01
    3c08:	fa 81       	ldd	r31, Y+2	; 0x02
    3c0a:	ae 0e       	add	r10, r30
    3c0c:	bf 1e       	adc	r11, r31
	r=a/10;
	delay_ms(delay);
	}
}

void shrink(char Array[5][5][5], int delay)
    3c0e:	89 01       	movw	r16, r18
    3c10:	00 0f       	add	r16, r16
    3c12:	11 1f       	adc	r17, r17
    3c14:	00 0f       	add	r16, r16
    3c16:	11 1f       	adc	r17, r17
    3c18:	02 0f       	add	r16, r18
    3c1a:	13 1f       	adc	r17, r19
    3c1c:	08 0d       	add	r16, r8
    3c1e:	19 1d       	adc	r17, r9
    3c20:	ee 24       	eor	r14, r14
    3c22:	ff 24       	eor	r15, r15
    3c24:	3e 87       	std	Y+14, r19	; 0x0e
    3c26:	2d 87       	std	Y+13, r18	; 0x0d
    3c28:	a4 cf       	rjmp	.-184    	; 0x3b72 <shrink+0x7e>
	double a,r=0;
	int i,j,k;
	for(a=45;a>=0;a--)
	{
	r=a/10;
	for (i=0;i<5;i++)
    3c2a:	08 94       	sec
    3c2c:	c1 1c       	adc	r12, r1
    3c2e:	d1 1c       	adc	r13, r1
    3c30:	29 e1       	ldi	r18, 0x19	; 25
    3c32:	30 e0       	ldi	r19, 0x00	; 0
    3c34:	82 0e       	add	r8, r18
    3c36:	93 1e       	adc	r9, r19
    3c38:	35 e0       	ldi	r19, 0x05	; 5
    3c3a:	c3 16       	cp	r12, r19
    3c3c:	d1 04       	cpc	r13, r1
    3c3e:	71 f0       	breq	.+28     	; 0x3c5c <shrink+0x168>
	r=a/10;
	delay_ms(delay);
	}
}

void shrink(char Array[5][5][5], int delay)
    3c40:	c6 01       	movw	r24, r12
    3c42:	02 97       	sbiw	r24, 0x02	; 2
	{
	for (j=0;j<5;j++)
	{
	for (k=0;k<5;k++)
		{
		if(sqrt((i-2)*(i-2)+(j-2)*(j-2)+(k-2)*(k-2))<r)
    3c44:	88 9f       	mul	r24, r24
    3c46:	d0 01       	movw	r26, r0
    3c48:	89 9f       	mul	r24, r25
    3c4a:	b0 0d       	add	r27, r0
    3c4c:	98 9f       	mul	r25, r24
    3c4e:	b0 0d       	add	r27, r0
    3c50:	11 24       	eor	r1, r1
    3c52:	ba 83       	std	Y+2, r27	; 0x02
    3c54:	a9 83       	std	Y+1, r26	; 0x01
    3c56:	20 e0       	ldi	r18, 0x00	; 0
    3c58:	30 e0       	ldi	r19, 0x00	; 0
    3c5a:	cc cf       	rjmp	.-104    	; 0x3bf4 <shrink+0x100>
			else
				clrLED(i,j,k);
		}
	}
	}
	delay_ms(delay);
    3c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    3c60:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>

void shrink(char Array[5][5][5], int delay)
{
	double a,r=0;
	int i,j,k;
	for(a=45;a>=0;a--)
    3c64:	a2 01       	movw	r20, r4
    3c66:	91 01       	movw	r18, r2
    3c68:	65 2f       	mov	r22, r21
    3c6a:	74 2d       	mov	r23, r4
    3c6c:	83 2f       	mov	r24, r19
    3c6e:	92 2d       	mov	r25, r2
    3c70:	20 e0       	ldi	r18, 0x00	; 0
    3c72:	30 e0       	ldi	r19, 0x00	; 0
    3c74:	40 e8       	ldi	r20, 0x80	; 128
    3c76:	5f e3       	ldi	r21, 0x3F	; 63
    3c78:	0e 94 87 22 	call	0x450e	; 0x450e <__subsf3>
    3c7c:	56 2e       	mov	r5, r22
    3c7e:	47 2e       	mov	r4, r23
    3c80:	38 2e       	mov	r3, r24
    3c82:	29 2e       	mov	r2, r25
    3c84:	08 94       	sec
    3c86:	61 08       	sbc	r6, r1
    3c88:	71 08       	sbc	r7, r1
    3c8a:	61 14       	cp	r6, r1
    3c8c:	71 04       	cpc	r7, r1
    3c8e:	09 f0       	breq	.+2      	; 0x3c92 <shrink+0x19e>
    3c90:	59 cf       	rjmp	.-334    	; 0x3b44 <shrink+0x50>
	}
	}
	delay_ms(delay);
	}	

}
    3c92:	2e 96       	adiw	r28, 0x0e	; 14
    3c94:	0f b6       	in	r0, 0x3f	; 63
    3c96:	f8 94       	cli
    3c98:	de bf       	out	0x3e, r29	; 62
    3c9a:	0f be       	out	0x3f, r0	; 63
    3c9c:	cd bf       	out	0x3d, r28	; 61
    3c9e:	cf 91       	pop	r28
    3ca0:	df 91       	pop	r29
    3ca2:	1f 91       	pop	r17
    3ca4:	0f 91       	pop	r16
    3ca6:	ff 90       	pop	r15
    3ca8:	ef 90       	pop	r14
    3caa:	df 90       	pop	r13
    3cac:	cf 90       	pop	r12
    3cae:	bf 90       	pop	r11
    3cb0:	af 90       	pop	r10
    3cb2:	9f 90       	pop	r9
    3cb4:	8f 90       	pop	r8
    3cb6:	7f 90       	pop	r7
    3cb8:	6f 90       	pop	r6
    3cba:	5f 90       	pop	r5
    3cbc:	4f 90       	pop	r4
    3cbe:	3f 90       	pop	r3
    3cc0:	2f 90       	pop	r2
    3cc2:	08 95       	ret

00003cc4 <effect_explosion>:

}

				
void effect_explosion(int direction, int iterations, int delay)
{
    3cc4:	2f 92       	push	r2
    3cc6:	3f 92       	push	r3
    3cc8:	4f 92       	push	r4
    3cca:	5f 92       	push	r5
    3ccc:	6f 92       	push	r6
    3cce:	7f 92       	push	r7
    3cd0:	8f 92       	push	r8
    3cd2:	9f 92       	push	r9
    3cd4:	af 92       	push	r10
    3cd6:	bf 92       	push	r11
    3cd8:	cf 92       	push	r12
    3cda:	df 92       	push	r13
    3cdc:	ef 92       	push	r14
    3cde:	ff 92       	push	r15
    3ce0:	0f 93       	push	r16
    3ce2:	1f 93       	push	r17
    3ce4:	df 93       	push	r29
    3ce6:	cf 93       	push	r28
    3ce8:	cd b7       	in	r28, 0x3d	; 61
    3cea:	de b7       	in	r29, 0x3e	; 62
    3cec:	cd 57       	subi	r28, 0x7D	; 125
    3cee:	d0 40       	sbci	r29, 0x00	; 0
    3cf0:	0f b6       	in	r0, 0x3f	; 63
    3cf2:	f8 94       	cli
    3cf4:	de bf       	out	0x3e, r29	; 62
    3cf6:	0f be       	out	0x3f, r0	; 63
    3cf8:	cd bf       	out	0x3d, r28	; 61
    3cfa:	5a 01       	movw	r10, r20
	char Array[5][5][5];

	int i,j,k,rand;
	for (i=0;i<5;i++)
    3cfc:	80 e0       	ldi	r24, 0x00	; 0
    3cfe:	90 e0       	ldi	r25, 0x00	; 0
	grow2(Array,delay);

}

				
void effect_explosion(int direction, int iterations, int delay)
    3d00:	69 e1       	ldi	r22, 0x19	; 25
    3d02:	70 e0       	ldi	r23, 0x00	; 0
    3d04:	ae 01       	movw	r20, r28
    3d06:	4f 5f       	subi	r20, 0xFF	; 255
    3d08:	5f 4f       	sbci	r21, 0xFF	; 255
    3d0a:	0f c0       	rjmp	.+30     	; 0x3d2a <effect_explosion+0x66>
	int i,j,k,rand;
	for (i=0;i<5;i++)
		for (j=0;j<5;j++)
			for (k=0;k<5;k++)
				{
					Array[i][j][k]=0;
    3d0c:	10 82       	st	Z, r1
    3d0e:	11 82       	std	Z+1, r1	; 0x01
    3d10:	12 82       	std	Z+2, r1	; 0x02
    3d12:	13 82       	std	Z+3, r1	; 0x03
    3d14:	14 82       	std	Z+4, r1	; 0x04
    3d16:	21 50       	subi	r18, 0x01	; 1
    3d18:	30 40       	sbci	r19, 0x00	; 0
    3d1a:	35 96       	adiw	r30, 0x05	; 5
{
	char Array[5][5][5];

	int i,j,k,rand;
	for (i=0;i<5;i++)
		for (j=0;j<5;j++)
    3d1c:	21 15       	cp	r18, r1
    3d1e:	31 05       	cpc	r19, r1
    3d20:	a9 f7       	brne	.-22     	; 0x3d0c <effect_explosion+0x48>
void effect_explosion(int direction, int iterations, int delay)
{
	char Array[5][5][5];

	int i,j,k,rand;
	for (i=0;i<5;i++)
    3d22:	01 96       	adiw	r24, 0x01	; 1
    3d24:	85 30       	cpi	r24, 0x05	; 5
    3d26:	91 05       	cpc	r25, r1
    3d28:	61 f0       	breq	.+24     	; 0x3d42 <effect_explosion+0x7e>
	grow2(Array,delay);

}

				
void effect_explosion(int direction, int iterations, int delay)
    3d2a:	86 9f       	mul	r24, r22
    3d2c:	f0 01       	movw	r30, r0
    3d2e:	87 9f       	mul	r24, r23
    3d30:	f0 0d       	add	r31, r0
    3d32:	96 9f       	mul	r25, r22
    3d34:	f0 0d       	add	r31, r0
    3d36:	11 24       	eor	r1, r1
    3d38:	e4 0f       	add	r30, r20
    3d3a:	f5 1f       	adc	r31, r21
    3d3c:	25 e0       	ldi	r18, 0x05	; 5
    3d3e:	30 e0       	ldi	r19, 0x00	; 0
    3d40:	e5 cf       	rjmp	.-54     	; 0x3d0c <effect_explosion+0x48>
			for (k=0;k<5;k++)
				{
					Array[i][j][k]=0;
				}
				
	grow(Array,delay);
    3d42:	8e 01       	movw	r16, r28
    3d44:	0f 5f       	subi	r16, 0xFF	; 255
    3d46:	1f 4f       	sbci	r17, 0xFF	; 255
    3d48:	c8 01       	movw	r24, r16
    3d4a:	b5 01       	movw	r22, r10
    3d4c:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <grow>

	
	for (i=0;i<5;i++)
    3d50:	cc 24       	eor	r12, r12
    3d52:	dd 24       	eor	r13, r13
		for (j=0;j<5;j++)
			for (k=0;k<5;k++)
				{
				rand=random()%3;
    3d54:	63 e0       	ldi	r22, 0x03	; 3
    3d56:	46 2e       	mov	r4, r22
    3d58:	51 2c       	mov	r5, r1
    3d5a:	61 2c       	mov	r6, r1
    3d5c:	71 2c       	mov	r7, r1
    3d5e:	45 01       	movw	r8, r10
    3d60:	39 c0       	rjmp	.+114    	; 0x3dd4 <effect_explosion+0x110>
    3d62:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <random>
    3d66:	a3 01       	movw	r20, r6
    3d68:	92 01       	movw	r18, r4
    3d6a:	0e 94 39 29 	call	0x5272	; 0x5272 <__divmodsi4>
				if(rand==0)
    3d6e:	61 15       	cp	r22, r1
    3d70:	71 05       	cpc	r23, r1
    3d72:	21 f4       	brne	.+8      	; 0x3d7c <effect_explosion+0xb8>
					Array[i][j][k]=1;
    3d74:	81 e0       	ldi	r24, 0x01	; 1
    3d76:	f8 01       	movw	r30, r16
    3d78:	80 83       	st	Z, r24
    3d7a:	02 c0       	rjmp	.+4      	; 0x3d80 <effect_explosion+0xbc>
				else
					Array[i][j][k]=0;
    3d7c:	f8 01       	movw	r30, r16
    3d7e:	10 82       	st	Z, r1
    3d80:	08 94       	sec
    3d82:	c1 08       	sbc	r12, r1
    3d84:	d1 08       	sbc	r13, r1
    3d86:	0f 5f       	subi	r16, 0xFF	; 255
    3d88:	1f 4f       	sbci	r17, 0xFF	; 255
	grow(Array,delay);

	
	for (i=0;i<5;i++)
		for (j=0;j<5;j++)
			for (k=0;k<5;k++)
    3d8a:	c1 14       	cp	r12, r1
    3d8c:	d1 04       	cpc	r13, r1
    3d8e:	49 f7       	brne	.-46     	; 0x3d62 <effect_explosion+0x9e>
				
	grow(Array,delay);

	
	for (i=0;i<5;i++)
		for (j=0;j<5;j++)
    3d90:	08 94       	sec
    3d92:	e1 1c       	adc	r14, r1
    3d94:	f1 1c       	adc	r15, r1
    3d96:	f5 e0       	ldi	r31, 0x05	; 5
    3d98:	ef 16       	cp	r14, r31
    3d9a:	f1 04       	cpc	r15, r1
    3d9c:	99 f0       	breq	.+38     	; 0x3dc4 <effect_explosion+0x100>
	grow2(Array,delay);

}

				
void effect_explosion(int direction, int iterations, int delay)
    3d9e:	87 01       	movw	r16, r14
    3da0:	00 0f       	add	r16, r16
    3da2:	11 1f       	adc	r17, r17
    3da4:	00 0f       	add	r16, r16
    3da6:	11 1f       	adc	r17, r17
    3da8:	0e 0d       	add	r16, r14
    3daa:	1f 1d       	adc	r17, r15
    3dac:	02 0d       	add	r16, r2
    3dae:	13 1d       	adc	r17, r3
    3db0:	81 e0       	ldi	r24, 0x01	; 1
    3db2:	90 e0       	ldi	r25, 0x00	; 0
    3db4:	8c 0f       	add	r24, r28
    3db6:	9d 1f       	adc	r25, r29
    3db8:	08 0f       	add	r16, r24
    3dba:	19 1f       	adc	r17, r25
    3dbc:	45 e0       	ldi	r20, 0x05	; 5
    3dbe:	c4 2e       	mov	r12, r20
    3dc0:	d1 2c       	mov	r13, r1
    3dc2:	cf cf       	rjmp	.-98     	; 0x3d62 <effect_explosion+0x9e>
    3dc4:	65 01       	movw	r12, r10
				}
				
	grow(Array,delay);

	
	for (i=0;i<5;i++)
    3dc6:	08 94       	sec
    3dc8:	c1 1c       	adc	r12, r1
    3dca:	d1 1c       	adc	r13, r1
    3dcc:	95 e0       	ldi	r25, 0x05	; 5
    3dce:	c9 16       	cp	r12, r25
    3dd0:	d1 04       	cpc	r13, r1
    3dd2:	69 f0       	breq	.+26     	; 0x3dee <effect_explosion+0x12a>
	grow2(Array,delay);

}

				
void effect_explosion(int direction, int iterations, int delay)
    3dd4:	ee 24       	eor	r14, r14
    3dd6:	ff 24       	eor	r15, r15
    3dd8:	e9 e1       	ldi	r30, 0x19	; 25
    3dda:	f0 e0       	ldi	r31, 0x00	; 0
    3ddc:	ce 9e       	mul	r12, r30
    3dde:	10 01       	movw	r2, r0
    3de0:	cf 9e       	mul	r12, r31
    3de2:	30 0c       	add	r3, r0
    3de4:	de 9e       	mul	r13, r30
    3de6:	30 0c       	add	r3, r0
    3de8:	11 24       	eor	r1, r1
    3dea:	56 01       	movw	r10, r12
    3dec:	d8 cf       	rjmp	.-80     	; 0x3d9e <effect_explosion+0xda>
    3dee:	54 01       	movw	r10, r8
				else
					Array[i][j][k]=0;
				}

	
	shrink(Array,delay);
    3df0:	8e 01       	movw	r16, r28
    3df2:	0f 5f       	subi	r16, 0xFF	; 255
    3df4:	1f 4f       	sbci	r17, 0xFF	; 255
    3df6:	c8 01       	movw	r24, r16
    3df8:	b4 01       	movw	r22, r8
    3dfa:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <shrink>
	grow(Array,delay);
    3dfe:	c8 01       	movw	r24, r16
    3e00:	b4 01       	movw	r22, r8
    3e02:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <grow>
	
		
	for (i=0;i<5;i++)
    3e06:	80 e0       	ldi	r24, 0x00	; 0
    3e08:	90 e0       	ldi	r25, 0x00	; 0
	grow2(Array,delay);

}

				
void effect_explosion(int direction, int iterations, int delay)
    3e0a:	49 e1       	ldi	r20, 0x19	; 25
    3e0c:	50 e0       	ldi	r21, 0x00	; 0
    3e0e:	0f c0       	rjmp	.+30     	; 0x3e2e <effect_explosion+0x16a>
		
	for (i=0;i<5;i++)
		for (j=0;j<5;j++)
			for (k=0;k<5;k++)
				{
					Array[i][j][k]=0;
    3e10:	10 82       	st	Z, r1
    3e12:	11 82       	std	Z+1, r1	; 0x01
    3e14:	12 82       	std	Z+2, r1	; 0x02
    3e16:	13 82       	std	Z+3, r1	; 0x03
    3e18:	14 82       	std	Z+4, r1	; 0x04
    3e1a:	21 50       	subi	r18, 0x01	; 1
    3e1c:	30 40       	sbci	r19, 0x00	; 0
    3e1e:	35 96       	adiw	r30, 0x05	; 5
	shrink(Array,delay);
	grow(Array,delay);
	
		
	for (i=0;i<5;i++)
		for (j=0;j<5;j++)
    3e20:	21 15       	cp	r18, r1
    3e22:	31 05       	cpc	r19, r1
    3e24:	a9 f7       	brne	.-22     	; 0x3e10 <effect_explosion+0x14c>
	
	shrink(Array,delay);
	grow(Array,delay);
	
		
	for (i=0;i<5;i++)
    3e26:	01 96       	adiw	r24, 0x01	; 1
    3e28:	85 30       	cpi	r24, 0x05	; 5
    3e2a:	91 05       	cpc	r25, r1
    3e2c:	61 f0       	breq	.+24     	; 0x3e46 <effect_explosion+0x182>
	grow2(Array,delay);

}

				
void effect_explosion(int direction, int iterations, int delay)
    3e2e:	84 9f       	mul	r24, r20
    3e30:	f0 01       	movw	r30, r0
    3e32:	85 9f       	mul	r24, r21
    3e34:	f0 0d       	add	r31, r0
    3e36:	94 9f       	mul	r25, r20
    3e38:	f0 0d       	add	r31, r0
    3e3a:	11 24       	eor	r1, r1
    3e3c:	e0 0f       	add	r30, r16
    3e3e:	f1 1f       	adc	r31, r17
    3e40:	25 e0       	ldi	r18, 0x05	; 5
    3e42:	30 e0       	ldi	r19, 0x00	; 0
    3e44:	e5 cf       	rjmp	.-54     	; 0x3e10 <effect_explosion+0x14c>
			for (k=0;k<5;k++)
				{
					Array[i][j][k]=0;
				}
				
	shrink(Array,delay);
    3e46:	ce 01       	movw	r24, r28
    3e48:	01 96       	adiw	r24, 0x01	; 1
    3e4a:	b5 01       	movw	r22, r10
    3e4c:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <shrink>


}
    3e50:	c3 58       	subi	r28, 0x83	; 131
    3e52:	df 4f       	sbci	r29, 0xFF	; 255
    3e54:	0f b6       	in	r0, 0x3f	; 63
    3e56:	f8 94       	cli
    3e58:	de bf       	out	0x3e, r29	; 62
    3e5a:	0f be       	out	0x3f, r0	; 63
    3e5c:	cd bf       	out	0x3d, r28	; 61
    3e5e:	cf 91       	pop	r28
    3e60:	df 91       	pop	r29
    3e62:	1f 91       	pop	r17
    3e64:	0f 91       	pop	r16
    3e66:	ff 90       	pop	r15
    3e68:	ef 90       	pop	r14
    3e6a:	df 90       	pop	r13
    3e6c:	cf 90       	pop	r12
    3e6e:	bf 90       	pop	r11
    3e70:	af 90       	pop	r10
    3e72:	9f 90       	pop	r9
    3e74:	8f 90       	pop	r8
    3e76:	7f 90       	pop	r7
    3e78:	6f 90       	pop	r6
    3e7a:	5f 90       	pop	r5
    3e7c:	4f 90       	pop	r4
    3e7e:	3f 90       	pop	r3
    3e80:	2f 90       	pop	r2
    3e82:	08 95       	ret

00003e84 <dim>:
		bla--;
		if(bla==0) up=1;
		}
}

void dim(int intensity){
    3e84:	ef 92       	push	r14
    3e86:	ff 92       	push	r15
    3e88:	0f 93       	push	r16
    3e8a:	1f 93       	push	r17
    3e8c:	cf 93       	push	r28
    3e8e:	df 93       	push	r29
    3e90:	7c 01       	movw	r14, r24
    3e92:	ca e0       	ldi	r28, 0x0A	; 10
    3e94:	d0 e0       	ldi	r29, 0x00	; 0
for(int i=0;i<10;i++){
	intensity = intensity%10;
    3e96:	0a e0       	ldi	r16, 0x0A	; 10
    3e98:	10 e0       	ldi	r17, 0x00	; 0
    3e9a:	c7 01       	movw	r24, r14
    3e9c:	b8 01       	movw	r22, r16
    3e9e:	0e 94 26 29 	call	0x524c	; 0x524c <__divmodhi4>
    3ea2:	7c 01       	movw	r14, r24
	fill(0x1f);
    3ea4:	8f e1       	ldi	r24, 0x1F	; 31
    3ea6:	0e 94 16 06 	call	0xc2c	; 0xc2c <fill>
	delay_ms(intensity);
    3eaa:	c7 01       	movw	r24, r14
    3eac:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
	fill(0x00);
    3eb0:	80 e0       	ldi	r24, 0x00	; 0
    3eb2:	0e 94 16 06 	call	0xc2c	; 0xc2c <fill>
	delay_ms(10-intensity);
    3eb6:	c8 01       	movw	r24, r16
    3eb8:	8e 19       	sub	r24, r14
    3eba:	9f 09       	sbc	r25, r15
    3ebc:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
    3ec0:	21 97       	sbiw	r28, 0x01	; 1
		if(bla==0) up=1;
		}
}

void dim(int intensity){
for(int i=0;i<10;i++){
    3ec2:	59 f7       	brne	.-42     	; 0x3e9a <dim+0x16>
	fill(0x1f);
	delay_ms(intensity);
	fill(0x00);
	delay_ms(10-intensity);
	}
}
    3ec4:	df 91       	pop	r29
    3ec6:	cf 91       	pop	r28
    3ec8:	1f 91       	pop	r17
    3eca:	0f 91       	pop	r16
    3ecc:	ff 90       	pop	r15
    3ece:	ef 90       	pop	r14
    3ed0:	08 95       	ret

00003ed2 <effect_blink>:

int bla=0;
int up=1;
void effect_blink(int direction, int iterations, int delay)
{
	dim(bla);
    3ed2:	80 91 92 01 	lds	r24, 0x0192
    3ed6:	90 91 93 01 	lds	r25, 0x0193
    3eda:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <dim>
	if(up==1) 
    3ede:	80 91 7f 00 	lds	r24, 0x007F
    3ee2:	90 91 80 00 	lds	r25, 0x0080
    3ee6:	81 30       	cpi	r24, 0x01	; 1
    3ee8:	91 05       	cpc	r25, r1
    3eea:	81 f4       	brne	.+32     	; 0x3f0c <effect_blink+0x3a>
		{
		bla++;
    3eec:	80 91 92 01 	lds	r24, 0x0192
    3ef0:	90 91 93 01 	lds	r25, 0x0193
    3ef4:	01 96       	adiw	r24, 0x01	; 1
    3ef6:	90 93 93 01 	sts	0x0193, r25
    3efa:	80 93 92 01 	sts	0x0192, r24
		if(bla==9) up=0;
    3efe:	89 30       	cpi	r24, 0x09	; 9
    3f00:	91 05       	cpc	r25, r1
    3f02:	21 f4       	brne	.+8      	; 0x3f0c <effect_blink+0x3a>
    3f04:	10 92 80 00 	sts	0x0080, r1
    3f08:	10 92 7f 00 	sts	0x007F, r1
		}
	if(up==0) 
    3f0c:	80 91 7f 00 	lds	r24, 0x007F
    3f10:	90 91 80 00 	lds	r25, 0x0080
    3f14:	00 97       	sbiw	r24, 0x00	; 0
    3f16:	89 f4       	brne	.+34     	; 0x3f3a <effect_blink+0x68>
		{
		bla--;
    3f18:	80 91 92 01 	lds	r24, 0x0192
    3f1c:	90 91 93 01 	lds	r25, 0x0193
    3f20:	01 97       	sbiw	r24, 0x01	; 1
    3f22:	90 93 93 01 	sts	0x0193, r25
    3f26:	80 93 92 01 	sts	0x0192, r24
		if(bla==0) up=1;
    3f2a:	00 97       	sbiw	r24, 0x00	; 0
    3f2c:	31 f4       	brne	.+12     	; 0x3f3a <effect_blink+0x68>
    3f2e:	81 e0       	ldi	r24, 0x01	; 1
    3f30:	90 e0       	ldi	r25, 0x00	; 0
    3f32:	90 93 80 00 	sts	0x0080, r25
    3f36:	80 93 7f 00 	sts	0x007F, r24
    3f3a:	08 95       	ret

00003f3c <effect_snow>:
	delay_ms(10-intensity);
	}
}

void effect_snow(int direction, int iterations, int delay)
{
    3f3c:	af 92       	push	r10
    3f3e:	bf 92       	push	r11
    3f40:	cf 92       	push	r12
    3f42:	df 92       	push	r13
    3f44:	ef 92       	push	r14
    3f46:	ff 92       	push	r15
    3f48:	0f 93       	push	r16
    3f4a:	1f 93       	push	r17
    3f4c:	cf 93       	push	r28
    3f4e:	df 93       	push	r29
    3f50:	5a 01       	movw	r10, r20
	int i,j,k;
	int a;
	
	for (i=0;i<5;i++)
    3f52:	00 e0       	ldi	r16, 0x00	; 0
    3f54:	10 e0       	ldi	r17, 0x00	; 0
    3f56:	27 c0       	rjmp	.+78     	; 0x3fa6 <effect_snow+0x6a>
	{
	for (j=0;j<5;j++)
	{
	for (k=0;k<4;k++)
    3f58:	76 01       	movw	r14, r12
		{
			if(getLED(i,j,k+1))
    3f5a:	67 01       	movw	r12, r14
    3f5c:	08 94       	sec
    3f5e:	c1 1c       	adc	r12, r1
    3f60:	d1 1c       	adc	r13, r1
    3f62:	c8 01       	movw	r24, r16
    3f64:	be 01       	movw	r22, r28
    3f66:	a6 01       	movw	r20, r12
    3f68:	0e 94 ef 02 	call	0x5de	; 0x5de <getLED>
    3f6c:	88 23       	and	r24, r24
    3f6e:	31 f0       	breq	.+12     	; 0x3f7c <effect_snow+0x40>
				setLED(i,j,k);
    3f70:	c8 01       	movw	r24, r16
    3f72:	be 01       	movw	r22, r28
    3f74:	a7 01       	movw	r20, r14
    3f76:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
    3f7a:	05 c0       	rjmp	.+10     	; 0x3f86 <effect_snow+0x4a>
			else
				clrLED(i,j,k);
    3f7c:	c8 01       	movw	r24, r16
    3f7e:	be 01       	movw	r22, r28
    3f80:	a7 01       	movw	r20, r14
    3f82:	0e 94 16 03 	call	0x62c	; 0x62c <clrLED>
	
	for (i=0;i<5;i++)
	{
	for (j=0;j<5;j++)
	{
	for (k=0;k<4;k++)
    3f86:	84 e0       	ldi	r24, 0x04	; 4
    3f88:	c8 16       	cp	r12, r24
    3f8a:	d1 04       	cpc	r13, r1
    3f8c:	29 f7       	brne	.-54     	; 0x3f58 <effect_snow+0x1c>
	int i,j,k;
	int a;
	
	for (i=0;i<5;i++)
	{
	for (j=0;j<5;j++)
    3f8e:	21 96       	adiw	r28, 0x01	; 1
    3f90:	c5 30       	cpi	r28, 0x05	; 5
    3f92:	d1 05       	cpc	r29, r1
    3f94:	19 f0       	breq	.+6      	; 0x3f9c <effect_snow+0x60>
	{
	for (k=0;k<4;k++)
    3f96:	ee 24       	eor	r14, r14
    3f98:	ff 24       	eor	r15, r15
    3f9a:	df cf       	rjmp	.-66     	; 0x3f5a <effect_snow+0x1e>
void effect_snow(int direction, int iterations, int delay)
{
	int i,j,k;
	int a;
	
	for (i=0;i<5;i++)
    3f9c:	0f 5f       	subi	r16, 0xFF	; 255
    3f9e:	1f 4f       	sbci	r17, 0xFF	; 255
    3fa0:	05 30       	cpi	r16, 0x05	; 5
    3fa2:	11 05       	cpc	r17, r1
    3fa4:	19 f1       	breq	.+70     	; 0x3fec <effect_snow+0xb0>
	{
	for (j=0;j<5;j++)
	{
	for (k=0;k<4;k++)
    3fa6:	c0 e0       	ldi	r28, 0x00	; 0
    3fa8:	d0 e0       	ldi	r29, 0x00	; 0
    3faa:	f5 cf       	rjmp	.-22     	; 0x3f96 <effect_snow+0x5a>
	}
	
	}
		for (i=0;i<5;i++)
		for (j=0;j<5;j++){
				a=random()%8;
    3fac:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <random>
    3fb0:	a7 01       	movw	r20, r14
    3fb2:	96 01       	movw	r18, r12
    3fb4:	0e 94 39 29 	call	0x5272	; 0x5272 <__divmodsi4>
				if(a==0)
    3fb8:	61 15       	cp	r22, r1
    3fba:	71 05       	cpc	r23, r1
    3fbc:	39 f4       	brne	.+14     	; 0x3fcc <effect_snow+0x90>
					setLED(i,j,4);
    3fbe:	c8 01       	movw	r24, r16
    3fc0:	be 01       	movw	r22, r28
    3fc2:	44 e0       	ldi	r20, 0x04	; 4
    3fc4:	50 e0       	ldi	r21, 0x00	; 0
    3fc6:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
    3fca:	06 c0       	rjmp	.+12     	; 0x3fd8 <effect_snow+0x9c>
				else
					clrLED(i,j,4);
    3fcc:	c8 01       	movw	r24, r16
    3fce:	be 01       	movw	r22, r28
    3fd0:	44 e0       	ldi	r20, 0x04	; 4
    3fd2:	50 e0       	ldi	r21, 0x00	; 0
    3fd4:	0e 94 16 03 	call	0x62c	; 0x62c <clrLED>
		}
	}
	
	}
		for (i=0;i<5;i++)
		for (j=0;j<5;j++){
    3fd8:	21 96       	adiw	r28, 0x01	; 1
    3fda:	c5 30       	cpi	r28, 0x05	; 5
    3fdc:	d1 05       	cpc	r29, r1
    3fde:	31 f7       	brne	.-52     	; 0x3fac <effect_snow+0x70>
				clrLED(i,j,k);
		}
	}
	
	}
		for (i=0;i<5;i++)
    3fe0:	0f 5f       	subi	r16, 0xFF	; 255
    3fe2:	1f 4f       	sbci	r17, 0xFF	; 255
    3fe4:	05 30       	cpi	r16, 0x05	; 5
    3fe6:	11 05       	cpc	r17, r1
    3fe8:	41 f4       	brne	.+16     	; 0x3ffa <effect_snow+0xbe>
    3fea:	0a c0       	rjmp	.+20     	; 0x4000 <effect_snow+0xc4>
void effect_snow(int direction, int iterations, int delay)
{
	int i,j,k;
	int a;
	
	for (i=0;i<5;i++)
    3fec:	00 e0       	ldi	r16, 0x00	; 0
    3fee:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	}
		for (i=0;i<5;i++)
		for (j=0;j<5;j++){
				a=random()%8;
    3ff0:	78 e0       	ldi	r23, 0x08	; 8
    3ff2:	c7 2e       	mov	r12, r23
    3ff4:	d1 2c       	mov	r13, r1
    3ff6:	e1 2c       	mov	r14, r1
    3ff8:	f1 2c       	mov	r15, r1
void effect_snow(int direction, int iterations, int delay)
{
	int i,j,k;
	int a;
	
	for (i=0;i<5;i++)
    3ffa:	c0 e0       	ldi	r28, 0x00	; 0
    3ffc:	d0 e0       	ldi	r29, 0x00	; 0
    3ffe:	d6 cf       	rjmp	.-84     	; 0x3fac <effect_snow+0x70>
				if(a==0)
					setLED(i,j,4);
				else
					clrLED(i,j,4);
				}
	delay_ms(delay);	
    4000:	c5 01       	movw	r24, r10
    4002:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
}
    4006:	df 91       	pop	r29
    4008:	cf 91       	pop	r28
    400a:	1f 91       	pop	r17
    400c:	0f 91       	pop	r16
    400e:	ff 90       	pop	r15
    4010:	ef 90       	pop	r14
    4012:	df 90       	pop	r13
    4014:	cf 90       	pop	r12
    4016:	bf 90       	pop	r11
    4018:	af 90       	pop	r10
    401a:	08 95       	ret

0000401c <effect_noise>:

void effect_noise(int direction, int iterations, int delay)
{
    401c:	af 92       	push	r10
    401e:	bf 92       	push	r11
    4020:	cf 92       	push	r12
    4022:	df 92       	push	r13
    4024:	ef 92       	push	r14
    4026:	ff 92       	push	r15
    4028:	0f 93       	push	r16
    402a:	1f 93       	push	r17
    402c:	cf 93       	push	r28
    402e:	df 93       	push	r29
		int i,j,k;
		int a;
	for (i=0;i<5;i++)
    4030:	ee 24       	eor	r14, r14
    4032:	ff 24       	eor	r15, r15
	for (j=0;j<5;j++)
	{
	for (k=0;k<5;k++)
		{
		
		a=random()%2;
    4034:	e2 e0       	ldi	r30, 0x02	; 2
    4036:	ae 2e       	mov	r10, r30
    4038:	b1 2c       	mov	r11, r1
    403a:	c1 2c       	mov	r12, r1
    403c:	d1 2c       	mov	r13, r1
    403e:	27 c0       	rjmp	.+78     	; 0x408e <effect_noise+0x72>
    4040:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <random>
    4044:	a6 01       	movw	r20, r12
    4046:	95 01       	movw	r18, r10
    4048:	0e 94 39 29 	call	0x5272	; 0x5272 <__divmodsi4>
		if(a)
    404c:	61 15       	cp	r22, r1
    404e:	71 05       	cpc	r23, r1
    4050:	31 f0       	breq	.+12     	; 0x405e <effect_noise+0x42>
			setLED(i,j,k);
    4052:	c7 01       	movw	r24, r14
    4054:	b8 01       	movw	r22, r16
    4056:	ae 01       	movw	r20, r28
    4058:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
    405c:	05 c0       	rjmp	.+10     	; 0x4068 <effect_noise+0x4c>
		else
			clrLED(i,j,k);
    405e:	c7 01       	movw	r24, r14
    4060:	b8 01       	movw	r22, r16
    4062:	ae 01       	movw	r20, r28
    4064:	0e 94 16 03 	call	0x62c	; 0x62c <clrLED>
		int a;
	for (i=0;i<5;i++)
	{
	for (j=0;j<5;j++)
	{
	for (k=0;k<5;k++)
    4068:	21 96       	adiw	r28, 0x01	; 1
    406a:	c5 30       	cpi	r28, 0x05	; 5
    406c:	d1 05       	cpc	r29, r1
    406e:	41 f7       	brne	.-48     	; 0x4040 <effect_noise+0x24>
{
		int i,j,k;
		int a;
	for (i=0;i<5;i++)
	{
	for (j=0;j<5;j++)
    4070:	0f 5f       	subi	r16, 0xFF	; 255
    4072:	1f 4f       	sbci	r17, 0xFF	; 255
    4074:	05 30       	cpi	r16, 0x05	; 5
    4076:	11 05       	cpc	r17, r1
    4078:	19 f0       	breq	.+6      	; 0x4080 <effect_noise+0x64>
				}
	delay_ms(delay);	
}

void effect_noise(int direction, int iterations, int delay)
{
    407a:	c0 e0       	ldi	r28, 0x00	; 0
    407c:	d0 e0       	ldi	r29, 0x00	; 0
    407e:	e0 cf       	rjmp	.-64     	; 0x4040 <effect_noise+0x24>
		int i,j,k;
		int a;
	for (i=0;i<5;i++)
    4080:	08 94       	sec
    4082:	e1 1c       	adc	r14, r1
    4084:	f1 1c       	adc	r15, r1
    4086:	85 e0       	ldi	r24, 0x05	; 5
    4088:	e8 16       	cp	r14, r24
    408a:	f1 04       	cpc	r15, r1
    408c:	19 f0       	breq	.+6      	; 0x4094 <effect_noise+0x78>
				}
	delay_ms(delay);	
}

void effect_noise(int direction, int iterations, int delay)
{
    408e:	00 e0       	ldi	r16, 0x00	; 0
    4090:	10 e0       	ldi	r17, 0x00	; 0
    4092:	f3 cf       	rjmp	.-26     	; 0x407a <effect_noise+0x5e>
		else
			clrLED(i,j,k);
		}
	}
	}	
}
    4094:	df 91       	pop	r29
    4096:	cf 91       	pop	r28
    4098:	1f 91       	pop	r17
    409a:	0f 91       	pop	r16
    409c:	ff 90       	pop	r15
    409e:	ef 90       	pop	r14
    40a0:	df 90       	pop	r13
    40a2:	cf 90       	pop	r12
    40a4:	bf 90       	pop	r11
    40a6:	af 90       	pop	r10
    40a8:	08 95       	ret

000040aa <effect_everything_bitches>:
}
}	
}

void effect_everything_bitches(int direction, int iterations, int delay)
{
    40aa:	cf 93       	push	r28
    40ac:	df 93       	push	r29
    40ae:	c4 e0       	ldi	r28, 0x04	; 4
    40b0:	d0 e0       	ldi	r29, 0x00	; 0
	int i;

	for(i=0;i<4;i++)	
		effect_rings(1,10,0);
    40b2:	81 e0       	ldi	r24, 0x01	; 1
    40b4:	90 e0       	ldi	r25, 0x00	; 0
    40b6:	6a e0       	ldi	r22, 0x0A	; 10
    40b8:	70 e0       	ldi	r23, 0x00	; 0
    40ba:	40 e0       	ldi	r20, 0x00	; 0
    40bc:	50 e0       	ldi	r21, 0x00	; 0
    40be:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <effect_rings>
    40c2:	21 97       	sbiw	r28, 0x01	; 1

void effect_everything_bitches(int direction, int iterations, int delay)
{
	int i;

	for(i=0;i<4;i++)	
    40c4:	b1 f7       	brne	.-20     	; 0x40b2 <effect_everything_bitches+0x8>
    40c6:	c4 e0       	ldi	r28, 0x04	; 4
    40c8:	d0 e0       	ldi	r29, 0x00	; 0
		effect_rings(1,10,0);
	for(i=0;i<4;i++)	
		effect_explosion(1,10,0);
    40ca:	81 e0       	ldi	r24, 0x01	; 1
    40cc:	90 e0       	ldi	r25, 0x00	; 0
    40ce:	6a e0       	ldi	r22, 0x0A	; 10
    40d0:	70 e0       	ldi	r23, 0x00	; 0
    40d2:	40 e0       	ldi	r20, 0x00	; 0
    40d4:	50 e0       	ldi	r21, 0x00	; 0
    40d6:	0e 94 62 1e 	call	0x3cc4	; 0x3cc4 <effect_explosion>
    40da:	21 97       	sbiw	r28, 0x01	; 1
{
	int i;

	for(i=0;i<4;i++)	
		effect_rings(1,10,0);
	for(i=0;i<4;i++)	
    40dc:	b1 f7       	brne	.-20     	; 0x40ca <effect_everything_bitches+0x20>
    40de:	c0 e1       	ldi	r28, 0x10	; 16
    40e0:	d0 e0       	ldi	r29, 0x00	; 0
		effect_explosion(1,10,0);
	for(i=0;i<16;i++)		
		effect_snow(1,10,385);
    40e2:	81 e0       	ldi	r24, 0x01	; 1
    40e4:	90 e0       	ldi	r25, 0x00	; 0
    40e6:	6a e0       	ldi	r22, 0x0A	; 10
    40e8:	70 e0       	ldi	r23, 0x00	; 0
    40ea:	41 e8       	ldi	r20, 0x81	; 129
    40ec:	51 e0       	ldi	r21, 0x01	; 1
    40ee:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <effect_snow>
    40f2:	21 97       	sbiw	r28, 0x01	; 1

	for(i=0;i<4;i++)	
		effect_rings(1,10,0);
	for(i=0;i<4;i++)	
		effect_explosion(1,10,0);
	for(i=0;i<16;i++)		
    40f4:	b1 f7       	brne	.-20     	; 0x40e2 <effect_everything_bitches+0x38>
    40f6:	c0 e4       	ldi	r28, 0x40	; 64
    40f8:	d0 e0       	ldi	r29, 0x00	; 0
		effect_snow(1,10,385);
	for(i=0;i<64;i++)		
		effect_blink(1,10,10);
    40fa:	81 e0       	ldi	r24, 0x01	; 1
    40fc:	90 e0       	ldi	r25, 0x00	; 0
    40fe:	6a e0       	ldi	r22, 0x0A	; 10
    4100:	70 e0       	ldi	r23, 0x00	; 0
    4102:	4a e0       	ldi	r20, 0x0A	; 10
    4104:	50 e0       	ldi	r21, 0x00	; 0
    4106:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <effect_blink>
    410a:	21 97       	sbiw	r28, 0x01	; 1
		effect_rings(1,10,0);
	for(i=0;i<4;i++)	
		effect_explosion(1,10,0);
	for(i=0;i<16;i++)		
		effect_snow(1,10,385);
	for(i=0;i<64;i++)		
    410c:	b1 f7       	brne	.-20     	; 0x40fa <effect_everything_bitches+0x50>
    410e:	c0 e8       	ldi	r28, 0x80	; 128
    4110:	d0 e0       	ldi	r29, 0x00	; 0
		effect_blink(1,10,10);
	for(i=0;i<128;i++)	
		effect_noise(1,10,10);
    4112:	81 e0       	ldi	r24, 0x01	; 1
    4114:	90 e0       	ldi	r25, 0x00	; 0
    4116:	6a e0       	ldi	r22, 0x0A	; 10
    4118:	70 e0       	ldi	r23, 0x00	; 0
    411a:	4a e0       	ldi	r20, 0x0A	; 10
    411c:	50 e0       	ldi	r21, 0x00	; 0
    411e:	0e 94 0e 20 	call	0x401c	; 0x401c <effect_noise>
    4122:	21 97       	sbiw	r28, 0x01	; 1
		effect_explosion(1,10,0);
	for(i=0;i<16;i++)		
		effect_snow(1,10,385);
	for(i=0;i<64;i++)		
		effect_blink(1,10,10);
	for(i=0;i<128;i++)	
    4124:	b1 f7       	brne	.-20     	; 0x4112 <effect_everything_bitches+0x68>
		effect_noise(1,10,10);
		
}
    4126:	df 91       	pop	r29
    4128:	cf 91       	pop	r28
    412a:	08 95       	ret

0000412c <effect_wasdf3>:
	}
	}	
}

void effect_wasdf3(int direction, int iterations, int delay)
{
    412c:	af 92       	push	r10
    412e:	bf 92       	push	r11
    4130:	cf 92       	push	r12
    4132:	df 92       	push	r13
    4134:	ef 92       	push	r14
    4136:	ff 92       	push	r15
    4138:	0f 93       	push	r16
    413a:	1f 93       	push	r17
    413c:	cf 93       	push	r28
    413e:	df 93       	push	r29
		int i,j,k;
		int a;
	for (i=0;i<5;i++)
    4140:	ee 24       	eor	r14, r14
    4142:	ff 24       	eor	r15, r15
	{
	for (j=0;j<5;j++)
	{
	for (k=0;k<5;k++)
		{
		a=random()%2;
    4144:	f2 e0       	ldi	r31, 0x02	; 2
    4146:	af 2e       	mov	r10, r31
    4148:	b1 2c       	mov	r11, r1
    414a:	c1 2c       	mov	r12, r1
    414c:	d1 2c       	mov	r13, r1
    414e:	21 c0       	rjmp	.+66     	; 0x4192 <effect_wasdf3+0x66>
    4150:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <random>
    4154:	a6 01       	movw	r20, r12
    4156:	95 01       	movw	r18, r10
    4158:	0e 94 39 29 	call	0x5272	; 0x5272 <__divmodsi4>
		if(a)
    415c:	61 15       	cp	r22, r1
    415e:	71 05       	cpc	r23, r1
    4160:	29 f0       	breq	.+10     	; 0x416c <effect_wasdf3+0x40>
			setLED(i,j,k);
    4162:	c7 01       	movw	r24, r14
    4164:	b8 01       	movw	r22, r16
    4166:	ae 01       	movw	r20, r28
    4168:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
		int a;
	for (i=0;i<5;i++)
	{
	for (j=0;j<5;j++)
	{
	for (k=0;k<5;k++)
    416c:	21 96       	adiw	r28, 0x01	; 1
    416e:	c5 30       	cpi	r28, 0x05	; 5
    4170:	d1 05       	cpc	r29, r1
    4172:	71 f7       	brne	.-36     	; 0x4150 <effect_wasdf3+0x24>
{
		int i,j,k;
		int a;
	for (i=0;i<5;i++)
	{
	for (j=0;j<5;j++)
    4174:	0f 5f       	subi	r16, 0xFF	; 255
    4176:	1f 4f       	sbci	r17, 0xFF	; 255
    4178:	05 30       	cpi	r16, 0x05	; 5
    417a:	11 05       	cpc	r17, r1
    417c:	19 f0       	breq	.+6      	; 0x4184 <effect_wasdf3+0x58>
	}
	}	
}

void effect_wasdf3(int direction, int iterations, int delay)
{
    417e:	c0 e0       	ldi	r28, 0x00	; 0
    4180:	d0 e0       	ldi	r29, 0x00	; 0
    4182:	e6 cf       	rjmp	.-52     	; 0x4150 <effect_wasdf3+0x24>
		int i,j,k;
		int a;
	for (i=0;i<5;i++)
    4184:	08 94       	sec
    4186:	e1 1c       	adc	r14, r1
    4188:	f1 1c       	adc	r15, r1
    418a:	85 e0       	ldi	r24, 0x05	; 5
    418c:	e8 16       	cp	r14, r24
    418e:	f1 04       	cpc	r15, r1
    4190:	19 f0       	breq	.+6      	; 0x4198 <effect_wasdf3+0x6c>
	}
	}	
}

void effect_wasdf3(int direction, int iterations, int delay)
{
    4192:	00 e0       	ldi	r16, 0x00	; 0
    4194:	10 e0       	ldi	r17, 0x00	; 0
    4196:	f3 cf       	rjmp	.-26     	; 0x417e <effect_wasdf3+0x52>
		if(a)
			setLED(i,j,k);
		}
	}
	}
	delay_ms(1000);
    4198:	88 ee       	ldi	r24, 0xE8	; 232
    419a:	93 e0       	ldi	r25, 0x03	; 3
    419c:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
	fill(0x00);
    41a0:	80 e0       	ldi	r24, 0x00	; 0
    41a2:	0e 94 16 06 	call	0xc2c	; 0xc2c <fill>

	
}
    41a6:	df 91       	pop	r29
    41a8:	cf 91       	pop	r28
    41aa:	1f 91       	pop	r17
    41ac:	0f 91       	pop	r16
    41ae:	ff 90       	pop	r15
    41b0:	ef 90       	pop	r14
    41b2:	df 90       	pop	r13
    41b4:	cf 90       	pop	r12
    41b6:	bf 90       	pop	r11
    41b8:	af 90       	pop	r10
    41ba:	08 95       	ret

000041bc <effect_wasdf2>:

void effect_wasdf2(int direction, int iterations, int delay)
{
    41bc:	ef 92       	push	r14
    41be:	ff 92       	push	r15
    41c0:	0f 93       	push	r16
    41c2:	1f 93       	push	r17
    41c4:	cf 93       	push	r28
    41c6:	df 93       	push	r29
	int i,j,k;
	for (i=0;i<5;i++)
    41c8:	ee 24       	eor	r14, r14
    41ca:	ff 24       	eor	r15, r15
    41cc:	1f c0       	rjmp	.+62     	; 0x420c <effect_wasdf2+0x50>
	{
	for (j=0;j<5;j++)
	{
	for (k=0;k<5;k++)
		{
		setLED(i,j,k);
    41ce:	c7 01       	movw	r24, r14
    41d0:	b8 01       	movw	r22, r16
    41d2:	ae 01       	movw	r20, r28
    41d4:	0e 94 3e 03 	call	0x67c	; 0x67c <setLED>
		delay_ms(20);
    41d8:	84 e1       	ldi	r24, 0x14	; 20
    41da:	90 e0       	ldi	r25, 0x00	; 0
    41dc:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
		fill(0x00);
    41e0:	80 e0       	ldi	r24, 0x00	; 0
    41e2:	0e 94 16 06 	call	0xc2c	; 0xc2c <fill>
	int i,j,k;
	for (i=0;i<5;i++)
	{
	for (j=0;j<5;j++)
	{
	for (k=0;k<5;k++)
    41e6:	21 96       	adiw	r28, 0x01	; 1
    41e8:	c5 30       	cpi	r28, 0x05	; 5
    41ea:	d1 05       	cpc	r29, r1
    41ec:	81 f7       	brne	.-32     	; 0x41ce <effect_wasdf2+0x12>
void effect_wasdf2(int direction, int iterations, int delay)
{
	int i,j,k;
	for (i=0;i<5;i++)
	{
	for (j=0;j<5;j++)
    41ee:	0f 5f       	subi	r16, 0xFF	; 255
    41f0:	1f 4f       	sbci	r17, 0xFF	; 255
    41f2:	05 30       	cpi	r16, 0x05	; 5
    41f4:	11 05       	cpc	r17, r1
    41f6:	19 f0       	breq	.+6      	; 0x41fe <effect_wasdf2+0x42>

	
}

void effect_wasdf2(int direction, int iterations, int delay)
{
    41f8:	c0 e0       	ldi	r28, 0x00	; 0
    41fa:	d0 e0       	ldi	r29, 0x00	; 0
    41fc:	e8 cf       	rjmp	.-48     	; 0x41ce <effect_wasdf2+0x12>
	int i,j,k;
	for (i=0;i<5;i++)
    41fe:	08 94       	sec
    4200:	e1 1c       	adc	r14, r1
    4202:	f1 1c       	adc	r15, r1
    4204:	85 e0       	ldi	r24, 0x05	; 5
    4206:	e8 16       	cp	r14, r24
    4208:	f1 04       	cpc	r15, r1
    420a:	19 f0       	breq	.+6      	; 0x4212 <effect_wasdf2+0x56>

	
}

void effect_wasdf2(int direction, int iterations, int delay)
{
    420c:	00 e0       	ldi	r16, 0x00	; 0
    420e:	10 e0       	ldi	r17, 0x00	; 0
    4210:	f3 cf       	rjmp	.-26     	; 0x41f8 <effect_wasdf2+0x3c>
	delay_ms(10);
	fill(0x00);
	delay_ms(10);*/

	
}
    4212:	df 91       	pop	r29
    4214:	cf 91       	pop	r28
    4216:	1f 91       	pop	r17
    4218:	0f 91       	pop	r16
    421a:	ff 90       	pop	r15
    421c:	ef 90       	pop	r14
    421e:	08 95       	ret

00004220 <_fpadd_parts>:
    4220:	a0 e0       	ldi	r26, 0x00	; 0
    4222:	b0 e0       	ldi	r27, 0x00	; 0
    4224:	e6 e1       	ldi	r30, 0x16	; 22
    4226:	f1 e2       	ldi	r31, 0x21	; 33
    4228:	0c 94 58 29 	jmp	0x52b0	; 0x52b0 <__prologue_saves__+0x8>
    422c:	fc 01       	movw	r30, r24
    422e:	ea 01       	movw	r28, r20
    4230:	80 81       	ld	r24, Z
    4232:	82 30       	cpi	r24, 0x02	; 2
    4234:	08 f4       	brcc	.+2      	; 0x4238 <_fpadd_parts+0x18>
    4236:	38 c1       	rjmp	.+624    	; 0x44a8 <_fpadd_parts+0x288>
    4238:	db 01       	movw	r26, r22
    423a:	9c 91       	ld	r25, X
    423c:	92 30       	cpi	r25, 0x02	; 2
    423e:	08 f4       	brcc	.+2      	; 0x4242 <_fpadd_parts+0x22>
    4240:	30 c1       	rjmp	.+608    	; 0x44a2 <_fpadd_parts+0x282>
    4242:	84 30       	cpi	r24, 0x04	; 4
    4244:	59 f4       	brne	.+22     	; 0x425c <_fpadd_parts+0x3c>
    4246:	94 30       	cpi	r25, 0x04	; 4
    4248:	09 f0       	breq	.+2      	; 0x424c <_fpadd_parts+0x2c>
    424a:	2e c1       	rjmp	.+604    	; 0x44a8 <_fpadd_parts+0x288>
    424c:	91 81       	ldd	r25, Z+1	; 0x01
    424e:	11 96       	adiw	r26, 0x01	; 1
    4250:	8c 91       	ld	r24, X
    4252:	11 97       	sbiw	r26, 0x01	; 1
    4254:	98 17       	cp	r25, r24
    4256:	09 f0       	breq	.+2      	; 0x425a <_fpadd_parts+0x3a>
    4258:	21 c1       	rjmp	.+578    	; 0x449c <_fpadd_parts+0x27c>
    425a:	26 c1       	rjmp	.+588    	; 0x44a8 <_fpadd_parts+0x288>
    425c:	94 30       	cpi	r25, 0x04	; 4
    425e:	09 f4       	brne	.+2      	; 0x4262 <_fpadd_parts+0x42>
    4260:	20 c1       	rjmp	.+576    	; 0x44a2 <_fpadd_parts+0x282>
    4262:	92 30       	cpi	r25, 0x02	; 2
    4264:	b1 f4       	brne	.+44     	; 0x4292 <_fpadd_parts+0x72>
    4266:	82 30       	cpi	r24, 0x02	; 2
    4268:	09 f0       	breq	.+2      	; 0x426c <_fpadd_parts+0x4c>
    426a:	1e c1       	rjmp	.+572    	; 0x44a8 <_fpadd_parts+0x288>
    426c:	ca 01       	movw	r24, r20
    426e:	af 01       	movw	r20, r30
    4270:	28 e0       	ldi	r18, 0x08	; 8
    4272:	da 01       	movw	r26, r20
    4274:	0d 90       	ld	r0, X+
    4276:	ad 01       	movw	r20, r26
    4278:	dc 01       	movw	r26, r24
    427a:	0d 92       	st	X+, r0
    427c:	cd 01       	movw	r24, r26
    427e:	21 50       	subi	r18, 0x01	; 1
    4280:	c1 f7       	brne	.-16     	; 0x4272 <_fpadd_parts+0x52>
    4282:	db 01       	movw	r26, r22
    4284:	11 96       	adiw	r26, 0x01	; 1
    4286:	8c 91       	ld	r24, X
    4288:	11 97       	sbiw	r26, 0x01	; 1
    428a:	91 81       	ldd	r25, Z+1	; 0x01
    428c:	89 23       	and	r24, r25
    428e:	89 83       	std	Y+1, r24	; 0x01
    4290:	0a c1       	rjmp	.+532    	; 0x44a6 <_fpadd_parts+0x286>
    4292:	82 30       	cpi	r24, 0x02	; 2
    4294:	09 f4       	brne	.+2      	; 0x4298 <_fpadd_parts+0x78>
    4296:	05 c1       	rjmp	.+522    	; 0x44a2 <_fpadd_parts+0x282>
    4298:	c2 80       	ldd	r12, Z+2	; 0x02
    429a:	d3 80       	ldd	r13, Z+3	; 0x03
    429c:	db 01       	movw	r26, r22
    429e:	12 96       	adiw	r26, 0x02	; 2
    42a0:	6d 90       	ld	r6, X+
    42a2:	7c 90       	ld	r7, X
    42a4:	13 97       	sbiw	r26, 0x03	; 3
    42a6:	24 81       	ldd	r18, Z+4	; 0x04
    42a8:	35 81       	ldd	r19, Z+5	; 0x05
    42aa:	46 81       	ldd	r20, Z+6	; 0x06
    42ac:	57 81       	ldd	r21, Z+7	; 0x07
    42ae:	14 96       	adiw	r26, 0x04	; 4
    42b0:	ed 90       	ld	r14, X+
    42b2:	fd 90       	ld	r15, X+
    42b4:	0d 91       	ld	r16, X+
    42b6:	1c 91       	ld	r17, X
    42b8:	17 97       	sbiw	r26, 0x07	; 7
    42ba:	c6 01       	movw	r24, r12
    42bc:	86 19       	sub	r24, r6
    42be:	97 09       	sbc	r25, r7
    42c0:	5c 01       	movw	r10, r24
    42c2:	97 ff       	sbrs	r25, 7
    42c4:	04 c0       	rjmp	.+8      	; 0x42ce <_fpadd_parts+0xae>
    42c6:	aa 24       	eor	r10, r10
    42c8:	bb 24       	eor	r11, r11
    42ca:	a8 1a       	sub	r10, r24
    42cc:	b9 0a       	sbc	r11, r25
    42ce:	b0 e2       	ldi	r27, 0x20	; 32
    42d0:	ab 16       	cp	r10, r27
    42d2:	b1 04       	cpc	r11, r1
    42d4:	0c f0       	brlt	.+2      	; 0x42d8 <_fpadd_parts+0xb8>
    42d6:	61 c0       	rjmp	.+194    	; 0x439a <_fpadd_parts+0x17a>
    42d8:	18 16       	cp	r1, r24
    42da:	19 06       	cpc	r1, r25
    42dc:	6c f5       	brge	.+90     	; 0x4338 <_fpadd_parts+0x118>
    42de:	37 01       	movw	r6, r14
    42e0:	48 01       	movw	r8, r16
    42e2:	0a 2c       	mov	r0, r10
    42e4:	04 c0       	rjmp	.+8      	; 0x42ee <_fpadd_parts+0xce>
    42e6:	96 94       	lsr	r9
    42e8:	87 94       	ror	r8
    42ea:	77 94       	ror	r7
    42ec:	67 94       	ror	r6
    42ee:	0a 94       	dec	r0
    42f0:	d2 f7       	brpl	.-12     	; 0x42e6 <_fpadd_parts+0xc6>
    42f2:	81 e0       	ldi	r24, 0x01	; 1
    42f4:	90 e0       	ldi	r25, 0x00	; 0
    42f6:	a0 e0       	ldi	r26, 0x00	; 0
    42f8:	b0 e0       	ldi	r27, 0x00	; 0
    42fa:	0a 2c       	mov	r0, r10
    42fc:	04 c0       	rjmp	.+8      	; 0x4306 <_fpadd_parts+0xe6>
    42fe:	88 0f       	add	r24, r24
    4300:	99 1f       	adc	r25, r25
    4302:	aa 1f       	adc	r26, r26
    4304:	bb 1f       	adc	r27, r27
    4306:	0a 94       	dec	r0
    4308:	d2 f7       	brpl	.-12     	; 0x42fe <_fpadd_parts+0xde>
    430a:	01 97       	sbiw	r24, 0x01	; 1
    430c:	a1 09       	sbc	r26, r1
    430e:	b1 09       	sbc	r27, r1
    4310:	8e 21       	and	r24, r14
    4312:	9f 21       	and	r25, r15
    4314:	a0 23       	and	r26, r16
    4316:	b1 23       	and	r27, r17
    4318:	ee 24       	eor	r14, r14
    431a:	ff 24       	eor	r15, r15
    431c:	87 01       	movw	r16, r14
    431e:	e3 94       	inc	r14
    4320:	00 97       	sbiw	r24, 0x00	; 0
    4322:	a1 05       	cpc	r26, r1
    4324:	b1 05       	cpc	r27, r1
    4326:	19 f4       	brne	.+6      	; 0x432e <_fpadd_parts+0x10e>
    4328:	ee 24       	eor	r14, r14
    432a:	ff 24       	eor	r15, r15
    432c:	87 01       	movw	r16, r14
    432e:	e6 28       	or	r14, r6
    4330:	f7 28       	or	r15, r7
    4332:	08 29       	or	r16, r8
    4334:	19 29       	or	r17, r9
    4336:	3c c0       	rjmp	.+120    	; 0x43b0 <_fpadd_parts+0x190>
    4338:	00 97       	sbiw	r24, 0x00	; 0
    433a:	d1 f1       	breq	.+116    	; 0x43b0 <_fpadd_parts+0x190>
    433c:	ca 0c       	add	r12, r10
    433e:	db 1c       	adc	r13, r11
    4340:	39 01       	movw	r6, r18
    4342:	4a 01       	movw	r8, r20
    4344:	0a 2c       	mov	r0, r10
    4346:	04 c0       	rjmp	.+8      	; 0x4350 <_fpadd_parts+0x130>
    4348:	96 94       	lsr	r9
    434a:	87 94       	ror	r8
    434c:	77 94       	ror	r7
    434e:	67 94       	ror	r6
    4350:	0a 94       	dec	r0
    4352:	d2 f7       	brpl	.-12     	; 0x4348 <_fpadd_parts+0x128>
    4354:	81 e0       	ldi	r24, 0x01	; 1
    4356:	90 e0       	ldi	r25, 0x00	; 0
    4358:	a0 e0       	ldi	r26, 0x00	; 0
    435a:	b0 e0       	ldi	r27, 0x00	; 0
    435c:	0a 2c       	mov	r0, r10
    435e:	04 c0       	rjmp	.+8      	; 0x4368 <_fpadd_parts+0x148>
    4360:	88 0f       	add	r24, r24
    4362:	99 1f       	adc	r25, r25
    4364:	aa 1f       	adc	r26, r26
    4366:	bb 1f       	adc	r27, r27
    4368:	0a 94       	dec	r0
    436a:	d2 f7       	brpl	.-12     	; 0x4360 <_fpadd_parts+0x140>
    436c:	01 97       	sbiw	r24, 0x01	; 1
    436e:	a1 09       	sbc	r26, r1
    4370:	b1 09       	sbc	r27, r1
    4372:	82 23       	and	r24, r18
    4374:	93 23       	and	r25, r19
    4376:	a4 23       	and	r26, r20
    4378:	b5 23       	and	r27, r21
    437a:	21 e0       	ldi	r18, 0x01	; 1
    437c:	30 e0       	ldi	r19, 0x00	; 0
    437e:	40 e0       	ldi	r20, 0x00	; 0
    4380:	50 e0       	ldi	r21, 0x00	; 0
    4382:	00 97       	sbiw	r24, 0x00	; 0
    4384:	a1 05       	cpc	r26, r1
    4386:	b1 05       	cpc	r27, r1
    4388:	19 f4       	brne	.+6      	; 0x4390 <_fpadd_parts+0x170>
    438a:	20 e0       	ldi	r18, 0x00	; 0
    438c:	30 e0       	ldi	r19, 0x00	; 0
    438e:	a9 01       	movw	r20, r18
    4390:	26 29       	or	r18, r6
    4392:	37 29       	or	r19, r7
    4394:	48 29       	or	r20, r8
    4396:	59 29       	or	r21, r9
    4398:	0b c0       	rjmp	.+22     	; 0x43b0 <_fpadd_parts+0x190>
    439a:	6c 14       	cp	r6, r12
    439c:	7d 04       	cpc	r7, r13
    439e:	24 f4       	brge	.+8      	; 0x43a8 <_fpadd_parts+0x188>
    43a0:	ee 24       	eor	r14, r14
    43a2:	ff 24       	eor	r15, r15
    43a4:	87 01       	movw	r16, r14
    43a6:	04 c0       	rjmp	.+8      	; 0x43b0 <_fpadd_parts+0x190>
    43a8:	63 01       	movw	r12, r6
    43aa:	20 e0       	ldi	r18, 0x00	; 0
    43ac:	30 e0       	ldi	r19, 0x00	; 0
    43ae:	a9 01       	movw	r20, r18
    43b0:	81 81       	ldd	r24, Z+1	; 0x01
    43b2:	fb 01       	movw	r30, r22
    43b4:	91 81       	ldd	r25, Z+1	; 0x01
    43b6:	89 17       	cp	r24, r25
    43b8:	09 f4       	brne	.+2      	; 0x43bc <_fpadd_parts+0x19c>
    43ba:	45 c0       	rjmp	.+138    	; 0x4446 <_fpadd_parts+0x226>
    43bc:	88 23       	and	r24, r24
    43be:	49 f0       	breq	.+18     	; 0x43d2 <_fpadd_parts+0x1b2>
    43c0:	d8 01       	movw	r26, r16
    43c2:	c7 01       	movw	r24, r14
    43c4:	82 1b       	sub	r24, r18
    43c6:	93 0b       	sbc	r25, r19
    43c8:	a4 0b       	sbc	r26, r20
    43ca:	b5 0b       	sbc	r27, r21
    43cc:	9c 01       	movw	r18, r24
    43ce:	ad 01       	movw	r20, r26
    43d0:	04 c0       	rjmp	.+8      	; 0x43da <_fpadd_parts+0x1ba>
    43d2:	2e 19       	sub	r18, r14
    43d4:	3f 09       	sbc	r19, r15
    43d6:	40 0b       	sbc	r20, r16
    43d8:	51 0b       	sbc	r21, r17
    43da:	57 fd       	sbrc	r21, 7
    43dc:	04 c0       	rjmp	.+8      	; 0x43e6 <_fpadd_parts+0x1c6>
    43de:	19 82       	std	Y+1, r1	; 0x01
    43e0:	db 82       	std	Y+3, r13	; 0x03
    43e2:	ca 82       	std	Y+2, r12	; 0x02
    43e4:	0b c0       	rjmp	.+22     	; 0x43fc <_fpadd_parts+0x1dc>
    43e6:	81 e0       	ldi	r24, 0x01	; 1
    43e8:	89 83       	std	Y+1, r24	; 0x01
    43ea:	db 82       	std	Y+3, r13	; 0x03
    43ec:	ca 82       	std	Y+2, r12	; 0x02
    43ee:	50 95       	com	r21
    43f0:	40 95       	com	r20
    43f2:	30 95       	com	r19
    43f4:	21 95       	neg	r18
    43f6:	3f 4f       	sbci	r19, 0xFF	; 255
    43f8:	4f 4f       	sbci	r20, 0xFF	; 255
    43fa:	5f 4f       	sbci	r21, 0xFF	; 255
    43fc:	2c 83       	std	Y+4, r18	; 0x04
    43fe:	3d 83       	std	Y+5, r19	; 0x05
    4400:	4e 83       	std	Y+6, r20	; 0x06
    4402:	5f 83       	std	Y+7, r21	; 0x07
    4404:	0d c0       	rjmp	.+26     	; 0x4420 <_fpadd_parts+0x200>
    4406:	88 0f       	add	r24, r24
    4408:	99 1f       	adc	r25, r25
    440a:	aa 1f       	adc	r26, r26
    440c:	bb 1f       	adc	r27, r27
    440e:	8c 83       	std	Y+4, r24	; 0x04
    4410:	9d 83       	std	Y+5, r25	; 0x05
    4412:	ae 83       	std	Y+6, r26	; 0x06
    4414:	bf 83       	std	Y+7, r27	; 0x07
    4416:	8a 81       	ldd	r24, Y+2	; 0x02
    4418:	9b 81       	ldd	r25, Y+3	; 0x03
    441a:	01 97       	sbiw	r24, 0x01	; 1
    441c:	9b 83       	std	Y+3, r25	; 0x03
    441e:	8a 83       	std	Y+2, r24	; 0x02
    4420:	8c 81       	ldd	r24, Y+4	; 0x04
    4422:	9d 81       	ldd	r25, Y+5	; 0x05
    4424:	ae 81       	ldd	r26, Y+6	; 0x06
    4426:	bf 81       	ldd	r27, Y+7	; 0x07
    4428:	9c 01       	movw	r18, r24
    442a:	ad 01       	movw	r20, r26
    442c:	21 50       	subi	r18, 0x01	; 1
    442e:	30 40       	sbci	r19, 0x00	; 0
    4430:	40 40       	sbci	r20, 0x00	; 0
    4432:	50 40       	sbci	r21, 0x00	; 0
    4434:	2f 3f       	cpi	r18, 0xFF	; 255
    4436:	ef ef       	ldi	r30, 0xFF	; 255
    4438:	3e 07       	cpc	r19, r30
    443a:	ef ef       	ldi	r30, 0xFF	; 255
    443c:	4e 07       	cpc	r20, r30
    443e:	ef e3       	ldi	r30, 0x3F	; 63
    4440:	5e 07       	cpc	r21, r30
    4442:	08 f3       	brcs	.-62     	; 0x4406 <_fpadd_parts+0x1e6>
    4444:	0b c0       	rjmp	.+22     	; 0x445c <_fpadd_parts+0x23c>
    4446:	89 83       	std	Y+1, r24	; 0x01
    4448:	db 82       	std	Y+3, r13	; 0x03
    444a:	ca 82       	std	Y+2, r12	; 0x02
    444c:	2e 0d       	add	r18, r14
    444e:	3f 1d       	adc	r19, r15
    4450:	40 1f       	adc	r20, r16
    4452:	51 1f       	adc	r21, r17
    4454:	2c 83       	std	Y+4, r18	; 0x04
    4456:	3d 83       	std	Y+5, r19	; 0x05
    4458:	4e 83       	std	Y+6, r20	; 0x06
    445a:	5f 83       	std	Y+7, r21	; 0x07
    445c:	83 e0       	ldi	r24, 0x03	; 3
    445e:	88 83       	st	Y, r24
    4460:	2c 81       	ldd	r18, Y+4	; 0x04
    4462:	3d 81       	ldd	r19, Y+5	; 0x05
    4464:	4e 81       	ldd	r20, Y+6	; 0x06
    4466:	5f 81       	ldd	r21, Y+7	; 0x07
    4468:	57 ff       	sbrs	r21, 7
    446a:	1d c0       	rjmp	.+58     	; 0x44a6 <_fpadd_parts+0x286>
    446c:	da 01       	movw	r26, r20
    446e:	c9 01       	movw	r24, r18
    4470:	81 70       	andi	r24, 0x01	; 1
    4472:	90 70       	andi	r25, 0x00	; 0
    4474:	a0 70       	andi	r26, 0x00	; 0
    4476:	b0 70       	andi	r27, 0x00	; 0
    4478:	56 95       	lsr	r21
    447a:	47 95       	ror	r20
    447c:	37 95       	ror	r19
    447e:	27 95       	ror	r18
    4480:	82 2b       	or	r24, r18
    4482:	93 2b       	or	r25, r19
    4484:	a4 2b       	or	r26, r20
    4486:	b5 2b       	or	r27, r21
    4488:	8c 83       	std	Y+4, r24	; 0x04
    448a:	9d 83       	std	Y+5, r25	; 0x05
    448c:	ae 83       	std	Y+6, r26	; 0x06
    448e:	bf 83       	std	Y+7, r27	; 0x07
    4490:	8a 81       	ldd	r24, Y+2	; 0x02
    4492:	9b 81       	ldd	r25, Y+3	; 0x03
    4494:	01 96       	adiw	r24, 0x01	; 1
    4496:	9b 83       	std	Y+3, r25	; 0x03
    4498:	8a 83       	std	Y+2, r24	; 0x02
    449a:	05 c0       	rjmp	.+10     	; 0x44a6 <_fpadd_parts+0x286>
    449c:	e1 e8       	ldi	r30, 0x81	; 129
    449e:	f0 e0       	ldi	r31, 0x00	; 0
    44a0:	03 c0       	rjmp	.+6      	; 0x44a8 <_fpadd_parts+0x288>
    44a2:	fb 01       	movw	r30, r22
    44a4:	01 c0       	rjmp	.+2      	; 0x44a8 <_fpadd_parts+0x288>
    44a6:	fe 01       	movw	r30, r28
    44a8:	cf 01       	movw	r24, r30
    44aa:	cd b7       	in	r28, 0x3d	; 61
    44ac:	de b7       	in	r29, 0x3e	; 62
    44ae:	ee e0       	ldi	r30, 0x0E	; 14
    44b0:	0c 94 74 29 	jmp	0x52e8	; 0x52e8 <__epilogue_restores__+0x8>

000044b4 <__addsf3>:
    44b4:	a0 e2       	ldi	r26, 0x20	; 32
    44b6:	b0 e0       	ldi	r27, 0x00	; 0
    44b8:	e0 e6       	ldi	r30, 0x60	; 96
    44ba:	f2 e2       	ldi	r31, 0x22	; 34
    44bc:	0c 94 60 29 	jmp	0x52c0	; 0x52c0 <__prologue_saves__+0x18>
    44c0:	69 83       	std	Y+1, r22	; 0x01
    44c2:	7a 83       	std	Y+2, r23	; 0x02
    44c4:	8b 83       	std	Y+3, r24	; 0x03
    44c6:	9c 83       	std	Y+4, r25	; 0x04
    44c8:	2d 83       	std	Y+5, r18	; 0x05
    44ca:	3e 83       	std	Y+6, r19	; 0x06
    44cc:	4f 83       	std	Y+7, r20	; 0x07
    44ce:	58 87       	std	Y+8, r21	; 0x08
    44d0:	89 e0       	ldi	r24, 0x09	; 9
    44d2:	e8 2e       	mov	r14, r24
    44d4:	f1 2c       	mov	r15, r1
    44d6:	ec 0e       	add	r14, r28
    44d8:	fd 1e       	adc	r15, r29
    44da:	ce 01       	movw	r24, r28
    44dc:	01 96       	adiw	r24, 0x01	; 1
    44de:	b7 01       	movw	r22, r14
    44e0:	0e 94 1e 25 	call	0x4a3c	; 0x4a3c <__unpack_f>
    44e4:	8e 01       	movw	r16, r28
    44e6:	0f 5e       	subi	r16, 0xEF	; 239
    44e8:	1f 4f       	sbci	r17, 0xFF	; 255
    44ea:	ce 01       	movw	r24, r28
    44ec:	05 96       	adiw	r24, 0x05	; 5
    44ee:	b8 01       	movw	r22, r16
    44f0:	0e 94 1e 25 	call	0x4a3c	; 0x4a3c <__unpack_f>
    44f4:	c7 01       	movw	r24, r14
    44f6:	b8 01       	movw	r22, r16
    44f8:	ae 01       	movw	r20, r28
    44fa:	47 5e       	subi	r20, 0xE7	; 231
    44fc:	5f 4f       	sbci	r21, 0xFF	; 255
    44fe:	0e 94 10 21 	call	0x4220	; 0x4220 <_fpadd_parts>
    4502:	0e 94 50 24 	call	0x48a0	; 0x48a0 <__pack_f>
    4506:	a0 96       	adiw	r28, 0x20	; 32
    4508:	e6 e0       	ldi	r30, 0x06	; 6
    450a:	0c 94 7c 29 	jmp	0x52f8	; 0x52f8 <__epilogue_restores__+0x18>

0000450e <__subsf3>:
    450e:	a0 e2       	ldi	r26, 0x20	; 32
    4510:	b0 e0       	ldi	r27, 0x00	; 0
    4512:	ed e8       	ldi	r30, 0x8D	; 141
    4514:	f2 e2       	ldi	r31, 0x22	; 34
    4516:	0c 94 60 29 	jmp	0x52c0	; 0x52c0 <__prologue_saves__+0x18>
    451a:	69 83       	std	Y+1, r22	; 0x01
    451c:	7a 83       	std	Y+2, r23	; 0x02
    451e:	8b 83       	std	Y+3, r24	; 0x03
    4520:	9c 83       	std	Y+4, r25	; 0x04
    4522:	2d 83       	std	Y+5, r18	; 0x05
    4524:	3e 83       	std	Y+6, r19	; 0x06
    4526:	4f 83       	std	Y+7, r20	; 0x07
    4528:	58 87       	std	Y+8, r21	; 0x08
    452a:	8e 01       	movw	r16, r28
    452c:	07 5f       	subi	r16, 0xF7	; 247
    452e:	1f 4f       	sbci	r17, 0xFF	; 255
    4530:	ce 01       	movw	r24, r28
    4532:	01 96       	adiw	r24, 0x01	; 1
    4534:	b8 01       	movw	r22, r16
    4536:	0e 94 1e 25 	call	0x4a3c	; 0x4a3c <__unpack_f>
    453a:	91 e1       	ldi	r25, 0x11	; 17
    453c:	e9 2e       	mov	r14, r25
    453e:	f1 2c       	mov	r15, r1
    4540:	ec 0e       	add	r14, r28
    4542:	fd 1e       	adc	r15, r29
    4544:	ce 01       	movw	r24, r28
    4546:	05 96       	adiw	r24, 0x05	; 5
    4548:	b7 01       	movw	r22, r14
    454a:	0e 94 1e 25 	call	0x4a3c	; 0x4a3c <__unpack_f>
    454e:	8a 89       	ldd	r24, Y+18	; 0x12
    4550:	91 e0       	ldi	r25, 0x01	; 1
    4552:	89 27       	eor	r24, r25
    4554:	8a 8b       	std	Y+18, r24	; 0x12
    4556:	c8 01       	movw	r24, r16
    4558:	b7 01       	movw	r22, r14
    455a:	ae 01       	movw	r20, r28
    455c:	47 5e       	subi	r20, 0xE7	; 231
    455e:	5f 4f       	sbci	r21, 0xFF	; 255
    4560:	0e 94 10 21 	call	0x4220	; 0x4220 <_fpadd_parts>
    4564:	0e 94 50 24 	call	0x48a0	; 0x48a0 <__pack_f>
    4568:	a0 96       	adiw	r28, 0x20	; 32
    456a:	e6 e0       	ldi	r30, 0x06	; 6
    456c:	0c 94 7c 29 	jmp	0x52f8	; 0x52f8 <__epilogue_restores__+0x18>

00004570 <__divsf3>:
    4570:	a8 e1       	ldi	r26, 0x18	; 24
    4572:	b0 e0       	ldi	r27, 0x00	; 0
    4574:	ee eb       	ldi	r30, 0xBE	; 190
    4576:	f2 e2       	ldi	r31, 0x22	; 34
    4578:	0c 94 5c 29 	jmp	0x52b8	; 0x52b8 <__prologue_saves__+0x10>
    457c:	69 83       	std	Y+1, r22	; 0x01
    457e:	7a 83       	std	Y+2, r23	; 0x02
    4580:	8b 83       	std	Y+3, r24	; 0x03
    4582:	9c 83       	std	Y+4, r25	; 0x04
    4584:	2d 83       	std	Y+5, r18	; 0x05
    4586:	3e 83       	std	Y+6, r19	; 0x06
    4588:	4f 83       	std	Y+7, r20	; 0x07
    458a:	58 87       	std	Y+8, r21	; 0x08
    458c:	8e 01       	movw	r16, r28
    458e:	07 5f       	subi	r16, 0xF7	; 247
    4590:	1f 4f       	sbci	r17, 0xFF	; 255
    4592:	ce 01       	movw	r24, r28
    4594:	01 96       	adiw	r24, 0x01	; 1
    4596:	b8 01       	movw	r22, r16
    4598:	0e 94 1e 25 	call	0x4a3c	; 0x4a3c <__unpack_f>
    459c:	81 e1       	ldi	r24, 0x11	; 17
    459e:	e8 2e       	mov	r14, r24
    45a0:	f1 2c       	mov	r15, r1
    45a2:	ec 0e       	add	r14, r28
    45a4:	fd 1e       	adc	r15, r29
    45a6:	ce 01       	movw	r24, r28
    45a8:	05 96       	adiw	r24, 0x05	; 5
    45aa:	b7 01       	movw	r22, r14
    45ac:	0e 94 1e 25 	call	0x4a3c	; 0x4a3c <__unpack_f>
    45b0:	99 85       	ldd	r25, Y+9	; 0x09
    45b2:	92 30       	cpi	r25, 0x02	; 2
    45b4:	08 f4       	brcc	.+2      	; 0x45b8 <__divsf3+0x48>
    45b6:	83 c0       	rjmp	.+262    	; 0x46be <__divsf3+0x14e>
    45b8:	89 89       	ldd	r24, Y+17	; 0x11
    45ba:	82 30       	cpi	r24, 0x02	; 2
    45bc:	08 f4       	brcc	.+2      	; 0x45c0 <__divsf3+0x50>
    45be:	7b c0       	rjmp	.+246    	; 0x46b6 <__divsf3+0x146>
    45c0:	2a 85       	ldd	r18, Y+10	; 0x0a
    45c2:	3a 89       	ldd	r19, Y+18	; 0x12
    45c4:	23 27       	eor	r18, r19
    45c6:	2a 87       	std	Y+10, r18	; 0x0a
    45c8:	94 30       	cpi	r25, 0x04	; 4
    45ca:	11 f0       	breq	.+4      	; 0x45d0 <__divsf3+0x60>
    45cc:	92 30       	cpi	r25, 0x02	; 2
    45ce:	21 f4       	brne	.+8      	; 0x45d8 <__divsf3+0x68>
    45d0:	98 17       	cp	r25, r24
    45d2:	09 f0       	breq	.+2      	; 0x45d6 <__divsf3+0x66>
    45d4:	6c c0       	rjmp	.+216    	; 0x46ae <__divsf3+0x13e>
    45d6:	71 c0       	rjmp	.+226    	; 0x46ba <__divsf3+0x14a>
    45d8:	84 30       	cpi	r24, 0x04	; 4
    45da:	39 f4       	brne	.+14     	; 0x45ea <__divsf3+0x7a>
    45dc:	1d 86       	std	Y+13, r1	; 0x0d
    45de:	1e 86       	std	Y+14, r1	; 0x0e
    45e0:	1f 86       	std	Y+15, r1	; 0x0f
    45e2:	18 8a       	std	Y+16, r1	; 0x10
    45e4:	1c 86       	std	Y+12, r1	; 0x0c
    45e6:	1b 86       	std	Y+11, r1	; 0x0b
    45e8:	6a c0       	rjmp	.+212    	; 0x46be <__divsf3+0x14e>
    45ea:	82 30       	cpi	r24, 0x02	; 2
    45ec:	19 f4       	brne	.+6      	; 0x45f4 <__divsf3+0x84>
    45ee:	84 e0       	ldi	r24, 0x04	; 4
    45f0:	89 87       	std	Y+9, r24	; 0x09
    45f2:	65 c0       	rjmp	.+202    	; 0x46be <__divsf3+0x14e>
    45f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    45f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    45f8:	2b 89       	ldd	r18, Y+19	; 0x13
    45fa:	3c 89       	ldd	r19, Y+20	; 0x14
    45fc:	82 1b       	sub	r24, r18
    45fe:	93 0b       	sbc	r25, r19
    4600:	9c 87       	std	Y+12, r25	; 0x0c
    4602:	8b 87       	std	Y+11, r24	; 0x0b
    4604:	2d 85       	ldd	r18, Y+13	; 0x0d
    4606:	3e 85       	ldd	r19, Y+14	; 0x0e
    4608:	4f 85       	ldd	r20, Y+15	; 0x0f
    460a:	58 89       	ldd	r21, Y+16	; 0x10
    460c:	ed 88       	ldd	r14, Y+21	; 0x15
    460e:	fe 88       	ldd	r15, Y+22	; 0x16
    4610:	0f 89       	ldd	r16, Y+23	; 0x17
    4612:	18 8d       	ldd	r17, Y+24	; 0x18
    4614:	2e 15       	cp	r18, r14
    4616:	3f 05       	cpc	r19, r15
    4618:	40 07       	cpc	r20, r16
    461a:	51 07       	cpc	r21, r17
    461c:	38 f4       	brcc	.+14     	; 0x462c <__divsf3+0xbc>
    461e:	22 0f       	add	r18, r18
    4620:	33 1f       	adc	r19, r19
    4622:	44 1f       	adc	r20, r20
    4624:	55 1f       	adc	r21, r21
    4626:	01 97       	sbiw	r24, 0x01	; 1
    4628:	9c 87       	std	Y+12, r25	; 0x0c
    462a:	8b 87       	std	Y+11, r24	; 0x0b
    462c:	6f e1       	ldi	r22, 0x1F	; 31
    462e:	70 e0       	ldi	r23, 0x00	; 0
    4630:	a1 2c       	mov	r10, r1
    4632:	b1 2c       	mov	r11, r1
    4634:	c1 2c       	mov	r12, r1
    4636:	a0 e4       	ldi	r26, 0x40	; 64
    4638:	da 2e       	mov	r13, r26
    463a:	80 e0       	ldi	r24, 0x00	; 0
    463c:	90 e0       	ldi	r25, 0x00	; 0
    463e:	dc 01       	movw	r26, r24
    4640:	2e 15       	cp	r18, r14
    4642:	3f 05       	cpc	r19, r15
    4644:	40 07       	cpc	r20, r16
    4646:	51 07       	cpc	r21, r17
    4648:	40 f0       	brcs	.+16     	; 0x465a <__divsf3+0xea>
    464a:	8a 29       	or	r24, r10
    464c:	9b 29       	or	r25, r11
    464e:	ac 29       	or	r26, r12
    4650:	bd 29       	or	r27, r13
    4652:	2e 19       	sub	r18, r14
    4654:	3f 09       	sbc	r19, r15
    4656:	40 0b       	sbc	r20, r16
    4658:	51 0b       	sbc	r21, r17
    465a:	d6 94       	lsr	r13
    465c:	c7 94       	ror	r12
    465e:	b7 94       	ror	r11
    4660:	a7 94       	ror	r10
    4662:	22 0f       	add	r18, r18
    4664:	33 1f       	adc	r19, r19
    4666:	44 1f       	adc	r20, r20
    4668:	55 1f       	adc	r21, r21
    466a:	61 50       	subi	r22, 0x01	; 1
    466c:	70 40       	sbci	r23, 0x00	; 0
    466e:	41 f7       	brne	.-48     	; 0x4640 <__divsf3+0xd0>
    4670:	6f e7       	ldi	r22, 0x7F	; 127
    4672:	e6 2e       	mov	r14, r22
    4674:	f1 2c       	mov	r15, r1
    4676:	01 2d       	mov	r16, r1
    4678:	11 2d       	mov	r17, r1
    467a:	e8 22       	and	r14, r24
    467c:	f9 22       	and	r15, r25
    467e:	0a 23       	and	r16, r26
    4680:	1b 23       	and	r17, r27
    4682:	60 e4       	ldi	r22, 0x40	; 64
    4684:	e6 16       	cp	r14, r22
    4686:	f1 04       	cpc	r15, r1
    4688:	01 05       	cpc	r16, r1
    468a:	11 05       	cpc	r17, r1
    468c:	61 f4       	brne	.+24     	; 0x46a6 <__divsf3+0x136>
    468e:	87 fd       	sbrc	r24, 7
    4690:	0a c0       	rjmp	.+20     	; 0x46a6 <__divsf3+0x136>
    4692:	21 15       	cp	r18, r1
    4694:	31 05       	cpc	r19, r1
    4696:	41 05       	cpc	r20, r1
    4698:	51 05       	cpc	r21, r1
    469a:	29 f0       	breq	.+10     	; 0x46a6 <__divsf3+0x136>
    469c:	80 5c       	subi	r24, 0xC0	; 192
    469e:	9f 4f       	sbci	r25, 0xFF	; 255
    46a0:	af 4f       	sbci	r26, 0xFF	; 255
    46a2:	bf 4f       	sbci	r27, 0xFF	; 255
    46a4:	80 78       	andi	r24, 0x80	; 128
    46a6:	8d 87       	std	Y+13, r24	; 0x0d
    46a8:	9e 87       	std	Y+14, r25	; 0x0e
    46aa:	af 87       	std	Y+15, r26	; 0x0f
    46ac:	b8 8b       	std	Y+16, r27	; 0x10
    46ae:	8e 01       	movw	r16, r28
    46b0:	07 5f       	subi	r16, 0xF7	; 247
    46b2:	1f 4f       	sbci	r17, 0xFF	; 255
    46b4:	04 c0       	rjmp	.+8      	; 0x46be <__divsf3+0x14e>
    46b6:	87 01       	movw	r16, r14
    46b8:	02 c0       	rjmp	.+4      	; 0x46be <__divsf3+0x14e>
    46ba:	01 e8       	ldi	r16, 0x81	; 129
    46bc:	10 e0       	ldi	r17, 0x00	; 0
    46be:	c8 01       	movw	r24, r16
    46c0:	0e 94 50 24 	call	0x48a0	; 0x48a0 <__pack_f>
    46c4:	68 96       	adiw	r28, 0x18	; 24
    46c6:	ea e0       	ldi	r30, 0x0A	; 10
    46c8:	0c 94 78 29 	jmp	0x52f0	; 0x52f0 <__epilogue_restores__+0x10>

000046cc <__ltsf2>:
    46cc:	a8 e1       	ldi	r26, 0x18	; 24
    46ce:	b0 e0       	ldi	r27, 0x00	; 0
    46d0:	ec e6       	ldi	r30, 0x6C	; 108
    46d2:	f3 e2       	ldi	r31, 0x23	; 35
    46d4:	0c 94 60 29 	jmp	0x52c0	; 0x52c0 <__prologue_saves__+0x18>
    46d8:	69 83       	std	Y+1, r22	; 0x01
    46da:	7a 83       	std	Y+2, r23	; 0x02
    46dc:	8b 83       	std	Y+3, r24	; 0x03
    46de:	9c 83       	std	Y+4, r25	; 0x04
    46e0:	2d 83       	std	Y+5, r18	; 0x05
    46e2:	3e 83       	std	Y+6, r19	; 0x06
    46e4:	4f 83       	std	Y+7, r20	; 0x07
    46e6:	58 87       	std	Y+8, r21	; 0x08
    46e8:	8e 01       	movw	r16, r28
    46ea:	07 5f       	subi	r16, 0xF7	; 247
    46ec:	1f 4f       	sbci	r17, 0xFF	; 255
    46ee:	ce 01       	movw	r24, r28
    46f0:	01 96       	adiw	r24, 0x01	; 1
    46f2:	b8 01       	movw	r22, r16
    46f4:	0e 94 1e 25 	call	0x4a3c	; 0x4a3c <__unpack_f>
    46f8:	81 e1       	ldi	r24, 0x11	; 17
    46fa:	e8 2e       	mov	r14, r24
    46fc:	f1 2c       	mov	r15, r1
    46fe:	ec 0e       	add	r14, r28
    4700:	fd 1e       	adc	r15, r29
    4702:	ce 01       	movw	r24, r28
    4704:	05 96       	adiw	r24, 0x05	; 5
    4706:	b7 01       	movw	r22, r14
    4708:	0e 94 1e 25 	call	0x4a3c	; 0x4a3c <__unpack_f>
    470c:	89 85       	ldd	r24, Y+9	; 0x09
    470e:	82 30       	cpi	r24, 0x02	; 2
    4710:	40 f0       	brcs	.+16     	; 0x4722 <__ltsf2+0x56>
    4712:	89 89       	ldd	r24, Y+17	; 0x11
    4714:	82 30       	cpi	r24, 0x02	; 2
    4716:	28 f0       	brcs	.+10     	; 0x4722 <__ltsf2+0x56>
    4718:	c8 01       	movw	r24, r16
    471a:	b7 01       	movw	r22, r14
    471c:	0e 94 87 25 	call	0x4b0e	; 0x4b0e <__fpcmp_parts_f>
    4720:	01 c0       	rjmp	.+2      	; 0x4724 <__ltsf2+0x58>
    4722:	81 e0       	ldi	r24, 0x01	; 1
    4724:	68 96       	adiw	r28, 0x18	; 24
    4726:	e6 e0       	ldi	r30, 0x06	; 6
    4728:	0c 94 7c 29 	jmp	0x52f8	; 0x52f8 <__epilogue_restores__+0x18>

0000472c <__floatsisf>:
    472c:	a8 e0       	ldi	r26, 0x08	; 8
    472e:	b0 e0       	ldi	r27, 0x00	; 0
    4730:	ec e9       	ldi	r30, 0x9C	; 156
    4732:	f3 e2       	ldi	r31, 0x23	; 35
    4734:	0c 94 60 29 	jmp	0x52c0	; 0x52c0 <__prologue_saves__+0x18>
    4738:	7b 01       	movw	r14, r22
    473a:	8c 01       	movw	r16, r24
    473c:	83 e0       	ldi	r24, 0x03	; 3
    473e:	89 83       	std	Y+1, r24	; 0x01
    4740:	d8 01       	movw	r26, r16
    4742:	c7 01       	movw	r24, r14
    4744:	88 27       	eor	r24, r24
    4746:	b7 fd       	sbrc	r27, 7
    4748:	83 95       	inc	r24
    474a:	99 27       	eor	r25, r25
    474c:	aa 27       	eor	r26, r26
    474e:	bb 27       	eor	r27, r27
    4750:	28 2f       	mov	r18, r24
    4752:	8a 83       	std	Y+2, r24	; 0x02
    4754:	e1 14       	cp	r14, r1
    4756:	f1 04       	cpc	r15, r1
    4758:	01 05       	cpc	r16, r1
    475a:	11 05       	cpc	r17, r1
    475c:	19 f4       	brne	.+6      	; 0x4764 <__floatsisf+0x38>
    475e:	82 e0       	ldi	r24, 0x02	; 2
    4760:	89 83       	std	Y+1, r24	; 0x01
    4762:	37 c0       	rjmp	.+110    	; 0x47d2 <__floatsisf+0xa6>
    4764:	8e e1       	ldi	r24, 0x1E	; 30
    4766:	90 e0       	ldi	r25, 0x00	; 0
    4768:	9c 83       	std	Y+4, r25	; 0x04
    476a:	8b 83       	std	Y+3, r24	; 0x03
    476c:	22 23       	and	r18, r18
    476e:	89 f0       	breq	.+34     	; 0x4792 <__floatsisf+0x66>
    4770:	80 e0       	ldi	r24, 0x00	; 0
    4772:	e8 16       	cp	r14, r24
    4774:	80 e0       	ldi	r24, 0x00	; 0
    4776:	f8 06       	cpc	r15, r24
    4778:	80 e0       	ldi	r24, 0x00	; 0
    477a:	08 07       	cpc	r16, r24
    477c:	80 e8       	ldi	r24, 0x80	; 128
    477e:	18 07       	cpc	r17, r24
    4780:	69 f1       	breq	.+90     	; 0x47dc <__floatsisf+0xb0>
    4782:	10 95       	com	r17
    4784:	00 95       	com	r16
    4786:	f0 94       	com	r15
    4788:	e0 94       	com	r14
    478a:	e1 1c       	adc	r14, r1
    478c:	f1 1c       	adc	r15, r1
    478e:	01 1d       	adc	r16, r1
    4790:	11 1d       	adc	r17, r1
    4792:	ed 82       	std	Y+5, r14	; 0x05
    4794:	fe 82       	std	Y+6, r15	; 0x06
    4796:	0f 83       	std	Y+7, r16	; 0x07
    4798:	18 87       	std	Y+8, r17	; 0x08
    479a:	c8 01       	movw	r24, r16
    479c:	b7 01       	movw	r22, r14
    479e:	0e 94 f6 23 	call	0x47ec	; 0x47ec <__clzsi2>
    47a2:	9c 01       	movw	r18, r24
    47a4:	21 50       	subi	r18, 0x01	; 1
    47a6:	30 40       	sbci	r19, 0x00	; 0
    47a8:	12 16       	cp	r1, r18
    47aa:	13 06       	cpc	r1, r19
    47ac:	94 f4       	brge	.+36     	; 0x47d2 <__floatsisf+0xa6>
    47ae:	02 2e       	mov	r0, r18
    47b0:	04 c0       	rjmp	.+8      	; 0x47ba <__floatsisf+0x8e>
    47b2:	ee 0c       	add	r14, r14
    47b4:	ff 1c       	adc	r15, r15
    47b6:	00 1f       	adc	r16, r16
    47b8:	11 1f       	adc	r17, r17
    47ba:	0a 94       	dec	r0
    47bc:	d2 f7       	brpl	.-12     	; 0x47b2 <__floatsisf+0x86>
    47be:	ed 82       	std	Y+5, r14	; 0x05
    47c0:	fe 82       	std	Y+6, r15	; 0x06
    47c2:	0f 83       	std	Y+7, r16	; 0x07
    47c4:	18 87       	std	Y+8, r17	; 0x08
    47c6:	8e e1       	ldi	r24, 0x1E	; 30
    47c8:	90 e0       	ldi	r25, 0x00	; 0
    47ca:	82 1b       	sub	r24, r18
    47cc:	93 0b       	sbc	r25, r19
    47ce:	9c 83       	std	Y+4, r25	; 0x04
    47d0:	8b 83       	std	Y+3, r24	; 0x03
    47d2:	ce 01       	movw	r24, r28
    47d4:	01 96       	adiw	r24, 0x01	; 1
    47d6:	0e 94 50 24 	call	0x48a0	; 0x48a0 <__pack_f>
    47da:	04 c0       	rjmp	.+8      	; 0x47e4 <__floatsisf+0xb8>
    47dc:	60 e0       	ldi	r22, 0x00	; 0
    47de:	70 e0       	ldi	r23, 0x00	; 0
    47e0:	80 e0       	ldi	r24, 0x00	; 0
    47e2:	9f ec       	ldi	r25, 0xCF	; 207
    47e4:	28 96       	adiw	r28, 0x08	; 8
    47e6:	e6 e0       	ldi	r30, 0x06	; 6
    47e8:	0c 94 7c 29 	jmp	0x52f8	; 0x52f8 <__epilogue_restores__+0x18>

000047ec <__clzsi2>:
    47ec:	af 92       	push	r10
    47ee:	bf 92       	push	r11
    47f0:	cf 92       	push	r12
    47f2:	df 92       	push	r13
    47f4:	ef 92       	push	r14
    47f6:	ff 92       	push	r15
    47f8:	0f 93       	push	r16
    47fa:	1f 93       	push	r17
    47fc:	7b 01       	movw	r14, r22
    47fe:	8c 01       	movw	r16, r24
    4800:	80 e0       	ldi	r24, 0x00	; 0
    4802:	e8 16       	cp	r14, r24
    4804:	80 e0       	ldi	r24, 0x00	; 0
    4806:	f8 06       	cpc	r15, r24
    4808:	81 e0       	ldi	r24, 0x01	; 1
    480a:	08 07       	cpc	r16, r24
    480c:	80 e0       	ldi	r24, 0x00	; 0
    480e:	18 07       	cpc	r17, r24
    4810:	58 f4       	brcc	.+22     	; 0x4828 <__clzsi2+0x3c>
    4812:	ef ef       	ldi	r30, 0xFF	; 255
    4814:	ee 16       	cp	r14, r30
    4816:	f1 04       	cpc	r15, r1
    4818:	01 05       	cpc	r16, r1
    481a:	11 05       	cpc	r17, r1
    481c:	09 f0       	breq	.+2      	; 0x4820 <__clzsi2+0x34>
    481e:	90 f4       	brcc	.+36     	; 0x4844 <__clzsi2+0x58>
    4820:	80 e0       	ldi	r24, 0x00	; 0
    4822:	90 e0       	ldi	r25, 0x00	; 0
    4824:	dc 01       	movw	r26, r24
    4826:	17 c0       	rjmp	.+46     	; 0x4856 <__clzsi2+0x6a>
    4828:	f0 e0       	ldi	r31, 0x00	; 0
    482a:	ef 16       	cp	r14, r31
    482c:	f0 e0       	ldi	r31, 0x00	; 0
    482e:	ff 06       	cpc	r15, r31
    4830:	f0 e0       	ldi	r31, 0x00	; 0
    4832:	0f 07       	cpc	r16, r31
    4834:	f1 e0       	ldi	r31, 0x01	; 1
    4836:	1f 07       	cpc	r17, r31
    4838:	50 f4       	brcc	.+20     	; 0x484e <__clzsi2+0x62>
    483a:	80 e1       	ldi	r24, 0x10	; 16
    483c:	90 e0       	ldi	r25, 0x00	; 0
    483e:	a0 e0       	ldi	r26, 0x00	; 0
    4840:	b0 e0       	ldi	r27, 0x00	; 0
    4842:	09 c0       	rjmp	.+18     	; 0x4856 <__clzsi2+0x6a>
    4844:	88 e0       	ldi	r24, 0x08	; 8
    4846:	90 e0       	ldi	r25, 0x00	; 0
    4848:	a0 e0       	ldi	r26, 0x00	; 0
    484a:	b0 e0       	ldi	r27, 0x00	; 0
    484c:	04 c0       	rjmp	.+8      	; 0x4856 <__clzsi2+0x6a>
    484e:	88 e1       	ldi	r24, 0x18	; 24
    4850:	90 e0       	ldi	r25, 0x00	; 0
    4852:	a0 e0       	ldi	r26, 0x00	; 0
    4854:	b0 e0       	ldi	r27, 0x00	; 0
    4856:	20 e2       	ldi	r18, 0x20	; 32
    4858:	30 e0       	ldi	r19, 0x00	; 0
    485a:	40 e0       	ldi	r20, 0x00	; 0
    485c:	50 e0       	ldi	r21, 0x00	; 0
    485e:	28 1b       	sub	r18, r24
    4860:	39 0b       	sbc	r19, r25
    4862:	4a 0b       	sbc	r20, r26
    4864:	5b 0b       	sbc	r21, r27
    4866:	57 01       	movw	r10, r14
    4868:	68 01       	movw	r12, r16
    486a:	04 c0       	rjmp	.+8      	; 0x4874 <__clzsi2+0x88>
    486c:	d6 94       	lsr	r13
    486e:	c7 94       	ror	r12
    4870:	b7 94       	ror	r11
    4872:	a7 94       	ror	r10
    4874:	8a 95       	dec	r24
    4876:	d2 f7       	brpl	.-12     	; 0x486c <__clzsi2+0x80>
    4878:	d6 01       	movw	r26, r12
    487a:	c5 01       	movw	r24, r10
    487c:	87 57       	subi	r24, 0x77	; 119
    487e:	9f 4f       	sbci	r25, 0xFF	; 255
    4880:	fc 01       	movw	r30, r24
    4882:	80 81       	ld	r24, Z
    4884:	28 1b       	sub	r18, r24
    4886:	31 09       	sbc	r19, r1
    4888:	41 09       	sbc	r20, r1
    488a:	51 09       	sbc	r21, r1
    488c:	c9 01       	movw	r24, r18
    488e:	1f 91       	pop	r17
    4890:	0f 91       	pop	r16
    4892:	ff 90       	pop	r15
    4894:	ef 90       	pop	r14
    4896:	df 90       	pop	r13
    4898:	cf 90       	pop	r12
    489a:	bf 90       	pop	r11
    489c:	af 90       	pop	r10
    489e:	08 95       	ret

000048a0 <__pack_f>:
    48a0:	ef 92       	push	r14
    48a2:	ff 92       	push	r15
    48a4:	0f 93       	push	r16
    48a6:	1f 93       	push	r17
    48a8:	cf 93       	push	r28
    48aa:	df 93       	push	r29
    48ac:	fc 01       	movw	r30, r24
    48ae:	24 81       	ldd	r18, Z+4	; 0x04
    48b0:	35 81       	ldd	r19, Z+5	; 0x05
    48b2:	46 81       	ldd	r20, Z+6	; 0x06
    48b4:	57 81       	ldd	r21, Z+7	; 0x07
    48b6:	61 81       	ldd	r22, Z+1	; 0x01
    48b8:	80 81       	ld	r24, Z
    48ba:	82 30       	cpi	r24, 0x02	; 2
    48bc:	20 f4       	brcc	.+8      	; 0x48c6 <__pack_f+0x26>
    48be:	40 61       	ori	r20, 0x10	; 16
    48c0:	ef ef       	ldi	r30, 0xFF	; 255
    48c2:	f0 e0       	ldi	r31, 0x00	; 0
    48c4:	a3 c0       	rjmp	.+326    	; 0x4a0c <__pack_f+0x16c>
    48c6:	84 30       	cpi	r24, 0x04	; 4
    48c8:	09 f4       	brne	.+2      	; 0x48cc <__pack_f+0x2c>
    48ca:	9b c0       	rjmp	.+310    	; 0x4a02 <__pack_f+0x162>
    48cc:	82 30       	cpi	r24, 0x02	; 2
    48ce:	09 f4       	brne	.+2      	; 0x48d2 <__pack_f+0x32>
    48d0:	92 c0       	rjmp	.+292    	; 0x49f6 <__pack_f+0x156>
    48d2:	21 15       	cp	r18, r1
    48d4:	31 05       	cpc	r19, r1
    48d6:	41 05       	cpc	r20, r1
    48d8:	51 05       	cpc	r21, r1
    48da:	09 f4       	brne	.+2      	; 0x48de <__pack_f+0x3e>
    48dc:	8f c0       	rjmp	.+286    	; 0x49fc <__pack_f+0x15c>
    48de:	02 80       	ldd	r0, Z+2	; 0x02
    48e0:	f3 81       	ldd	r31, Z+3	; 0x03
    48e2:	e0 2d       	mov	r30, r0
    48e4:	8f ef       	ldi	r24, 0xFF	; 255
    48e6:	e2 38       	cpi	r30, 0x82	; 130
    48e8:	f8 07       	cpc	r31, r24
    48ea:	0c f0       	brlt	.+2      	; 0x48ee <__pack_f+0x4e>
    48ec:	5a c0       	rjmp	.+180    	; 0x49a2 <__pack_f+0x102>
    48ee:	c2 e8       	ldi	r28, 0x82	; 130
    48f0:	df ef       	ldi	r29, 0xFF	; 255
    48f2:	ce 1b       	sub	r28, r30
    48f4:	df 0b       	sbc	r29, r31
    48f6:	ca 31       	cpi	r28, 0x1A	; 26
    48f8:	d1 05       	cpc	r29, r1
    48fa:	6c f5       	brge	.+90     	; 0x4956 <__pack_f+0xb6>
    48fc:	79 01       	movw	r14, r18
    48fe:	8a 01       	movw	r16, r20
    4900:	0c 2e       	mov	r0, r28
    4902:	04 c0       	rjmp	.+8      	; 0x490c <__pack_f+0x6c>
    4904:	16 95       	lsr	r17
    4906:	07 95       	ror	r16
    4908:	f7 94       	ror	r15
    490a:	e7 94       	ror	r14
    490c:	0a 94       	dec	r0
    490e:	d2 f7       	brpl	.-12     	; 0x4904 <__pack_f+0x64>
    4910:	81 e0       	ldi	r24, 0x01	; 1
    4912:	90 e0       	ldi	r25, 0x00	; 0
    4914:	a0 e0       	ldi	r26, 0x00	; 0
    4916:	b0 e0       	ldi	r27, 0x00	; 0
    4918:	0c 2e       	mov	r0, r28
    491a:	04 c0       	rjmp	.+8      	; 0x4924 <__pack_f+0x84>
    491c:	88 0f       	add	r24, r24
    491e:	99 1f       	adc	r25, r25
    4920:	aa 1f       	adc	r26, r26
    4922:	bb 1f       	adc	r27, r27
    4924:	0a 94       	dec	r0
    4926:	d2 f7       	brpl	.-12     	; 0x491c <__pack_f+0x7c>
    4928:	01 97       	sbiw	r24, 0x01	; 1
    492a:	a1 09       	sbc	r26, r1
    492c:	b1 09       	sbc	r27, r1
    492e:	82 23       	and	r24, r18
    4930:	93 23       	and	r25, r19
    4932:	a4 23       	and	r26, r20
    4934:	b5 23       	and	r27, r21
    4936:	21 e0       	ldi	r18, 0x01	; 1
    4938:	30 e0       	ldi	r19, 0x00	; 0
    493a:	40 e0       	ldi	r20, 0x00	; 0
    493c:	50 e0       	ldi	r21, 0x00	; 0
    493e:	00 97       	sbiw	r24, 0x00	; 0
    4940:	a1 05       	cpc	r26, r1
    4942:	b1 05       	cpc	r27, r1
    4944:	19 f4       	brne	.+6      	; 0x494c <__pack_f+0xac>
    4946:	20 e0       	ldi	r18, 0x00	; 0
    4948:	30 e0       	ldi	r19, 0x00	; 0
    494a:	a9 01       	movw	r20, r18
    494c:	2e 29       	or	r18, r14
    494e:	3f 29       	or	r19, r15
    4950:	40 2b       	or	r20, r16
    4952:	51 2b       	or	r21, r17
    4954:	03 c0       	rjmp	.+6      	; 0x495c <__pack_f+0xbc>
    4956:	20 e0       	ldi	r18, 0x00	; 0
    4958:	30 e0       	ldi	r19, 0x00	; 0
    495a:	a9 01       	movw	r20, r18
    495c:	da 01       	movw	r26, r20
    495e:	c9 01       	movw	r24, r18
    4960:	8f 77       	andi	r24, 0x7F	; 127
    4962:	90 70       	andi	r25, 0x00	; 0
    4964:	a0 70       	andi	r26, 0x00	; 0
    4966:	b0 70       	andi	r27, 0x00	; 0
    4968:	80 34       	cpi	r24, 0x40	; 64
    496a:	91 05       	cpc	r25, r1
    496c:	a1 05       	cpc	r26, r1
    496e:	b1 05       	cpc	r27, r1
    4970:	39 f4       	brne	.+14     	; 0x4980 <__pack_f+0xe0>
    4972:	27 ff       	sbrs	r18, 7
    4974:	09 c0       	rjmp	.+18     	; 0x4988 <__pack_f+0xe8>
    4976:	20 5c       	subi	r18, 0xC0	; 192
    4978:	3f 4f       	sbci	r19, 0xFF	; 255
    497a:	4f 4f       	sbci	r20, 0xFF	; 255
    497c:	5f 4f       	sbci	r21, 0xFF	; 255
    497e:	04 c0       	rjmp	.+8      	; 0x4988 <__pack_f+0xe8>
    4980:	21 5c       	subi	r18, 0xC1	; 193
    4982:	3f 4f       	sbci	r19, 0xFF	; 255
    4984:	4f 4f       	sbci	r20, 0xFF	; 255
    4986:	5f 4f       	sbci	r21, 0xFF	; 255
    4988:	e1 e0       	ldi	r30, 0x01	; 1
    498a:	f0 e0       	ldi	r31, 0x00	; 0
    498c:	20 30       	cpi	r18, 0x00	; 0
    498e:	80 e0       	ldi	r24, 0x00	; 0
    4990:	38 07       	cpc	r19, r24
    4992:	80 e0       	ldi	r24, 0x00	; 0
    4994:	48 07       	cpc	r20, r24
    4996:	80 e4       	ldi	r24, 0x40	; 64
    4998:	58 07       	cpc	r21, r24
    499a:	28 f5       	brcc	.+74     	; 0x49e6 <__pack_f+0x146>
    499c:	e0 e0       	ldi	r30, 0x00	; 0
    499e:	f0 e0       	ldi	r31, 0x00	; 0
    49a0:	22 c0       	rjmp	.+68     	; 0x49e6 <__pack_f+0x146>
    49a2:	e0 38       	cpi	r30, 0x80	; 128
    49a4:	f1 05       	cpc	r31, r1
    49a6:	6c f5       	brge	.+90     	; 0x4a02 <__pack_f+0x162>
    49a8:	e1 58       	subi	r30, 0x81	; 129
    49aa:	ff 4f       	sbci	r31, 0xFF	; 255
    49ac:	da 01       	movw	r26, r20
    49ae:	c9 01       	movw	r24, r18
    49b0:	8f 77       	andi	r24, 0x7F	; 127
    49b2:	90 70       	andi	r25, 0x00	; 0
    49b4:	a0 70       	andi	r26, 0x00	; 0
    49b6:	b0 70       	andi	r27, 0x00	; 0
    49b8:	80 34       	cpi	r24, 0x40	; 64
    49ba:	91 05       	cpc	r25, r1
    49bc:	a1 05       	cpc	r26, r1
    49be:	b1 05       	cpc	r27, r1
    49c0:	39 f4       	brne	.+14     	; 0x49d0 <__pack_f+0x130>
    49c2:	27 ff       	sbrs	r18, 7
    49c4:	09 c0       	rjmp	.+18     	; 0x49d8 <__pack_f+0x138>
    49c6:	20 5c       	subi	r18, 0xC0	; 192
    49c8:	3f 4f       	sbci	r19, 0xFF	; 255
    49ca:	4f 4f       	sbci	r20, 0xFF	; 255
    49cc:	5f 4f       	sbci	r21, 0xFF	; 255
    49ce:	04 c0       	rjmp	.+8      	; 0x49d8 <__pack_f+0x138>
    49d0:	21 5c       	subi	r18, 0xC1	; 193
    49d2:	3f 4f       	sbci	r19, 0xFF	; 255
    49d4:	4f 4f       	sbci	r20, 0xFF	; 255
    49d6:	5f 4f       	sbci	r21, 0xFF	; 255
    49d8:	57 ff       	sbrs	r21, 7
    49da:	05 c0       	rjmp	.+10     	; 0x49e6 <__pack_f+0x146>
    49dc:	56 95       	lsr	r21
    49de:	47 95       	ror	r20
    49e0:	37 95       	ror	r19
    49e2:	27 95       	ror	r18
    49e4:	31 96       	adiw	r30, 0x01	; 1
    49e6:	87 e0       	ldi	r24, 0x07	; 7
    49e8:	56 95       	lsr	r21
    49ea:	47 95       	ror	r20
    49ec:	37 95       	ror	r19
    49ee:	27 95       	ror	r18
    49f0:	8a 95       	dec	r24
    49f2:	d1 f7       	brne	.-12     	; 0x49e8 <__pack_f+0x148>
    49f4:	0b c0       	rjmp	.+22     	; 0x4a0c <__pack_f+0x16c>
    49f6:	e0 e0       	ldi	r30, 0x00	; 0
    49f8:	f0 e0       	ldi	r31, 0x00	; 0
    49fa:	05 c0       	rjmp	.+10     	; 0x4a06 <__pack_f+0x166>
    49fc:	e0 e0       	ldi	r30, 0x00	; 0
    49fe:	f0 e0       	ldi	r31, 0x00	; 0
    4a00:	05 c0       	rjmp	.+10     	; 0x4a0c <__pack_f+0x16c>
    4a02:	ef ef       	ldi	r30, 0xFF	; 255
    4a04:	f0 e0       	ldi	r31, 0x00	; 0
    4a06:	20 e0       	ldi	r18, 0x00	; 0
    4a08:	30 e0       	ldi	r19, 0x00	; 0
    4a0a:	a9 01       	movw	r20, r18
    4a0c:	8e 2f       	mov	r24, r30
    4a0e:	87 95       	ror	r24
    4a10:	88 27       	eor	r24, r24
    4a12:	87 95       	ror	r24
    4a14:	94 2f       	mov	r25, r20
    4a16:	9f 77       	andi	r25, 0x7F	; 127
    4a18:	67 95       	ror	r22
    4a1a:	66 27       	eor	r22, r22
    4a1c:	67 95       	ror	r22
    4a1e:	e6 95       	lsr	r30
    4a20:	e2 2e       	mov	r14, r18
    4a22:	a9 2f       	mov	r26, r25
    4a24:	a8 2b       	or	r26, r24
    4a26:	fe 2f       	mov	r31, r30
    4a28:	f6 2b       	or	r31, r22
    4a2a:	62 2f       	mov	r22, r18
    4a2c:	73 2f       	mov	r23, r19
    4a2e:	8a 2f       	mov	r24, r26
    4a30:	9f 2f       	mov	r25, r31
    4a32:	cd b7       	in	r28, 0x3d	; 61
    4a34:	de b7       	in	r29, 0x3e	; 62
    4a36:	e6 e0       	ldi	r30, 0x06	; 6
    4a38:	0c 94 7c 29 	jmp	0x52f8	; 0x52f8 <__epilogue_restores__+0x18>

00004a3c <__unpack_f>:
    4a3c:	dc 01       	movw	r26, r24
    4a3e:	fb 01       	movw	r30, r22
    4a40:	2c 91       	ld	r18, X
    4a42:	11 96       	adiw	r26, 0x01	; 1
    4a44:	3c 91       	ld	r19, X
    4a46:	11 97       	sbiw	r26, 0x01	; 1
    4a48:	12 96       	adiw	r26, 0x02	; 2
    4a4a:	8c 91       	ld	r24, X
    4a4c:	12 97       	sbiw	r26, 0x02	; 2
    4a4e:	48 2f       	mov	r20, r24
    4a50:	4f 77       	andi	r20, 0x7F	; 127
    4a52:	50 e0       	ldi	r21, 0x00	; 0
    4a54:	98 2f       	mov	r25, r24
    4a56:	99 1f       	adc	r25, r25
    4a58:	99 27       	eor	r25, r25
    4a5a:	99 1f       	adc	r25, r25
    4a5c:	13 96       	adiw	r26, 0x03	; 3
    4a5e:	6c 91       	ld	r22, X
    4a60:	13 97       	sbiw	r26, 0x03	; 3
    4a62:	86 2f       	mov	r24, r22
    4a64:	88 0f       	add	r24, r24
    4a66:	89 2b       	or	r24, r25
    4a68:	90 e0       	ldi	r25, 0x00	; 0
    4a6a:	66 1f       	adc	r22, r22
    4a6c:	66 27       	eor	r22, r22
    4a6e:	66 1f       	adc	r22, r22
    4a70:	61 83       	std	Z+1, r22	; 0x01
    4a72:	00 97       	sbiw	r24, 0x00	; 0
    4a74:	39 f5       	brne	.+78     	; 0x4ac4 <__unpack_f+0x88>
    4a76:	21 15       	cp	r18, r1
    4a78:	31 05       	cpc	r19, r1
    4a7a:	41 05       	cpc	r20, r1
    4a7c:	51 05       	cpc	r21, r1
    4a7e:	11 f4       	brne	.+4      	; 0x4a84 <__unpack_f+0x48>
    4a80:	82 e0       	ldi	r24, 0x02	; 2
    4a82:	29 c0       	rjmp	.+82     	; 0x4ad6 <__unpack_f+0x9a>
    4a84:	82 e8       	ldi	r24, 0x82	; 130
    4a86:	9f ef       	ldi	r25, 0xFF	; 255
    4a88:	93 83       	std	Z+3, r25	; 0x03
    4a8a:	82 83       	std	Z+2, r24	; 0x02
    4a8c:	67 e0       	ldi	r22, 0x07	; 7
    4a8e:	22 0f       	add	r18, r18
    4a90:	33 1f       	adc	r19, r19
    4a92:	44 1f       	adc	r20, r20
    4a94:	55 1f       	adc	r21, r21
    4a96:	6a 95       	dec	r22
    4a98:	d1 f7       	brne	.-12     	; 0x4a8e <__unpack_f+0x52>
    4a9a:	83 e0       	ldi	r24, 0x03	; 3
    4a9c:	80 83       	st	Z, r24
    4a9e:	09 c0       	rjmp	.+18     	; 0x4ab2 <__unpack_f+0x76>
    4aa0:	22 0f       	add	r18, r18
    4aa2:	33 1f       	adc	r19, r19
    4aa4:	44 1f       	adc	r20, r20
    4aa6:	55 1f       	adc	r21, r21
    4aa8:	82 81       	ldd	r24, Z+2	; 0x02
    4aaa:	93 81       	ldd	r25, Z+3	; 0x03
    4aac:	01 97       	sbiw	r24, 0x01	; 1
    4aae:	93 83       	std	Z+3, r25	; 0x03
    4ab0:	82 83       	std	Z+2, r24	; 0x02
    4ab2:	20 30       	cpi	r18, 0x00	; 0
    4ab4:	80 e0       	ldi	r24, 0x00	; 0
    4ab6:	38 07       	cpc	r19, r24
    4ab8:	80 e0       	ldi	r24, 0x00	; 0
    4aba:	48 07       	cpc	r20, r24
    4abc:	80 e4       	ldi	r24, 0x40	; 64
    4abe:	58 07       	cpc	r21, r24
    4ac0:	78 f3       	brcs	.-34     	; 0x4aa0 <__unpack_f+0x64>
    4ac2:	20 c0       	rjmp	.+64     	; 0x4b04 <__unpack_f+0xc8>
    4ac4:	8f 3f       	cpi	r24, 0xFF	; 255
    4ac6:	91 05       	cpc	r25, r1
    4ac8:	79 f4       	brne	.+30     	; 0x4ae8 <__unpack_f+0xac>
    4aca:	21 15       	cp	r18, r1
    4acc:	31 05       	cpc	r19, r1
    4ace:	41 05       	cpc	r20, r1
    4ad0:	51 05       	cpc	r21, r1
    4ad2:	19 f4       	brne	.+6      	; 0x4ada <__unpack_f+0x9e>
    4ad4:	84 e0       	ldi	r24, 0x04	; 4
    4ad6:	80 83       	st	Z, r24
    4ad8:	08 95       	ret
    4ada:	44 ff       	sbrs	r20, 4
    4adc:	03 c0       	rjmp	.+6      	; 0x4ae4 <__unpack_f+0xa8>
    4ade:	81 e0       	ldi	r24, 0x01	; 1
    4ae0:	80 83       	st	Z, r24
    4ae2:	10 c0       	rjmp	.+32     	; 0x4b04 <__unpack_f+0xc8>
    4ae4:	10 82       	st	Z, r1
    4ae6:	0e c0       	rjmp	.+28     	; 0x4b04 <__unpack_f+0xc8>
    4ae8:	8f 57       	subi	r24, 0x7F	; 127
    4aea:	90 40       	sbci	r25, 0x00	; 0
    4aec:	93 83       	std	Z+3, r25	; 0x03
    4aee:	82 83       	std	Z+2, r24	; 0x02
    4af0:	83 e0       	ldi	r24, 0x03	; 3
    4af2:	80 83       	st	Z, r24
    4af4:	87 e0       	ldi	r24, 0x07	; 7
    4af6:	22 0f       	add	r18, r18
    4af8:	33 1f       	adc	r19, r19
    4afa:	44 1f       	adc	r20, r20
    4afc:	55 1f       	adc	r21, r21
    4afe:	8a 95       	dec	r24
    4b00:	d1 f7       	brne	.-12     	; 0x4af6 <__unpack_f+0xba>
    4b02:	50 64       	ori	r21, 0x40	; 64
    4b04:	24 83       	std	Z+4, r18	; 0x04
    4b06:	35 83       	std	Z+5, r19	; 0x05
    4b08:	46 83       	std	Z+6, r20	; 0x06
    4b0a:	57 83       	std	Z+7, r21	; 0x07
    4b0c:	08 95       	ret

00004b0e <__fpcmp_parts_f>:
    4b0e:	fc 01       	movw	r30, r24
    4b10:	db 01       	movw	r26, r22
    4b12:	90 81       	ld	r25, Z
    4b14:	92 30       	cpi	r25, 0x02	; 2
    4b16:	08 f4       	brcc	.+2      	; 0x4b1a <__fpcmp_parts_f+0xc>
    4b18:	49 c0       	rjmp	.+146    	; 0x4bac <__fpcmp_parts_f+0x9e>
    4b1a:	8c 91       	ld	r24, X
    4b1c:	82 30       	cpi	r24, 0x02	; 2
    4b1e:	08 f4       	brcc	.+2      	; 0x4b22 <__fpcmp_parts_f+0x14>
    4b20:	45 c0       	rjmp	.+138    	; 0x4bac <__fpcmp_parts_f+0x9e>
    4b22:	94 30       	cpi	r25, 0x04	; 4
    4b24:	51 f4       	brne	.+20     	; 0x4b3a <__fpcmp_parts_f+0x2c>
    4b26:	61 81       	ldd	r22, Z+1	; 0x01
    4b28:	84 30       	cpi	r24, 0x04	; 4
    4b2a:	b1 f5       	brne	.+108    	; 0x4b98 <__fpcmp_parts_f+0x8a>
    4b2c:	11 96       	adiw	r26, 0x01	; 1
    4b2e:	2c 91       	ld	r18, X
    4b30:	11 97       	sbiw	r26, 0x01	; 1
    4b32:	30 e0       	ldi	r19, 0x00	; 0
    4b34:	26 1b       	sub	r18, r22
    4b36:	31 09       	sbc	r19, r1
    4b38:	41 c0       	rjmp	.+130    	; 0x4bbc <__fpcmp_parts_f+0xae>
    4b3a:	84 30       	cpi	r24, 0x04	; 4
    4b3c:	21 f0       	breq	.+8      	; 0x4b46 <__fpcmp_parts_f+0x38>
    4b3e:	92 30       	cpi	r25, 0x02	; 2
    4b40:	41 f4       	brne	.+16     	; 0x4b52 <__fpcmp_parts_f+0x44>
    4b42:	82 30       	cpi	r24, 0x02	; 2
    4b44:	b1 f1       	breq	.+108    	; 0x4bb2 <__fpcmp_parts_f+0xa4>
    4b46:	11 96       	adiw	r26, 0x01	; 1
    4b48:	8c 91       	ld	r24, X
    4b4a:	11 97       	sbiw	r26, 0x01	; 1
    4b4c:	88 23       	and	r24, r24
    4b4e:	a1 f1       	breq	.+104    	; 0x4bb8 <__fpcmp_parts_f+0xaa>
    4b50:	2d c0       	rjmp	.+90     	; 0x4bac <__fpcmp_parts_f+0x9e>
    4b52:	61 81       	ldd	r22, Z+1	; 0x01
    4b54:	82 30       	cpi	r24, 0x02	; 2
    4b56:	01 f1       	breq	.+64     	; 0x4b98 <__fpcmp_parts_f+0x8a>
    4b58:	11 96       	adiw	r26, 0x01	; 1
    4b5a:	8c 91       	ld	r24, X
    4b5c:	11 97       	sbiw	r26, 0x01	; 1
    4b5e:	68 17       	cp	r22, r24
    4b60:	d9 f4       	brne	.+54     	; 0x4b98 <__fpcmp_parts_f+0x8a>
    4b62:	22 81       	ldd	r18, Z+2	; 0x02
    4b64:	33 81       	ldd	r19, Z+3	; 0x03
    4b66:	12 96       	adiw	r26, 0x02	; 2
    4b68:	8d 91       	ld	r24, X+
    4b6a:	9c 91       	ld	r25, X
    4b6c:	13 97       	sbiw	r26, 0x03	; 3
    4b6e:	82 17       	cp	r24, r18
    4b70:	93 07       	cpc	r25, r19
    4b72:	94 f0       	brlt	.+36     	; 0x4b98 <__fpcmp_parts_f+0x8a>
    4b74:	28 17       	cp	r18, r24
    4b76:	39 07       	cpc	r19, r25
    4b78:	bc f0       	brlt	.+46     	; 0x4ba8 <__fpcmp_parts_f+0x9a>
    4b7a:	24 81       	ldd	r18, Z+4	; 0x04
    4b7c:	35 81       	ldd	r19, Z+5	; 0x05
    4b7e:	46 81       	ldd	r20, Z+6	; 0x06
    4b80:	57 81       	ldd	r21, Z+7	; 0x07
    4b82:	14 96       	adiw	r26, 0x04	; 4
    4b84:	8d 91       	ld	r24, X+
    4b86:	9d 91       	ld	r25, X+
    4b88:	0d 90       	ld	r0, X+
    4b8a:	bc 91       	ld	r27, X
    4b8c:	a0 2d       	mov	r26, r0
    4b8e:	82 17       	cp	r24, r18
    4b90:	93 07       	cpc	r25, r19
    4b92:	a4 07       	cpc	r26, r20
    4b94:	b5 07       	cpc	r27, r21
    4b96:	18 f4       	brcc	.+6      	; 0x4b9e <__fpcmp_parts_f+0x90>
    4b98:	66 23       	and	r22, r22
    4b9a:	41 f0       	breq	.+16     	; 0x4bac <__fpcmp_parts_f+0x9e>
    4b9c:	0d c0       	rjmp	.+26     	; 0x4bb8 <__fpcmp_parts_f+0xaa>
    4b9e:	28 17       	cp	r18, r24
    4ba0:	39 07       	cpc	r19, r25
    4ba2:	4a 07       	cpc	r20, r26
    4ba4:	5b 07       	cpc	r21, r27
    4ba6:	28 f4       	brcc	.+10     	; 0x4bb2 <__fpcmp_parts_f+0xa4>
    4ba8:	66 23       	and	r22, r22
    4baa:	31 f0       	breq	.+12     	; 0x4bb8 <__fpcmp_parts_f+0xaa>
    4bac:	21 e0       	ldi	r18, 0x01	; 1
    4bae:	30 e0       	ldi	r19, 0x00	; 0
    4bb0:	05 c0       	rjmp	.+10     	; 0x4bbc <__fpcmp_parts_f+0xae>
    4bb2:	20 e0       	ldi	r18, 0x00	; 0
    4bb4:	30 e0       	ldi	r19, 0x00	; 0
    4bb6:	02 c0       	rjmp	.+4      	; 0x4bbc <__fpcmp_parts_f+0xae>
    4bb8:	2f ef       	ldi	r18, 0xFF	; 255
    4bba:	3f ef       	ldi	r19, 0xFF	; 255
    4bbc:	c9 01       	movw	r24, r18
    4bbe:	08 95       	ret

00004bc0 <vfprintf>:
    4bc0:	ac e0       	ldi	r26, 0x0C	; 12
    4bc2:	b0 e0       	ldi	r27, 0x00	; 0
    4bc4:	e6 ee       	ldi	r30, 0xE6	; 230
    4bc6:	f5 e2       	ldi	r31, 0x25	; 37
    4bc8:	0c 94 58 29 	jmp	0x52b0	; 0x52b0 <__prologue_saves__+0x8>
    4bcc:	6c 01       	movw	r12, r24
    4bce:	3b 01       	movw	r6, r22
    4bd0:	8a 01       	movw	r16, r20
    4bd2:	fc 01       	movw	r30, r24
    4bd4:	17 82       	std	Z+7, r1	; 0x07
    4bd6:	16 82       	std	Z+6, r1	; 0x06
    4bd8:	83 81       	ldd	r24, Z+3	; 0x03
    4bda:	81 fd       	sbrc	r24, 1
    4bdc:	03 c0       	rjmp	.+6      	; 0x4be4 <vfprintf+0x24>
    4bde:	1e c1       	rjmp	.+572    	; 0x4e1c <vfprintf+0x25c>
    4be0:	85 01       	movw	r16, r10
    4be2:	04 c0       	rjmp	.+8      	; 0x4bec <vfprintf+0x2c>
    4be4:	4e 01       	movw	r8, r28
    4be6:	08 94       	sec
    4be8:	81 1c       	adc	r8, r1
    4bea:	91 1c       	adc	r9, r1
    4bec:	f6 01       	movw	r30, r12
    4bee:	e3 80       	ldd	r14, Z+3	; 0x03
    4bf0:	f3 01       	movw	r30, r6
    4bf2:	e3 fc       	sbrc	r14, 3
    4bf4:	85 91       	lpm	r24, Z+
    4bf6:	e3 fe       	sbrs	r14, 3
    4bf8:	81 91       	ld	r24, Z+
    4bfa:	3f 01       	movw	r6, r30
    4bfc:	88 23       	and	r24, r24
    4bfe:	09 f4       	brne	.+2      	; 0x4c02 <vfprintf+0x42>
    4c00:	09 c1       	rjmp	.+530    	; 0x4e14 <vfprintf+0x254>
    4c02:	85 32       	cpi	r24, 0x25	; 37
    4c04:	51 f4       	brne	.+20     	; 0x4c1a <vfprintf+0x5a>
    4c06:	e3 fc       	sbrc	r14, 3
    4c08:	25 91       	lpm	r18, Z+
    4c0a:	e3 fe       	sbrs	r14, 3
    4c0c:	21 91       	ld	r18, Z+
    4c0e:	3f 01       	movw	r6, r30
    4c10:	25 32       	cpi	r18, 0x25	; 37
    4c12:	11 f0       	breq	.+4      	; 0x4c18 <vfprintf+0x58>
    4c14:	ff 24       	eor	r15, r15
    4c16:	23 c0       	rjmp	.+70     	; 0x4c5e <vfprintf+0x9e>
    4c18:	85 e2       	ldi	r24, 0x25	; 37
    4c1a:	90 e0       	ldi	r25, 0x00	; 0
    4c1c:	b6 01       	movw	r22, r12
    4c1e:	0e 94 bf 2a 	call	0x557e	; 0x557e <fputc>
    4c22:	58 01       	movw	r10, r16
    4c24:	dd cf       	rjmp	.-70     	; 0x4be0 <vfprintf+0x20>
    4c26:	22 23       	and	r18, r18
    4c28:	09 f4       	brne	.+2      	; 0x4c2c <vfprintf+0x6c>
    4c2a:	89 c0       	rjmp	.+274    	; 0x4d3e <vfprintf+0x17e>
    4c2c:	85 e4       	ldi	r24, 0x45	; 69
    4c2e:	91 e0       	ldi	r25, 0x01	; 1
    4c30:	62 2f       	mov	r22, r18
    4c32:	70 e0       	ldi	r23, 0x00	; 0
    4c34:	2c 87       	std	Y+12, r18	; 0x0c
    4c36:	0e 94 72 2a 	call	0x54e4	; 0x54e4 <strchr_P>
    4c3a:	2c 85       	ldd	r18, Y+12	; 0x0c
    4c3c:	00 97       	sbiw	r24, 0x00	; 0
    4c3e:	49 f4       	brne	.+18     	; 0x4c52 <vfprintf+0x92>
    4c40:	23 32       	cpi	r18, 0x23	; 35
    4c42:	19 f4       	brne	.+6      	; 0x4c4a <vfprintf+0x8a>
    4c44:	f0 e1       	ldi	r31, 0x10	; 16
    4c46:	ff 2a       	or	r15, r31
    4c48:	04 c0       	rjmp	.+8      	; 0x4c52 <vfprintf+0x92>
    4c4a:	2c 36       	cpi	r18, 0x6C	; 108
    4c4c:	69 f4       	brne	.+26     	; 0x4c68 <vfprintf+0xa8>
    4c4e:	20 e8       	ldi	r18, 0x80	; 128
    4c50:	f2 2a       	or	r15, r18
    4c52:	f3 01       	movw	r30, r6
    4c54:	e3 fc       	sbrc	r14, 3
    4c56:	25 91       	lpm	r18, Z+
    4c58:	e3 fe       	sbrs	r14, 3
    4c5a:	21 91       	ld	r18, Z+
    4c5c:	3f 01       	movw	r6, r30
    4c5e:	f7 fe       	sbrs	r15, 7
    4c60:	e2 cf       	rjmp	.-60     	; 0x4c26 <vfprintf+0x66>
    4c62:	22 23       	and	r18, r18
    4c64:	09 f4       	brne	.+2      	; 0x4c68 <vfprintf+0xa8>
    4c66:	3f c0       	rjmp	.+126    	; 0x4ce6 <vfprintf+0x126>
    4c68:	8e e3       	ldi	r24, 0x3E	; 62
    4c6a:	91 e0       	ldi	r25, 0x01	; 1
    4c6c:	62 2f       	mov	r22, r18
    4c6e:	70 e0       	ldi	r23, 0x00	; 0
    4c70:	2c 87       	std	Y+12, r18	; 0x0c
    4c72:	0e 94 72 2a 	call	0x54e4	; 0x54e4 <strchr_P>
    4c76:	2c 85       	ldd	r18, Y+12	; 0x0c
    4c78:	00 97       	sbiw	r24, 0x00	; 0
    4c7a:	41 f0       	breq	.+16     	; 0x4c8c <vfprintf+0xcc>
    4c7c:	64 e0       	ldi	r22, 0x04	; 4
    4c7e:	a6 2e       	mov	r10, r22
    4c80:	b1 2c       	mov	r11, r1
    4c82:	a0 0e       	add	r10, r16
    4c84:	b1 1e       	adc	r11, r17
    4c86:	8f e3       	ldi	r24, 0x3F	; 63
    4c88:	90 e0       	ldi	r25, 0x00	; 0
    4c8a:	0f c0       	rjmp	.+30     	; 0x4caa <vfprintf+0xea>
    4c8c:	23 36       	cpi	r18, 0x63	; 99
    4c8e:	29 f0       	breq	.+10     	; 0x4c9a <vfprintf+0xda>
    4c90:	23 37       	cpi	r18, 0x73	; 115
    4c92:	89 f0       	breq	.+34     	; 0x4cb6 <vfprintf+0xf6>
    4c94:	23 35       	cpi	r18, 0x53	; 83
    4c96:	29 f5       	brne	.+74     	; 0x4ce2 <vfprintf+0x122>
    4c98:	0c c0       	rjmp	.+24     	; 0x4cb2 <vfprintf+0xf2>
    4c9a:	52 e0       	ldi	r21, 0x02	; 2
    4c9c:	a5 2e       	mov	r10, r21
    4c9e:	b1 2c       	mov	r11, r1
    4ca0:	a0 0e       	add	r10, r16
    4ca2:	b1 1e       	adc	r11, r17
    4ca4:	f8 01       	movw	r30, r16
    4ca6:	80 81       	ld	r24, Z
    4ca8:	91 81       	ldd	r25, Z+1	; 0x01
    4caa:	b6 01       	movw	r22, r12
    4cac:	0e 94 bf 2a 	call	0x557e	; 0x557e <fputc>
    4cb0:	97 cf       	rjmp	.-210    	; 0x4be0 <vfprintf+0x20>
    4cb2:	f1 e0       	ldi	r31, 0x01	; 1
    4cb4:	ff 2a       	or	r15, r31
    4cb6:	42 e0       	ldi	r20, 0x02	; 2
    4cb8:	a4 2e       	mov	r10, r20
    4cba:	b1 2c       	mov	r11, r1
    4cbc:	a0 0e       	add	r10, r16
    4cbe:	b1 1e       	adc	r11, r17
    4cc0:	f8 01       	movw	r30, r16
    4cc2:	00 81       	ld	r16, Z
    4cc4:	11 81       	ldd	r17, Z+1	; 0x01
    4cc6:	04 c0       	rjmp	.+8      	; 0x4cd0 <vfprintf+0x110>
    4cc8:	90 e0       	ldi	r25, 0x00	; 0
    4cca:	b6 01       	movw	r22, r12
    4ccc:	0e 94 bf 2a 	call	0x557e	; 0x557e <fputc>
    4cd0:	f8 01       	movw	r30, r16
    4cd2:	f0 fc       	sbrc	r15, 0
    4cd4:	85 91       	lpm	r24, Z+
    4cd6:	f0 fe       	sbrs	r15, 0
    4cd8:	81 91       	ld	r24, Z+
    4cda:	8f 01       	movw	r16, r30
    4cdc:	88 23       	and	r24, r24
    4cde:	a1 f7       	brne	.-24     	; 0x4cc8 <vfprintf+0x108>
    4ce0:	7f cf       	rjmp	.-258    	; 0x4be0 <vfprintf+0x20>
    4ce2:	24 36       	cpi	r18, 0x64	; 100
    4ce4:	11 f0       	breq	.+4      	; 0x4cea <vfprintf+0x12a>
    4ce6:	29 36       	cpi	r18, 0x69	; 105
    4ce8:	51 f5       	brne	.+84     	; 0x4d3e <vfprintf+0x17e>
    4cea:	f7 fe       	sbrs	r15, 7
    4cec:	0b c0       	rjmp	.+22     	; 0x4d04 <vfprintf+0x144>
    4cee:	34 e0       	ldi	r19, 0x04	; 4
    4cf0:	a3 2e       	mov	r10, r19
    4cf2:	b1 2c       	mov	r11, r1
    4cf4:	a0 0e       	add	r10, r16
    4cf6:	b1 1e       	adc	r11, r17
    4cf8:	f8 01       	movw	r30, r16
    4cfa:	60 81       	ld	r22, Z
    4cfc:	71 81       	ldd	r23, Z+1	; 0x01
    4cfe:	82 81       	ldd	r24, Z+2	; 0x02
    4d00:	93 81       	ldd	r25, Z+3	; 0x03
    4d02:	0c c0       	rjmp	.+24     	; 0x4d1c <vfprintf+0x15c>
    4d04:	22 e0       	ldi	r18, 0x02	; 2
    4d06:	a2 2e       	mov	r10, r18
    4d08:	b1 2c       	mov	r11, r1
    4d0a:	a0 0e       	add	r10, r16
    4d0c:	b1 1e       	adc	r11, r17
    4d0e:	f8 01       	movw	r30, r16
    4d10:	60 81       	ld	r22, Z
    4d12:	71 81       	ldd	r23, Z+1	; 0x01
    4d14:	88 27       	eor	r24, r24
    4d16:	77 fd       	sbrc	r23, 7
    4d18:	80 95       	com	r24
    4d1a:	98 2f       	mov	r25, r24
    4d1c:	ff ee       	ldi	r31, 0xEF	; 239
    4d1e:	ff 22       	and	r15, r31
    4d20:	97 ff       	sbrs	r25, 7
    4d22:	09 c0       	rjmp	.+18     	; 0x4d36 <vfprintf+0x176>
    4d24:	90 95       	com	r25
    4d26:	80 95       	com	r24
    4d28:	70 95       	com	r23
    4d2a:	61 95       	neg	r22
    4d2c:	7f 4f       	sbci	r23, 0xFF	; 255
    4d2e:	8f 4f       	sbci	r24, 0xFF	; 255
    4d30:	9f 4f       	sbci	r25, 0xFF	; 255
    4d32:	20 e4       	ldi	r18, 0x40	; 64
    4d34:	f2 2a       	or	r15, r18
    4d36:	a4 01       	movw	r20, r8
    4d38:	2a e0       	ldi	r18, 0x0A	; 10
    4d3a:	30 e0       	ldi	r19, 0x00	; 0
    4d3c:	3b c0       	rjmp	.+118    	; 0x4db4 <vfprintf+0x1f4>
    4d3e:	20 37       	cpi	r18, 0x70	; 112
    4d40:	99 f0       	breq	.+38     	; 0x4d68 <vfprintf+0x1a8>
    4d42:	21 37       	cpi	r18, 0x71	; 113
    4d44:	30 f4       	brcc	.+12     	; 0x4d52 <vfprintf+0x192>
    4d46:	28 35       	cpi	r18, 0x58	; 88
    4d48:	b1 f0       	breq	.+44     	; 0x4d76 <vfprintf+0x1b6>
    4d4a:	2f 36       	cpi	r18, 0x6F	; 111
    4d4c:	09 f0       	breq	.+2      	; 0x4d50 <vfprintf+0x190>
    4d4e:	62 c0       	rjmp	.+196    	; 0x4e14 <vfprintf+0x254>
    4d50:	17 c0       	rjmp	.+46     	; 0x4d80 <vfprintf+0x1c0>
    4d52:	25 37       	cpi	r18, 0x75	; 117
    4d54:	21 f0       	breq	.+8      	; 0x4d5e <vfprintf+0x19e>
    4d56:	28 37       	cpi	r18, 0x78	; 120
    4d58:	09 f0       	breq	.+2      	; 0x4d5c <vfprintf+0x19c>
    4d5a:	5c c0       	rjmp	.+184    	; 0x4e14 <vfprintf+0x254>
    4d5c:	07 c0       	rjmp	.+14     	; 0x4d6c <vfprintf+0x1ac>
    4d5e:	8f ee       	ldi	r24, 0xEF	; 239
    4d60:	f8 22       	and	r15, r24
    4d62:	2a e0       	ldi	r18, 0x0A	; 10
    4d64:	30 e0       	ldi	r19, 0x00	; 0
    4d66:	0e c0       	rjmp	.+28     	; 0x4d84 <vfprintf+0x1c4>
    4d68:	e0 e1       	ldi	r30, 0x10	; 16
    4d6a:	fe 2a       	or	r15, r30
    4d6c:	f4 e2       	ldi	r31, 0x24	; 36
    4d6e:	ff 2a       	or	r15, r31
    4d70:	20 e1       	ldi	r18, 0x10	; 16
    4d72:	30 e0       	ldi	r19, 0x00	; 0
    4d74:	07 c0       	rjmp	.+14     	; 0x4d84 <vfprintf+0x1c4>
    4d76:	24 e0       	ldi	r18, 0x04	; 4
    4d78:	f2 2a       	or	r15, r18
    4d7a:	20 e1       	ldi	r18, 0x10	; 16
    4d7c:	32 e0       	ldi	r19, 0x02	; 2
    4d7e:	02 c0       	rjmp	.+4      	; 0x4d84 <vfprintf+0x1c4>
    4d80:	28 e0       	ldi	r18, 0x08	; 8
    4d82:	30 e0       	ldi	r19, 0x00	; 0
    4d84:	f7 fe       	sbrs	r15, 7
    4d86:	0b c0       	rjmp	.+22     	; 0x4d9e <vfprintf+0x1de>
    4d88:	94 e0       	ldi	r25, 0x04	; 4
    4d8a:	a9 2e       	mov	r10, r25
    4d8c:	b1 2c       	mov	r11, r1
    4d8e:	a0 0e       	add	r10, r16
    4d90:	b1 1e       	adc	r11, r17
    4d92:	f8 01       	movw	r30, r16
    4d94:	60 81       	ld	r22, Z
    4d96:	71 81       	ldd	r23, Z+1	; 0x01
    4d98:	82 81       	ldd	r24, Z+2	; 0x02
    4d9a:	93 81       	ldd	r25, Z+3	; 0x03
    4d9c:	0a c0       	rjmp	.+20     	; 0x4db2 <vfprintf+0x1f2>
    4d9e:	82 e0       	ldi	r24, 0x02	; 2
    4da0:	a8 2e       	mov	r10, r24
    4da2:	b1 2c       	mov	r11, r1
    4da4:	a0 0e       	add	r10, r16
    4da6:	b1 1e       	adc	r11, r17
    4da8:	f8 01       	movw	r30, r16
    4daa:	60 81       	ld	r22, Z
    4dac:	71 81       	ldd	r23, Z+1	; 0x01
    4dae:	80 e0       	ldi	r24, 0x00	; 0
    4db0:	90 e0       	ldi	r25, 0x00	; 0
    4db2:	a4 01       	movw	r20, r8
    4db4:	0e 94 06 2b 	call	0x560c	; 0x560c <__ultoa_invert>
    4db8:	e8 2e       	mov	r14, r24
    4dba:	e8 18       	sub	r14, r8
    4dbc:	0f 2d       	mov	r16, r15
    4dbe:	10 e0       	ldi	r17, 0x00	; 0
    4dc0:	f6 fe       	sbrs	r15, 6
    4dc2:	05 c0       	rjmp	.+10     	; 0x4dce <vfprintf+0x20e>
    4dc4:	8d e2       	ldi	r24, 0x2D	; 45
    4dc6:	90 e0       	ldi	r25, 0x00	; 0
    4dc8:	b6 01       	movw	r22, r12
    4dca:	0e 94 bf 2a 	call	0x557e	; 0x557e <fputc>
    4dce:	04 ff       	sbrs	r16, 4
    4dd0:	15 c0       	rjmp	.+42     	; 0x4dfc <vfprintf+0x23c>
    4dd2:	fe 01       	movw	r30, r28
    4dd4:	ee 0d       	add	r30, r14
    4dd6:	f1 1d       	adc	r31, r1
    4dd8:	80 81       	ld	r24, Z
    4dda:	80 33       	cpi	r24, 0x30	; 48
    4ddc:	79 f0       	breq	.+30     	; 0x4dfc <vfprintf+0x23c>
    4dde:	80 e3       	ldi	r24, 0x30	; 48
    4de0:	90 e0       	ldi	r25, 0x00	; 0
    4de2:	b6 01       	movw	r22, r12
    4de4:	0e 94 bf 2a 	call	0x557e	; 0x557e <fputc>
    4de8:	02 ff       	sbrs	r16, 2
    4dea:	08 c0       	rjmp	.+16     	; 0x4dfc <vfprintf+0x23c>
    4dec:	c8 01       	movw	r24, r16
    4dee:	80 72       	andi	r24, 0x20	; 32
    4df0:	90 70       	andi	r25, 0x00	; 0
    4df2:	88 5a       	subi	r24, 0xA8	; 168
    4df4:	9f 4f       	sbci	r25, 0xFF	; 255
    4df6:	b6 01       	movw	r22, r12
    4df8:	0e 94 bf 2a 	call	0x557e	; 0x557e <fputc>
    4dfc:	ea 94       	dec	r14
    4dfe:	f4 01       	movw	r30, r8
    4e00:	ee 0d       	add	r30, r14
    4e02:	f1 1d       	adc	r31, r1
    4e04:	80 81       	ld	r24, Z
    4e06:	90 e0       	ldi	r25, 0x00	; 0
    4e08:	b6 01       	movw	r22, r12
    4e0a:	0e 94 bf 2a 	call	0x557e	; 0x557e <fputc>
    4e0e:	ee 20       	and	r14, r14
    4e10:	a9 f7       	brne	.-22     	; 0x4dfc <vfprintf+0x23c>
    4e12:	e6 ce       	rjmp	.-564    	; 0x4be0 <vfprintf+0x20>
    4e14:	f6 01       	movw	r30, r12
    4e16:	26 81       	ldd	r18, Z+6	; 0x06
    4e18:	37 81       	ldd	r19, Z+7	; 0x07
    4e1a:	02 c0       	rjmp	.+4      	; 0x4e20 <vfprintf+0x260>
    4e1c:	2f ef       	ldi	r18, 0xFF	; 255
    4e1e:	3f ef       	ldi	r19, 0xFF	; 255
    4e20:	c9 01       	movw	r24, r18
    4e22:	2c 96       	adiw	r28, 0x0c	; 12
    4e24:	ee e0       	ldi	r30, 0x0E	; 14
    4e26:	0c 94 74 29 	jmp	0x52e8	; 0x52e8 <__epilogue_restores__+0x8>

00004e2a <putval>:
    4e2a:	20 fd       	sbrc	r18, 0
    4e2c:	09 c0       	rjmp	.+18     	; 0x4e40 <putval+0x16>
    4e2e:	fc 01       	movw	r30, r24
    4e30:	23 fd       	sbrc	r18, 3
    4e32:	05 c0       	rjmp	.+10     	; 0x4e3e <putval+0x14>
    4e34:	22 ff       	sbrs	r18, 2
    4e36:	02 c0       	rjmp	.+4      	; 0x4e3c <putval+0x12>
    4e38:	73 83       	std	Z+3, r23	; 0x03
    4e3a:	62 83       	std	Z+2, r22	; 0x02
    4e3c:	51 83       	std	Z+1, r21	; 0x01
    4e3e:	40 83       	st	Z, r20
    4e40:	08 95       	ret

00004e42 <mulacc>:
    4e42:	ef 92       	push	r14
    4e44:	ff 92       	push	r15
    4e46:	0f 93       	push	r16
    4e48:	1f 93       	push	r17
    4e4a:	44 fd       	sbrc	r20, 4
    4e4c:	10 c0       	rjmp	.+32     	; 0x4e6e <mulacc+0x2c>
    4e4e:	46 fd       	sbrc	r20, 6
    4e50:	10 c0       	rjmp	.+32     	; 0x4e72 <mulacc+0x30>
    4e52:	db 01       	movw	r26, r22
    4e54:	fc 01       	movw	r30, r24
    4e56:	aa 0f       	add	r26, r26
    4e58:	bb 1f       	adc	r27, r27
    4e5a:	ee 1f       	adc	r30, r30
    4e5c:	ff 1f       	adc	r31, r31
    4e5e:	10 94       	com	r1
    4e60:	d1 f7       	brne	.-12     	; 0x4e56 <mulacc+0x14>
    4e62:	6a 0f       	add	r22, r26
    4e64:	7b 1f       	adc	r23, r27
    4e66:	8e 1f       	adc	r24, r30
    4e68:	9f 1f       	adc	r25, r31
    4e6a:	31 e0       	ldi	r19, 0x01	; 1
    4e6c:	03 c0       	rjmp	.+6      	; 0x4e74 <mulacc+0x32>
    4e6e:	33 e0       	ldi	r19, 0x03	; 3
    4e70:	01 c0       	rjmp	.+2      	; 0x4e74 <mulacc+0x32>
    4e72:	34 e0       	ldi	r19, 0x04	; 4
    4e74:	66 0f       	add	r22, r22
    4e76:	77 1f       	adc	r23, r23
    4e78:	88 1f       	adc	r24, r24
    4e7a:	99 1f       	adc	r25, r25
    4e7c:	31 50       	subi	r19, 0x01	; 1
    4e7e:	d1 f7       	brne	.-12     	; 0x4e74 <mulacc+0x32>
    4e80:	7b 01       	movw	r14, r22
    4e82:	8c 01       	movw	r16, r24
    4e84:	e2 0e       	add	r14, r18
    4e86:	f1 1c       	adc	r15, r1
    4e88:	01 1d       	adc	r16, r1
    4e8a:	11 1d       	adc	r17, r1
    4e8c:	a8 01       	movw	r20, r16
    4e8e:	97 01       	movw	r18, r14
    4e90:	b7 01       	movw	r22, r14
    4e92:	ca 01       	movw	r24, r20
    4e94:	1f 91       	pop	r17
    4e96:	0f 91       	pop	r16
    4e98:	ff 90       	pop	r15
    4e9a:	ef 90       	pop	r14
    4e9c:	08 95       	ret

00004e9e <skip_spaces>:
    4e9e:	ef 92       	push	r14
    4ea0:	ff 92       	push	r15
    4ea2:	0f 93       	push	r16
    4ea4:	1f 93       	push	r17
    4ea6:	cf 93       	push	r28
    4ea8:	df 93       	push	r29
    4eaa:	8c 01       	movw	r16, r24
    4eac:	c8 01       	movw	r24, r16
    4eae:	0e 94 7d 2a 	call	0x54fa	; 0x54fa <fgetc>
    4eb2:	ec 01       	movw	r28, r24
    4eb4:	97 fd       	sbrc	r25, 7
    4eb6:	09 c0       	rjmp	.+18     	; 0x4eca <skip_spaces+0x2c>
    4eb8:	0e 94 6a 2a 	call	0x54d4	; 0x54d4 <isspace>
    4ebc:	00 97       	sbiw	r24, 0x00	; 0
    4ebe:	b1 f7       	brne	.-20     	; 0x4eac <skip_spaces+0xe>
    4ec0:	7e 01       	movw	r14, r28
    4ec2:	ce 01       	movw	r24, r28
    4ec4:	b8 01       	movw	r22, r16
    4ec6:	0e 94 eb 2a 	call	0x55d6	; 0x55d6 <ungetc>
    4eca:	ce 01       	movw	r24, r28
    4ecc:	cd b7       	in	r28, 0x3d	; 61
    4ece:	de b7       	in	r29, 0x3e	; 62
    4ed0:	e6 e0       	ldi	r30, 0x06	; 6
    4ed2:	0c 94 7c 29 	jmp	0x52f8	; 0x52f8 <__epilogue_restores__+0x18>

00004ed6 <conv_int>:
    4ed6:	8f 92       	push	r8
    4ed8:	9f 92       	push	r9
    4eda:	af 92       	push	r10
    4edc:	bf 92       	push	r11
    4ede:	df 92       	push	r13
    4ee0:	ef 92       	push	r14
    4ee2:	ff 92       	push	r15
    4ee4:	0f 93       	push	r16
    4ee6:	1f 93       	push	r17
    4ee8:	df 93       	push	r29
    4eea:	cf 93       	push	r28
    4eec:	0f 92       	push	r0
    4eee:	cd b7       	in	r28, 0x3d	; 61
    4ef0:	de b7       	in	r29, 0x3e	; 62
    4ef2:	4c 01       	movw	r8, r24
    4ef4:	d6 2e       	mov	r13, r22
    4ef6:	5a 01       	movw	r10, r20
    4ef8:	12 2f       	mov	r17, r18
    4efa:	0e 94 7d 2a 	call	0x54fa	; 0x54fa <fgetc>
    4efe:	8b 32       	cpi	r24, 0x2B	; 43
    4f00:	19 f0       	breq	.+6      	; 0x4f08 <conv_int+0x32>
    4f02:	8d 32       	cpi	r24, 0x2D	; 45
    4f04:	49 f4       	brne	.+18     	; 0x4f18 <conv_int+0x42>
    4f06:	10 68       	ori	r17, 0x80	; 128
    4f08:	da 94       	dec	r13
    4f0a:	09 f4       	brne	.+2      	; 0x4f0e <conv_int+0x38>
    4f0c:	6c c0       	rjmp	.+216    	; 0x4fe6 <conv_int+0x110>
    4f0e:	c4 01       	movw	r24, r8
    4f10:	0e 94 7d 2a 	call	0x54fa	; 0x54fa <fgetc>
    4f14:	97 fd       	sbrc	r25, 7
    4f16:	67 c0       	rjmp	.+206    	; 0x4fe6 <conv_int+0x110>
    4f18:	31 2f       	mov	r19, r17
    4f1a:	3d 7f       	andi	r19, 0xFD	; 253
    4f1c:	23 2f       	mov	r18, r19
    4f1e:	20 73       	andi	r18, 0x30	; 48
    4f20:	f1 f4       	brne	.+60     	; 0x4f5e <conv_int+0x88>
    4f22:	80 33       	cpi	r24, 0x30	; 48
    4f24:	e1 f4       	brne	.+56     	; 0x4f5e <conv_int+0x88>
    4f26:	da 94       	dec	r13
    4f28:	09 f4       	brne	.+2      	; 0x4f2c <conv_int+0x56>
    4f2a:	48 c0       	rjmp	.+144    	; 0x4fbc <conv_int+0xe6>
    4f2c:	c4 01       	movw	r24, r8
    4f2e:	39 83       	std	Y+1, r19	; 0x01
    4f30:	0e 94 7d 2a 	call	0x54fa	; 0x54fa <fgetc>
    4f34:	39 81       	ldd	r19, Y+1	; 0x01
    4f36:	97 fd       	sbrc	r25, 7
    4f38:	41 c0       	rjmp	.+130    	; 0x4fbc <conv_int+0xe6>
    4f3a:	32 60       	ori	r19, 0x02	; 2
    4f3c:	88 37       	cpi	r24, 0x78	; 120
    4f3e:	11 f0       	breq	.+4      	; 0x4f44 <conv_int+0x6e>
    4f40:	88 35       	cpi	r24, 0x58	; 88
    4f42:	59 f4       	brne	.+22     	; 0x4f5a <conv_int+0x84>
    4f44:	30 64       	ori	r19, 0x40	; 64
    4f46:	da 94       	dec	r13
    4f48:	c9 f1       	breq	.+114    	; 0x4fbc <conv_int+0xe6>
    4f4a:	c4 01       	movw	r24, r8
    4f4c:	39 83       	std	Y+1, r19	; 0x01
    4f4e:	0e 94 7d 2a 	call	0x54fa	; 0x54fa <fgetc>
    4f52:	39 81       	ldd	r19, Y+1	; 0x01
    4f54:	97 ff       	sbrs	r25, 7
    4f56:	03 c0       	rjmp	.+6      	; 0x4f5e <conv_int+0x88>
    4f58:	31 c0       	rjmp	.+98     	; 0x4fbc <conv_int+0xe6>
    4f5a:	36 ff       	sbrs	r19, 6
    4f5c:	30 61       	ori	r19, 0x10	; 16
    4f5e:	ee 24       	eor	r14, r14
    4f60:	ff 24       	eor	r15, r15
    4f62:	87 01       	movw	r16, r14
    4f64:	28 2f       	mov	r18, r24
    4f66:	20 53       	subi	r18, 0x30	; 48
    4f68:	28 30       	cpi	r18, 0x08	; 8
    4f6a:	90 f0       	brcs	.+36     	; 0x4f90 <conv_int+0xba>
    4f6c:	34 fd       	sbrc	r19, 4
    4f6e:	09 c0       	rjmp	.+18     	; 0x4f82 <conv_int+0xac>
    4f70:	2a 30       	cpi	r18, 0x0A	; 10
    4f72:	70 f0       	brcs	.+28     	; 0x4f90 <conv_int+0xba>
    4f74:	36 ff       	sbrs	r19, 6
    4f76:	05 c0       	rjmp	.+10     	; 0x4f82 <conv_int+0xac>
    4f78:	2f 7d       	andi	r18, 0xDF	; 223
    4f7a:	42 2f       	mov	r20, r18
    4f7c:	41 51       	subi	r20, 0x11	; 17
    4f7e:	46 30       	cpi	r20, 0x06	; 6
    4f80:	30 f0       	brcs	.+12     	; 0x4f8e <conv_int+0xb8>
    4f82:	b4 01       	movw	r22, r8
    4f84:	39 83       	std	Y+1, r19	; 0x01
    4f86:	0e 94 eb 2a 	call	0x55d6	; 0x55d6 <ungetc>
    4f8a:	39 81       	ldd	r19, Y+1	; 0x01
    4f8c:	14 c0       	rjmp	.+40     	; 0x4fb6 <conv_int+0xe0>
    4f8e:	27 50       	subi	r18, 0x07	; 7
    4f90:	c8 01       	movw	r24, r16
    4f92:	b7 01       	movw	r22, r14
    4f94:	43 2f       	mov	r20, r19
    4f96:	39 83       	std	Y+1, r19	; 0x01
    4f98:	0e 94 21 27 	call	0x4e42	; 0x4e42 <mulacc>
    4f9c:	7b 01       	movw	r14, r22
    4f9e:	8c 01       	movw	r16, r24
    4fa0:	39 81       	ldd	r19, Y+1	; 0x01
    4fa2:	32 60       	ori	r19, 0x02	; 2
    4fa4:	da 94       	dec	r13
    4fa6:	69 f0       	breq	.+26     	; 0x4fc2 <conv_int+0xec>
    4fa8:	c4 01       	movw	r24, r8
    4faa:	39 83       	std	Y+1, r19	; 0x01
    4fac:	0e 94 7d 2a 	call	0x54fa	; 0x54fa <fgetc>
    4fb0:	39 81       	ldd	r19, Y+1	; 0x01
    4fb2:	97 ff       	sbrs	r25, 7
    4fb4:	d7 cf       	rjmp	.-82     	; 0x4f64 <conv_int+0x8e>
    4fb6:	31 fd       	sbrc	r19, 1
    4fb8:	04 c0       	rjmp	.+8      	; 0x4fc2 <conv_int+0xec>
    4fba:	15 c0       	rjmp	.+42     	; 0x4fe6 <conv_int+0x110>
    4fbc:	ee 24       	eor	r14, r14
    4fbe:	ff 24       	eor	r15, r15
    4fc0:	87 01       	movw	r16, r14
    4fc2:	37 ff       	sbrs	r19, 7
    4fc4:	08 c0       	rjmp	.+16     	; 0x4fd6 <conv_int+0x100>
    4fc6:	10 95       	com	r17
    4fc8:	00 95       	com	r16
    4fca:	f0 94       	com	r15
    4fcc:	e0 94       	com	r14
    4fce:	e1 1c       	adc	r14, r1
    4fd0:	f1 1c       	adc	r15, r1
    4fd2:	01 1d       	adc	r16, r1
    4fd4:	11 1d       	adc	r17, r1
    4fd6:	c5 01       	movw	r24, r10
    4fd8:	b8 01       	movw	r22, r16
    4fda:	a7 01       	movw	r20, r14
    4fdc:	23 2f       	mov	r18, r19
    4fde:	0e 94 15 27 	call	0x4e2a	; 0x4e2a <putval>
    4fe2:	81 e0       	ldi	r24, 0x01	; 1
    4fe4:	01 c0       	rjmp	.+2      	; 0x4fe8 <conv_int+0x112>
    4fe6:	80 e0       	ldi	r24, 0x00	; 0
    4fe8:	0f 90       	pop	r0
    4fea:	cf 91       	pop	r28
    4fec:	df 91       	pop	r29
    4fee:	1f 91       	pop	r17
    4ff0:	0f 91       	pop	r16
    4ff2:	ff 90       	pop	r15
    4ff4:	ef 90       	pop	r14
    4ff6:	df 90       	pop	r13
    4ff8:	bf 90       	pop	r11
    4ffa:	af 90       	pop	r10
    4ffc:	9f 90       	pop	r9
    4ffe:	8f 90       	pop	r8
    5000:	08 95       	ret

00005002 <vfscanf>:
    5002:	4f 92       	push	r4
    5004:	5f 92       	push	r5
    5006:	6f 92       	push	r6
    5008:	7f 92       	push	r7
    500a:	9f 92       	push	r9
    500c:	af 92       	push	r10
    500e:	bf 92       	push	r11
    5010:	cf 92       	push	r12
    5012:	df 92       	push	r13
    5014:	ef 92       	push	r14
    5016:	ff 92       	push	r15
    5018:	0f 93       	push	r16
    501a:	1f 93       	push	r17
    501c:	df 93       	push	r29
    501e:	cf 93       	push	r28
    5020:	0f 92       	push	r0
    5022:	cd b7       	in	r28, 0x3d	; 61
    5024:	de b7       	in	r29, 0x3e	; 62
    5026:	8c 01       	movw	r16, r24
    5028:	5b 01       	movw	r10, r22
    502a:	3a 01       	movw	r6, r20
    502c:	fc 01       	movw	r30, r24
    502e:	17 82       	std	Z+7, r1	; 0x07
    5030:	16 82       	std	Z+6, r1	; 0x06
    5032:	ee 24       	eor	r14, r14
    5034:	e6 c0       	rjmp	.+460    	; 0x5202 <vfscanf+0x200>
    5036:	8f 2d       	mov	r24, r15
    5038:	90 e0       	ldi	r25, 0x00	; 0
    503a:	0e 94 6a 2a 	call	0x54d4	; 0x54d4 <isspace>
    503e:	00 97       	sbiw	r24, 0x00	; 0
    5040:	21 f0       	breq	.+8      	; 0x504a <vfscanf+0x48>
    5042:	c8 01       	movw	r24, r16
    5044:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <skip_spaces>
    5048:	dc c0       	rjmp	.+440    	; 0x5202 <vfscanf+0x200>
    504a:	ff 2d       	mov	r31, r15
    504c:	f5 32       	cpi	r31, 0x25	; 37
    504e:	51 f4       	brne	.+20     	; 0x5064 <vfscanf+0x62>
    5050:	f5 01       	movw	r30, r10
    5052:	c3 fc       	sbrc	r12, 3
    5054:	35 91       	lpm	r19, Z+
    5056:	c3 fe       	sbrs	r12, 3
    5058:	31 91       	ld	r19, Z+
    505a:	5f 01       	movw	r10, r30
    505c:	35 32       	cpi	r19, 0x25	; 37
    505e:	71 f4       	brne	.+28     	; 0x507c <vfscanf+0x7a>
    5060:	55 e2       	ldi	r21, 0x25	; 37
    5062:	f5 2e       	mov	r15, r21
    5064:	c8 01       	movw	r24, r16
    5066:	0e 94 7d 2a 	call	0x54fa	; 0x54fa <fgetc>
    506a:	97 fd       	sbrc	r25, 7
    506c:	d6 c0       	rjmp	.+428    	; 0x521a <vfscanf+0x218>
    506e:	f8 16       	cp	r15, r24
    5070:	09 f4       	brne	.+2      	; 0x5074 <vfscanf+0x72>
    5072:	c7 c0       	rjmp	.+398    	; 0x5202 <vfscanf+0x200>
    5074:	b8 01       	movw	r22, r16
    5076:	0e 94 eb 2a 	call	0x55d6	; 0x55d6 <ungetc>
    507a:	d1 c0       	rjmp	.+418    	; 0x521e <vfscanf+0x21c>
    507c:	3a 32       	cpi	r19, 0x2A	; 42
    507e:	41 f4       	brne	.+16     	; 0x5090 <vfscanf+0x8e>
    5080:	c3 fc       	sbrc	r12, 3
    5082:	35 91       	lpm	r19, Z+
    5084:	c3 fe       	sbrs	r12, 3
    5086:	31 91       	ld	r19, Z+
    5088:	5f 01       	movw	r10, r30
    508a:	ff 24       	eor	r15, r15
    508c:	f3 94       	inc	r15
    508e:	01 c0       	rjmp	.+2      	; 0x5092 <vfscanf+0x90>
    5090:	ff 24       	eor	r15, r15
    5092:	99 24       	eor	r9, r9
    5094:	10 c0       	rjmp	.+32     	; 0x50b6 <vfscanf+0xb4>
    5096:	f2 e0       	ldi	r31, 0x02	; 2
    5098:	ff 2a       	or	r15, r31
    509a:	69 2d       	mov	r22, r9
    509c:	70 e0       	ldi	r23, 0x00	; 0
    509e:	80 e0       	ldi	r24, 0x00	; 0
    50a0:	90 e0       	ldi	r25, 0x00	; 0
    50a2:	40 e2       	ldi	r20, 0x20	; 32
    50a4:	0e 94 21 27 	call	0x4e42	; 0x4e42 <mulacc>
    50a8:	96 2e       	mov	r9, r22
    50aa:	f5 01       	movw	r30, r10
    50ac:	c3 fc       	sbrc	r12, 3
    50ae:	35 91       	lpm	r19, Z+
    50b0:	c3 fe       	sbrs	r12, 3
    50b2:	31 91       	ld	r19, Z+
    50b4:	5f 01       	movw	r10, r30
    50b6:	23 2f       	mov	r18, r19
    50b8:	20 53       	subi	r18, 0x30	; 48
    50ba:	2a 30       	cpi	r18, 0x0A	; 10
    50bc:	60 f3       	brcs	.-40     	; 0x5096 <vfscanf+0x94>
    50be:	f1 fe       	sbrs	r15, 1
    50c0:	03 c0       	rjmp	.+6      	; 0x50c8 <vfscanf+0xc6>
    50c2:	99 20       	and	r9, r9
    50c4:	19 f4       	brne	.+6      	; 0x50cc <vfscanf+0xca>
    50c6:	ab c0       	rjmp	.+342    	; 0x521e <vfscanf+0x21c>
    50c8:	99 24       	eor	r9, r9
    50ca:	9a 94       	dec	r9
    50cc:	38 36       	cpi	r19, 0x68	; 104
    50ce:	19 f0       	breq	.+6      	; 0x50d6 <vfscanf+0xd4>
    50d0:	3c 36       	cpi	r19, 0x6C	; 108
    50d2:	99 f4       	brne	.+38     	; 0x50fa <vfscanf+0xf8>
    50d4:	0a c0       	rjmp	.+20     	; 0x50ea <vfscanf+0xe8>
    50d6:	f5 01       	movw	r30, r10
    50d8:	c3 fc       	sbrc	r12, 3
    50da:	35 91       	lpm	r19, Z+
    50dc:	c3 fe       	sbrs	r12, 3
    50de:	31 91       	ld	r19, Z+
    50e0:	5f 01       	movw	r10, r30
    50e2:	38 36       	cpi	r19, 0x68	; 104
    50e4:	51 f4       	brne	.+20     	; 0x50fa <vfscanf+0xf8>
    50e6:	f8 e0       	ldi	r31, 0x08	; 8
    50e8:	ff 2a       	or	r15, r31
    50ea:	44 e0       	ldi	r20, 0x04	; 4
    50ec:	f4 2a       	or	r15, r20
    50ee:	f5 01       	movw	r30, r10
    50f0:	c3 fc       	sbrc	r12, 3
    50f2:	35 91       	lpm	r19, Z+
    50f4:	c3 fe       	sbrs	r12, 3
    50f6:	31 91       	ld	r19, Z+
    50f8:	5f 01       	movw	r10, r30
    50fa:	33 23       	and	r19, r19
    50fc:	09 f4       	brne	.+2      	; 0x5100 <vfscanf+0xfe>
    50fe:	8f c0       	rjmp	.+286    	; 0x521e <vfscanf+0x21c>
    5100:	85 e5       	ldi	r24, 0x55	; 85
    5102:	91 e0       	ldi	r25, 0x01	; 1
    5104:	63 2f       	mov	r22, r19
    5106:	70 e0       	ldi	r23, 0x00	; 0
    5108:	39 83       	std	Y+1, r19	; 0x01
    510a:	0e 94 72 2a 	call	0x54e4	; 0x54e4 <strchr_P>
    510e:	39 81       	ldd	r19, Y+1	; 0x01
    5110:	00 97       	sbiw	r24, 0x00	; 0
    5112:	09 f4       	brne	.+2      	; 0x5116 <vfscanf+0x114>
    5114:	84 c0       	rjmp	.+264    	; 0x521e <vfscanf+0x21c>
    5116:	8f 2d       	mov	r24, r15
    5118:	f0 fc       	sbrc	r15, 0
    511a:	08 c0       	rjmp	.+16     	; 0x512c <vfscanf+0x12a>
    511c:	f3 01       	movw	r30, r6
    511e:	40 80       	ld	r4, Z
    5120:	51 80       	ldd	r5, Z+1	; 0x01
    5122:	42 e0       	ldi	r20, 0x02	; 2
    5124:	50 e0       	ldi	r21, 0x00	; 0
    5126:	64 0e       	add	r6, r20
    5128:	75 1e       	adc	r7, r21
    512a:	02 c0       	rjmp	.+4      	; 0x5130 <vfscanf+0x12e>
    512c:	44 24       	eor	r4, r4
    512e:	55 24       	eor	r5, r5
    5130:	3e 36       	cpi	r19, 0x6E	; 110
    5132:	51 f4       	brne	.+20     	; 0x5148 <vfscanf+0x146>
    5134:	f8 01       	movw	r30, r16
    5136:	46 81       	ldd	r20, Z+6	; 0x06
    5138:	57 81       	ldd	r21, Z+7	; 0x07
    513a:	60 e0       	ldi	r22, 0x00	; 0
    513c:	70 e0       	ldi	r23, 0x00	; 0
    513e:	c2 01       	movw	r24, r4
    5140:	2f 2d       	mov	r18, r15
    5142:	0e 94 15 27 	call	0x4e2a	; 0x4e2a <putval>
    5146:	5d c0       	rjmp	.+186    	; 0x5202 <vfscanf+0x200>
    5148:	33 36       	cpi	r19, 0x63	; 99
    514a:	91 f4       	brne	.+36     	; 0x5170 <vfscanf+0x16e>
    514c:	81 fd       	sbrc	r24, 1
    514e:	02 c0       	rjmp	.+4      	; 0x5154 <vfscanf+0x152>
    5150:	99 24       	eor	r9, r9
    5152:	93 94       	inc	r9
    5154:	c8 01       	movw	r24, r16
    5156:	0e 94 7d 2a 	call	0x54fa	; 0x54fa <fgetc>
    515a:	97 fd       	sbrc	r25, 7
    515c:	5e c0       	rjmp	.+188    	; 0x521a <vfscanf+0x218>
    515e:	41 14       	cp	r4, r1
    5160:	51 04       	cpc	r5, r1
    5162:	19 f0       	breq	.+6      	; 0x516a <vfscanf+0x168>
    5164:	f2 01       	movw	r30, r4
    5166:	81 93       	st	Z+, r24
    5168:	2f 01       	movw	r4, r30
    516a:	9a 94       	dec	r9
    516c:	99 f7       	brne	.-26     	; 0x5154 <vfscanf+0x152>
    516e:	47 c0       	rjmp	.+142    	; 0x51fe <vfscanf+0x1fc>
    5170:	c8 01       	movw	r24, r16
    5172:	39 83       	std	Y+1, r19	; 0x01
    5174:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <skip_spaces>
    5178:	39 81       	ldd	r19, Y+1	; 0x01
    517a:	97 fd       	sbrc	r25, 7
    517c:	4e c0       	rjmp	.+156    	; 0x521a <vfscanf+0x218>
    517e:	3f 36       	cpi	r19, 0x6F	; 111
    5180:	61 f1       	breq	.+88     	; 0x51da <vfscanf+0x1d8>
    5182:	30 37       	cpi	r19, 0x70	; 112
    5184:	28 f4       	brcc	.+10     	; 0x5190 <vfscanf+0x18e>
    5186:	34 36       	cpi	r19, 0x64	; 100
    5188:	29 f1       	breq	.+74     	; 0x51d4 <vfscanf+0x1d2>
    518a:	39 36       	cpi	r19, 0x69	; 105
    518c:	49 f5       	brne	.+82     	; 0x51e0 <vfscanf+0x1de>
    518e:	2a c0       	rjmp	.+84     	; 0x51e4 <vfscanf+0x1e2>
    5190:	33 37       	cpi	r19, 0x73	; 115
    5192:	19 f0       	breq	.+6      	; 0x519a <vfscanf+0x198>
    5194:	35 37       	cpi	r19, 0x75	; 117
    5196:	21 f5       	brne	.+72     	; 0x51e0 <vfscanf+0x1de>
    5198:	1d c0       	rjmp	.+58     	; 0x51d4 <vfscanf+0x1d2>
    519a:	c8 01       	movw	r24, r16
    519c:	0e 94 7d 2a 	call	0x54fa	; 0x54fa <fgetc>
    51a0:	6c 01       	movw	r12, r24
    51a2:	97 fd       	sbrc	r25, 7
    51a4:	11 c0       	rjmp	.+34     	; 0x51c8 <vfscanf+0x1c6>
    51a6:	0e 94 6a 2a 	call	0x54d4	; 0x54d4 <isspace>
    51aa:	00 97       	sbiw	r24, 0x00	; 0
    51ac:	29 f0       	breq	.+10     	; 0x51b8 <vfscanf+0x1b6>
    51ae:	c6 01       	movw	r24, r12
    51b0:	b8 01       	movw	r22, r16
    51b2:	0e 94 eb 2a 	call	0x55d6	; 0x55d6 <ungetc>
    51b6:	08 c0       	rjmp	.+16     	; 0x51c8 <vfscanf+0x1c6>
    51b8:	41 14       	cp	r4, r1
    51ba:	51 04       	cpc	r5, r1
    51bc:	19 f0       	breq	.+6      	; 0x51c4 <vfscanf+0x1c2>
    51be:	f2 01       	movw	r30, r4
    51c0:	c1 92       	st	Z+, r12
    51c2:	2f 01       	movw	r4, r30
    51c4:	9a 94       	dec	r9
    51c6:	49 f7       	brne	.-46     	; 0x519a <vfscanf+0x198>
    51c8:	41 14       	cp	r4, r1
    51ca:	51 04       	cpc	r5, r1
    51cc:	c1 f0       	breq	.+48     	; 0x51fe <vfscanf+0x1fc>
    51ce:	f2 01       	movw	r30, r4
    51d0:	10 82       	st	Z, r1
    51d2:	15 c0       	rjmp	.+42     	; 0x51fe <vfscanf+0x1fc>
    51d4:	f0 e2       	ldi	r31, 0x20	; 32
    51d6:	ff 2a       	or	r15, r31
    51d8:	05 c0       	rjmp	.+10     	; 0x51e4 <vfscanf+0x1e2>
    51da:	40 e1       	ldi	r20, 0x10	; 16
    51dc:	f4 2a       	or	r15, r20
    51de:	02 c0       	rjmp	.+4      	; 0x51e4 <vfscanf+0x1e2>
    51e0:	50 e4       	ldi	r21, 0x40	; 64
    51e2:	f5 2a       	or	r15, r21
    51e4:	c8 01       	movw	r24, r16
    51e6:	69 2d       	mov	r22, r9
    51e8:	a2 01       	movw	r20, r4
    51ea:	2f 2d       	mov	r18, r15
    51ec:	0e 94 6b 27 	call	0x4ed6	; 0x4ed6 <conv_int>
    51f0:	88 23       	and	r24, r24
    51f2:	29 f4       	brne	.+10     	; 0x51fe <vfscanf+0x1fc>
    51f4:	f8 01       	movw	r30, r16
    51f6:	83 81       	ldd	r24, Z+3	; 0x03
    51f8:	80 73       	andi	r24, 0x30	; 48
    51fa:	79 f4       	brne	.+30     	; 0x521a <vfscanf+0x218>
    51fc:	10 c0       	rjmp	.+32     	; 0x521e <vfscanf+0x21c>
    51fe:	f0 fe       	sbrs	r15, 0
    5200:	e3 94       	inc	r14
    5202:	f8 01       	movw	r30, r16
    5204:	c3 80       	ldd	r12, Z+3	; 0x03
    5206:	f5 01       	movw	r30, r10
    5208:	c3 fc       	sbrc	r12, 3
    520a:	f5 90       	lpm	r15, Z+
    520c:	c3 fe       	sbrs	r12, 3
    520e:	f1 90       	ld	r15, Z+
    5210:	5f 01       	movw	r10, r30
    5212:	ff 20       	and	r15, r15
    5214:	09 f0       	breq	.+2      	; 0x5218 <vfscanf+0x216>
    5216:	0f cf       	rjmp	.-482    	; 0x5036 <vfscanf+0x34>
    5218:	02 c0       	rjmp	.+4      	; 0x521e <vfscanf+0x21c>
    521a:	ee 20       	and	r14, r14
    521c:	19 f0       	breq	.+6      	; 0x5224 <vfscanf+0x222>
    521e:	2e 2d       	mov	r18, r14
    5220:	30 e0       	ldi	r19, 0x00	; 0
    5222:	02 c0       	rjmp	.+4      	; 0x5228 <vfscanf+0x226>
    5224:	2f ef       	ldi	r18, 0xFF	; 255
    5226:	3f ef       	ldi	r19, 0xFF	; 255
    5228:	c9 01       	movw	r24, r18
    522a:	0f 90       	pop	r0
    522c:	cf 91       	pop	r28
    522e:	df 91       	pop	r29
    5230:	1f 91       	pop	r17
    5232:	0f 91       	pop	r16
    5234:	ff 90       	pop	r15
    5236:	ef 90       	pop	r14
    5238:	df 90       	pop	r13
    523a:	cf 90       	pop	r12
    523c:	bf 90       	pop	r11
    523e:	af 90       	pop	r10
    5240:	9f 90       	pop	r9
    5242:	7f 90       	pop	r7
    5244:	6f 90       	pop	r6
    5246:	5f 90       	pop	r5
    5248:	4f 90       	pop	r4
    524a:	08 95       	ret

0000524c <__divmodhi4>:
    524c:	97 fb       	bst	r25, 7
    524e:	09 2e       	mov	r0, r25
    5250:	07 26       	eor	r0, r23
    5252:	0a d0       	rcall	.+20     	; 0x5268 <__divmodhi4_neg1>
    5254:	77 fd       	sbrc	r23, 7
    5256:	04 d0       	rcall	.+8      	; 0x5260 <__divmodhi4_neg2>
    5258:	5e d0       	rcall	.+188    	; 0x5316 <__udivmodhi4>
    525a:	06 d0       	rcall	.+12     	; 0x5268 <__divmodhi4_neg1>
    525c:	00 20       	and	r0, r0
    525e:	1a f4       	brpl	.+6      	; 0x5266 <__divmodhi4_exit>

00005260 <__divmodhi4_neg2>:
    5260:	70 95       	com	r23
    5262:	61 95       	neg	r22
    5264:	7f 4f       	sbci	r23, 0xFF	; 255

00005266 <__divmodhi4_exit>:
    5266:	08 95       	ret

00005268 <__divmodhi4_neg1>:
    5268:	f6 f7       	brtc	.-4      	; 0x5266 <__divmodhi4_exit>
    526a:	90 95       	com	r25
    526c:	81 95       	neg	r24
    526e:	9f 4f       	sbci	r25, 0xFF	; 255
    5270:	08 95       	ret

00005272 <__divmodsi4>:
    5272:	97 fb       	bst	r25, 7
    5274:	09 2e       	mov	r0, r25
    5276:	05 26       	eor	r0, r21
    5278:	0e d0       	rcall	.+28     	; 0x5296 <__divmodsi4_neg1>
    527a:	57 fd       	sbrc	r21, 7
    527c:	04 d0       	rcall	.+8      	; 0x5286 <__divmodsi4_neg2>
    527e:	5f d0       	rcall	.+190    	; 0x533e <__udivmodsi4>
    5280:	0a d0       	rcall	.+20     	; 0x5296 <__divmodsi4_neg1>
    5282:	00 1c       	adc	r0, r0
    5284:	38 f4       	brcc	.+14     	; 0x5294 <__divmodsi4_exit>

00005286 <__divmodsi4_neg2>:
    5286:	50 95       	com	r21
    5288:	40 95       	com	r20
    528a:	30 95       	com	r19
    528c:	21 95       	neg	r18
    528e:	3f 4f       	sbci	r19, 0xFF	; 255
    5290:	4f 4f       	sbci	r20, 0xFF	; 255
    5292:	5f 4f       	sbci	r21, 0xFF	; 255

00005294 <__divmodsi4_exit>:
    5294:	08 95       	ret

00005296 <__divmodsi4_neg1>:
    5296:	f6 f7       	brtc	.-4      	; 0x5294 <__divmodsi4_exit>
    5298:	90 95       	com	r25
    529a:	80 95       	com	r24
    529c:	70 95       	com	r23
    529e:	61 95       	neg	r22
    52a0:	7f 4f       	sbci	r23, 0xFF	; 255
    52a2:	8f 4f       	sbci	r24, 0xFF	; 255
    52a4:	9f 4f       	sbci	r25, 0xFF	; 255
    52a6:	08 95       	ret

000052a8 <__prologue_saves__>:
    52a8:	2f 92       	push	r2
    52aa:	3f 92       	push	r3
    52ac:	4f 92       	push	r4
    52ae:	5f 92       	push	r5
    52b0:	6f 92       	push	r6
    52b2:	7f 92       	push	r7
    52b4:	8f 92       	push	r8
    52b6:	9f 92       	push	r9
    52b8:	af 92       	push	r10
    52ba:	bf 92       	push	r11
    52bc:	cf 92       	push	r12
    52be:	df 92       	push	r13
    52c0:	ef 92       	push	r14
    52c2:	ff 92       	push	r15
    52c4:	0f 93       	push	r16
    52c6:	1f 93       	push	r17
    52c8:	cf 93       	push	r28
    52ca:	df 93       	push	r29
    52cc:	cd b7       	in	r28, 0x3d	; 61
    52ce:	de b7       	in	r29, 0x3e	; 62
    52d0:	ca 1b       	sub	r28, r26
    52d2:	db 0b       	sbc	r29, r27
    52d4:	0f b6       	in	r0, 0x3f	; 63
    52d6:	f8 94       	cli
    52d8:	de bf       	out	0x3e, r29	; 62
    52da:	0f be       	out	0x3f, r0	; 63
    52dc:	cd bf       	out	0x3d, r28	; 61
    52de:	09 94       	ijmp

000052e0 <__epilogue_restores__>:
    52e0:	2a 88       	ldd	r2, Y+18	; 0x12
    52e2:	39 88       	ldd	r3, Y+17	; 0x11
    52e4:	48 88       	ldd	r4, Y+16	; 0x10
    52e6:	5f 84       	ldd	r5, Y+15	; 0x0f
    52e8:	6e 84       	ldd	r6, Y+14	; 0x0e
    52ea:	7d 84       	ldd	r7, Y+13	; 0x0d
    52ec:	8c 84       	ldd	r8, Y+12	; 0x0c
    52ee:	9b 84       	ldd	r9, Y+11	; 0x0b
    52f0:	aa 84       	ldd	r10, Y+10	; 0x0a
    52f2:	b9 84       	ldd	r11, Y+9	; 0x09
    52f4:	c8 84       	ldd	r12, Y+8	; 0x08
    52f6:	df 80       	ldd	r13, Y+7	; 0x07
    52f8:	ee 80       	ldd	r14, Y+6	; 0x06
    52fa:	fd 80       	ldd	r15, Y+5	; 0x05
    52fc:	0c 81       	ldd	r16, Y+4	; 0x04
    52fe:	1b 81       	ldd	r17, Y+3	; 0x03
    5300:	aa 81       	ldd	r26, Y+2	; 0x02
    5302:	b9 81       	ldd	r27, Y+1	; 0x01
    5304:	ce 0f       	add	r28, r30
    5306:	d1 1d       	adc	r29, r1
    5308:	0f b6       	in	r0, 0x3f	; 63
    530a:	f8 94       	cli
    530c:	de bf       	out	0x3e, r29	; 62
    530e:	0f be       	out	0x3f, r0	; 63
    5310:	cd bf       	out	0x3d, r28	; 61
    5312:	ed 01       	movw	r28, r26
    5314:	08 95       	ret

00005316 <__udivmodhi4>:
    5316:	aa 1b       	sub	r26, r26
    5318:	bb 1b       	sub	r27, r27
    531a:	51 e1       	ldi	r21, 0x11	; 17
    531c:	07 c0       	rjmp	.+14     	; 0x532c <__udivmodhi4_ep>

0000531e <__udivmodhi4_loop>:
    531e:	aa 1f       	adc	r26, r26
    5320:	bb 1f       	adc	r27, r27
    5322:	a6 17       	cp	r26, r22
    5324:	b7 07       	cpc	r27, r23
    5326:	10 f0       	brcs	.+4      	; 0x532c <__udivmodhi4_ep>
    5328:	a6 1b       	sub	r26, r22
    532a:	b7 0b       	sbc	r27, r23

0000532c <__udivmodhi4_ep>:
    532c:	88 1f       	adc	r24, r24
    532e:	99 1f       	adc	r25, r25
    5330:	5a 95       	dec	r21
    5332:	a9 f7       	brne	.-22     	; 0x531e <__udivmodhi4_loop>
    5334:	80 95       	com	r24
    5336:	90 95       	com	r25
    5338:	bc 01       	movw	r22, r24
    533a:	cd 01       	movw	r24, r26
    533c:	08 95       	ret

0000533e <__udivmodsi4>:
    533e:	a1 e2       	ldi	r26, 0x21	; 33
    5340:	1a 2e       	mov	r1, r26
    5342:	aa 1b       	sub	r26, r26
    5344:	bb 1b       	sub	r27, r27
    5346:	fd 01       	movw	r30, r26
    5348:	0d c0       	rjmp	.+26     	; 0x5364 <__udivmodsi4_ep>

0000534a <__udivmodsi4_loop>:
    534a:	aa 1f       	adc	r26, r26
    534c:	bb 1f       	adc	r27, r27
    534e:	ee 1f       	adc	r30, r30
    5350:	ff 1f       	adc	r31, r31
    5352:	a2 17       	cp	r26, r18
    5354:	b3 07       	cpc	r27, r19
    5356:	e4 07       	cpc	r30, r20
    5358:	f5 07       	cpc	r31, r21
    535a:	20 f0       	brcs	.+8      	; 0x5364 <__udivmodsi4_ep>
    535c:	a2 1b       	sub	r26, r18
    535e:	b3 0b       	sbc	r27, r19
    5360:	e4 0b       	sbc	r30, r20
    5362:	f5 0b       	sbc	r31, r21

00005364 <__udivmodsi4_ep>:
    5364:	66 1f       	adc	r22, r22
    5366:	77 1f       	adc	r23, r23
    5368:	88 1f       	adc	r24, r24
    536a:	99 1f       	adc	r25, r25
    536c:	1a 94       	dec	r1
    536e:	69 f7       	brne	.-38     	; 0x534a <__udivmodsi4_loop>
    5370:	60 95       	com	r22
    5372:	70 95       	com	r23
    5374:	80 95       	com	r24
    5376:	90 95       	com	r25
    5378:	9b 01       	movw	r18, r22
    537a:	ac 01       	movw	r20, r24
    537c:	bd 01       	movw	r22, r26
    537e:	cf 01       	movw	r24, r30
    5380:	08 95       	ret

00005382 <do_rand>:
    5382:	a0 e0       	ldi	r26, 0x00	; 0
    5384:	b0 e0       	ldi	r27, 0x00	; 0
    5386:	e7 ec       	ldi	r30, 0xC7	; 199
    5388:	f9 e2       	ldi	r31, 0x29	; 41
    538a:	0c 94 5c 29 	jmp	0x52b8	; 0x52b8 <__prologue_saves__+0x10>
    538e:	ec 01       	movw	r28, r24
    5390:	68 81       	ld	r22, Y
    5392:	79 81       	ldd	r23, Y+1	; 0x01
    5394:	8a 81       	ldd	r24, Y+2	; 0x02
    5396:	9b 81       	ldd	r25, Y+3	; 0x03
    5398:	61 15       	cp	r22, r1
    539a:	71 05       	cpc	r23, r1
    539c:	81 05       	cpc	r24, r1
    539e:	91 05       	cpc	r25, r1
    53a0:	21 f4       	brne	.+8      	; 0x53aa <do_rand+0x28>
    53a2:	64 e2       	ldi	r22, 0x24	; 36
    53a4:	79 ed       	ldi	r23, 0xD9	; 217
    53a6:	8b e5       	ldi	r24, 0x5B	; 91
    53a8:	97 e0       	ldi	r25, 0x07	; 7
    53aa:	2d e1       	ldi	r18, 0x1D	; 29
    53ac:	33 ef       	ldi	r19, 0xF3	; 243
    53ae:	41 e0       	ldi	r20, 0x01	; 1
    53b0:	50 e0       	ldi	r21, 0x00	; 0
    53b2:	0e 94 39 29 	call	0x5272	; 0x5272 <__divmodsi4>
    53b6:	79 01       	movw	r14, r18
    53b8:	8a 01       	movw	r16, r20
    53ba:	27 ea       	ldi	r18, 0xA7	; 167
    53bc:	31 e4       	ldi	r19, 0x41	; 65
    53be:	40 e0       	ldi	r20, 0x00	; 0
    53c0:	50 e0       	ldi	r21, 0x00	; 0
    53c2:	0e 94 e3 2b 	call	0x57c6	; 0x57c6 <__mulsi3>
    53c6:	5b 01       	movw	r10, r22
    53c8:	6c 01       	movw	r12, r24
    53ca:	c8 01       	movw	r24, r16
    53cc:	b7 01       	movw	r22, r14
    53ce:	2c ee       	ldi	r18, 0xEC	; 236
    53d0:	34 ef       	ldi	r19, 0xF4	; 244
    53d2:	4f ef       	ldi	r20, 0xFF	; 255
    53d4:	5f ef       	ldi	r21, 0xFF	; 255
    53d6:	0e 94 e3 2b 	call	0x57c6	; 0x57c6 <__mulsi3>
    53da:	6a 0d       	add	r22, r10
    53dc:	7b 1d       	adc	r23, r11
    53de:	8c 1d       	adc	r24, r12
    53e0:	9d 1d       	adc	r25, r13
    53e2:	97 ff       	sbrs	r25, 7
    53e4:	04 c0       	rjmp	.+8      	; 0x53ee <do_rand+0x6c>
    53e6:	61 50       	subi	r22, 0x01	; 1
    53e8:	70 40       	sbci	r23, 0x00	; 0
    53ea:	80 40       	sbci	r24, 0x00	; 0
    53ec:	90 48       	sbci	r25, 0x80	; 128
    53ee:	68 83       	st	Y, r22
    53f0:	79 83       	std	Y+1, r23	; 0x01
    53f2:	8a 83       	std	Y+2, r24	; 0x02
    53f4:	9b 83       	std	Y+3, r25	; 0x03
    53f6:	7f 77       	andi	r23, 0x7F	; 127
    53f8:	cb 01       	movw	r24, r22
    53fa:	cd b7       	in	r28, 0x3d	; 61
    53fc:	de b7       	in	r29, 0x3e	; 62
    53fe:	ea e0       	ldi	r30, 0x0A	; 10
    5400:	0c 94 78 29 	jmp	0x52f0	; 0x52f0 <__epilogue_restores__+0x10>

00005404 <rand_r>:
    5404:	0e 94 c1 29 	call	0x5382	; 0x5382 <do_rand>
    5408:	08 95       	ret

0000540a <rand>:
    540a:	89 e8       	ldi	r24, 0x89	; 137
    540c:	91 e0       	ldi	r25, 0x01	; 1
    540e:	0e 94 c1 29 	call	0x5382	; 0x5382 <do_rand>
    5412:	08 95       	ret

00005414 <srand>:
    5414:	a0 e0       	ldi	r26, 0x00	; 0
    5416:	b0 e0       	ldi	r27, 0x00	; 0
    5418:	80 93 89 01 	sts	0x0189, r24
    541c:	90 93 8a 01 	sts	0x018A, r25
    5420:	a0 93 8b 01 	sts	0x018B, r26
    5424:	b0 93 8c 01 	sts	0x018C, r27
    5428:	08 95       	ret

0000542a <do_random>:
    542a:	a0 e0       	ldi	r26, 0x00	; 0
    542c:	b0 e0       	ldi	r27, 0x00	; 0
    542e:	eb e1       	ldi	r30, 0x1B	; 27
    5430:	fa e2       	ldi	r31, 0x2A	; 42
    5432:	0c 94 5c 29 	jmp	0x52b8	; 0x52b8 <__prologue_saves__+0x10>
    5436:	ec 01       	movw	r28, r24
    5438:	68 81       	ld	r22, Y
    543a:	79 81       	ldd	r23, Y+1	; 0x01
    543c:	8a 81       	ldd	r24, Y+2	; 0x02
    543e:	9b 81       	ldd	r25, Y+3	; 0x03
    5440:	61 15       	cp	r22, r1
    5442:	71 05       	cpc	r23, r1
    5444:	81 05       	cpc	r24, r1
    5446:	91 05       	cpc	r25, r1
    5448:	21 f4       	brne	.+8      	; 0x5452 <do_random+0x28>
    544a:	64 e2       	ldi	r22, 0x24	; 36
    544c:	79 ed       	ldi	r23, 0xD9	; 217
    544e:	8b e5       	ldi	r24, 0x5B	; 91
    5450:	97 e0       	ldi	r25, 0x07	; 7
    5452:	2d e1       	ldi	r18, 0x1D	; 29
    5454:	33 ef       	ldi	r19, 0xF3	; 243
    5456:	41 e0       	ldi	r20, 0x01	; 1
    5458:	50 e0       	ldi	r21, 0x00	; 0
    545a:	0e 94 39 29 	call	0x5272	; 0x5272 <__divmodsi4>
    545e:	79 01       	movw	r14, r18
    5460:	8a 01       	movw	r16, r20
    5462:	27 ea       	ldi	r18, 0xA7	; 167
    5464:	31 e4       	ldi	r19, 0x41	; 65
    5466:	40 e0       	ldi	r20, 0x00	; 0
    5468:	50 e0       	ldi	r21, 0x00	; 0
    546a:	0e 94 e3 2b 	call	0x57c6	; 0x57c6 <__mulsi3>
    546e:	5b 01       	movw	r10, r22
    5470:	6c 01       	movw	r12, r24
    5472:	c8 01       	movw	r24, r16
    5474:	b7 01       	movw	r22, r14
    5476:	2c ee       	ldi	r18, 0xEC	; 236
    5478:	34 ef       	ldi	r19, 0xF4	; 244
    547a:	4f ef       	ldi	r20, 0xFF	; 255
    547c:	5f ef       	ldi	r21, 0xFF	; 255
    547e:	0e 94 e3 2b 	call	0x57c6	; 0x57c6 <__mulsi3>
    5482:	9b 01       	movw	r18, r22
    5484:	ac 01       	movw	r20, r24
    5486:	2a 0d       	add	r18, r10
    5488:	3b 1d       	adc	r19, r11
    548a:	4c 1d       	adc	r20, r12
    548c:	5d 1d       	adc	r21, r13
    548e:	57 ff       	sbrs	r21, 7
    5490:	04 c0       	rjmp	.+8      	; 0x549a <do_random+0x70>
    5492:	21 50       	subi	r18, 0x01	; 1
    5494:	30 40       	sbci	r19, 0x00	; 0
    5496:	40 40       	sbci	r20, 0x00	; 0
    5498:	50 48       	sbci	r21, 0x80	; 128
    549a:	28 83       	st	Y, r18
    549c:	39 83       	std	Y+1, r19	; 0x01
    549e:	4a 83       	std	Y+2, r20	; 0x02
    54a0:	5b 83       	std	Y+3, r21	; 0x03
    54a2:	5f 77       	andi	r21, 0x7F	; 127
    54a4:	b9 01       	movw	r22, r18
    54a6:	ca 01       	movw	r24, r20
    54a8:	cd b7       	in	r28, 0x3d	; 61
    54aa:	de b7       	in	r29, 0x3e	; 62
    54ac:	ea e0       	ldi	r30, 0x0A	; 10
    54ae:	0c 94 78 29 	jmp	0x52f0	; 0x52f0 <__epilogue_restores__+0x10>

000054b2 <random_r>:
    54b2:	0e 94 15 2a 	call	0x542a	; 0x542a <do_random>
    54b6:	08 95       	ret

000054b8 <random>:
    54b8:	8d e8       	ldi	r24, 0x8D	; 141
    54ba:	91 e0       	ldi	r25, 0x01	; 1
    54bc:	0e 94 15 2a 	call	0x542a	; 0x542a <do_random>
    54c0:	08 95       	ret

000054c2 <srandom>:
    54c2:	60 93 8d 01 	sts	0x018D, r22
    54c6:	70 93 8e 01 	sts	0x018E, r23
    54ca:	80 93 8f 01 	sts	0x018F, r24
    54ce:	90 93 90 01 	sts	0x0190, r25
    54d2:	08 95       	ret

000054d4 <isspace>:
    54d4:	91 11       	cpse	r25, r1
    54d6:	3a c1       	rjmp	.+628    	; 0x574c <__ctype_isfalse>
    54d8:	80 32       	cpi	r24, 0x20	; 32
    54da:	19 f0       	breq	.+6      	; 0x54e2 <isspace+0xe>
    54dc:	89 50       	subi	r24, 0x09	; 9
    54de:	85 50       	subi	r24, 0x05	; 5
    54e0:	d0 f7       	brcc	.-12     	; 0x54d6 <isspace+0x2>
    54e2:	08 95       	ret

000054e4 <strchr_P>:
    54e4:	fc 01       	movw	r30, r24
    54e6:	05 90       	lpm	r0, Z+
    54e8:	06 16       	cp	r0, r22
    54ea:	21 f0       	breq	.+8      	; 0x54f4 <strchr_P+0x10>
    54ec:	00 20       	and	r0, r0
    54ee:	d9 f7       	brne	.-10     	; 0x54e6 <strchr_P+0x2>
    54f0:	c0 01       	movw	r24, r0
    54f2:	08 95       	ret
    54f4:	31 97       	sbiw	r30, 0x01	; 1
    54f6:	cf 01       	movw	r24, r30
    54f8:	08 95       	ret

000054fa <fgetc>:
    54fa:	cf 93       	push	r28
    54fc:	df 93       	push	r29
    54fe:	ec 01       	movw	r28, r24
    5500:	3b 81       	ldd	r19, Y+3	; 0x03
    5502:	30 ff       	sbrs	r19, 0
    5504:	36 c0       	rjmp	.+108    	; 0x5572 <fgetc+0x78>
    5506:	36 ff       	sbrs	r19, 6
    5508:	09 c0       	rjmp	.+18     	; 0x551c <fgetc+0x22>
    550a:	3f 7b       	andi	r19, 0xBF	; 191
    550c:	3b 83       	std	Y+3, r19	; 0x03
    550e:	8e 81       	ldd	r24, Y+6	; 0x06
    5510:	9f 81       	ldd	r25, Y+7	; 0x07
    5512:	01 96       	adiw	r24, 0x01	; 1
    5514:	9f 83       	std	Y+7, r25	; 0x07
    5516:	8e 83       	std	Y+6, r24	; 0x06
    5518:	2a 81       	ldd	r18, Y+2	; 0x02
    551a:	29 c0       	rjmp	.+82     	; 0x556e <fgetc+0x74>
    551c:	32 ff       	sbrs	r19, 2
    551e:	0f c0       	rjmp	.+30     	; 0x553e <fgetc+0x44>
    5520:	e8 81       	ld	r30, Y
    5522:	f9 81       	ldd	r31, Y+1	; 0x01
    5524:	80 81       	ld	r24, Z
    5526:	99 27       	eor	r25, r25
    5528:	87 fd       	sbrc	r24, 7
    552a:	90 95       	com	r25
    552c:	00 97       	sbiw	r24, 0x00	; 0
    552e:	19 f4       	brne	.+6      	; 0x5536 <fgetc+0x3c>
    5530:	30 62       	ori	r19, 0x20	; 32
    5532:	3b 83       	std	Y+3, r19	; 0x03
    5534:	1e c0       	rjmp	.+60     	; 0x5572 <fgetc+0x78>
    5536:	31 96       	adiw	r30, 0x01	; 1
    5538:	f9 83       	std	Y+1, r31	; 0x01
    553a:	e8 83       	st	Y, r30
    553c:	11 c0       	rjmp	.+34     	; 0x5560 <fgetc+0x66>
    553e:	ea 85       	ldd	r30, Y+10	; 0x0a
    5540:	fb 85       	ldd	r31, Y+11	; 0x0b
    5542:	ce 01       	movw	r24, r28
    5544:	09 95       	icall
    5546:	97 ff       	sbrs	r25, 7
    5548:	0b c0       	rjmp	.+22     	; 0x5560 <fgetc+0x66>
    554a:	2b 81       	ldd	r18, Y+3	; 0x03
    554c:	3f ef       	ldi	r19, 0xFF	; 255
    554e:	8f 3f       	cpi	r24, 0xFF	; 255
    5550:	93 07       	cpc	r25, r19
    5552:	11 f4       	brne	.+4      	; 0x5558 <fgetc+0x5e>
    5554:	80 e1       	ldi	r24, 0x10	; 16
    5556:	01 c0       	rjmp	.+2      	; 0x555a <fgetc+0x60>
    5558:	80 e2       	ldi	r24, 0x20	; 32
    555a:	82 2b       	or	r24, r18
    555c:	8b 83       	std	Y+3, r24	; 0x03
    555e:	09 c0       	rjmp	.+18     	; 0x5572 <fgetc+0x78>
    5560:	2e 81       	ldd	r18, Y+6	; 0x06
    5562:	3f 81       	ldd	r19, Y+7	; 0x07
    5564:	2f 5f       	subi	r18, 0xFF	; 255
    5566:	3f 4f       	sbci	r19, 0xFF	; 255
    5568:	3f 83       	std	Y+7, r19	; 0x07
    556a:	2e 83       	std	Y+6, r18	; 0x06
    556c:	28 2f       	mov	r18, r24
    556e:	30 e0       	ldi	r19, 0x00	; 0
    5570:	02 c0       	rjmp	.+4      	; 0x5576 <fgetc+0x7c>
    5572:	2f ef       	ldi	r18, 0xFF	; 255
    5574:	3f ef       	ldi	r19, 0xFF	; 255
    5576:	c9 01       	movw	r24, r18
    5578:	df 91       	pop	r29
    557a:	cf 91       	pop	r28
    557c:	08 95       	ret

0000557e <fputc>:
    557e:	0f 93       	push	r16
    5580:	1f 93       	push	r17
    5582:	cf 93       	push	r28
    5584:	df 93       	push	r29
    5586:	8c 01       	movw	r16, r24
    5588:	eb 01       	movw	r28, r22
    558a:	8b 81       	ldd	r24, Y+3	; 0x03
    558c:	81 ff       	sbrs	r24, 1
    558e:	1b c0       	rjmp	.+54     	; 0x55c6 <fputc+0x48>
    5590:	82 ff       	sbrs	r24, 2
    5592:	0d c0       	rjmp	.+26     	; 0x55ae <fputc+0x30>
    5594:	2e 81       	ldd	r18, Y+6	; 0x06
    5596:	3f 81       	ldd	r19, Y+7	; 0x07
    5598:	8c 81       	ldd	r24, Y+4	; 0x04
    559a:	9d 81       	ldd	r25, Y+5	; 0x05
    559c:	28 17       	cp	r18, r24
    559e:	39 07       	cpc	r19, r25
    55a0:	64 f4       	brge	.+24     	; 0x55ba <fputc+0x3c>
    55a2:	e8 81       	ld	r30, Y
    55a4:	f9 81       	ldd	r31, Y+1	; 0x01
    55a6:	01 93       	st	Z+, r16
    55a8:	f9 83       	std	Y+1, r31	; 0x01
    55aa:	e8 83       	st	Y, r30
    55ac:	06 c0       	rjmp	.+12     	; 0x55ba <fputc+0x3c>
    55ae:	e8 85       	ldd	r30, Y+8	; 0x08
    55b0:	f9 85       	ldd	r31, Y+9	; 0x09
    55b2:	80 2f       	mov	r24, r16
    55b4:	09 95       	icall
    55b6:	00 97       	sbiw	r24, 0x00	; 0
    55b8:	31 f4       	brne	.+12     	; 0x55c6 <fputc+0x48>
    55ba:	8e 81       	ldd	r24, Y+6	; 0x06
    55bc:	9f 81       	ldd	r25, Y+7	; 0x07
    55be:	01 96       	adiw	r24, 0x01	; 1
    55c0:	9f 83       	std	Y+7, r25	; 0x07
    55c2:	8e 83       	std	Y+6, r24	; 0x06
    55c4:	02 c0       	rjmp	.+4      	; 0x55ca <fputc+0x4c>
    55c6:	0f ef       	ldi	r16, 0xFF	; 255
    55c8:	1f ef       	ldi	r17, 0xFF	; 255
    55ca:	c8 01       	movw	r24, r16
    55cc:	df 91       	pop	r29
    55ce:	cf 91       	pop	r28
    55d0:	1f 91       	pop	r17
    55d2:	0f 91       	pop	r16
    55d4:	08 95       	ret

000055d6 <ungetc>:
    55d6:	fb 01       	movw	r30, r22
    55d8:	23 81       	ldd	r18, Z+3	; 0x03
    55da:	20 ff       	sbrs	r18, 0
    55dc:	13 c0       	rjmp	.+38     	; 0x5604 <ungetc+0x2e>
    55de:	26 fd       	sbrc	r18, 6
    55e0:	11 c0       	rjmp	.+34     	; 0x5604 <ungetc+0x2e>
    55e2:	3f ef       	ldi	r19, 0xFF	; 255
    55e4:	8f 3f       	cpi	r24, 0xFF	; 255
    55e6:	93 07       	cpc	r25, r19
    55e8:	69 f0       	breq	.+26     	; 0x5604 <ungetc+0x2e>
    55ea:	82 83       	std	Z+2, r24	; 0x02
    55ec:	20 64       	ori	r18, 0x40	; 64
    55ee:	2f 7d       	andi	r18, 0xDF	; 223
    55f0:	23 83       	std	Z+3, r18	; 0x03
    55f2:	26 81       	ldd	r18, Z+6	; 0x06
    55f4:	37 81       	ldd	r19, Z+7	; 0x07
    55f6:	21 50       	subi	r18, 0x01	; 1
    55f8:	30 40       	sbci	r19, 0x00	; 0
    55fa:	37 83       	std	Z+7, r19	; 0x07
    55fc:	26 83       	std	Z+6, r18	; 0x06
    55fe:	28 2f       	mov	r18, r24
    5600:	30 e0       	ldi	r19, 0x00	; 0
    5602:	02 c0       	rjmp	.+4      	; 0x5608 <ungetc+0x32>
    5604:	2f ef       	ldi	r18, 0xFF	; 255
    5606:	3f ef       	ldi	r19, 0xFF	; 255
    5608:	c9 01       	movw	r24, r18
    560a:	08 95       	ret

0000560c <__ultoa_invert>:
    560c:	fa 01       	movw	r30, r20
    560e:	aa 27       	eor	r26, r26
    5610:	28 30       	cpi	r18, 0x08	; 8
    5612:	51 f1       	breq	.+84     	; 0x5668 <__ultoa_invert+0x5c>
    5614:	20 31       	cpi	r18, 0x10	; 16
    5616:	81 f1       	breq	.+96     	; 0x5678 <__ultoa_invert+0x6c>
    5618:	e8 94       	clt
    561a:	6f 93       	push	r22
    561c:	6e 7f       	andi	r22, 0xFE	; 254
    561e:	6e 5f       	subi	r22, 0xFE	; 254
    5620:	7f 4f       	sbci	r23, 0xFF	; 255
    5622:	8f 4f       	sbci	r24, 0xFF	; 255
    5624:	9f 4f       	sbci	r25, 0xFF	; 255
    5626:	af 4f       	sbci	r26, 0xFF	; 255
    5628:	b1 e0       	ldi	r27, 0x01	; 1
    562a:	3e d0       	rcall	.+124    	; 0x56a8 <__ultoa_invert+0x9c>
    562c:	b4 e0       	ldi	r27, 0x04	; 4
    562e:	3c d0       	rcall	.+120    	; 0x56a8 <__ultoa_invert+0x9c>
    5630:	67 0f       	add	r22, r23
    5632:	78 1f       	adc	r23, r24
    5634:	89 1f       	adc	r24, r25
    5636:	9a 1f       	adc	r25, r26
    5638:	a1 1d       	adc	r26, r1
    563a:	68 0f       	add	r22, r24
    563c:	79 1f       	adc	r23, r25
    563e:	8a 1f       	adc	r24, r26
    5640:	91 1d       	adc	r25, r1
    5642:	a1 1d       	adc	r26, r1
    5644:	6a 0f       	add	r22, r26
    5646:	71 1d       	adc	r23, r1
    5648:	81 1d       	adc	r24, r1
    564a:	91 1d       	adc	r25, r1
    564c:	a1 1d       	adc	r26, r1
    564e:	20 d0       	rcall	.+64     	; 0x5690 <__ultoa_invert+0x84>
    5650:	09 f4       	brne	.+2      	; 0x5654 <__ultoa_invert+0x48>
    5652:	68 94       	set
    5654:	3f 91       	pop	r19
    5656:	2a e0       	ldi	r18, 0x0A	; 10
    5658:	26 9f       	mul	r18, r22
    565a:	11 24       	eor	r1, r1
    565c:	30 19       	sub	r19, r0
    565e:	30 5d       	subi	r19, 0xD0	; 208
    5660:	31 93       	st	Z+, r19
    5662:	de f6       	brtc	.-74     	; 0x561a <__ultoa_invert+0xe>
    5664:	cf 01       	movw	r24, r30
    5666:	08 95       	ret
    5668:	46 2f       	mov	r20, r22
    566a:	47 70       	andi	r20, 0x07	; 7
    566c:	40 5d       	subi	r20, 0xD0	; 208
    566e:	41 93       	st	Z+, r20
    5670:	b3 e0       	ldi	r27, 0x03	; 3
    5672:	0f d0       	rcall	.+30     	; 0x5692 <__ultoa_invert+0x86>
    5674:	c9 f7       	brne	.-14     	; 0x5668 <__ultoa_invert+0x5c>
    5676:	f6 cf       	rjmp	.-20     	; 0x5664 <__ultoa_invert+0x58>
    5678:	46 2f       	mov	r20, r22
    567a:	4f 70       	andi	r20, 0x0F	; 15
    567c:	40 5d       	subi	r20, 0xD0	; 208
    567e:	4a 33       	cpi	r20, 0x3A	; 58
    5680:	18 f0       	brcs	.+6      	; 0x5688 <__ultoa_invert+0x7c>
    5682:	49 5d       	subi	r20, 0xD9	; 217
    5684:	31 fd       	sbrc	r19, 1
    5686:	40 52       	subi	r20, 0x20	; 32
    5688:	41 93       	st	Z+, r20
    568a:	02 d0       	rcall	.+4      	; 0x5690 <__ultoa_invert+0x84>
    568c:	a9 f7       	brne	.-22     	; 0x5678 <__ultoa_invert+0x6c>
    568e:	ea cf       	rjmp	.-44     	; 0x5664 <__ultoa_invert+0x58>
    5690:	b4 e0       	ldi	r27, 0x04	; 4
    5692:	a6 95       	lsr	r26
    5694:	97 95       	ror	r25
    5696:	87 95       	ror	r24
    5698:	77 95       	ror	r23
    569a:	67 95       	ror	r22
    569c:	ba 95       	dec	r27
    569e:	c9 f7       	brne	.-14     	; 0x5692 <__ultoa_invert+0x86>
    56a0:	00 97       	sbiw	r24, 0x00	; 0
    56a2:	61 05       	cpc	r22, r1
    56a4:	71 05       	cpc	r23, r1
    56a6:	08 95       	ret
    56a8:	9b 01       	movw	r18, r22
    56aa:	ac 01       	movw	r20, r24
    56ac:	0a 2e       	mov	r0, r26
    56ae:	06 94       	lsr	r0
    56b0:	57 95       	ror	r21
    56b2:	47 95       	ror	r20
    56b4:	37 95       	ror	r19
    56b6:	27 95       	ror	r18
    56b8:	ba 95       	dec	r27
    56ba:	c9 f7       	brne	.-14     	; 0x56ae <__ultoa_invert+0xa2>
    56bc:	62 0f       	add	r22, r18
    56be:	73 1f       	adc	r23, r19
    56c0:	84 1f       	adc	r24, r20
    56c2:	95 1f       	adc	r25, r21
    56c4:	a0 1d       	adc	r26, r0
    56c6:	08 95       	ret
    56c8:	11 f4       	brne	.+4      	; 0x56ce <__ultoa_invert+0xc2>
    56ca:	0e f4       	brtc	.+2      	; 0x56ce <__ultoa_invert+0xc2>
    56cc:	50 c0       	rjmp	.+160    	; 0x576e <__fp_nan>
    56ce:	41 c0       	rjmp	.+130    	; 0x5752 <__fp_mpack>

000056d0 <sqrt>:
    56d0:	60 d0       	rcall	.+192    	; 0x5792 <__fp_splitA>
    56d2:	d0 f3       	brcs	.-12     	; 0x56c8 <__ultoa_invert+0xbc>
    56d4:	99 23       	and	r25, r25
    56d6:	d9 f3       	breq	.-10     	; 0x56ce <__ultoa_invert+0xc2>
    56d8:	ce f3       	brts	.-14     	; 0x56cc <__ultoa_invert+0xc0>
    56da:	9f 57       	subi	r25, 0x7F	; 127
    56dc:	55 0b       	sbc	r21, r21
    56de:	87 ff       	sbrs	r24, 7
    56e0:	49 d0       	rcall	.+146    	; 0x5774 <__fp_norm2>
    56e2:	00 24       	eor	r0, r0
    56e4:	a0 e6       	ldi	r26, 0x60	; 96
    56e6:	40 ea       	ldi	r20, 0xA0	; 160
    56e8:	90 01       	movw	r18, r0
    56ea:	80 58       	subi	r24, 0x80	; 128
    56ec:	56 95       	lsr	r21
    56ee:	97 95       	ror	r25
    56f0:	28 f4       	brcc	.+10     	; 0x56fc <sqrt+0x2c>
    56f2:	80 5c       	subi	r24, 0xC0	; 192
    56f4:	66 0f       	add	r22, r22
    56f6:	77 1f       	adc	r23, r23
    56f8:	88 1f       	adc	r24, r24
    56fa:	20 f0       	brcs	.+8      	; 0x5704 <sqrt+0x34>
    56fc:	26 17       	cp	r18, r22
    56fe:	37 07       	cpc	r19, r23
    5700:	48 07       	cpc	r20, r24
    5702:	30 f4       	brcc	.+12     	; 0x5710 <sqrt+0x40>
    5704:	62 1b       	sub	r22, r18
    5706:	73 0b       	sbc	r23, r19
    5708:	84 0b       	sbc	r24, r20
    570a:	20 29       	or	r18, r0
    570c:	31 29       	or	r19, r1
    570e:	4a 2b       	or	r20, r26
    5710:	a6 95       	lsr	r26
    5712:	17 94       	ror	r1
    5714:	07 94       	ror	r0
    5716:	20 25       	eor	r18, r0
    5718:	31 25       	eor	r19, r1
    571a:	4a 27       	eor	r20, r26
    571c:	58 f7       	brcc	.-42     	; 0x56f4 <sqrt+0x24>
    571e:	66 0f       	add	r22, r22
    5720:	77 1f       	adc	r23, r23
    5722:	88 1f       	adc	r24, r24
    5724:	20 f0       	brcs	.+8      	; 0x572e <sqrt+0x5e>
    5726:	26 17       	cp	r18, r22
    5728:	37 07       	cpc	r19, r23
    572a:	48 07       	cpc	r20, r24
    572c:	30 f4       	brcc	.+12     	; 0x573a <sqrt+0x6a>
    572e:	62 0b       	sbc	r22, r18
    5730:	73 0b       	sbc	r23, r19
    5732:	84 0b       	sbc	r24, r20
    5734:	20 0d       	add	r18, r0
    5736:	31 1d       	adc	r19, r1
    5738:	41 1d       	adc	r20, r1
    573a:	a0 95       	com	r26
    573c:	81 f7       	brne	.-32     	; 0x571e <sqrt+0x4e>
    573e:	b9 01       	movw	r22, r18
    5740:	84 2f       	mov	r24, r20
    5742:	91 58       	subi	r25, 0x81	; 129
    5744:	88 0f       	add	r24, r24
    5746:	96 95       	lsr	r25
    5748:	87 95       	ror	r24
    574a:	08 95       	ret

0000574c <__ctype_isfalse>:
    574c:	99 27       	eor	r25, r25
    574e:	88 27       	eor	r24, r24

00005750 <__ctype_istrue>:
    5750:	08 95       	ret

00005752 <__fp_mpack>:
    5752:	9f 3f       	cpi	r25, 0xFF	; 255
    5754:	31 f0       	breq	.+12     	; 0x5762 <__fp_mpack_finite+0xc>

00005756 <__fp_mpack_finite>:
    5756:	91 50       	subi	r25, 0x01	; 1
    5758:	20 f4       	brcc	.+8      	; 0x5762 <__fp_mpack_finite+0xc>
    575a:	87 95       	ror	r24
    575c:	77 95       	ror	r23
    575e:	67 95       	ror	r22
    5760:	b7 95       	ror	r27
    5762:	88 0f       	add	r24, r24
    5764:	91 1d       	adc	r25, r1
    5766:	96 95       	lsr	r25
    5768:	87 95       	ror	r24
    576a:	97 f9       	bld	r25, 7
    576c:	08 95       	ret

0000576e <__fp_nan>:
    576e:	9f ef       	ldi	r25, 0xFF	; 255
    5770:	80 ec       	ldi	r24, 0xC0	; 192
    5772:	08 95       	ret

00005774 <__fp_norm2>:
    5774:	91 50       	subi	r25, 0x01	; 1
    5776:	50 40       	sbci	r21, 0x00	; 0
    5778:	66 0f       	add	r22, r22
    577a:	77 1f       	adc	r23, r23
    577c:	88 1f       	adc	r24, r24
    577e:	d2 f7       	brpl	.-12     	; 0x5774 <__fp_norm2>
    5780:	08 95       	ret

00005782 <__fp_split3>:
    5782:	57 fd       	sbrc	r21, 7
    5784:	90 58       	subi	r25, 0x80	; 128
    5786:	44 0f       	add	r20, r20
    5788:	55 1f       	adc	r21, r21
    578a:	59 f0       	breq	.+22     	; 0x57a2 <__fp_splitA+0x10>
    578c:	5f 3f       	cpi	r21, 0xFF	; 255
    578e:	71 f0       	breq	.+28     	; 0x57ac <__fp_splitA+0x1a>
    5790:	47 95       	ror	r20

00005792 <__fp_splitA>:
    5792:	88 0f       	add	r24, r24
    5794:	97 fb       	bst	r25, 7
    5796:	99 1f       	adc	r25, r25
    5798:	61 f0       	breq	.+24     	; 0x57b2 <__fp_splitA+0x20>
    579a:	9f 3f       	cpi	r25, 0xFF	; 255
    579c:	79 f0       	breq	.+30     	; 0x57bc <__fp_splitA+0x2a>
    579e:	87 95       	ror	r24
    57a0:	08 95       	ret
    57a2:	12 16       	cp	r1, r18
    57a4:	13 06       	cpc	r1, r19
    57a6:	14 06       	cpc	r1, r20
    57a8:	55 1f       	adc	r21, r21
    57aa:	f2 cf       	rjmp	.-28     	; 0x5790 <__fp_split3+0xe>
    57ac:	46 95       	lsr	r20
    57ae:	f1 df       	rcall	.-30     	; 0x5792 <__fp_splitA>
    57b0:	08 c0       	rjmp	.+16     	; 0x57c2 <__fp_splitA+0x30>
    57b2:	16 16       	cp	r1, r22
    57b4:	17 06       	cpc	r1, r23
    57b6:	18 06       	cpc	r1, r24
    57b8:	99 1f       	adc	r25, r25
    57ba:	f1 cf       	rjmp	.-30     	; 0x579e <__fp_splitA+0xc>
    57bc:	86 95       	lsr	r24
    57be:	71 05       	cpc	r23, r1
    57c0:	61 05       	cpc	r22, r1
    57c2:	08 94       	sec
    57c4:	08 95       	ret

000057c6 <__mulsi3>:
    57c6:	62 9f       	mul	r22, r18
    57c8:	d0 01       	movw	r26, r0
    57ca:	73 9f       	mul	r23, r19
    57cc:	f0 01       	movw	r30, r0
    57ce:	82 9f       	mul	r24, r18
    57d0:	e0 0d       	add	r30, r0
    57d2:	f1 1d       	adc	r31, r1
    57d4:	64 9f       	mul	r22, r20
    57d6:	e0 0d       	add	r30, r0
    57d8:	f1 1d       	adc	r31, r1
    57da:	92 9f       	mul	r25, r18
    57dc:	f0 0d       	add	r31, r0
    57de:	83 9f       	mul	r24, r19
    57e0:	f0 0d       	add	r31, r0
    57e2:	74 9f       	mul	r23, r20
    57e4:	f0 0d       	add	r31, r0
    57e6:	65 9f       	mul	r22, r21
    57e8:	f0 0d       	add	r31, r0
    57ea:	99 27       	eor	r25, r25
    57ec:	72 9f       	mul	r23, r18
    57ee:	b0 0d       	add	r27, r0
    57f0:	e1 1d       	adc	r30, r1
    57f2:	f9 1f       	adc	r31, r25
    57f4:	63 9f       	mul	r22, r19
    57f6:	b0 0d       	add	r27, r0
    57f8:	e1 1d       	adc	r30, r1
    57fa:	f9 1f       	adc	r31, r25
    57fc:	bd 01       	movw	r22, r26
    57fe:	cf 01       	movw	r24, r30
    5800:	11 24       	eor	r1, r1
    5802:	08 95       	ret

00005804 <_exit>:
    5804:	f8 94       	cli

00005806 <__stop_program>:
    5806:	ff cf       	rjmp	.-2      	; 0x5806 <__stop_program>
